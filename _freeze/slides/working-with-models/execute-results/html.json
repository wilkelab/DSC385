{
  "hash": "cbfdd2f1e249dc4790c3726da1ea6eba",
  "result": {
    "engine": "knitr",
    "markdown": "---\ntitle: \"Working with models\"\nauthor: \"Claus O. Wilke\"\ndate: last-modified\nformat: \n  revealjs:\n    theme:\n      - default\n      - Wilke-theme.scss\n    auto-stretch: false\n    chalkboard: true\nexecute:\n  fig-format: svg\n  fig-asp: 0.618\n  fig-width: 5.5\n---\n\n\n\n\n\n\n## How do we obtain information about model fits?\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\npenguins |>\n  ggplot(aes(body_mass_g, flipper_length_mm)) +\n  geom_point() +\n  geom_smooth(method = \"lm\", se = FALSE) +\n  facet_wrap(~species)\n```\n\n::: {.cell-output-display}\n![&nbsp;](working-with-models_files/figure-revealjs/penguins-fits-1.svg){width=80%}\n:::\n:::\n\n\n\n\n## We can fit a linear model with `lm()`\n\n::: {.fragment .small-font}\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\npenguins_adelie <- filter(penguins, species == \"Adelie\")\n```\n:::\n\n\n\n:::\n\n## We can fit a linear model with `lm()`\n\n::: {.small-font}\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\npenguins_adelie <- filter(penguins, species == \"Adelie\")\n\nlm_out <- lm(flipper_length_mm ~ body_mass_g, data = penguins_adelie)\n```\n:::\n\n\n\n:::\n\n\n## We can fit a linear model with `lm()`\n\n::: {.small-font}\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\npenguins_adelie <- filter(penguins, species == \"Adelie\")\n\nlm_out <- lm(flipper_length_mm ~ body_mass_g, data = penguins_adelie)\nsummary(lm_out)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n\nCall:\nlm(formula = flipper_length_mm ~ body_mass_g, data = penguins_adelie)\n\nResiduals:\n     Min       1Q   Median       3Q      Max \n-14.2769  -3.6192   0.0569   3.4696  18.0477 \n\nCoefficients:\n             Estimate Std. Error t value Pr(>|t|)    \n(Intercept) 1.652e+02  3.849e+00  42.929  < 2e-16 ***\nbody_mass_g 6.677e-03  1.032e-03   6.468 1.34e-09 ***\n---\nSignif. codes:  0 '***' 0.001 '**' 0.01 '*' 0.05 '.' 0.1 ' ' 1\n\nResidual standard error: 5.798 on 149 degrees of freedom\n  (1 observation deleted due to missingness)\nMultiple R-squared:  0.2192,\tAdjusted R-squared:  0.214 \nF-statistic: 41.83 on 1 and 149 DF,  p-value: 1.343e-09\n```\n\n\n:::\n:::\n\n\n\n:::\n\n\n## We use `map()` to fit models to groups of data\n\n::: {.fragment .small-font}\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\npenguins |>\n  nest(data = -species) # nest all data except species column\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n# A tibble: 3 × 2\n  species   data              \n  <fct>     <list>            \n1 Adelie    <tibble [152 × 7]>\n2 Gentoo    <tibble [124 × 7]>\n3 Chinstrap <tibble [68 × 7]> \n```\n\n\n:::\n:::\n\n\n\n:::\n\n## We use `map()` to fit models to groups of data\n\n::: {.small-font}\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\npenguins |>\n  nest(data = -species) |>\n  mutate(\n    # apply linear model to each nested data frame\n    fit = map(data, ~lm(flipper_length_mm ~ body_mass_g, data = .x))\n  )\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n# A tibble: 3 × 3\n  species   data               fit   \n  <fct>     <list>             <list>\n1 Adelie    <tibble [152 × 7]> <lm>  \n2 Gentoo    <tibble [124 × 7]> <lm>  \n3 Chinstrap <tibble [68 × 7]>  <lm>  \n```\n\n\n:::\n:::\n\n\n\n:::\n\n## We use `map()` to fit models to groups of data\n\n::: {.small-font}\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nlm_data <- penguins |>\n  nest(data = -species) |>\n  mutate(\n    # apply linear model to each nested data frame\n    fit = map(data, ~lm(flipper_length_mm ~ body_mass_g, data = .x))\n  )\n\nlm_data$fit[[1]]  # first model fit, for Adelie species\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n\nCall:\nlm(formula = flipper_length_mm ~ body_mass_g, data = .x)\n\nCoefficients:\n(Intercept)  body_mass_g  \n  1.652e+02    6.677e-03  \n```\n\n\n:::\n:::\n\n\n\n:::\n\n## Manually extracting summary data is cumbersome\n\n::: {.fragment .small-font}\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nsummary(lm_data$fit[[1]]) # summarize the first model, which is for Adelie\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n\nCall:\nlm(formula = flipper_length_mm ~ body_mass_g, data = .x)\n\nResiduals:\n     Min       1Q   Median       3Q      Max \n-14.2769  -3.6192   0.0569   3.4696  18.0477 \n\nCoefficients:\n             Estimate Std. Error t value Pr(>|t|)    \n(Intercept) 1.652e+02  3.849e+00  42.929  < 2e-16 ***\nbody_mass_g 6.677e-03  1.032e-03   6.468 1.34e-09 ***\n---\nSignif. codes:  0 '***' 0.001 '**' 0.01 '*' 0.05 '.' 0.1 ' ' 1\n\nResidual standard error: 5.798 on 149 degrees of freedom\n  (1 observation deleted due to missingness)\nMultiple R-squared:  0.2192,\tAdjusted R-squared:  0.214 \nF-statistic: 41.83 on 1 and 149 DF,  p-value: 1.343e-09\n```\n\n\n:::\n:::\n\n\n\n:::\n\n## Manually extracting summary data is cumbersome\n\n::: {.small-font}\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nsummary(lm_data$fit[[2]]) # second model, Chinstrap\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n\nCall:\nlm(formula = flipper_length_mm ~ body_mass_g, data = .x)\n\nResiduals:\n     Min       1Q   Median       3Q      Max \n-12.0194  -2.7401   0.1781   2.9859   8.9806 \n\nCoefficients:\n             Estimate Std. Error t value Pr(>|t|)    \n(Intercept) 1.713e+02  4.244e+00   40.36   <2e-16 ***\nbody_mass_g 9.039e-03  8.321e-04   10.86   <2e-16 ***\n---\nSignif. codes:  0 '***' 0.001 '**' 0.01 '*' 0.05 '.' 0.1 ' ' 1\n\nResidual standard error: 4.633 on 121 degrees of freedom\n  (1 observation deleted due to missingness)\nMultiple R-squared:  0.4937,\tAdjusted R-squared:  0.4896 \nF-statistic:   118 on 1 and 121 DF,  p-value: < 2.2e-16\n```\n\n\n:::\n:::\n\n\n\n:::\n\n## Manually extracting summary data is cumbersome\n\n::: {.small-font}\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nsummary(lm_data$fit[[3]]) # third model, Gentoo\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n\nCall:\nlm(formula = flipper_length_mm ~ body_mass_g, data = .x)\n\nResiduals:\n     Min       1Q   Median       3Q      Max \n-14.4296  -3.3315   0.4097   2.8889  11.5941 \n\nCoefficients:\n             Estimate Std. Error t value Pr(>|t|)    \n(Intercept) 1.514e+02  6.575e+00  23.024  < 2e-16 ***\nbody_mass_g 1.191e-02  1.752e-03   6.795 3.75e-09 ***\n---\nSignif. codes:  0 '***' 0.001 '**' 0.01 '*' 0.05 '.' 0.1 ' ' 1\n\nResidual standard error: 5.512 on 66 degrees of freedom\nMultiple R-squared:  0.4116,\tAdjusted R-squared:  0.4027 \nF-statistic: 46.17 on 1 and 66 DF,  p-value: 3.748e-09\n```\n\n\n:::\n:::\n\n\n\n:::\n\n# How do we get this information into a data table?\n\n\n## The **broom** package: `glance()` and `tidy()`\n\n::: {.small-font}\n- `glance()` provides model-wide summary estimates in tidy format\n:::\n\n::: {.fragment .small-font}\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nlibrary(broom)\n\nglance(lm_data$fit[[1]])\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n# A tibble: 1 × 12\n  r.squared adj.r.squared sigma statistic       p.value    df logLik   AIC   BIC\n      <dbl>         <dbl> <dbl>     <dbl>         <dbl> <dbl>  <dbl> <dbl> <dbl>\n1     0.219         0.214  5.80      41.8 0.00000000134     1  -479.  963.  972.\n# ℹ 3 more variables: deviance <dbl>, df.residual <int>, nobs <int>\n```\n\n\n:::\n:::\n\n\n\n:::\n\n::: {.fragment .small-font}\n- `tidy()` provides information about regression coefficients in tidy format\n:::\n\n::: {.fragment .small-font}\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nlibrary(broom)\n\ntidy(lm_data$fit[[1]])\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n# A tibble: 2 × 5\n  term         estimate std.error statistic  p.value\n  <chr>           <dbl>     <dbl>     <dbl>    <dbl>\n1 (Intercept) 165.        3.85        42.9  8.68e-86\n2 body_mass_g   0.00668   0.00103      6.47 1.34e- 9\n```\n\n\n:::\n:::\n\n\n\n:::\n\n## Apply these functions to multiple models with `map()`\n\n::: {.fragment .small-font}\nReminder: This is the nested table with fitted models\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nlm_data\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n# A tibble: 3 × 3\n  species   data               fit   \n  <fct>     <list>             <list>\n1 Adelie    <tibble [152 × 7]> <lm>  \n2 Gentoo    <tibble [124 × 7]> <lm>  \n3 Chinstrap <tibble [68 × 7]>  <lm>  \n```\n\n\n:::\n:::\n\n\n\n:::\n\n## Apply these functions to multiple models with `map()`\n\n::: {.small-font}\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nlm_data |>\n  mutate(\n    glance_out = map(fit, glance) # apply `glance()` to each fitted model\n  )\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n# A tibble: 3 × 4\n  species   data               fit    glance_out       \n  <fct>     <list>             <list> <list>           \n1 Adelie    <tibble [152 × 7]> <lm>   <tibble [1 × 12]>\n2 Gentoo    <tibble [124 × 7]> <lm>   <tibble [1 × 12]>\n3 Chinstrap <tibble [68 × 7]>  <lm>   <tibble [1 × 12]>\n```\n\n\n:::\n:::\n\n\n\n:::\n\n## Apply these functions to multiple models with `map()`\n\n::: {.small-font}\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nlm_data |>\n  mutate(\n    glance_out = map(fit, glance) # apply `glance()` to each fitted model\n  ) |>\n  select(species, glance_out)     # only keep species name and glance output\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n# A tibble: 3 × 2\n  species   glance_out       \n  <fct>     <list>           \n1 Adelie    <tibble [1 × 12]>\n2 Gentoo    <tibble [1 × 12]>\n3 Chinstrap <tibble [1 × 12]>\n```\n\n\n:::\n:::\n\n\n\n:::\n\n## Apply these functions to multiple models with `map()`\n\n::: {.small-font}\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nlm_data |>\n  mutate(\n    glance_out = map(fit, glance) # apply `glance()` to each fitted model\n  ) |>\n  select(species, glance_out) |>  # only keep species name and glance output\n  unnest(cols = glance_out)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n# A tibble: 3 × 13\n  species   r.squared adj.r.squared sigma statistic  p.value    df logLik   AIC\n  <fct>         <dbl>         <dbl> <dbl>     <dbl>    <dbl> <dbl>  <dbl> <dbl>\n1 Adelie        0.219         0.214  5.80      41.8 1.34e- 9     1  -479.  963.\n2 Gentoo        0.494         0.490  4.63     118.  1.33e-19     1  -362.  730.\n3 Chinstrap     0.412         0.403  5.51      46.2 3.75e- 9     1  -212.  429.\n# ℹ 4 more variables: BIC <dbl>, deviance <dbl>, df.residual <int>, nobs <int>\n```\n\n\n:::\n:::\n\n\n\n:::\n\n## Putting everything into one pipeline\n\n::: {.small-font}\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nlm_summary <- penguins |>\n  nest(data = -species) |>\n  mutate(\n    fit = map(data, ~lm(flipper_length_mm ~ body_mass_g, data = .x)),\n    glance_out = map(fit, glance)\n  ) |>\n  select(species, glance_out) |>\n  unnest(cols = glance_out)\n\nlm_summary\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n# A tibble: 3 × 13\n  species   r.squared adj.r.squared sigma statistic  p.value    df logLik   AIC\n  <fct>         <dbl>         <dbl> <dbl>     <dbl>    <dbl> <dbl>  <dbl> <dbl>\n1 Adelie        0.219         0.214  5.80      41.8 1.34e- 9     1  -479.  963.\n2 Gentoo        0.494         0.490  4.63     118.  1.33e-19     1  -362.  730.\n3 Chinstrap     0.412         0.403  5.51      46.2 3.75e- 9     1  -212.  429.\n# ℹ 4 more variables: BIC <dbl>, deviance <dbl>, df.residual <int>, nobs <int>\n```\n\n\n:::\n:::\n\n\n\n:::\n\n<!-- Segment ends here -->\n\n#\n\n# Annotate plots with data extracted from models\n\n## Turn model summary into label data\n\n::: {.small-font}\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# Reminder: summary of the model fits\nlm_summary\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n# A tibble: 3 × 13\n  species   r.squared adj.r.squared sigma statistic  p.value    df logLik   AIC\n  <fct>         <dbl>         <dbl> <dbl>     <dbl>    <dbl> <dbl>  <dbl> <dbl>\n1 Adelie        0.219         0.214  5.80      41.8 1.34e- 9     1  -479.  963.\n2 Gentoo        0.494         0.490  4.63     118.  1.33e-19     1  -362.  730.\n3 Chinstrap     0.412         0.403  5.51      46.2 3.75e- 9     1  -212.  429.\n# ℹ 4 more variables: BIC <dbl>, deviance <dbl>, df.residual <int>, nobs <int>\n```\n\n\n:::\n:::\n\n\n\n:::\n\n## Turn model summary into label data\n\n::: {.small-font}\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# Turn R^2 and p value into labels\nlabel_data <- lm_summary |>\n  mutate(\n    rsqr = signif(r.squared, 2),  # round to 2 significant digits\n    pval = signif(p.value, 2),\n    label = glue(\"R^2 = {rsqr}, P = {pval}\"),\n  ) |>\n  select(species, label)\n\nlabel_data\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n# A tibble: 3 × 2\n  species   label                  \n  <fct>     <glue>                 \n1 Adelie    R^2 = 0.22, P = 1.3e-09\n2 Gentoo    R^2 = 0.49, P = 1.3e-19\n3 Chinstrap R^2 = 0.41, P = 3.7e-09\n```\n\n\n:::\n:::\n\n\n\n:::\n\n\n## Turn model summary into label data\n\n::: {.small-font}\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# Add label position in the plot\nlabel_data <- lm_summary |>\n  mutate(\n    rsqr = signif(r.squared, 2),  # round to 2 significant digits\n    pval = signif(p.value, 2),\n    label = glue(\"R^2 = {rsqr}, P = {pval}\"),\n    body_mass_g = 6400, flipper_length_mm = 175 # label position in plot\n  ) |>\n  select(species, label, body_mass_g, flipper_length_mm)\n\nlabel_data\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n# A tibble: 3 × 4\n  species   label                   body_mass_g flipper_length_mm\n  <fct>     <glue>                        <dbl>             <dbl>\n1 Adelie    R^2 = 0.22, P = 1.3e-09        6400               175\n2 Gentoo    R^2 = 0.49, P = 1.3e-19        6400               175\n3 Chinstrap R^2 = 0.41, P = 3.7e-09        6400               175\n```\n\n\n:::\n:::\n\n\n\n:::\n\n## And plot\n\n::: {.small-font}\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nggplot(penguins, aes(body_mass_g, flipper_length_mm)) + geom_point() +\n  geom_text(\n    data = label_data, aes(label = label),\n    size = 10, size.unit = \"pt\", hjust = 1  # 10pt, right-justified\n  ) +\n  geom_smooth(method = \"lm\", se = FALSE) + facet_wrap(~species)\n```\n\n::: {.cell-output-display}\n![&nbsp;](working-with-models_files/figure-revealjs/penguins-fit-w-labels-1.svg){width=80%}\n:::\n:::\n\n\n\n:::\n\n\n<!-- Segment ends here -->\n\n#\n\n## Further reading\n\n- Data Visualization—A Practical Introduction: [Chapter 6.5: Tidy model objects with broom](https://socviz.co/modeling.html#tidy-model-objects-with-broom)\n- **broom** reference documentation: https://broom.tidymodels.org/\n- Article on using **broom** with **dplyr**: [**broom** and **dplyr**](https://broom.tidymodels.org/articles/broom_and_dplyr.html)\n",
    "supporting": [
      "working-with-models_files"
    ],
    "filters": [
      "rmarkdown/pagebreak.lua"
    ],
    "includes": {
      "include-after-body": [
        "\n<script>\n  // htmlwidgets need to know to resize themselves when slides are shown/hidden.\n  // Fire the \"slideenter\" event (handled by htmlwidgets.js) when the current\n  // slide changes (different for each slide format).\n  (function () {\n    // dispatch for htmlwidgets\n    function fireSlideEnter() {\n      const event = window.document.createEvent(\"Event\");\n      event.initEvent(\"slideenter\", true, true);\n      window.document.dispatchEvent(event);\n    }\n\n    function fireSlideChanged(previousSlide, currentSlide) {\n      fireSlideEnter();\n\n      // dispatch for shiny\n      if (window.jQuery) {\n        if (previousSlide) {\n          window.jQuery(previousSlide).trigger(\"hidden\");\n        }\n        if (currentSlide) {\n          window.jQuery(currentSlide).trigger(\"shown\");\n        }\n      }\n    }\n\n    // hookup for slidy\n    if (window.w3c_slidy) {\n      window.w3c_slidy.add_observer(function (slide_num) {\n        // slide_num starts at position 1\n        fireSlideChanged(null, w3c_slidy.slides[slide_num - 1]);\n      });\n    }\n\n  })();\n</script>\n\n"
      ]
    },
    "engineDependencies": {},
    "preserve": {},
    "postProcess": true
  }
}