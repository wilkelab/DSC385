{
  "hash": "a53ce7e173378568f835c043c3067832",
  "result": {
    "engine": "knitr",
    "markdown": "---\ntitle: \"Getting things into the right order\"\nauthor: \"Claus O. Wilke\"\ndate: last-modified\nformat: \n  revealjs:\n    theme:\n      - default\n      - Wilke-theme.scss\n    auto-stretch: false\n    chalkboard: true\nexecute:\n  fig-format: svg\n  fig-asp: 0.618\n  fig-width: 5.5\n---\n\n\n\n\n\n\n## Remember from \"Visualizing amounts\"\n\n::: {.small-font}\nWe can use `fct_relevel()` to manually order the bars in a bar plot\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nggplot(penguins) +\n  aes(y = fct_relevel(species, \"Chinstrap\", \"Gentoo\", \"Adelie\")) +\n  geom_bar() + ylab(NULL)\n```\n\n::: {.cell-output-display}\n![&nbsp;](getting-things-in-order_files/figure-revealjs/penguins-ordered-1.svg){width=65%}\n:::\n:::\n\n\n\n:::\n\n## Somewhat cleaner: mutate first, then plot\n\n::: {.small-font}\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\npenguins |>\n  mutate(species = fct_relevel(species, \"Chinstrap\", \"Gentoo\", \"Adelie\")) |>\n  ggplot(aes(y = species)) +\n  geom_bar()\n```\n\n::: {.cell-output-display}\n![&nbsp;](getting-things-in-order_files/figure-revealjs/penguins-ordered-pipe-1.svg){width=65%}\n:::\n:::\n\n\n\n:::\n\n## We order things in ggplot with factors\n\n::: {.small-font}\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\npenguins |>\n  mutate(species = fct_relevel(species, \"Chinstrap\", \"Gentoo\", \"Adelie\")) |>\n  slice(1:30) |>    # get first 30 rows\n  pull(species)     # pull out just the `species` column\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n [1] Adelie Adelie Adelie Adelie Adelie Adelie Adelie Adelie Adelie Adelie\n[11] Adelie Adelie Adelie Adelie Adelie Adelie Adelie Adelie Adelie Adelie\n[21] Adelie Adelie Adelie Adelie Adelie Adelie Adelie Adelie Adelie Adelie\nLevels: Chinstrap Gentoo Adelie\n```\n\n\n:::\n:::\n\n\n\n:::\n\n::: {.small-font .incremental .move-down-1em}\n- The column `species` is a factor\n- A factor is a categorical variable with defined categories called levels\n- For factors, ggplot generally places visual elements in the order defined by the levels\n:::\n\n## We order things in ggplot with factors\n\n::: {.small-font}\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\npenguins |>\n  mutate(species = fct_relevel(species, \"Chinstrap\", \"Gentoo\", \"Adelie\")) |>\n  slice(1:30) |>    # get first 30 rows\n  pull(species)     # pull out just the `species` column\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n [1] Adelie Adelie Adelie Adelie Adelie Adelie Adelie Adelie Adelie Adelie\n[11] Adelie Adelie Adelie Adelie Adelie Adelie Adelie Adelie Adelie Adelie\n[21] Adelie Adelie Adelie Adelie Adelie Adelie Adelie Adelie Adelie Adelie\nLevels: Chinstrap Gentoo Adelie\n```\n\n\n:::\n:::\n\n\n\n:::\n\n::: {.small-font .move-down-1em}\nThe order of factor levels is independent of the order of values in the table:\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\npenguins |>\n  mutate(species = fct_relevel(species, \"Gentoo\", \"Adelie\", \"Chinstrap\")) |>\n  slice(1:30) |> pull(species)  \n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n [1] Adelie Adelie Adelie Adelie Adelie Adelie Adelie Adelie Adelie Adelie\n[11] Adelie Adelie Adelie Adelie Adelie Adelie Adelie Adelie Adelie Adelie\n[21] Adelie Adelie Adelie Adelie Adelie Adelie Adelie Adelie Adelie Adelie\nLevels: Gentoo Adelie Chinstrap\n```\n\n\n:::\n:::\n\n\n\n:::\n\n\n## Manual ordering of factor levels: `fct_relevel()`\n\n::: {.small-font}\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\npenguins |>\n  mutate(species = fct_relevel(species)) |>\n  slice(1:30) |> pull(species)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n [1] Adelie Adelie Adelie Adelie Adelie Adelie Adelie Adelie Adelie Adelie\n[11] Adelie Adelie Adelie Adelie Adelie Adelie Adelie Adelie Adelie Adelie\n[21] Adelie Adelie Adelie Adelie Adelie Adelie Adelie Adelie Adelie Adelie\nLevels: Adelie Chinstrap Gentoo\n```\n\n\n:::\n:::\n\n\n\n\nDefault: alphabetic order\n:::\n\n## Manual ordering of factor levels: `fct_relevel()`\n\n::: {.small-font}\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\npenguins |>\n  mutate(species = fct_relevel(species, \"Gentoo\")) |>\n  slice(1:30) |> pull(species)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n [1] Adelie Adelie Adelie Adelie Adelie Adelie Adelie Adelie Adelie Adelie\n[11] Adelie Adelie Adelie Adelie Adelie Adelie Adelie Adelie Adelie Adelie\n[21] Adelie Adelie Adelie Adelie Adelie Adelie Adelie Adelie Adelie Adelie\nLevels: Gentoo Adelie Chinstrap\n```\n\n\n:::\n:::\n\n\n\n\nMove `\"Gentoo\"` in front, rest alphabetic\n:::\n\n## Manual ordering of factor levels: `fct_relevel()`\n\n::: {.small-font}\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\npenguins |>\n  mutate(species = fct_relevel(species, \"Chinstrap\", \"Gentoo\")) |>\n  slice(1:30) |> pull(species)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n [1] Adelie Adelie Adelie Adelie Adelie Adelie Adelie Adelie Adelie Adelie\n[11] Adelie Adelie Adelie Adelie Adelie Adelie Adelie Adelie Adelie Adelie\n[21] Adelie Adelie Adelie Adelie Adelie Adelie Adelie Adelie Adelie Adelie\nLevels: Chinstrap Gentoo Adelie\n```\n\n\n:::\n:::\n\n\n\n\nMove `\"Chinstrap\"` in front, then `\"Gentoo\"`, rest alphabetic\n:::\n\n## Manual ordering of factor levels: `fct_relevel()`\n\n::: {.small-font}\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\npenguins |>\n  mutate(species = fct_relevel(species, \"Chinstrap\", \"Adelie\", \"Gentoo\")) |>\n  slice(1:30) |> pull(species)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n [1] Adelie Adelie Adelie Adelie Adelie Adelie Adelie Adelie Adelie Adelie\n[11] Adelie Adelie Adelie Adelie Adelie Adelie Adelie Adelie Adelie Adelie\n[21] Adelie Adelie Adelie Adelie Adelie Adelie Adelie Adelie Adelie Adelie\nLevels: Chinstrap Adelie Gentoo\n```\n\n\n:::\n:::\n\n\n\n\nUse order `\"Chinstrap\"`, `\"Adelie\"`, `\"Gentoo\"`\n:::\n\n## In ggplot, the order of the y axis is from bottom to top\n\n::: {.small-font}\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\npenguins |>\n  mutate(species = fct_relevel(species, \"Chinstrap\", \"Gentoo\", \"Adelie\")) |>\n  ggplot(aes(y = species)) +\n  geom_bar()\n```\n\n::: {.cell-output-display}\n![&nbsp;](getting-things-in-order_files/figure-revealjs/penguins-ordered-pipe2-1.svg){width=65%}\n:::\n:::\n\n\n\n:::\n\n## Reorder based on frequency: `fct_infreq()`\n\n::: {.small-font}\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\npenguins |>\n  mutate(species = fct_infreq(species)) |>\n  slice(1:30) |> pull(species)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n [1] Adelie Adelie Adelie Adelie Adelie Adelie Adelie Adelie Adelie Adelie\n[11] Adelie Adelie Adelie Adelie Adelie Adelie Adelie Adelie Adelie Adelie\n[21] Adelie Adelie Adelie Adelie Adelie Adelie Adelie Adelie Adelie Adelie\nLevels: Adelie Gentoo Chinstrap\n```\n\n\n:::\n:::\n\n\n\n:::\n\n::: {.small-font .incremental}\n- Use the order defined by the number of penguins of different species\n- The order is descending, from most frequent to least frequent\n:::\n\n## Reorder based on frequency: `fct_infreq()`\n\n::: {.small-font}\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\npenguins |>\n  mutate(species = fct_infreq(species)) |>\n  ggplot(aes(y = species)) + \n  geom_bar()\n```\n\n::: {.cell-output-display}\n![&nbsp;](getting-things-in-order_files/figure-revealjs/penguins-infreq-1.svg){width=65%}\n:::\n:::\n\n\n\n:::\n\n## Reverse order: `fct_rev()`\n\n::: {.small-font}\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\npenguins |>\n  mutate(species = fct_rev(fct_infreq(species))) |>\n  ggplot(aes(y = species)) + \n  geom_bar()\n```\n\n::: {.cell-output-display}\n![&nbsp;](getting-things-in-order_files/figure-revealjs/penguins-infreq-rev-1.svg){width=65%}\n:::\n:::\n\n\n\n:::\n\n## Reorder based on numeric values: `fct_reorder()`\n\n::: {.small-font}\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\npenguins |>\n  count(species)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n# A tibble: 3 × 2\n  species       n\n  <fct>     <int>\n1 Adelie      152\n2 Chinstrap    68\n3 Gentoo      124\n```\n\n\n:::\n:::\n\n\n\n:::\n\n::: {.fragment .small-font .move-down-1em}\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\npenguins |>\n  count(species) |>\n  mutate(species = fct_reorder(species, n)) |>\n  pull(species)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n[1] Adelie    Chinstrap Gentoo   \nLevels: Chinstrap Gentoo Adelie\n```\n\n\n:::\n:::\n\n\n\n:::\n\n::: {.small-font .fragment}\nThe order is ascending, from smallest to largest value\n:::\n\n## Reorder based on numeric values: `fct_reorder()`\n\n::: {.small-font}\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\npenguins |>\n  count(species) |>\n  mutate(species = fct_reorder(species, n)) |>\n  ggplot(aes(n, species)) + geom_col()\n```\n\n::: {.cell-output-display}\n![&nbsp;](getting-things-in-order_files/figure-revealjs/penguins-reorder-1.svg){width=65%}\n:::\n:::\n\n\n\n:::\n\n## Compare to see the difference\n\n:::: {.columns}\n\n::: {.column .tiny-font width=\"50%\"}\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\npenguins |>\n  count(species) |> # summarize data\n  mutate(species = fct_reorder(species, n))\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n# A tibble: 3 × 2\n  species       n\n  <fct>     <int>\n1 Adelie      152\n2 Chinstrap    68\n3 Gentoo      124\n```\n\n\n:::\n:::\n\n\n\n:::\n\n::: {.fragment .column .tiny-font width=\"50%\"}\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\npenguins |>\n  # modify the original dataset, no summary\n  mutate(species = fct_infreq(species))\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n# A tibble: 344 × 8\n   species island    bill_length_mm bill_depth_mm flipper_length_mm body_mass_g\n   <fct>   <fct>              <dbl>         <dbl>             <int>       <int>\n 1 Adelie  Torgersen           39.1          18.7               181        3750\n 2 Adelie  Torgersen           39.5          17.4               186        3800\n 3 Adelie  Torgersen           40.3          18                 195        3250\n 4 Adelie  Torgersen           NA            NA                  NA          NA\n 5 Adelie  Torgersen           36.7          19.3               193        3450\n 6 Adelie  Torgersen           39.3          20.6               190        3650\n 7 Adelie  Torgersen           38.9          17.8               181        3625\n 8 Adelie  Torgersen           39.2          19.6               195        4675\n 9 Adelie  Torgersen           34.1          18.1               193        3475\n10 Adelie  Torgersen           42            20.2               190        4250\n# ℹ 334 more rows\n# ℹ 2 more variables: sex <fct>, year <int>\n```\n\n\n:::\n:::\n\n\n\n:::\n::::\n\n## Compare to see the difference\n\n:::: {.columns}\n\n::: {.column .tiny-font width=\"50%\"}\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\npenguins |>\n  count(species) |> # summarize data\n  mutate(species = fct_reorder(species, n)) |>\n  ggplot(aes(n, species)) + geom_col()\n```\n\n::: {.cell-output-display}\n![&nbsp;](getting-things-in-order_files/figure-revealjs/penguins-geom-col-1.svg){width=100%}\n:::\n:::\n\n\n\n:::\n\n::: {.column .tiny-font width=\"50%\"}\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\npenguins |>\n  # modify the original dataset, no summary\n  mutate(species = fct_infreq(species)) |>\n  ggplot(aes(y = species)) + geom_bar()\n```\n\n::: {.cell-output-display}\n![&nbsp;](getting-things-in-order_files/figure-revealjs/penguins-geom-bar-1.svg){width=100%}\n:::\n:::\n\n\n\n:::\n::::\n\n## Compare to see the difference\n\n:::: {.columns}\n\n::: {.column .tiny-font width=\"50%\"}\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\npenguins |>\n  count(species) |> # summarize data\n  mutate(species = fct_reorder(species, n)) |>\n  ggplot(aes(n, species)) + geom_col()\n```\n\n::: {.cell-output-display}\n![&nbsp;](getting-things-in-order_files/figure-revealjs/penguins-geom-col2-1.svg){width=100%}\n:::\n:::\n\n\n\n:::\n\n::: {.column .tiny-font width=\"50%\"}\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\npenguins |>\n  # modify the original dataset, no summary\n  mutate(species = fct_infreq(species)) |>\n  ggplot(aes(y = fct_rev(species))) + geom_bar()\n```\n\n::: {.cell-output-display}\n![&nbsp;](getting-things-in-order_files/figure-revealjs/penguins-geom-bar2-1.svg){width=100%}\n:::\n:::\n\n\n\n:::\n::::\n\n<!-- Segment ends here -->\n\n#\n\n# Ordering other plot elements\n\n## The gapminder dataset: Life expectancy data\n\n::: {.tiny-font}\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nlibrary(gapminder)\n\ngapminder\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n# A tibble: 1,704 × 6\n   country     continent  year lifeExp      pop gdpPercap\n   <fct>       <fct>     <int>   <dbl>    <int>     <dbl>\n 1 Afghanistan Asia       1952    28.8  8425333      779.\n 2 Afghanistan Asia       1957    30.3  9240934      821.\n 3 Afghanistan Asia       1962    32.0 10267083      853.\n 4 Afghanistan Asia       1967    34.0 11537966      836.\n 5 Afghanistan Asia       1972    36.1 13079460      740.\n 6 Afghanistan Asia       1977    38.4 14880372      786.\n 7 Afghanistan Asia       1982    39.9 12881816      978.\n 8 Afghanistan Asia       1987    40.8 13867957      852.\n 9 Afghanistan Asia       1992    41.7 16317921      649.\n10 Afghanistan Asia       1997    41.8 22227415      635.\n# ℹ 1,694 more rows\n```\n\n\n:::\n:::\n\n\n\n:::\n\n## Life expectancy in the Americas in 2007\n\n::: {.tiny-font}\n\n\n\n::: {.cell output-location='column'}\n\n```{.r .cell-code}\ngapminder |>\n  filter(\n    year == 2007,\n    continent == \"Americas\"\n  ) |>\n  ggplot(aes(lifeExp, country)) + \n  geom_point()\n```\n\n::: {.cell-output-display}\n![&nbsp;](getting-things-in-order_files/figure-revealjs/gapminder-unordered-1.svg){width=95%}\n:::\n:::\n\n\n\n:::\n\n::: {.fragment .small-font .move-up-2em}\nReminder: Default order is alphabetic, from bottom to top\n:::\n\n## Life expectancy, ordered from highest to lowest\n\n::: {.tiny-font}\n\n\n\n::: {.cell output-location='column'}\n\n```{.r .cell-code}\ngapminder |>\n  filter(\n    year == 2007,\n    continent == \"Americas\"\n  ) |>\n  mutate(\n    country = fct_reorder(country, lifeExp)\n  ) |>\n  ggplot(aes(lifeExp, country)) + \n  geom_point()\n```\n\n::: {.cell-output-display}\n![&nbsp;](getting-things-in-order_files/figure-revealjs/gapminder-ordered-1.svg){width=95%}\n:::\n:::\n\n\n\n:::\n\n::: {.small-font .move-up-2em}\nOrder is ascending from bottom to top\n:::\n\n## We can also order facets\n\n::: {.fragment .small-font}\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\ngapminder |>\n  filter(country %in% c(\"Norway\", \"Portugal\", \"Spain\", \"Austria\")) |>\n  ggplot(aes(year, lifeExp)) + geom_line() +\n  facet_wrap(~country, nrow = 1)\n```\n\n::: {.cell-output-display}\n![&nbsp;](getting-things-in-order_files/figure-revealjs/gapminder-europe-unordered-1.svg){width=95%}\n:::\n:::\n\n\n\n:::\n\n::: {.incremental .small-font .move-up-2em}\n- Default ordering is alphabetic; there's no good reason for this ordering\n- Let's apply `fct_reorder()` and see what happens\n:::\n\n## We can also order facets\n\n::: {.small-font}\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\ngapminder |>\n  filter(country %in% c(\"Norway\", \"Portugal\", \"Spain\", \"Austria\")) |>\n  mutate(country = fct_reorder(country, lifeExp)) |> # default: order by median\n  ggplot(aes(year, lifeExp)) + geom_line() +\n  facet_wrap(~country, nrow = 1)\n```\n\n::: {.cell-output-display}\n![&nbsp;](getting-things-in-order_files/figure-revealjs/gapminder-europe-1-1.svg){width=95%}\n:::\n:::\n\n\n\n:::\n\n::: {.incremental .small-font .move-up-2em}\n- When the levels of a factor occur more than once, `fct_reorder()` applies a summary function\n- The default summary function is `median()`\n:::\n\n## We can also order facets\n\n::: {.small-font}\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\ngapminder |>\n  filter(country %in% c(\"Norway\", \"Portugal\", \"Spain\", \"Austria\")) |>\n  mutate(country = fct_reorder(country, lifeExp, median)) |> # order by median\n  ggplot(aes(year, lifeExp)) + geom_line() +\n  facet_wrap(~country, nrow = 1)\n```\n\n::: {.cell-output-display}\n![&nbsp;](getting-things-in-order_files/figure-revealjs/gapminder-europe-2-1.svg){width=95%}\n:::\n:::\n\n\n\n:::\n\n::: {.small-font .move-up-2em}\n- When the levels of a factor occur more than once, `fct_reorder()` applies a summary function\n- The default summary function is `median()`\n:::\n\n## Alternative orderings: By smallest value per facet\n\n::: {.small-font}\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\ngapminder |>\n  filter(country %in% c(\"Norway\", \"Portugal\", \"Spain\", \"Austria\")) |>\n  mutate(country = fct_reorder(country, lifeExp, min)) |> # order by minimum\n  ggplot(aes(year, lifeExp)) + geom_line() +\n  facet_wrap(~country, nrow = 1)\n```\n\n::: {.cell-output-display}\n![&nbsp;](getting-things-in-order_files/figure-revealjs/gapminder-europe-3-1.svg){width=95%}\n:::\n:::\n\n\n\n:::\n\n## Alternative orderings: By largest value per facet\n\n::: {.small-font}\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\ngapminder |>\n  filter(country %in% c(\"Norway\", \"Portugal\", \"Spain\", \"Austria\")) |>\n  mutate(country = fct_reorder(country, lifeExp, max)) |> # order by maximum\n  ggplot(aes(year, lifeExp)) + geom_line() +\n  facet_wrap(~country, nrow = 1)\n```\n\n::: {.cell-output-display}\n![&nbsp;](getting-things-in-order_files/figure-revealjs/gapminder-europe-4-1.svg){width=95%}\n:::\n:::\n\n\n\n:::\n\n## Alternative orderings: By smallest difference\n\n::: {.small-font}\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\ngapminder |>\n  filter(country %in% c(\"Norway\", \"Portugal\", \"Spain\", \"Austria\")) |>\n  mutate(country = fct_reorder(country, lifeExp, \\(x) { max(x) - min(x) })) |> \n  ggplot(aes(year, lifeExp)) + geom_line() +\n  facet_wrap(~country, nrow = 1)\n```\n\n::: {.cell-output-display}\n![&nbsp;](getting-things-in-order_files/figure-revealjs/gapminder-europe-5-1.svg){width=95%}\n:::\n:::\n\n\n\n:::\n\n## Alternative orderings: By largest difference\n\n::: {.small-font}\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\ngapminder |>\n  filter(country %in% c(\"Norway\", \"Portugal\", \"Spain\", \"Austria\")) |>\n  mutate(country = fct_reorder(country, lifeExp, \\(x) { min(x) - max(x) })) |> \n  ggplot(aes(year, lifeExp)) + geom_line() +\n  facet_wrap(~country, nrow = 1)\n```\n\n::: {.cell-output-display}\n![&nbsp;](getting-things-in-order_files/figure-revealjs/gapminder-europe-6-1.svg){width=95%}\n:::\n:::\n\n\n\n:::\n\n## Final example: Lumping factor levels together\n\n::: {.fragment .tiny-font}\nDataset: Flights out of New York City in 2013\n\n::: {.fragment}\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nlibrary(nycflights13)\n\nflight_data <- flights |> # take data on individual flights\n  left_join(airlines) |>  # add in full-length airline names\n  select(name, carrier, flight, year, month, day, origin, dest) # pick columns of interest\n\nflight_data\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n# A tibble: 336,776 × 8\n   name                     carrier flight  year month   day origin dest \n   <chr>                    <chr>    <int> <int> <int> <int> <chr>  <chr>\n 1 United Air Lines Inc.    UA        1545  2013     1     1 EWR    IAH  \n 2 United Air Lines Inc.    UA        1714  2013     1     1 LGA    IAH  \n 3 American Airlines Inc.   AA        1141  2013     1     1 JFK    MIA  \n 4 JetBlue Airways          B6         725  2013     1     1 JFK    BQN  \n 5 Delta Air Lines Inc.     DL         461  2013     1     1 LGA    ATL  \n 6 United Air Lines Inc.    UA        1696  2013     1     1 EWR    ORD  \n 7 JetBlue Airways          B6         507  2013     1     1 EWR    FLL  \n 8 ExpressJet Airlines Inc. EV        5708  2013     1     1 LGA    IAD  \n 9 JetBlue Airways          B6          79  2013     1     1 JFK    MCO  \n10 American Airlines Inc.   AA         301  2013     1     1 LGA    ORD  \n# ℹ 336,766 more rows\n```\n\n\n:::\n:::\n\n\n\n:::\n:::\n\n\n## Flights out of New York City in 2013\n\n::: {.tiny-font}\n\n\n\n::: {.cell output-location='column'}\n\n```{.r .cell-code}\nflight_data |>\n  ggplot(aes(y = name)) + \n  geom_bar()\n```\n\n::: {.cell-output-display}\n![&nbsp;](getting-things-in-order_files/figure-revealjs/flights-unordered-1.svg){width=95%}\n:::\n:::\n\n\n\n:::\n\n::: {.fragment .small-font .move-up-2em}\nAs (almost) always, the default alphabetic ordering is terrible\n:::\n\n## Flights out of New York City in 2013\n\n::: {.tiny-font}\n\n\n\n::: {.cell output-location='column'}\n\n```{.r .cell-code}\nflight_data |>\n  mutate(\n    name = fct_infreq(name)\n  ) |>\n  ggplot(aes(y = fct_rev(name))) + \n  geom_bar()\n```\n\n::: {.cell-output-display}\n![&nbsp;](getting-things-in-order_files/figure-revealjs/flights-ordered-1.svg){width=95%}\n:::\n:::\n\n\n\n:::\n\n::: {.fragment .small-font .move-up-2em}\nOrdering by frequency is better, but do we need to show all airlines?\n:::\n\n## Flights out of New York City in 2013, with lumping\n\n::: {.tiny-font}\n\n\n\n::: {.cell output-location='column'}\n\n```{.r .cell-code}\nflight_data |>\n  mutate(\n    # keep only the 7 most common airlines\n    name = fct_lump_n(name, 7)\n  ) |>\n  ggplot(aes(y = fct_rev(name))) + \n  geom_bar()\n```\n\n::: {.cell-output-display}\n![&nbsp;](getting-things-in-order_files/figure-revealjs/flights-lumped-1.svg){width=95%}\n:::\n:::\n\n\n\n:::\n\n::: {.fragment .small-font .move-up-2em}\nNow the ordering is again alphabetic...\n:::\n\n## Flights out of New York City in 2013, with lumping\n\n::: {.tiny-font}\n\n\n\n::: {.cell output-location='column'}\n\n```{.r .cell-code}\nflight_data |>\n  mutate(\n    # order after lumping\n    name = fct_infreq(fct_lump_n(name, 7))\n  ) |>\n  ggplot(aes(y = fct_rev(name))) + \n  geom_bar()\n```\n\n::: {.cell-output-display}\n![&nbsp;](getting-things-in-order_files/figure-revealjs/flights-lumped-ordered-1.svg){width=95%}\n:::\n:::\n\n\n\n:::\n\n## Flights out of New York City in 2013, with lumping\n\n::: {.tiny-font}\n\n\n\n::: {.cell output-location='column'}\n\n```{.r .cell-code}\nflight_data |>\n  mutate(\n    # order before lumping\n    name = fct_lump_n(fct_infreq(name), 7)\n  ) |>\n  ggplot(aes(y = fct_rev(name))) + \n  geom_bar()\n```\n\n::: {.cell-output-display}\n![&nbsp;](getting-things-in-order_files/figure-revealjs/flights-lumped-ordered2-1.svg){width=95%}\n:::\n:::\n\n\n\n:::\n\n::: {.fragment .small-font .move-up-2em}\nIn most cases, you will want to order before lumping\n:::\n\n::: {.fragment .small-font}\nCan we visually separate the \"Other\" category?\n:::\n\n## Flights out of New York City in 2013, with lumping\n\n::: {.tiny-font}\n\n\n\n::: {.cell output-location='column'}\n\n```{.r .cell-code}\nflight_data |>\n  mutate(\n    name = fct_lump_n(fct_infreq(name), 7),\n    # Use `fct_other()` to manually lump all\n    # levels not called \"Other\" into \"Named\"\n    highlight = fct_other(\n      name,\n      keep = \"Other\", other_level = \"Named\"\n    )\n  ) |>\n  ggplot() +\n  aes(\n    y = fct_rev(name),\n    fill = highlight\n  ) + \n  geom_bar()\n```\n\n::: {.cell-output-display}\n![&nbsp;](getting-things-in-order_files/figure-revealjs/flights-highlight-1.svg){width=95%}\n:::\n:::\n\n\n\n:::\n\n::: {.fragment .small-font .move-up-2em}\nOne annoying issue: The legend is in the wrong order\n:::\n\n\n## Flights out of New York City in 2013, with lumping\n\n::: {.tiny-font}\n\n\n\n::: {.cell output-location='column'}\n\n```{.r .cell-code}\nflight_data |>\n  mutate(\n    name = fct_lump_n(fct_infreq(name), 7),\n    # Use `fct_other()` to manually lump all\n    # levels not called \"Other\" into \"Named\"\n    highlight = fct_other(\n      name,\n      keep = \"Other\", other_level = \"Named\"\n    )\n  ) |>\n  ggplot() +\n  aes(\n    y = fct_rev(name),\n    # reverse fill aesthetic\n    fill = fct_rev(highlight)\n  ) + \n  geom_bar()\n```\n\n::: {.cell-output-display}\n![&nbsp;](getting-things-in-order_files/figure-revealjs/flights-highlight2-1.svg){width=95%}\n:::\n:::\n\n\n\n:::\n\n## Flights out of New York City in 2013, final tweaks\n\n::: {.tiny-font}\n\n\n\n::: {.cell output-location='column'}\n\n```{.r .cell-code}\nflight_data |>\n  mutate(\n    name = fct_lump_n(fct_infreq(name), 7),\n    highlight = fct_other(\n      name, keep = \"Other\", other_level = \"Named\"\n    )\n  ) |>\n  ggplot() +\n  aes(y = fct_rev(name), fill = highlight) + \n  geom_bar() +\n  scale_x_continuous(\n    name = \"Number of flights\",\n    expand = expansion(mult = c(0, 0.07))\n  ) +\n  scale_y_discrete(name = NULL) +\n  scale_fill_manual(\n    values = c(\n      Named = \"gray50\", Other = \"#98545F\"\n    ),\n    guide = \"none\"\n  ) +\n  theme_minimal_vgrid()\n```\n\n::: {.cell-output-display}\n![&nbsp;](getting-things-in-order_files/figure-revealjs/flights-final-1.svg){width=95%}\n:::\n:::\n\n\n\n:::\n\n## Summary of key factor manipulation functions\n\n::: {.tiny-font .center-text .move-down-1em}\nFunction           | Use case             | Documentation\n:---------       | :---------------     | :----------:\n`fct_relevel()`    | Change order of factor levels manually | [click here](https://forcats.tidyverse.org/reference/fct_relevel.html)\n`fct_infreq()`     | Put levels in descending order of how frequently each level occurs in the data | [click here](https://forcats.tidyverse.org/reference/fct_inorder.html)\n`fct_rev()`        | Reverse the order of factor levels | [click here](https://forcats.tidyverse.org/reference/fct_rev.html)\n`fct_reorder()`    | Put levels in ascending order determined by a numeric variable or summary function | [click here](https://forcats.tidyverse.org/reference/fct_reorder.html)\n`fct_lump_n()`     | Retain the *n* most frequent levels and lump all others into `\"Other\"` | [click here](https://forcats.tidyverse.org/reference/fct_lump.html)\n`fct_other()`      | Manually group some factor levels into `\"Other\"` | [click here](https://forcats.tidyverse.org/reference/fct_other.html)\n:::\n\n::: {.fragment .small-font .move-down-1em}\nFor more options, check out the [reference documentation](https://forcats.tidyverse.org/reference/index.html) of the **forcats** package\n:::\n\n<!-- Segment ends here -->\n\n#\n\n## Further reading\n\n- Fundamentals of Data Visualization: [Chapter 6: Visualizing amounts](https://clauswilke.com/dataviz/visualizing-amounts.html)\n- **forcats** documentation: [Introduction to forcats](https://forcats.tidyverse.org/articles/forcats.html)\n- **forcats** reference documentation: [Change order of levels](https://forcats.tidyverse.org/reference/index.html#section-change-order-of-levels)\n",
    "supporting": [
      "getting-things-in-order_files"
    ],
    "filters": [
      "rmarkdown/pagebreak.lua"
    ],
    "includes": {
      "include-after-body": [
        "\n<script>\n  // htmlwidgets need to know to resize themselves when slides are shown/hidden.\n  // Fire the \"slideenter\" event (handled by htmlwidgets.js) when the current\n  // slide changes (different for each slide format).\n  (function () {\n    // dispatch for htmlwidgets\n    function fireSlideEnter() {\n      const event = window.document.createEvent(\"Event\");\n      event.initEvent(\"slideenter\", true, true);\n      window.document.dispatchEvent(event);\n    }\n\n    function fireSlideChanged(previousSlide, currentSlide) {\n      fireSlideEnter();\n\n      // dispatch for shiny\n      if (window.jQuery) {\n        if (previousSlide) {\n          window.jQuery(previousSlide).trigger(\"hidden\");\n        }\n        if (currentSlide) {\n          window.jQuery(currentSlide).trigger(\"shown\");\n        }\n      }\n    }\n\n    // hookup for slidy\n    if (window.w3c_slidy) {\n      window.w3c_slidy.add_observer(function (slide_num) {\n        // slide_num starts at position 1\n        fireSlideChanged(null, w3c_slidy.slides[slide_num - 1]);\n      });\n    }\n\n  })();\n</script>\n\n"
      ]
    },
    "engineDependencies": {},
    "preserve": {},
    "postProcess": true
  }
}