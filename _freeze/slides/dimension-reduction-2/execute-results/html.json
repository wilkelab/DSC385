{
  "hash": "30d186151d222c0220b092955d15125f",
  "result": {
    "engine": "knitr",
    "markdown": "---\ntitle: \"Dimension reduction 2\"\nauthor: \"Claus O. Wilke\"\ndate: last-modified\nformat: \n  revealjs:\n    theme:\n      - default\n      - Wilke-theme.scss\n    auto-stretch: false\n    chalkboard: true\nexecute:\n  fig-format: svg\n  fig-asp: 0.618\n  fig-width: 5.5\n---\n\n\n\n\n\n\n## What if a rotation cannot disentangle the data?\n\n::: {.fragment .move-down-1em}\n\n\n\n::: {.cell}\n::: {.cell-output-display}\n![&nbsp;](dimension-reduction-2_files/figure-revealjs/spirals-1.svg){width=90%}\n:::\n:::\n\n\n\n:::\n\n\n## PCA analysis of intertwined spirals is not useful\n\n::: {.move-down-1em}\n\n\n\n::: {.cell}\n::: {.cell-output-display}\n![&nbsp;](dimension-reduction-2_files/figure-revealjs/pca-spirals-1.svg){width=95%}\n:::\n:::\n\n\n\n:::\n\n## One possible approach: Kernel PCA\n\n::: {.incremental}\n- Kernel PCA performs PCA in a hypothetical, higher-dimensional space\n- With more dimensions, data points become more separable\n- Importantly, the space is never explicitly constructed ([kernel trick](https://en.wikipedia.org/wiki/Kernel_method#Mathematics:_the_kernel_trick))\n- Results from kernel PCA depend on choice of kernel\n:::\n\n## Kernel PCA can separate the spirals\n\n::: {.move-down-1em}\n\n\n\n::: {.cell}\n::: {.cell-output-display}\n![&nbsp;](dimension-reduction-2_files/figure-revealjs/kpca-spirals-1.svg){width=95%}\n:::\n:::\n\n\n\n:::\n\n::: {.small-font .move-up-2em}\nGaussian kernel, sigma = 64\n:::\n\n## But we need to choose the right sigma value\n\n::: {.move-down-1em}\n\n\n\n::: {.cell}\n::: {.cell-output-display}\n![&nbsp;](dimension-reduction-2_files/figure-revealjs/kpca-spirals-grid-1.svg){width=100%}\n:::\n:::\n\n\n\n:::\n\n## Other approaches\n\n::: {.incremental}\n- t-SNE: t-distributed stochastic neighbor embedding\n- UMAP: Uniform manifold approximation and projection \n:::\n\n::: {.fragment .move-down-1em}\nBoth algorithms look at the local distances between points in the original data space and try to reproduce them in the low-dimensional representation\n:::\n\n## t-SNE can separate the spirals\n\n::: {.move-down-1em}\n\n\n\n::: {.cell}\n::: {.cell-output-display}\n![&nbsp;](dimension-reduction-2_files/figure-revealjs/tsne-spirals-1.svg){width=95%}\n:::\n:::\n\n\n\n:::\n\n## t-SNE results depend on the perplexity value\n\n::: {.move-down-1em}\n\n\n\n::: {.cell}\n::: {.cell-output-display}\n![&nbsp;](dimension-reduction-2_files/figure-revealjs/tsne-spirals-grid-1.svg){width=100%}\n:::\n:::\n\n\n\n:::\n\n## t-SNE results depend on the random starting point\n\n\n::: {.move-down-1em}\n\n\n\n::: {.cell}\n::: {.cell-output-display}\n![&nbsp;](dimension-reduction-2_files/figure-revealjs/tsne-spirals-grid2-1.svg){width=100%}\n:::\n:::\n\n\n\n:::\n\n## UMAP can separate the spirals\n\n::: {.move-down-1em}\n\n\n\n::: {.cell}\n::: {.cell-output-display}\n![&nbsp;](dimension-reduction-2_files/figure-revealjs/umap-spirals-1.svg){width=95%}\n:::\n:::\n\n\n\n:::\n\n## UMAP results depend on the number of neighbors\n\n::: {.move-down-1em}\n\n\n\n::: {.cell}\n::: {.cell-output-display}\n![&nbsp;](dimension-reduction-2_files/figure-revealjs/umap-spirals-grid-1.svg){width=100%}\n:::\n:::\n\n\n\n:::\n\n## Random starting point has some impact on results\n\n::: {.move-down-1em}\n\n\n\n::: {.cell}\n::: {.cell-output-display}\n![&nbsp;](dimension-reduction-2_files/figure-revealjs/umap-spirals-grid2-1.svg){width=100%}\n:::\n:::\n\n\n\n:::\n\n::: {.smaller-font .move-up-2em}\n(UMAP uses a different initialization than t-SNE, [Kobak & Linderman, Nature Biotech 2021](https://www.nature.com/articles/s41587-020-00809-z))\n:::\n\n## What is the meaning of the tuning parameters?\n\n::: {.fragment}\nTuning parameters define when points are close in the original data space\n:::\n\n::: {.fragment}\nThis implicitly defines the number of clusters generated\n:::\n\n::: {.fragment .move-down-1em}\nThese have comparable effects:\n\n- sigma (Gaussian kernel PCA)\n- perplexity (t-SNE)\n- number of neighbors (UMAP)\n:::\n\n# How do these methods perform<br>on the blue jays dataset?\n\n## UMAP of blue jays\n\n::: {.move-down-1em}\n\n\n\n::: {.cell}\n::: {.cell-output-display}\n![&nbsp;](dimension-reduction-2_files/figure-revealjs/umap-blue-jays-gray-1.svg){width=65%}\n:::\n:::\n\n\n\n:::\n\n## UMAP of blue jays\n\n::: {.move-down-1em}\n\n\n\n::: {.cell}\n::: {.cell-output-display}\n![&nbsp;](dimension-reduction-2_files/figure-revealjs/umap-blue-jays-sex-1.svg){width=65%}\n:::\n:::\n\n\n\n:::\n\n## Kernel PCA of blue jays\n\n::: {.move-down-1em}\n\n\n\n::: {.cell}\n::: {.cell-output-display}\n![&nbsp;](dimension-reduction-2_files/figure-revealjs/kpca-blue-jays-1.svg){width=65%}\n:::\n:::\n\n\n\n:::\n\n## Nonlinear methods have important downsides\n\n::: {.incremental}\n- Results depend on parameter fine tuning\n- Low-dimensional embedding cannot be interpreted<br>\n  (no rotation matrix plot)\n:::\n\n::: {.fragment .move-down-1em}\nUse with caution, and only when linear methods clearly aren't working\n:::\n\n<!-- Segment ends here -->\n\n#\n\n# Doing nonlinear dimension reduction in R\n\n## Getting the data\n\n::: {.small-font}\nWe'll be working with the `blue_jays` dataset:\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nblue_jays <- read_csv(\"https://wilkelab.org/DSC385/datasets/blue_jays.csv\")\n\nblue_jays\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n# A tibble: 123 × 8\n   bird_id    sex   bill_depth_mm bill_width_mm bill_length_mm head_length_mm\n   <chr>      <chr>         <dbl>         <dbl>          <dbl>          <dbl>\n 1 0000-00000 M              8.26          9.21           25.9           56.6\n 2 1142-05901 M              8.54          8.76           25.0           56.4\n 3 1142-05905 M              8.39          8.78           26.1           57.3\n 4 1142-05907 F              7.78          9.3            23.5           53.8\n 5 1142-05909 M              8.71          9.84           25.5           57.3\n 6 1142-05911 F              7.28          9.3            22.2           52.2\n 7 1142-05912 M              8.74          9.28           25.4           57.1\n 8 1142-05914 M              8.72          9.94           30             60.7\n 9 1142-05917 F              8.2           9.01           22.8           52.8\n10 1142-05920 F              7.67          9.31           24.6           54.9\n# ℹ 113 more rows\n# ℹ 2 more variables: body_mass_g <dbl>, skull_size_mm <dbl>\n```\n\n\n:::\n:::\n\n\n\n:::\n\n## Doing nonlinear dimension reduction in R\n\n::: {.fragment}\nAll these methods require special packages:\n\n- **kernlab** (kernel PCA)\n- **Rtsne** (t-SNE)\n- **umap** (UMAP)\n:::\n\n::: {.fragment}\nCode examples are somewhat messy\n:::\n\n::: {.fragment}\nWill do t-SNE as an example\n:::\n\n## Doing t-SNE in R\n\n::: {.small-font}\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# set random seed\nset.seed(3482)\n\n# run t-SNE\ntsne_fit <- blue_jays |>\n  select(where(is.numeric)) |>\n  scale() |>\n  Rtsne(perplexity = 8)\n\n# model fit object contains various pieces of information\nnames(tsne_fit)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n [1] \"N\"                   \"Y\"                   \"costs\"              \n [4] \"itercosts\"           \"origD\"               \"perplexity\"         \n [7] \"theta\"               \"max_iter\"            \"stop_lying_iter\"    \n[10] \"mom_switch_iter\"     \"momentum\"            \"final_momentum\"     \n[13] \"eta\"                 \"exaggeration_factor\"\n```\n\n\n:::\n:::\n\n\n\n:::\n\n## Doing t-SNE in R\n\n::: {.tiny-font}\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# extract coordinates from the `tsne_fit` object and plot\ntsne_fit$Y\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n               [,1]        [,2]\n  [1,]  -1.35151022  16.0171255\n  [2,]  -6.38003944  23.4335431\n  [3,]  -2.41436032  20.0405001\n  [4,]   6.28730425 -19.3916453\n  [5,] -10.65885788  10.5774719\n  [6,]   8.99818448 -20.4131218\n  [7,]  -9.31273644   5.3755674\n  [8,]  -7.25654988  15.7132010\n  [9,]   6.74481665 -23.7464307\n [10,]   1.27226454 -11.3933562\n [11,]  -8.10967967  23.7301219\n [12,]  11.37651563  -7.6423822\n [13,] -13.04595468   2.5194354\n [14,]  15.03025326  14.6148860\n [15,] -13.64450956  18.2103340\n [16,]   6.90810849 -26.5341776\n [17,]  11.26613343  -6.1024744\n [18,] -16.25809266  12.1275049\n [19,]  -8.74441862  21.8400261\n [20,]  -5.93137317  -0.9041384\n [21,] -11.28718538  13.0005938\n [22,]   8.51343609 -30.9750396\n [23,]  -9.92567365  13.8288257\n [24,]   8.72112609 -10.3065246\n [25,] -11.83830418   5.9233754\n [26,]  -2.06950719   4.2670455\n [27,] -11.07278221  -2.5710372\n [28,]   6.65586113 -10.8649903\n [29,] -15.82978852   5.9949983\n [30,]   0.32528353  15.5410251\n [31,]  12.04517467 -29.1169657\n [32,]   2.54808748  14.3788814\n [33,]  -0.40434713   9.8045764\n [34,]   1.31458713  -3.2200280\n [35,]  12.80511247  11.6905636\n [36,]  -3.45964136  11.6421591\n [37,]  -4.90492627  24.8945733\n [38,]  13.79168285  10.7468991\n [39,]   8.79449595 -16.6237071\n [40,] -17.63927800   2.3142518\n [41,]   5.02287576 -25.4805579\n [42,]   7.45160091 -14.2214890\n [43,]  -3.95527081   4.5930910\n [44,]  -7.99348678  20.3813197\n [45,]   1.55025679  12.3853486\n [46,]  -8.20228962  22.3799729\n [47,] -14.01509263   1.9623268\n [48,]   6.82478348 -17.9605903\n [49,]  -1.08848740  22.2611209\n [50,]   8.01368178 -26.0549148\n [51,]   0.54242080  -5.2853639\n [52,] -10.11680762   8.2921052\n [53,]  -4.61818190  14.1360227\n [54,]   3.83225563 -24.3249597\n [55,]  12.24683187  10.9430340\n [56,]   8.52416101  -1.1040490\n [57,]  -6.12706756  24.5883509\n [58,]  -2.85422340  18.9829203\n [59,] -14.36662966  17.4809729\n [60,]  12.16520613  -9.1434243\n [61,] -12.00223356  10.3148413\n [62,]  -7.55487764   5.6428510\n [63,]   7.46887021 -24.9469847\n [64,]  10.70726730  -4.9636965\n [65,]  -9.71080279  10.3400137\n [66,]  10.62927989 -29.2194811\n [67,] -16.57730949   5.4800433\n [68,] -16.50241893   2.9636419\n [69,]  -7.04207831  -1.3413458\n [70,]   9.20326368 -17.6407032\n [71,]  -5.35723549   1.3588363\n [72,]   5.85652190 -14.6636706\n [73,]   4.75628917  -6.0558216\n [74,] -15.65311924  12.7620499\n [75,]   9.75199542  -2.3909995\n [76,]   2.23275182  -1.9913967\n [77,]  -9.24320404   8.2860113\n [78,]   1.28023297  -4.7899444\n [79,]   7.32449916 -28.3930435\n [80,]  -7.91761922   8.7926482\n [81,]  -1.77976277  22.9138104\n [82,]   8.36118531   3.1669471\n [83,]  14.86350277  10.0337068\n [84,]  -6.58111775   9.6660722\n [85,]   1.33405097  15.2631282\n [86,]  -6.11980123   4.3992863\n [87,]   0.74890824 -10.6061564\n [88,]   0.04058745  -8.1189103\n [89,]   5.48671834  -3.9348831\n [90,]  13.57909092 -13.1058299\n [91,]   8.13840156   0.9707537\n [92,] -13.76195207  15.8693190\n [93,]  -1.35948973  -8.3169556\n [94,]   8.05159125   1.5796687\n [95,]   7.14118351  -9.8044605\n [96,]   7.70006228 -12.1358166\n [97,]  -5.34139444  14.9834510\n [98,]   1.22934439  11.5884466\n [99,]   7.49927889 -20.5528006\n[100,]  15.47860204  14.3535335\n[101,]   7.90802023 -31.4800496\n[102,]   9.47620964 -25.2594596\n[103,]  -4.11678166  -0.0170017\n[104,]   5.59160885 -13.7713633\n[105,]   9.13824090  -9.2522350\n[106,] -13.30911093  19.0631648\n[107,]   3.21307540 -20.8686920\n[108,]  -2.68502288  14.2210364\n[109,]   2.88147176 -23.6201737\n[110,]  -0.76330270  -4.5322009\n[111,]  12.22843830  -5.0294023\n[112,]  -5.77495633   2.6796119\n[113,]  12.39826074  12.9388409\n[114,]   1.97818731  -0.1584058\n[115,]  -2.11397889  16.4620832\n[116,] -12.03027253   5.1001295\n[117,]   5.59991662  -6.8646572\n[118,] -15.64803015   2.0676494\n[119,] -12.09196324   3.0020558\n[120,]  -0.82467518  -6.8039250\n[121,]   5.42527929 -19.6198276\n[122,]  13.18484484 -11.7534649\n[123,]   9.28002940 -27.4925770\n```\n\n\n:::\n:::\n\n\n\n:::\n\n## Doing t-SNE in R\n\n::: {.tiny-font}\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# extract coordinates from the `tsne_fit` object and plot\ntsne_fit$Y |>\n  as.data.frame() |>\n  # put non-numeric data columns back into the dataset\n  cbind(select(blue_jays, -where(is.numeric)))\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n              V1          V2    bird_id sex\n1    -1.35151022  16.0171255 0000-00000   M\n2    -6.38003944  23.4335431 1142-05901   M\n3    -2.41436032  20.0405001 1142-05905   M\n4     6.28730425 -19.3916453 1142-05907   F\n5   -10.65885788  10.5774719 1142-05909   M\n6     8.99818448 -20.4131218 1142-05911   F\n7    -9.31273644   5.3755674 1142-05912   M\n8    -7.25654988  15.7132010 1142-05914   M\n9     6.74481665 -23.7464307 1142-05917   F\n10    1.27226454 -11.3933562 1142-05920   F\n11   -8.10967967  23.7301219 1142-05930   M\n12   11.37651563  -7.6423822 1142-05941   F\n13  -13.04595468   2.5194354 1142-05957   M\n14   15.03025326  14.6148860 1142-05971   F\n15  -13.64450956  18.2103340 1142-05981   M\n16    6.90810849 -26.5341776 1142-05986   F\n17   11.26613343  -6.1024744 1142-05990   F\n18  -16.25809266  12.1275049 1142-05991   M\n19   -8.74441862  21.8400261 1142-05995   M\n20   -5.93137317  -0.9041384 1142-05996   M\n21  -11.28718538  13.0005938 1142-05997   M\n22    8.51343609 -30.9750396 1142-05998   M\n23   -9.92567365  13.8288257 1142-05999   M\n24    8.72112609 -10.3065246  702-90556   F\n25  -11.83830418   5.9233754  702-90560   M\n26   -2.06950719   4.2670455  702-90567   F\n27  -11.07278221  -2.5710372  702-90576   F\n28    6.65586113 -10.8649903  702-90577   F\n29  -15.82978852   5.9949983  702-90578   M\n30    0.32528353  15.5410251  702-90583   F\n31   12.04517467 -29.1169657  872-94671   F\n32    2.54808748  14.3788814  872-94673   M\n33   -0.40434713   9.8045764  872-94684   F\n34    1.31458713  -3.2200280  872-94688   F\n35   12.80511247  11.6905636  872-94689   M\n36   -3.45964136  11.6421591  872-94692   M\n37   -4.90492627  24.8945733  872-94694   M\n38   13.79168285  10.7468991  872-94698   M\n39    8.79449595 -16.6237071  872-94709   F\n40  -17.63927800   2.3142518  872-94716   F\n41    5.02287576 -25.4805579  872-94731   M\n42    7.45160091 -14.2214890  872-94737   F\n43   -3.95527081   4.5930910  872-94757   M\n44   -7.99348678  20.3813197  872-94761   M\n45    1.55025679  12.3853486  872-94766   F\n46   -8.20228962  22.3799729  872-94769   M\n47  -14.01509263   1.9623268  872-94771   M\n48    6.82478348 -17.9605903  872-94776   F\n49   -1.08848740  22.2611209  872-94777   M\n50    8.01368178 -26.0549148  872-94779   F\n51    0.54242080  -5.2853639  872-94780   F\n52  -10.11680762   8.2921052  952-00002   F\n53   -4.61818190  14.1360227  952-00004   M\n54    3.83225563 -24.3249597  952-00006   F\n55   12.24683187  10.9430340  952-00007   F\n56    8.52416101  -1.1040490  952-00012   F\n57   -6.12706756  24.5883509  952-00013   M\n58   -2.85422340  18.9829203  952-00016   M\n59  -14.36662966  17.4809729  952-00020   M\n60   12.16520613  -9.1434243  952-00023   M\n61  -12.00223356  10.3148413  952-00026   M\n62   -7.55487764   5.6428510  952-00056   M\n63    7.46887021 -24.9469847  952-00057   F\n64   10.70726730  -4.9636965  952-00058   F\n65   -9.71080279  10.3400137  952-00059   M\n66   10.62927989 -29.2194811  952-00062   F\n67  -16.57730949   5.4800433  952-00063   M\n68  -16.50241893   2.9636419  952-00064   M\n69   -7.04207831  -1.3413458  952-00065   M\n70    9.20326368 -17.6407032  952-00066   F\n71   -5.35723549   1.3588363  952-00068   M\n72    5.85652190 -14.6636706  952-00069   F\n73    4.75628917  -6.0558216  952-00070   M\n74  -15.65311924  12.7620499  952-00071   M\n75    9.75199542  -2.3909995  952-00072   F\n76    2.23275182  -1.9913967  952-00073   F\n77   -9.24320404   8.2860113  952-00074   M\n78    1.28023297  -4.7899444  952-00076   M\n79    7.32449916 -28.3930435  952-00077   F\n80   -7.91761922   8.7926482  952-00078   M\n81   -1.77976277  22.9138104  952-00079   M\n82    8.36118531   3.1669471  952-00080   M\n83   14.86350277  10.0337068  952-00081   F\n84   -6.58111775   9.6660722  952-00084   F\n85    1.33405097  15.2631282  962-62003   M\n86   -6.11980123   4.3992863  962-62006   M\n87    0.74890824 -10.6061564  962-62007   F\n88    0.04058745  -8.1189103  962-62008   F\n89    5.48671834  -3.9348831  962-62019   M\n90   13.57909092 -13.1058299  962-62021   F\n91    8.13840156   0.9707537  962-62024   M\n92  -13.76195207  15.8693190  962-62025   M\n93   -1.35948973  -8.3169556  962-62026   F\n94    8.05159125   1.5796687  962-62027   M\n95    7.14118351  -9.8044605  962-62030   F\n96    7.70006228 -12.1358166  962-62031   F\n97   -5.34139444  14.9834510  962-62038   M\n98    1.22934439  11.5884466  962-62040   M\n99    7.49927889 -20.5528006  962-62041   F\n100  15.47860204  14.3535335  962-62043   F\n101   7.90802023 -31.4800496  962-62045   F\n102   9.47620964 -25.2594596  962-62046   F\n103  -4.11678166  -0.0170017  962-62063   M\n104   5.59160885 -13.7713633  962-62067   F\n105   9.13824090  -9.2522350  962-62068   F\n106 -13.30911093  19.0631648  962-62069   M\n107   3.21307540 -20.8686920  962-62070   F\n108  -2.68502288  14.2210364  962-62081   M\n109   2.88147176 -23.6201737  962-62088   F\n110  -0.76330270  -4.5322009  962-62089   F\n111  12.22843830  -5.0294023  962-62090   F\n112  -5.77495633   2.6796119  962-62099   F\n113  12.39826074  12.9388409  962-62104   F\n114   1.97818731  -0.1584058  962-62115   F\n115  -2.11397889  16.4620832  962-62117   M\n116 -12.03027253   5.1001295  962-62123   M\n117   5.59991662  -6.8646572  962-62127   M\n118 -15.64803015   2.0676494  962-62138   F\n119 -12.09196324   3.0020558  962-62176   M\n120  -0.82467518  -6.8039250  962-62181   M\n121   5.42527929 -19.6198276  962-62184   F\n122  13.18484484 -11.7534649  962-62185   F\n123   9.28002940 -27.4925770  962-62200   F\n```\n\n\n:::\n:::\n\n\n\n:::\n\n## Doing t-SNE in R\n\n::: {.tiny-font}\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# extract coordinates from the `tsne_fit` object and plot\ntsne_fit$Y |>\n  as.data.frame() |>\n  # put non-numeric data columns back into the dataset\n  cbind(select(blue_jays, -where(is.numeric))) |>\n  # generate plot\n  ggplot(aes(V1, V2, color = sex)) +\n  geom_point()\n```\n\n::: {.cell-output-display}\n![&nbsp;](dimension-reduction-2_files/figure-revealjs/t-SNE-R-example-1.svg){width=55%}\n:::\n:::\n\n\n\n:::\n\n<!-- Segment ends here -->\n\n#\n\n## Further reading\n\n- Wikipedia: [Nonlinear dimensionality reduction](https://en.wikipedia.org/wiki/Nonlinear_dimensionality_reduction)\n- Wikipedia: [t-distributed stochastic neighbor embedding](https://en.wikipedia.org/wiki/T-distributed_stochastic_neighbor_embedding)\n- Wikipedia: [Kernel principal component analysis](https://en.wikipedia.org/wiki/Kernel_principal_component_analysis)\n- **kernlab** reference documentation (for kernel PCA): [pdf document](https://cran.r-project.org/web/packages/kernlab/kernlab.pdf)\n- **Rtsne** reference documentation: [pdf document](https://cran.r-project.org/web/packages/Rtsne/Rtsne.pdf)\n- **umap** vignette: [Uniform Manifold Approximation and Projection in R](https://cran.r-project.org/web/packages/umap/vignettes/umap.html)\n",
    "supporting": [
      "dimension-reduction-2_files"
    ],
    "filters": [
      "rmarkdown/pagebreak.lua"
    ],
    "includes": {
      "include-after-body": [
        "\n<script>\n  // htmlwidgets need to know to resize themselves when slides are shown/hidden.\n  // Fire the \"slideenter\" event (handled by htmlwidgets.js) when the current\n  // slide changes (different for each slide format).\n  (function () {\n    // dispatch for htmlwidgets\n    function fireSlideEnter() {\n      const event = window.document.createEvent(\"Event\");\n      event.initEvent(\"slideenter\", true, true);\n      window.document.dispatchEvent(event);\n    }\n\n    function fireSlideChanged(previousSlide, currentSlide) {\n      fireSlideEnter();\n\n      // dispatch for shiny\n      if (window.jQuery) {\n        if (previousSlide) {\n          window.jQuery(previousSlide).trigger(\"hidden\");\n        }\n        if (currentSlide) {\n          window.jQuery(currentSlide).trigger(\"shown\");\n        }\n      }\n    }\n\n    // hookup for slidy\n    if (window.w3c_slidy) {\n      window.w3c_slidy.add_observer(function (slide_num) {\n        // slide_num starts at position 1\n        fireSlideChanged(null, w3c_slidy.slides[slide_num - 1]);\n      });\n    }\n\n  })();\n</script>\n\n"
      ]
    },
    "engineDependencies": {},
    "preserve": {},
    "postProcess": true
  }
}