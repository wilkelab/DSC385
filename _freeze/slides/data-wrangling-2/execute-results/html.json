{
  "hash": "aefcffffa70eab573fabace6e34f7a74",
  "result": {
    "engine": "knitr",
    "markdown": "---\ntitle: \"Data wrangling 2\"\nauthor: \"Claus O. Wilke\"\ndate: last-modified\nformat: \n  revealjs:\n    theme:\n      - default\n      - Wilke-theme.scss\n    auto-stretch: false\n    chalkboard: true\nexecute:\n  fig-format: svg\n  fig-asp: 0.618\n  fig-width: 5.5\n---\n\n\n\n\n\n\n## Elementary data manipulations\n\n:::: {.columns}\n\n::: {.column width=\"50%\"}\nPrevious class:\n\n- Pick rows: `filter()`\n- Pick columns: `select()`\n- Sort rows: `arrange()`\n- Count things: `count()`\n- Make new columns: `mutate()`\n:::\n\n::: {.fragment .column width=\"50%\"}\nThis class:\n\n::: {.incremental}\n- Analyze subsets:<br>`group_by()` and `summarize()`\n- Reshape:<br>`pivot_wider()`, `pivot_longer()`\n- Combine datasets:<br>`left_join()`, `inner_join()`, `...`\n:::\n:::\n\n::::\n\n## Analyze subsets: `group_by()` and `summarize()`\n\n::: {.move-down-2em}\n![](../assets/data-wrangling-2/summarize.svg){fig-align=\"center\" width=\"90%\"}\n:::\n\n## Example application of grouping: Counting\n\nPreviously, we counted like so:\n\n::: {.small-font}\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nlibrary(palmerpenguins) # loads the `penguins` dataset\n\npenguins |>\n  count(species)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n# A tibble: 3 × 2\n  species       n\n  <fct>     <int>\n1 Adelie      152\n2 Chinstrap    68\n3 Gentoo      124\n```\n\n\n:::\n:::\n\n\n\n:::\n\n::: {.fragment}\nNow let's do it the hard way . . .\n:::\n\n## Example application of grouping: Counting\n\nLet's go back to the raw data:\n\n::: {.small-font}\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\npenguins\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n# A tibble: 344 × 8\n   species island    bill_length_mm bill_depth_mm flipper_length_mm body_mass_g\n   <fct>   <fct>              <dbl>         <dbl>             <int>       <int>\n 1 Adelie  Torgersen           39.1          18.7               181        3750\n 2 Adelie  Torgersen           39.5          17.4               186        3800\n 3 Adelie  Torgersen           40.3          18                 195        3250\n 4 Adelie  Torgersen           NA            NA                  NA          NA\n 5 Adelie  Torgersen           36.7          19.3               193        3450\n 6 Adelie  Torgersen           39.3          20.6               190        3650\n 7 Adelie  Torgersen           38.9          17.8               181        3625\n 8 Adelie  Torgersen           39.2          19.6               195        4675\n 9 Adelie  Torgersen           34.1          18.1               193        3475\n10 Adelie  Torgersen           42            20.2               190        4250\n# ℹ 334 more rows\n# ℹ 2 more variables: sex <fct>, year <int>\n```\n\n\n:::\n:::\n\n\n\n:::\n\n\n## Example application of grouping: Counting\n\nLet's group it:\n\n::: {.small-font}\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\npenguins |>\n  group_by(species)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n# A tibble: 344 × 8\n# Groups:   species [3]\n   species island    bill_length_mm bill_depth_mm flipper_length_mm body_mass_g\n   <fct>   <fct>              <dbl>         <dbl>             <int>       <int>\n 1 Adelie  Torgersen           39.1          18.7               181        3750\n 2 Adelie  Torgersen           39.5          17.4               186        3800\n 3 Adelie  Torgersen           40.3          18                 195        3250\n 4 Adelie  Torgersen           NA            NA                  NA          NA\n 5 Adelie  Torgersen           36.7          19.3               193        3450\n 6 Adelie  Torgersen           39.3          20.6               190        3650\n 7 Adelie  Torgersen           38.9          17.8               181        3625\n 8 Adelie  Torgersen           39.2          19.6               195        4675\n 9 Adelie  Torgersen           34.1          18.1               193        3475\n10 Adelie  Torgersen           42            20.2               190        4250\n# ℹ 334 more rows\n# ℹ 2 more variables: sex <fct>, year <int>\n```\n\n\n:::\n:::\n\n\n\n:::\n\n## Example application of grouping: Counting\n\nAnd summarize:\n\n::: {.small-font}\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\npenguins |>\n  group_by(species) |>\n  summarize(\n    n = n()  # n() returns the number of observations per group\n  )\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n# A tibble: 3 × 2\n  species       n\n  <fct>     <int>\n1 Adelie      152\n2 Chinstrap    68\n3 Gentoo      124\n```\n\n\n:::\n:::\n\n\n\n:::\n\n## Example application of grouping: Counting\n\nNow let's group by multiple variables:\n\n::: {.small-font}\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\npenguins |>\n  group_by(species, island)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n# A tibble: 344 × 8\n# Groups:   species, island [5]\n   species island    bill_length_mm bill_depth_mm flipper_length_mm body_mass_g\n   <fct>   <fct>              <dbl>         <dbl>             <int>       <int>\n 1 Adelie  Torgersen           39.1          18.7               181        3750\n 2 Adelie  Torgersen           39.5          17.4               186        3800\n 3 Adelie  Torgersen           40.3          18                 195        3250\n 4 Adelie  Torgersen           NA            NA                  NA          NA\n 5 Adelie  Torgersen           36.7          19.3               193        3450\n 6 Adelie  Torgersen           39.3          20.6               190        3650\n 7 Adelie  Torgersen           38.9          17.8               181        3625\n 8 Adelie  Torgersen           39.2          19.6               195        4675\n 9 Adelie  Torgersen           34.1          18.1               193        3475\n10 Adelie  Torgersen           42            20.2               190        4250\n# ℹ 334 more rows\n# ℹ 2 more variables: sex <fct>, year <int>\n```\n\n\n:::\n:::\n\n\n\n:::\n\n## Example application of grouping: Counting\n\nAnd summarize:\n\n::: {.small-font}\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\npenguins |>\n  group_by(species, island) |>\n  summarize(\n    n = n()  # n() returns the number of observations per group\n  )\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n# A tibble: 5 × 3\n# Groups:   species [3]\n  species   island        n\n  <fct>     <fct>     <int>\n1 Adelie    Biscoe       44\n2 Adelie    Dream        56\n3 Adelie    Torgersen    52\n4 Chinstrap Dream        68\n5 Gentoo    Biscoe      124\n```\n\n\n:::\n:::\n\n\n\n:::\n\n## Example application of grouping: Counting\n\n`count(...)` is a short-cut for:<br>`group_by(...) |> summarize(n = n())`\n\n:::: {.columns}\n\n::: {.fragment .column width=\"50%\" .small-font}\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\n#\npenguins |>\n  count(species)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n# A tibble: 3 × 2\n  species       n\n  <fct>     <int>\n1 Adelie      152\n2 Chinstrap    68\n3 Gentoo      124\n```\n\n\n:::\n:::\n\n\n\n:::\n\n::: {.fragment .column width=\"50%\" .small-font}\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\npenguins |>\n  group_by(species) |>\n  summarize(n = n())\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n# A tibble: 3 × 2\n  species       n\n  <fct>     <int>\n1 Adelie      152\n2 Chinstrap    68\n3 Gentoo      124\n```\n\n\n:::\n:::\n\n\n\n:::\n\n::::\n\n::: {.fragment}\nThe output is exactly the same\n:::\n\n## Performing multiple summaries at once\n\n::: {.fragment .small-font}\n\n\n\n::: {.cell output-location='fragment'}\n\n```{.r .cell-code}\npenguins |>\n  group_by(species) |>\n  summarize(\n    n = n(),                                      # number of penguins\n    mean_mass = mean(body_mass_g),                # mean body mass\n    max_flipper_length = max(flipper_length_mm),  # max flipper length\n    percent_female = sum(sex == \"female\")/n()     # percent of female penguins\n  )\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n# A tibble: 3 × 5\n  species       n mean_mass max_flipper_length percent_female\n  <fct>     <int>     <dbl>              <int>          <dbl>\n1 Adelie      152       NA                  NA           NA  \n2 Chinstrap    68     3733.                212            0.5\n3 Gentoo      124       NA                  NA           NA  \n```\n\n\n:::\n:::\n\n\n\n:::\n\n::: {.fragment}\nEach statement in `summarize()` creates one new column\n:::\n\n::: {.fragment}\nBut why all the `NA`s?\n:::\n\n## Performing multiple summaries at once\n\n::: {.small-font}\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\npenguins |>\n  group_by(species) |>\n  summarize(\n    n = n(),\n    mean_mass = mean(body_mass_g, na.rm = TRUE),\n    max_flipper_length = max(flipper_length_mm, na.rm = TRUE),\n    percent_female = sum(sex == \"female\", na.rm = TRUE)/sum(!is.na(sex))\n  )\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n# A tibble: 3 × 5\n  species       n mean_mass max_flipper_length percent_female\n  <fct>     <int>     <dbl>              <int>          <dbl>\n1 Adelie      152     3701.                210          0.5  \n2 Chinstrap    68     3733.                212          0.5  \n3 Gentoo      124     5076.                231          0.487\n```\n\n\n:::\n:::\n\n\n\n:::\n\n::: {.fragment}\nWe typically need to tell R how exactly `NA`s should be handled\n:::\n\n#\n\n<!-- Segment ends here -->\n\n# Reshaping: Making tables wider or longer\n\n## Reshape: `pivot_wider()` and `pivot_longer()`\n\n::: {.move-down-1em}\n![](../assets/data-wrangling-2/pivot.svg){fig-align=\"center\" width=\"50%\"}\n:::\n\n## Reshaping example: Making a wide summary table\n\n::: {.small-font}\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\npenguins |>\n  count(species, island)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n# A tibble: 5 × 3\n  species   island        n\n  <fct>     <fct>     <int>\n1 Adelie    Biscoe       44\n2 Adelie    Dream        56\n3 Adelie    Torgersen    52\n4 Chinstrap Dream        68\n5 Gentoo    Biscoe      124\n```\n\n\n:::\n:::\n\n\n\n:::\n\n\n## Reshaping example: Making a wide summary table\n\n::: {.small-font}\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\npenguins |>\n  count(species, island) |>\n  pivot_wider(names_from = \"island\", values_from = \"n\")\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n# A tibble: 3 × 4\n  species   Biscoe Dream Torgersen\n  <fct>      <int> <int>     <int>\n1 Adelie        44    56        52\n2 Chinstrap     NA    68        NA\n3 Gentoo       124    NA        NA\n```\n\n\n:::\n:::\n\n\n\n:::\n\n::: {.fragment}\nThe `NA`s indicate cases that don't exist\n:::\n\n## And going back to long format\n\n::: {.small-font}\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\npenguins_wide <- penguins |>\n  count(species, island) |>\n  pivot_wider(names_from = \"island\", values_from = \"n\")\n\npenguins_wide |> \n  pivot_longer(cols = -species, names_to = \"island\", values_to = \"n\")\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n# A tibble: 9 × 3\n  species   island        n\n  <fct>     <chr>     <int>\n1 Adelie    Biscoe       44\n2 Adelie    Dream        56\n3 Adelie    Torgersen    52\n4 Chinstrap Biscoe       NA\n5 Chinstrap Dream        68\n6 Chinstrap Torgersen    NA\n7 Gentoo    Biscoe      124\n8 Gentoo    Dream        NA\n9 Gentoo    Torgersen    NA\n```\n\n\n:::\n:::\n\n\n\n:::\n\n## And going back to long format\n\nColumn specifications work just like in `select()`:\n\n::: {.small-font}\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# specify columns by subtraction\npenguins_wide |> \n  pivot_longer(cols = -species, names_to = \"island\", values_to = \"n\")\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n# A tibble: 9 × 3\n  species   island        n\n  <fct>     <chr>     <int>\n1 Adelie    Biscoe       44\n2 Adelie    Dream        56\n3 Adelie    Torgersen    52\n4 Chinstrap Biscoe       NA\n5 Chinstrap Dream        68\n6 Chinstrap Torgersen    NA\n7 Gentoo    Biscoe      124\n8 Gentoo    Dream        NA\n9 Gentoo    Torgersen    NA\n```\n\n\n:::\n:::\n\n\n\n:::\n\n## And going back to long format\n\nColumn specifications work just like in `select()`:\n\n::: {.small-font}\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# specify columns by explicit listing\npenguins_wide |> \n  pivot_longer(cols = c(Biscoe, Dream, Torgersen), names_to = \"island\", values_to = \"n\")\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n# A tibble: 9 × 3\n  species   island        n\n  <fct>     <chr>     <int>\n1 Adelie    Biscoe       44\n2 Adelie    Dream        56\n3 Adelie    Torgersen    52\n4 Chinstrap Biscoe       NA\n5 Chinstrap Dream        68\n6 Chinstrap Torgersen    NA\n7 Gentoo    Biscoe      124\n8 Gentoo    Dream        NA\n9 Gentoo    Torgersen    NA\n```\n\n\n:::\n:::\n\n\n\n:::\n\n## And going back to long format\n\nColumn specifications work just like in `select()`:\n\n::: {.small-font}\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# specify columns by range\npenguins_wide |> \n  pivot_longer(cols = Biscoe:Torgersen, names_to = \"island\", values_to = \"n\")\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n# A tibble: 9 × 3\n  species   island        n\n  <fct>     <chr>     <int>\n1 Adelie    Biscoe       44\n2 Adelie    Dream        56\n3 Adelie    Torgersen    52\n4 Chinstrap Biscoe       NA\n5 Chinstrap Dream        68\n6 Chinstrap Torgersen    NA\n7 Gentoo    Biscoe      124\n8 Gentoo    Dream        NA\n9 Gentoo    Torgersen    NA\n```\n\n\n:::\n:::\n\n\n\n:::\n\n#\n\n<!-- Segment ends here -->\n\n# Combining datasets: joins\n\n## We use joins to add columns from one table into another\n\n::: {.move-down-2em}\n![](../assets/data-wrangling-2/join.svg){fig-align=\"center\" width=\"75%\"}\n:::\n\n\n## Example: band members and their instruments\n\n:::: {.columns}\n\n::: {.fragment .small-font .column width=\"50%\"}\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# some members of famous bands\nband_members\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n# A tibble: 3 × 2\n  name  band   \n  <chr> <chr>  \n1 Mick  Stones \n2 John  Beatles\n3 Paul  Beatles\n```\n\n\n:::\n:::\n\n\n\n:::\n\n::: {.fragment .small-font .column width=\"50%\"}\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# instruments played\nband_instruments\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n# A tibble: 3 × 2\n  name  plays \n  <chr> <chr> \n1 John  guitar\n2 Paul  bass  \n3 Keith guitar\n```\n\n\n:::\n:::\n\n\n\n:::\n\n::::\n\n<br>\n\n::: {.fragment .small-font}\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# add right table to left\nleft_join(band_members, band_instruments)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n# A tibble: 3 × 3\n  name  band    plays \n  <chr> <chr>   <chr> \n1 Mick  Stones  <NA>  \n2 John  Beatles guitar\n3 Paul  Beatles bass  \n```\n\n\n:::\n:::\n\n\n\n:::\n\n## Example: band members and their instruments\n\n:::: {.columns}\n\n::: {.small-font .column width=\"50%\"}\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# some members of famous bands\nband_members\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n# A tibble: 3 × 2\n  name  band   \n  <chr> <chr>  \n1 Mick  Stones \n2 John  Beatles\n3 Paul  Beatles\n```\n\n\n:::\n:::\n\n\n\n:::\n\n::: {.small-font .column width=\"50%\"}\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# instruments played\nband_instruments\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n# A tibble: 3 × 2\n  name  plays \n  <chr> <chr> \n1 John  guitar\n2 Paul  bass  \n3 Keith guitar\n```\n\n\n:::\n:::\n\n\n\n:::\n\n::::\n\n<br>\n\n::: {.small-font}\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# add left table to right\nright_join(band_members, band_instruments)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n# A tibble: 3 × 3\n  name  band    plays \n  <chr> <chr>   <chr> \n1 John  Beatles guitar\n2 Paul  Beatles bass  \n3 Keith <NA>    guitar\n```\n\n\n:::\n:::\n\n\n\n:::\n\n\n## Example: band members and their instruments\n\n:::: {.columns}\n\n::: {.small-font .column width=\"50%\"}\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# some members of famous bands\nband_members\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n# A tibble: 3 × 2\n  name  band   \n  <chr> <chr>  \n1 Mick  Stones \n2 John  Beatles\n3 Paul  Beatles\n```\n\n\n:::\n:::\n\n\n\n:::\n\n::: {.small-font .column width=\"50%\"}\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# instruments played\nband_instruments\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n# A tibble: 3 × 2\n  name  plays \n  <chr> <chr> \n1 John  guitar\n2 Paul  bass  \n3 Keith guitar\n```\n\n\n:::\n:::\n\n\n\n:::\n\n::::\n\n<br>\n\n::: {.small-font}\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# keep intersection only\ninner_join(band_members, band_instruments)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n# A tibble: 2 × 3\n  name  band    plays \n  <chr> <chr>   <chr> \n1 John  Beatles guitar\n2 Paul  Beatles bass  \n```\n\n\n:::\n:::\n\n\n\n:::\n\n## Example: band members and their instruments\n\n:::: {.columns}\n\n::: {.small-font .column width=\"50%\"}\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# some members of famous bands\nband_members\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n# A tibble: 3 × 2\n  name  band   \n  <chr> <chr>  \n1 Mick  Stones \n2 John  Beatles\n3 Paul  Beatles\n```\n\n\n:::\n:::\n\n\n\n:::\n\n::: {.small-font .column width=\"50%\"}\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# instruments played\nband_instruments\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n# A tibble: 3 × 2\n  name  plays \n  <chr> <chr> \n1 John  guitar\n2 Paul  bass  \n3 Keith guitar\n```\n\n\n:::\n:::\n\n\n\n:::\n\n::::\n\n<br>\n\n::: {.small-font}\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# merge all cases\nfull_join(band_members, band_instruments)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n# A tibble: 4 × 3\n  name  band    plays \n  <chr> <chr>   <chr> \n1 Mick  Stones  <NA>  \n2 John  Beatles guitar\n3 Paul  Beatles bass  \n4 Keith <NA>    guitar\n```\n\n\n:::\n:::\n\n\n\n:::\n\n\n## The different joins at a glance\n\n::: {.move-down-2em}\n![](../assets/data-wrangling-2/joins-venn.svg){fig-align=\"center\" width=\"65%\"}\n:::\n\n## The different joins at a glance\n\n![](../assets/data-wrangling-2/joins-venn.svg){.absolute top=\"0%\" left=\"65%\" width=\"35%\"}\n\n<br>\n\n:::: {.columns}\n\n::: {.column width=\"65%\"}\n**Tip:** In case of doubt, use `left_join()`\n\n::: {.fragment}\nIn my experience, `left_join()` is the right choice 70–80% of the time\n:::\n:::\n::::\n\n#\n\n<!-- Segment ends here -->\n\n## Further reading\n\n- R for Data Science: [Chapter 5.6: Grouped summaries with `summarise()`](https://r4ds.had.co.nz/transform.html?q=group_by#grouped-summaries-with-summarise)\n- R for Data Science: [Chapter 12.3: Pivoting](https://r4ds.had.co.nz/tidy-data.html?q=pivot#pivoting)\n- R for Data Science: [Chapter 13: Relational data](https://r4ds.had.co.nz/relational-data.html)\n- **dplyr** documentation: [Grouped data](https://dplyr.tidyverse.org/articles/grouping.html)\n- **tidyr** documentation: [Pivoting](https://tidyr.tidyverse.org/articles/pivot.html)\n- **dplyr** documentation: [Mutating joins](https://dplyr.tidyverse.org/articles/two-table.html#mutating-joins-1)\n",
    "supporting": [
      "data-wrangling-2_files"
    ],
    "filters": [
      "rmarkdown/pagebreak.lua"
    ],
    "includes": {
      "include-after-body": [
        "\n<script>\n  // htmlwidgets need to know to resize themselves when slides are shown/hidden.\n  // Fire the \"slideenter\" event (handled by htmlwidgets.js) when the current\n  // slide changes (different for each slide format).\n  (function () {\n    // dispatch for htmlwidgets\n    function fireSlideEnter() {\n      const event = window.document.createEvent(\"Event\");\n      event.initEvent(\"slideenter\", true, true);\n      window.document.dispatchEvent(event);\n    }\n\n    function fireSlideChanged(previousSlide, currentSlide) {\n      fireSlideEnter();\n\n      // dispatch for shiny\n      if (window.jQuery) {\n        if (previousSlide) {\n          window.jQuery(previousSlide).trigger(\"hidden\");\n        }\n        if (currentSlide) {\n          window.jQuery(currentSlide).trigger(\"shown\");\n        }\n      }\n    }\n\n    // hookup for slidy\n    if (window.w3c_slidy) {\n      window.w3c_slidy.add_observer(function (slide_num) {\n        // slide_num starts at position 1\n        fireSlideChanged(null, w3c_slidy.slides[slide_num - 1]);\n      });\n    }\n\n  })();\n</script>\n\n"
      ]
    },
    "engineDependencies": {},
    "preserve": {},
    "postProcess": true
  }
}