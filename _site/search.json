[
  {
    "objectID": "worksheets/working-with-models.html",
    "href": "worksheets/working-with-models.html",
    "title": "Working with models",
    "section": "",
    "text": "In this worksheet, we will discuss how to efficiently fit statistical models (such as linear regressions) to subsets of data and then use for plotting.\nFirst we need to load the required R packages. Please wait a moment until the live R session is fully set up and all packages are loaded.\n\n\n\n\n\n\n\n\nNext we set up the data. We will be working with data on individual penguins in Antarctica."
  },
  {
    "objectID": "worksheets/working-with-models.html#introduction",
    "href": "worksheets/working-with-models.html#introduction",
    "title": "Working with models",
    "section": "",
    "text": "In this worksheet, we will discuss how to efficiently fit statistical models (such as linear regressions) to subsets of data and then use for plotting.\nFirst we need to load the required R packages. Please wait a moment until the live R session is fully set up and all packages are loaded.\n\n\n\n\n\n\n\n\nNext we set up the data. We will be working with data on individual penguins in Antarctica."
  },
  {
    "objectID": "worksheets/working-with-models.html#inserting-data-into-text-output",
    "href": "worksheets/working-with-models.html#inserting-data-into-text-output",
    "title": "Working with models",
    "section": "Inserting data into text output",
    "text": "Inserting data into text output\nThere are several utility functions we need to understand before we can fit models, process them with broom, and ultimately plot. These include nesting and unnesting of data tables, using map() to apply a function to all the values in a data column, and using glue() to generate generate text. We have discussed nesting/unnesting and map() in the lecture on functional programming, and you may want to review this material if it is unclear to you. Here, we will discuss how to insert data into text output.\nThe glue() function allows you to place variables into a text string. This is frequently useful when we want to process multiple subsets of a larger data table and generate output for each subset.\nFor example:\n\n\n\n\n\n\n\n\nThis also works for vectorized input.\n\n\n\n\n\n\n\n\nTry this for yourself. Create variables holding your first and last name and then print out your complete name using glue().\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nHint\n\n\n\n\n\nfirst_name &lt;- \"Claus\"\nlast_name &lt;- \"Wilke\"\n\nglue(\"My name is ___.\")\n\n\n\n\n\n\n\n\n\n\n\nSolution\n\n\n\n\n\nfirst_name &lt;- \"Claus\"\nlast_name &lt;- \"Wilke\"\n\nglue(\"My name is {first_name} {last_name}.\")"
  },
  {
    "objectID": "worksheets/working-with-models.html#cleaning-up-models-with-broom",
    "href": "worksheets/working-with-models.html#cleaning-up-models-with-broom",
    "title": "Working with models",
    "section": "Cleaning up models with broom",
    "text": "Cleaning up models with broom\nR has powerful functions to fit statistical models to data, such as lm() to fit linear regression models. However, many of these functions have been written for interactive use and don’t work well in an automated data processing pipeline. For example, consider the following code to perform a linear regression analysis on the penguins dataset (ignoring for a moment that there are multiple species):\n\n\n\n\n\n\n\n\nThe fit object stores information about the linear regression, and summary(fit) shows us this information in a nice, human-readable form. But what if we want the relevant information in a data table? This is where the broom package comes in. The glance() function extracts model-level summary data from a fitted object, and the tidy() function extracts information about individual regression coefficients.\n\n\n\n\n\n\n\n\nTry this yourself. Fit a model of bill length versus bill depth (formula: bill_length_mm ~ bill_depth_mm), look at the model fit with summary(), and then look at the model fit via glance() and tidy().\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nHint 1\n\n\n\n\n\n# fit linear model\nfit &lt;- lm(bill_length_mm ~ bill_depth_mm, data = penguins)\n\n# inspect model fit with summary()\nsummary(___)\n\n# inspect model fit with glance() and tidy()\n\n\n\n\n\n\n\n\n\n\n\nHint 2\n\n\n\n\n\n# fit linear model\nfit &lt;- lm(bill_length_mm ~ bill_depth_mm, data = penguins)\n\n# inspect model fit with summary()\nsummary(fit)\n\n# inspect model fit with glance() and tidy()\nglance(___)\ntidy(___)\n\n\n\n\n\n\n\n\n\n\n\nSolution\n\n\n\n\n\n# fit linear model\nfit &lt;- lm(bill_length_mm ~ bill_depth_mm, data = penguins)\n\n# inspect model fit with summary()\nsummary(fit)\n\n# inspect model fit with glance() and tidy()\nglance(fit)\ntidy(fit)\n\n\n\n\nThe real power of glance() and tidy() becomes apparent in a more complex data analysis pipeline, when we fit a model to subsets of data via map() and then combine the results from the individual fits into one large table.\n\n\n\n\n\n\n\n\nNow run this code yourself one line at a time and make sure you understand at each step what is happening. Review the materials from the class on functional programming if anything is unclear. Note: The individual stages of the calculation are provided as hints, so you can just click through the hints one-by-one and run each piece.\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nHint 1\n\n\n\n\n\npenguins |&gt;\n  nest(data = -species) |&gt;     # nest the data table by species\n  mutate(\n    # use map() to fit a model to each nested data table\n    fit = map(data, ~lm(bill_length_mm ~ body_mass_g, data = .x))\n  )\n\n\n\n\n\n\n\n\n\n\n\nHint 2\n\n\n\n\n\npenguins |&gt;\n  nest(data = -species) |&gt;     # nest the data table by species\n  mutate(\n    # use map() to fit a model to each nested data table\n    fit = map(data, ~lm(bill_length_mm ~ body_mass_g, data = .x)),\n    # use map to apply glance() to each model fit\n    glance_out = map(fit, glance)\n  )\n\n\n\n\n\n\n\n\n\n\n\nHint 3\n\n\n\n\n\npenguins |&gt;\n  nest(data = -species) |&gt;     # nest the data table by species\n  mutate(\n    # use map() to fit a model to each nested data table\n    fit = map(data, ~lm(bill_length_mm ~ body_mass_g, data = .x)),\n    # use map to apply glance() to each model fit\n    glance_out = map(fit, glance)\n  ) |&gt;\n  unnest(cols = glance_out)     # unnest output from glance\n\n\n\n\n\n\n\n\n\n\n\nSolution\n\n\n\n\n\npenguins |&gt;\n  nest(data = -species) |&gt;     # nest the data table by species\n  mutate(\n    # use map() to fit a model to each nested data table\n    fit = map(data, ~lm(bill_length_mm ~ body_mass_g, data = .x)),\n    # use map to apply glance() to each model fit\n    glance_out = map(fit, glance)\n  ) |&gt;\n  unnest(cols = glance_out) |&gt; # unnest output from glance\n  select(-data, -fit)           # remove columns data and fit"
  },
  {
    "objectID": "worksheets/working-with-models.html#plotting-model-fits",
    "href": "worksheets/working-with-models.html#plotting-model-fits",
    "title": "Working with models",
    "section": "Plotting model fits",
    "text": "Plotting model fits\nFinally, we use the results from the model fit to plot a p value on each facet of a regression plot. The plot we’ll be working with is the following:\n\n\n\n\n\n\n\n\nWe can generate the fitted models as in the previous section. We will store them in the penguins_fits:\n\n\n\n\n\n\n\n\nNow, do the following. First, use mutate(), glue(), and select() to convert this table into one that has four columns, species, body_mass_g, bill_length_mm, and label. The species column holds the penguin species. The next two columns will hold the coordinates of the text label. For example, the values body_mass_g = 5500 and bill_length_mm = 32 will work. The last column will hold labels, generated with glue(), of the form “p = 7.48e-06”. You can use signif(p.value, 3) to round p values to three significant digits.\nOnce you have this table, use geom_text() to add the labels to the above plot.\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nHint 1\n\n\n\n\n\n# first do the data table manipulation\nlabels_data &lt;- penguins_fits |&gt;\n  mutate(\n    body_mass_g = ___,\n    bill_length_mm = ___,\n    label = ___\n  )\nlabels_data\n\n# then plot\n\n\n\n\n\n\n\n\n\n\n\nHint 2\n\n\n\n\n\n# first do the data table manipulation\nlabels_data &lt;- penguins_fits |&gt;\n  mutate(\n    body_mass_g = 5500,\n    bill_length_mm = 32,\n    label = glue(\"p = {signif(p.value, 3)}\")\n  ) |&gt;\n  select(___)\nlabels_data\n\n# then plot\n\n\n\n\n\n\n\n\n\n\n\nHint 3\n\n\n\n\n\n# first do the data table manipulation\nlabels_data &lt;- penguins_fits |&gt;\n  mutate(\n    body_mass_g = 5500,\n    bill_length_mm = 32,\n    label = glue(\"p = {signif(p.value, 3)}\")\n  ) |&gt;\n  select(species, body_mass_g, bill_length_mm, label)\nlabels_data\n  \n# then plot\n\n\n\n\n\n\n\n\n\n\n\nHint 4\n\n\n\n\n\n# first do the data table manipulation\nlabels_data &lt;- penguins_fits |&gt;\n  mutate(\n    body_mass_g = 5500,\n    bill_length_mm = 32,\n    label = glue(\"p = {signif(p.value, 3)}\")\n  ) |&gt;\n  select(species, body_mass_g, bill_length_mm, label)\n  \n# then plot\nggplot(penguins, aes(body_mass_g, bill_length_mm)) +\n  geom_point(na.rm = TRUE) +\n  geom_smooth(method = \"lm\", formula = y ~ x, na.rm = TRUE) +\n  facet_wrap(vars(species)) +\n  geom_text(___)\n\n\n\n\n\n\n\n\n\n\n\nHint 5\n\n\n\n\n\n# first do the data table manipulation\nlabels_data &lt;- penguins_fits |&gt;\n  mutate(\n    body_mass_g = 5500,\n    bill_length_mm = 32,\n    label = glue(\"p = {signif(p.value, 3)}\")\n  ) |&gt;\n  select(species, body_mass_g, bill_length_mm, label)\n  \n# then plot\nggplot(penguins, aes(body_mass_g, bill_length_mm)) +\n  geom_point(na.rm = TRUE) +\n  geom_smooth(method = \"lm\", formula = y ~ x, na.rm = TRUE) +\n  facet_wrap(vars(species)) +\n  geom_text(\n    data = labels_data,\n    aes(___)\n  )\n\n\n\n\n\n\n\n\n\n\n\nSolution\n\n\n\n\n\n# first do the data table manipulation\nlabels_data &lt;- penguins_fits |&gt;\n  mutate(\n    body_mass_g = 5500,\n    bill_length_mm = 32,\n    label = glue(\"p = {signif(p.value, 3)}\")\n  ) |&gt;\n  select(species, body_mass_g, bill_length_mm, label)\n  \n# then plot\nggplot(penguins, aes(body_mass_g, bill_length_mm)) +\n  geom_point(na.rm = TRUE) +\n  geom_smooth(method = \"lm\", formula = y ~ x, na.rm = TRUE) +\n  facet_wrap(vars(species)) +\n  geom_text(\n    data = labels_data,\n    aes(label = label)\n  )\n\n\n\n\nOnce you have successfully made the plot, you can try a few more things:\n\nPlace the labels for the different facets in different locations within each facet.\nUse hjust and vjust in geom_text() to fine-tune where labels are placed.\nMake labels that contain the R2 value in addition to the p value."
  },
  {
    "objectID": "worksheets/visualizing-trends.html",
    "href": "worksheets/visualizing-trends.html",
    "title": "Visualizing trends",
    "section": "",
    "text": "In this worksheet, we will discuss how to fit linear regressions (straight lines) and smooth curves to the observations in a dataset.\nFirst we need to load the required R packages. Please wait a moment until the live R session is fully set up and all packages are loaded.\n\n\n\n\n\n\n\n\nNext we set up the data.\n\n\n\n\n\n\n\n\nWe will be working with three datasets, blue_jays, biorxiv_growth, and cars93. The blue_jays dataset contains various measurements taken on blue jay birds.\n\n\n\n\n\n\n\n\nThe biorxiv_growth dataset contains the number of article submissions per month to the bioRxiv preprint server. Each row corresponds to one month, and the column date_dec shows the date in decimal form. (For example, Feb. 1 2014 is 2014.085, and March 1 2014 is 2014.162. This representation allows us to treat dates as numerical values.)\n\n\n\n\n\n\n\n\nThe cars93 dataset contains information about various passenger cars that were on the market in 1993."
  },
  {
    "objectID": "worksheets/visualizing-trends.html#introduction",
    "href": "worksheets/visualizing-trends.html#introduction",
    "title": "Visualizing trends",
    "section": "",
    "text": "In this worksheet, we will discuss how to fit linear regressions (straight lines) and smooth curves to the observations in a dataset.\nFirst we need to load the required R packages. Please wait a moment until the live R session is fully set up and all packages are loaded.\n\n\n\n\n\n\n\n\nNext we set up the data.\n\n\n\n\n\n\n\n\nWe will be working with three datasets, blue_jays, biorxiv_growth, and cars93. The blue_jays dataset contains various measurements taken on blue jay birds.\n\n\n\n\n\n\n\n\nThe biorxiv_growth dataset contains the number of article submissions per month to the bioRxiv preprint server. Each row corresponds to one month, and the column date_dec shows the date in decimal form. (For example, Feb. 1 2014 is 2014.085, and March 1 2014 is 2014.162. This representation allows us to treat dates as numerical values.)\n\n\n\n\n\n\n\n\nThe cars93 dataset contains information about various passenger cars that were on the market in 1993."
  },
  {
    "objectID": "worksheets/visualizing-trends.html#fitting-linear-trend-lines",
    "href": "worksheets/visualizing-trends.html#fitting-linear-trend-lines",
    "title": "Visualizing trends",
    "section": "Fitting linear trend lines",
    "text": "Fitting linear trend lines\nWe start with simple linear regression lines. These can be generated with geom_smooth(method = \"lm\"). Try this on the blue_jays dataset. Make a scatter plot of head length (head_length_mm) versus body mass (body_mass_g) and add a regression line.\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nHint\n\n\n\n\n\nggplot(blue_jays, aes(body_mass_g, head_length_mm)) +\n  geom_point() +\n  ___\n\n\n\n\n\n\n\n\n\n\n\nSolution\n\n\n\n\n\nggplot(blue_jays, aes(body_mass_g, head_length_mm)) +\n  geom_point() +\n  geom_smooth(method = \"lm\")\n\n\n\n\nYou can turn off the confidence band by setting se = FALSE. Try this out. And also change the color of the regression line to black.\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nHint\n\n\n\n\n\nggplot(blue_jays, aes(body_mass_g, head_length_mm)) +\n  geom_point() +\n  geom_smooth(\n    method = \"lm\",\n    se = ___,\n    color = ___\n  )\n\n\n\n\n\n\n\n\n\n\n\nSolution\n\n\n\n\n\nggplot(blue_jays, aes(body_mass_g, head_length_mm)) +\n  geom_point() +\n  geom_smooth(\n    method = \"lm\",\n    se = FALSE,\n    color = \"black\"\n  )\n\n\n\n\nNow color the points by the birds’ sex and generate two separate regression lines, one for each sex.\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nHint\n\n\n\n\n\nggplot(blue_jays, aes(body_mass_g, head_length_mm, color = ___)) +\n  geom_point() +\n  geom_smooth(___)\n\n\n\n\n\n\n\n\n\n\n\nSolution\n\n\n\n\n\nggplot(blue_jays, aes(body_mass_g, head_length_mm, color = sex)) +\n  geom_point() +\n  geom_smooth(method = \"lm\", se = FALSE)\n\n\n\n\nNow do the same but instead of coloring by sex you facet by sex.\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nHint\n\n\n\n\n\nggplot(blue_jays, aes(body_mass_g, head_length_mm)) +\n  geom_point() +\n  geom_smooth(method = \"lm\", se = FALSE) +\n  facet_wrap(___)\n\n\n\n\n\n\n\n\n\n\n\nSolution\n\n\n\n\n\nggplot(blue_jays, aes(body_mass_g, head_length_mm)) +\n  geom_point() +\n  geom_smooth(method = \"lm\", se = FALSE) +\n  facet_wrap(~sex)"
  },
  {
    "objectID": "worksheets/visualizing-trends.html#linear-trend-lines-in-log-transformed-data",
    "href": "worksheets/visualizing-trends.html#linear-trend-lines-in-log-transformed-data",
    "title": "Visualizing trends",
    "section": "Linear trend lines in log-transformed data",
    "text": "Linear trend lines in log-transformed data\nThe blue jay example displayed a nice linear relationship between the variable on the x axis (body mass) and the variable on the y axis (head length). Linear relationships arise in many contexts, but they are not the only type of relationship we encounter in practice. Another commonly encountered relationship is exponential growth, where some quantity increases at a constant rate over time.\nAs an example of exponential growth, we will examine the biorxiv_growth dataset. This dataset contains the number of monthly article submissions to the bioRxiv preprint server from November 2013 to March 2018. A preprint server is a website to which scientists submit their research articles before they are formally published. The bioRxiv server started operation in late 2013, and it experienced rapid growth in subsequent years.\nFirst, make a simple scatter plot of monthly submissions (column count) versus time (column date_dec).\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nHint\n\n\n\n\n\nggplot(biorxiv_growth, aes(date_dec, count)) +\n  ___\n\n\n\n\n\n\n\n\n\n\n\nSolution\n\n\n\n\n\nggplot(biorxiv_growth, aes(date_dec, count)) +\n  geom_point()\n\n\n\n\nNow add a linear regression line. You should see that this does not look correct at all for this dataset.\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nHint\n\n\n\n\n\nggplot(biorxiv_growth, aes(date_dec, count)) +\n  geom_point() +\n  ___\n\n\n\n\n\n\n\n\n\n\n\nSolution\n\n\n\n\n\nggplot(biorxiv_growth, aes(date_dec, count)) +\n  geom_point() +\n  geom_smooth(method = \"lm\")\n\n\n\n\nWe could try to fit an exponential curve to the data points, but such fits tend to be not very accurate. Instead, it is usually better to fit a straight line in log space. To do so, you need to plot the count data on a log scale. Remember that you can make an axis logarithmic by adding scale_x_log10() or scale_y_log10() to the plot, depending on which axis you want to transform.\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nHint\n\n\n\n\n\nggplot(biorxiv_growth, aes(date_dec, count)) +\n  geom_point() +\n  geom_smooth(method = \"lm\") +\n  ___\n\n\n\n\n\n\n\n\n\n\n\nSolution\n\n\n\n\n\nggplot(biorxiv_growth, aes(date_dec, count)) +\n  geom_point() +\n  geom_smooth(method = \"lm\") +\n  scale_y_log10()\n\n\n\n\nNow you can see how closely the points follow the exponential growth pattern. Exponential growth creates a strict linear relationship in log-space.\n\nCreating a legend for the regression line\nWhenever we are creating a plot with data points and a regression line, we may want to add a legend that annotates both of these visual elements, as demonstrated in the following plot.\n\n\n\n\n\n\n\n\nHow can we coax ggplot to produce such a legend? We are used to mapping a variable to color or fill and ggplot creates a legend for this mapping, but here the situation is different. We’re not mapping a particular variable in the data, we’re using two separate geoms.\nThe solution is that we need to set up a placeholder mapping, such as aes(color = \"original data\"). A mapping defined with aes() doesn’t always have to refer to a data column in the original data, it can also refer to a constant value provided with the mapping. So, if we give each geom its own mapping, with a different string (e.g., \"original data\" and \"regression line\"), we will get a legend for the aesthetic that we used in the mapping. Try this out with the color aesthetic.\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nHint\n\n\n\n\n\nggplot(biorxiv_growth, aes(date_dec, count)) +\n  geom_point(aes(color = ___)) +\n  geom_smooth(aes(color = ___), method = \"lm\") +\n  scale_y_log10()\n\n\n\n\n\n\n\n\n\n\n\nSolution\n\n\n\n\n\nggplot(biorxiv_growth, aes(date_dec, count)) +\n  geom_point(aes(color = \"original data\")) +\n  geom_smooth(aes(color = \"regression line\"), method = \"lm\") +\n  scale_y_log10()"
  },
  {
    "objectID": "worksheets/visualizing-trends.html#smoothing-lines",
    "href": "worksheets/visualizing-trends.html#smoothing-lines",
    "title": "Visualizing trends",
    "section": "Smoothing lines",
    "text": "Smoothing lines\nWhen you use geom_smooth() without any method argument, it will create a nonlinear smoothing line that provides a reasonable representation of the x-y relationship in the data. This is a good choice when a simple linear regression is not appropriate.\n[Technically, geom_smooth() fits a LOESS estimator (locally estimated scatterplot smoothing) when there are fewer than 1000 observations and a GAM estimator (generalized additive model) when there are more observations. The LOESS estimator tends to produce slightly better visual results but is slow for large datasets.]\nTo try this out, make a scatter plot of fuel tank capacity (Fuel.tank.capacity) versus car price (Price) in the cars93 dataset and add a smoothing line. Fuel tank capacity does not continue to increase the more expensive a car gets, therefore a linear regression is not appripriate in this context.\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nHint\n\n\n\n\n\nggplot(cars93, aes(Price, Fuel.tank.capacity)) +\n  ___ + \n  ___\n\n\n\n\n\n\n\n\n\n\n\nSolution\n\n\n\n\n\nggplot(cars93, aes(Price, Fuel.tank.capacity)) +\n  geom_point() + \n  geom_smooth()\n\n\n\n\nYou can adjust the smoothness of the fitted curve with the span argument. Try span values between 0.2 and 1.5.\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nHint\n\n\n\n\n\nggplot(cars93, aes(Price, Fuel.tank.capacity)) +\n  geom_point() + \n  geom_smooth(\n    span = ___\n  )\n\n\n\n\n\n\n\n\n\n\n\nSolution\n\n\n\n\n\nggplot(cars93, aes(Price, Fuel.tank.capacity)) +\n  geom_point() + \n  geom_smooth(\n    span = 0.2\n  )\n\nggplot(cars93, aes(Price, Fuel.tank.capacity)) +\n  geom_point() + \n  geom_smooth(\n    span = 1.5\n  )\n\n\n\n\nYou can also explicitly force a GAM estimator by setting method = \"gam\". However, in this case you need to also provide a formula that specifies the particular smoothing functions you want to use. For example, formula = y ~ s(x, k = 3) creates thin-plate regression splines with three knots. Try this out. Also try different values of k.\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nHint\n\n\n\n\n\nggplot(cars93, aes(Price, Fuel.tank.capacity)) +\n  geom_point() + \n  geom_smooth(\n    method = ___,\n    formula = ___\n  )\n\n\n\n\n\n\n\n\n\n\n\nSolution\n\n\n\n\n\nggplot(cars93, aes(Price, Fuel.tank.capacity)) +\n  geom_point() + \n  geom_smooth(\n    method = \"gam\",\n    formula = y ~ s(x, k = 3)\n  )\n\n\n\n\nThere are many available options for the formula describing the desired GAM estimator. These options are fully described in the mgcv reference documentation."
  },
  {
    "objectID": "worksheets/visualizing-distributions-2.html",
    "href": "worksheets/visualizing-distributions-2.html",
    "title": "Visualizing distributions 2",
    "section": "",
    "text": "In this worksheet, we will discuss how to display many distributions at once, using boxplots, violin plots, strip charts, sina plots, and ridgeline plots.\nFirst we need to load the required R packages. Please wait a moment until the live R session is fully set up and all packages are loaded.\n\n\n\n\n\n\n\n\nNext we set up the data.\n\n\n\n\n\n\n\n\nThe dataset we will be working with contains information about the mean temperature for every day of the year 2016 in Lincoln, NE:"
  },
  {
    "objectID": "worksheets/visualizing-distributions-2.html#introduction",
    "href": "worksheets/visualizing-distributions-2.html#introduction",
    "title": "Visualizing distributions 2",
    "section": "",
    "text": "In this worksheet, we will discuss how to display many distributions at once, using boxplots, violin plots, strip charts, sina plots, and ridgeline plots.\nFirst we need to load the required R packages. Please wait a moment until the live R session is fully set up and all packages are loaded.\n\n\n\n\n\n\n\n\nNext we set up the data.\n\n\n\n\n\n\n\n\nThe dataset we will be working with contains information about the mean temperature for every day of the year 2016 in Lincoln, NE:"
  },
  {
    "objectID": "worksheets/visualizing-distributions-2.html#boxplots-and-violins",
    "href": "worksheets/visualizing-distributions-2.html#boxplots-and-violins",
    "title": "Visualizing distributions 2",
    "section": "Boxplots and violins",
    "text": "Boxplots and violins\nWe start by drawing the distributions of mean temperatures for each month of the year (columns month and mean_temp in the dataset lincoln_temps), using boxplots. We can do this in ggplot with the geom geom_boxplot(). Try this for yourself.\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nHint\n\n\n\n\n\nggplot(lincoln_temps, aes(x = ___, y = ___)) +\n  geom_boxplot()\n\n\n\n\n\n\n\n\n\n\n\nSolution\n\n\n\n\n\nggplot(lincoln_temps, aes(x = month, y = mean_temp)) +\n  geom_boxplot()\n\n\n\n\nNext, do the same but now using violins (geom_violin()) instead of boxplots.\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nSolution\n\n\n\n\n\nggplot(lincoln_temps, aes(x = month, y = mean_temp)) +\n  geom_violin()\n\n\n\n\nCustomize the violins by trying some of the following:\n\nChange the fill or outline color.\nSwap the x and y mappings.\nChange the bandwidth (parameter bw) or kernel (parameter kernel). These parameters work just like in geom_density() as discussed in the previous worksheet.\nSet trim = FALSE. What does this do?"
  },
  {
    "objectID": "worksheets/visualizing-distributions-2.html#strip-charts-and-jittering",
    "href": "worksheets/visualizing-distributions-2.html#strip-charts-and-jittering",
    "title": "Visualizing distributions 2",
    "section": "Strip charts and jittering",
    "text": "Strip charts and jittering\nBoth boxplots and violin plots have the disadvantage that they don’t show the individual data points. We can show individual data points by using geom_point(). Such a plot is called a strip chart.\nMake a strip chart for the Lincoln temperature data set. Hint: Use size = 0.75 to reduce the size of the individual points.\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nHint\n\n\n\n\n\nggplot(lincoln_temps, aes(x = month, y = mean_temp)) +\n  geom_point(___)\n\n\n\n\n\n\n\n\n\n\n\nSolution\n\n\n\n\n\nggplot(lincoln_temps, aes(x = month, y = mean_temp)) +\n  geom_point(size = 0.75)\n\n\n\n\nFrequently when we make strip charts we want to apply some jitter to separate points away from each other. We can do so by setting the argument position = position_jitter() in geom_point().\nWhen using position_jitter() we will normally have to specify how much jittering we want in the horizontal and vertical direction, by setting the width and height arguments: position_jitter(width = 0.15, height = 0). Both width and height are specified in units representing the resolution of the data points, and indicate jittering in either direction. So, if data points are 1 unit apart, then width = 0.15 means the jittering covers 0.3 units or 30% of the spacing of the data points.\nTry this for yourself, by making a strip chart with jittering.\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nHint\n\n\n\n\n\nggplot(lincoln_temps, aes(x = month, y = mean_temp)) +\n  geom_point(\n    size = 0.75,\n    position = position_jitter(___)\n  )\n\n\n\n\n\n\n\n\n\n\n\nSolution\n\n\n\n\n\nggplot(lincoln_temps, aes(x = month, y = mean_temp)) +\n  geom_point(\n    size = 0.75,\n    position = position_jitter(width = 0.15, height = 0)\n  )\n\n\n\n\nThe function position_jitter() applies random jittering to the data points, which means the plot looks different each time you make it. (Verify this.) We can force a specific, fixed arrangement of jittering by setting the seed parameter. This parameter takes an arbitrary integer value, e.g. seed = 1234. Try this out.\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nHint\n\n\n\n\n\nggplot(lincoln_temps, aes(x = month, y = mean_temp)) +\n  geom_point(\n    size = 0.75,\n    position = position_jitter(width = 0.15, height = 0, seed = ___)\n  )\n\n\n\n\n\n\n\n\n\n\n\nSolution\n\n\n\n\n\nggplot(lincoln_temps, aes(x = month, y = mean_temp)) +\n  geom_point(\n    size = 0.75,\n    position = position_jitter(width = 0.15, height = 0, seed = 1234)\n  )\n\n\n\n\nFinally, try to figure out what the parameter height does, by setting it to a value other than 0, or by removing it entirely."
  },
  {
    "objectID": "worksheets/visualizing-distributions-2.html#sina-plots",
    "href": "worksheets/visualizing-distributions-2.html#sina-plots",
    "title": "Visualizing distributions 2",
    "section": "Sina plots",
    "text": "Sina plots\nWe can create a combination of strip charts and violin plots by making sina plots, which jitter points into the shape of a violin. We can do this with geom_sina() from the ggforce package. Try this out.\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nSolution\n\n\n\n\n\nggplot(lincoln_temps, aes(x = month, y = mean_temp)) +\n  geom_sina(size = 0.75)\n\n\n\n\nIt often makes sense to draw a sina plot on top of a violin plot. Try this out.\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nSolution\n\n\n\n\n\nggplot(lincoln_temps, aes(x = month, y = mean_temp)) +\n  geom_violin() +\n  geom_sina(size = 0.75)\n\n\n\n\nFinally, customize the violins by removing the outline and changing the fill color.\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nSolution\n\n\n\n\n\nggplot(lincoln_temps, aes(x = month, y = mean_temp)) +\n  geom_violin(color = NA, fill = \"cornsilk\") +  # `NA` means no color\n  geom_sina(size = 0.75)"
  },
  {
    "objectID": "worksheets/visualizing-distributions-2.html#ridgeline-plots",
    "href": "worksheets/visualizing-distributions-2.html#ridgeline-plots",
    "title": "Visualizing distributions 2",
    "section": "Ridgeline plots",
    "text": "Ridgeline plots\nAs the last alternative for visualizing multiple distributions at once, we will make ridgeline plots. These are multiple density plots staggered vertically. In ridgeline plots, we normally map the grouping variable (e.g. here, the month) to the y axis and the dependent variable (e.g. here, the mean temperature) to the x axis.\nWe can create ridgeline plots using geom_density_ridges() from the ggridges package. Try this out. Use the column month_long instead of month for the name of the month to get a slightly nicer plot. Hint: If you get an error about a missing y aesthetic you need to swap your x and y mappings.\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nSolution\n\n\n\n\n\nggplot(lincoln_temps, aes(x = mean_temp, y = month_long)) +\n  geom_density_ridges()\n\n\n\n\nWhat happens when you use month instead of month_long? Can you explain why?\nIt is often a good idea to prune the ridgelines once they are close to zero. You can do this with the parameter rel_min_height, which takes a numeric value relative to the maximum height of any ridgeline anywhere in the plot. So, rel_min_height = 0.01 would prune all lines that are less than 1% of the maximum height in the plot.\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nHint\n\n\n\n\n\nggplot(lincoln_temps, aes(x = mean_temp, y = month_long)) +\n  geom_density_ridges(rel_min_height = ___)\n\n\n\n\n\n\n\n\n\n\n\nSolution\n\n\n\n\n\nggplot(lincoln_temps, aes(x = mean_temp, y = month_long)) +\n  geom_density_ridges(rel_min_height = 0.01)"
  },
  {
    "objectID": "worksheets/visualizing-amounts.html",
    "href": "worksheets/visualizing-amounts.html",
    "title": "Visualizing amounts",
    "section": "",
    "text": "In this worksheet, we will discuss a core concept of ggplot, the mapping of data values onto aesthetics.\nFirst we need to load the required R packages. Please wait a moment until the live R session is fully set up and all packages are loaded.\n\n\n\n\n\n\n\n\nNext we set up the data.\n\n\n\n\n\n\n\n\nWe will be working with two datasets. First, box-office gross results for Dec. 22-24, 2017:\n\n\n\n\n\n\n\n\nSecond, data on individual penguins in Antarctica. Note that missing values have been removed:\npenguins2"
  },
  {
    "objectID": "worksheets/visualizing-amounts.html#introduction",
    "href": "worksheets/visualizing-amounts.html#introduction",
    "title": "Visualizing amounts",
    "section": "",
    "text": "In this worksheet, we will discuss a core concept of ggplot, the mapping of data values onto aesthetics.\nFirst we need to load the required R packages. Please wait a moment until the live R session is fully set up and all packages are loaded.\n\n\n\n\n\n\n\n\nNext we set up the data.\n\n\n\n\n\n\n\n\nWe will be working with two datasets. First, box-office gross results for Dec. 22-24, 2017:\n\n\n\n\n\n\n\n\nSecond, data on individual penguins in Antarctica. Note that missing values have been removed:\npenguins2"
  },
  {
    "objectID": "worksheets/visualizing-amounts.html#drawing-numerical-values-as-bars",
    "href": "worksheets/visualizing-amounts.html#drawing-numerical-values-as-bars",
    "title": "Visualizing amounts",
    "section": "Drawing numerical values as bars",
    "text": "Drawing numerical values as bars\nFor the boxoffice dataset, we want to draw the amount (Weekend gross, in million USD) for each movie as a bar. Somewhat confusingly, the ggplot geom that does this is called geom_col(). (There is also a geom_bar(), but it works differently. We’ll get to that later in this tutorial.) Make a bar plot of amount versus title. This means amount goes on the y axis and title on the x axis.\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nHint\n\n\n\n\n\nggplot(boxoffice, aes(x = ___, y = ___)) +\n  geom_col()\n\n\n\n\n\n\n\n\n\n\n\nSolution\n\n\n\n\n\nggplot(boxoffice, aes(x = title, y = amount)) +\n  geom_col()\n\n\n\n\nNow flip which column you map onto x and which onto y.\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nSolution\n\n\n\n\n\nggplot(boxoffice, aes(x = amount, y = title)) +\n  geom_col()\n\n\n\n\nThe x-axis label should specify that the amount is in million USD, and the y axis doesn’t need the word “title”. Use xlab() and ylab() to make these changes to the plot.\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nHint\n\n\n\n\n\nggplot(boxoffice, aes(x = amount, y = title)) +\n  geom_col() +\n  xlab(___) +\n  ylab(___)\n\n\n\n\n\n\n\n\n\n\n\nSolution\n\n\n\n\n\nggplot(boxoffice, aes(x = amount, y = title)) +\n  geom_col() +\n  xlab(\"weekend gross (million USD)\") +\n  ylab(NULL) # NULL means nothing, don't show a y label"
  },
  {
    "objectID": "worksheets/visualizing-amounts.html#getting-bars-into-the-right-order",
    "href": "worksheets/visualizing-amounts.html#getting-bars-into-the-right-order",
    "title": "Visualizing amounts",
    "section": "Getting bars into the right order",
    "text": "Getting bars into the right order\nWhenever we are making bar plots, we need to think about the correct order of the bars. By default, ggplot uses alphabetic ordering, but that is rarely appropriate. If there is no inherent ordering (such as, for example, a temporal progression), then it is usually best to order by the magnitude of the values, i.e., sort the bars by length.\nWe can do this with the fct_reorder() function, which takes two arguments: The categorical variable we want to re-order, and the values by which we want to order. Here, the categorical variable is the column title and the values are in the column amount. We can apply the fct_reorder() function right inside the aes() statement.\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nHint\n\n\n\n\n\nggplot(boxoffice, aes(x = amount, y = fct_reorder(___, ___))) +\n  geom_col() +\n  xlab(\"weekend gross (million USD)\") +\n  ylab(NULL)\n\n\n\n\n\n\n\n\n\n\n\nSolution\n\n\n\n\n\nggplot(boxoffice, aes(x = amount, y = fct_reorder(title, amount))) +\n  geom_col() +\n  xlab(\"weekend gross (million USD)\") +\n  ylab(NULL)\n\n\n\n\nTry the following additional experiments in the above code:\n\nWhat happens when you run the above code without the ylab(NULL) statement?\nCan you make the bars blue?\nCan you color the bars by amount or by title?"
  },
  {
    "objectID": "worksheets/visualizing-amounts.html#drawing-bars-based-on-a-count",
    "href": "worksheets/visualizing-amounts.html#drawing-bars-based-on-a-count",
    "title": "Visualizing amounts",
    "section": "Drawing bars based on a count",
    "text": "Drawing bars based on a count\nThe boxoffice dataset contains individual values, the dollar amounts, that we wanted to visualize with bars. Often, however, we encounter a slightly different scenario: A dataset doesn’t contain the numeric amounts directly, but instead contains observations we want to count. This is the case in the penguins2 dataset (see above).\nIt contains one row per penguin. If we want to make a bar plot of the number of penguins of each species (Adelie, Chinstrap, Gentoo), we cannot use geom_col() as before, because the dataset doesn’t have a column that contains these counts.\nThe solution here is to use geom_bar(), which performs a count and then displays the result of that count. Because geom_bar() counts automatically, you only have to provide it with a single aesthetic, which specifies the data column in which you are counting.\nTry this out. Make a bar plot of the number of penguins per species. Map the penguin species onto the x axis.\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nHint\n\n\n\n\n\nggplot(penguins2, aes(x = ___)) +\n  geom_bar()\n\n\n\n\n\n\n\n\n\n\n\nSolution\n\n\n\n\n\nggplot(penguins2, aes(x = species)) +\n  geom_bar()\n\n\n\n\nTry the following additional modifications in the above code:\n\nMap penguin species onto the y axis.\nRemove the axis label that says “species”.\nChange the order of the bars manually, using fct_relevel() (see slides)."
  },
  {
    "objectID": "worksheets/visualizing-amounts.html#counting-subgroups",
    "href": "worksheets/visualizing-amounts.html#counting-subgroups",
    "title": "Visualizing amounts",
    "section": "Counting subgroups",
    "text": "Counting subgroups\ngeom_bar() automatically counts how many cases there are in each unique combination of different categorical aesthetics. In the previous example, we had only one categorical aesthetic, species. But we can add a second one, for example sex. Then geom_bar() counts the number of cases in each unique combination of species and sex and draws separate bars for each. Try this out by mapping the sex column onto the fill aesthetic.\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nSolution\n\n\n\n\n\nggplot(penguins2, aes(x = species, fill = sex)) +\n  geom_bar()\n\n\n\n\nBy default, the bars for different fill values but identical x values will be drawn on top of one-another. But there are other possibilities, which are controled by the position argument to geom_bar(). For example, try to set the position to \"dodge\".\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nHint\n\n\n\n\n\nggplot(penguins2, aes(x = species, fill = sex)) +\n  geom_bar(position = ___)\n\n\n\n\n\n\n\n\n\n\n\nSolution\n\n\n\n\n\nggplot(penguins2, aes(x = species, fill = sex)) +\n  geom_bar(position = \"dodge\")\n\n\n\n\nIn the above code, also try positions \"stack\" and \"fill\"."
  },
  {
    "objectID": "worksheets/overplotting.html",
    "href": "worksheets/overplotting.html",
    "title": "Dealing with overplotting",
    "section": "",
    "text": "In this worksheet, we will discuss how to make 2D density plots and histograms, to effectively visualize scatter plots in which many points lie on top of one another.\nFirst we need to load the required R packages. Please wait a moment until the live R session is fully set up and all packages are loaded.\n\n\n\n\n\n\n\n\nNext we set up the data. We will be working with data on individual penguins in Antarctica.\npenguins"
  },
  {
    "objectID": "worksheets/overplotting.html#introduction",
    "href": "worksheets/overplotting.html#introduction",
    "title": "Dealing with overplotting",
    "section": "",
    "text": "In this worksheet, we will discuss how to make 2D density plots and histograms, to effectively visualize scatter plots in which many points lie on top of one another.\nFirst we need to load the required R packages. Please wait a moment until the live R session is fully set up and all packages are loaded.\n\n\n\n\n\n\n\n\nNext we set up the data. We will be working with data on individual penguins in Antarctica.\npenguins"
  },
  {
    "objectID": "worksheets/overplotting.html#d-density-plots",
    "href": "worksheets/overplotting.html#d-density-plots",
    "title": "Dealing with overplotting",
    "section": "2D density plots",
    "text": "2D density plots\n2D density plots are a replacement for and alternative to scatter plots. They visualize the density of points in the 2D plane, and they are particularly useful when the point density is very high, so that many points lie on top of one another. We will demonstrate 2D density plots for the penguins dataset, specifically for a scatter plot of bill length versus body mass.\n\n\n\n\n\n\n\n\nTo create a 2D density plot, we simply add geom_density_2d(). Try this out.\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nHint\n\n\n\n\n\nggplot(penguins, aes(body_mass_g, bill_length_mm)) +\n  ___ +\n  geom_point(na.rm = TRUE) +\n  theme_bw()\n\n\n\n\n\n\n\n\n\n\n\nSolution\n\n\n\n\n\nggplot(penguins, aes(body_mass_g, bill_length_mm)) +\n  geom_density_2d(na.rm = TRUE) + \n  geom_point(na.rm = TRUE) +\n  theme_bw()\n\n\n\n\nYou can change the number of contour lines shown by providing the bins argument to geom_density_2d(). For example, try bins = 5.\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nHint\n\n\n\n\n\nggplot(penguins, aes(body_mass_g, bill_length_mm)) +\n  geom_density_2d(na.rm = TRUE, bins = ___) + \n  geom_point(na.rm = TRUE) +\n  theme_bw()\n\n\n\n\n\n\n\n\n\n\n\nSolution\n\n\n\n\n\nggplot(penguins, aes(body_mass_g, bill_length_mm)) +\n  geom_density_2d(na.rm = TRUE, bins = 5) + \n  geom_point(na.rm = TRUE) +\n  theme_bw()\n\n\n\n\nAlso try other values for bins.\nThe plots we have made so far did not consider different penguin species, but we know from earlier worksheets that there are three penguins species with quite different values for body mass and bill length. Modify the above plot so that both points and contour lines are colored by species.\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nSolution\n\n\n\n\n\nggplot(penguins, aes(body_mass_g, bill_length_mm, color = species)) +\n  geom_density_2d(na.rm = TRUE, bins = 5) + \n  geom_point(na.rm = TRUE) +\n  theme_bw()\n\n\n\n\nAlso try faceting by species.\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nSolution\n\n\n\n\n\nggplot(penguins, aes(body_mass_g, bill_length_mm, color = species)) +\n  geom_density_2d(na.rm = TRUE, bins = 5) + \n  geom_point(na.rm = TRUE) +\n  theme_bw() +\n  facet_wrap(~species)\n\n\n\n\nFinally, you can use geom_density_2d_filled() to draw filled contour bands instead of contour lines. Try this out.\nHints:\n\nYou cannot map penguin species to color when drawing contour bands.\nIt helps to set alpha transparency for contour bands, e.g. alpha = 0.5.\nYou may want to make the point size smaller so you can see the contour bands underneath the points.\n\nNote: This example may not work in the live web environment.\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nHint\n\n\n\n\n\nggplot(penguins, aes(body_mass_g, bill_length_mm)) +\n  geom_density_2d_filled(___) + \n  geom_point(na.rm = TRUE, size = ___) +\n  theme_bw() +\n  facet_wrap(~species)\n\n\n\n\n\n\n\n\n\n\n\nSolution\n\n\n\n\n\nggplot(penguins, aes(body_mass_g, bill_length_mm)) +\n  geom_density_2d_filled(na.rm = TRUE, bins = 5, alpha = 0.5) + \n  geom_point(na.rm = TRUE, size = 0.2) +\n  theme_bw() +\n  facet_wrap(~species)"
  },
  {
    "objectID": "worksheets/overplotting.html#d-histograms",
    "href": "worksheets/overplotting.html#d-histograms",
    "title": "Dealing with overplotting",
    "section": "2D histograms",
    "text": "2D histograms\n2D histograms are very similar to 2D density plots. They are generated by simply subdividing the 2D plane into regularly shaped regions (rectangles or hexagons), counting how many data points fall into each region, and then coloring each region by its count.\nTo make rectangular 2D hexagons, you can use geom_bin2d(). Try this out.\nHint: Set bins = 5 to get a reasonable number of bins for this dataset.\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nHint\n\n\n\n\n\nggplot(penguins, aes(body_mass_g, bill_length_mm)) +\n  geom_bin2d(___) + \n  geom_point(na.rm = TRUE, size = 0.2) +\n  theme_bw() +\n  facet_wrap(~species)\n\n\n\n\n\n\n\n\n\n\n\nSolution\n\n\n\n\n\nggplot(penguins, aes(body_mass_g, bill_length_mm)) +\n  geom_bin2d(na.rm = TRUE, bins = 5) + \n  geom_point(na.rm = TRUE, size = 0.2) +\n  theme_bw() +\n  facet_wrap(~species)\n\n\n\n\nIt helps to make the bins partially transparent (i.e., set alpha = 0.5). Also use a different sequential color scale.\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nHint\n\n\n\n\n\nggplot(penguins, aes(body_mass_g, bill_length_mm)) +\n  geom_bin2d(na.rm = TRUE, bins = 5, ___) + \n  geom_point(na.rm = TRUE, size = 0.2) +\n  theme_bw() +\n  facet_wrap(~species) +\n  scale_fill____\n\n\n\n\n\n\n\n\n\n\n\nSolution\n\n\n\n\n\nggplot(penguins, aes(body_mass_g, bill_length_mm)) +\n  geom_bin2d(na.rm = TRUE, bins = 5, alpha = 0.5) + \n  geom_point(na.rm = TRUE, size = 0.2) +\n  theme_bw() +\n  facet_wrap(~species) +\n  scale_fill_viridis_c()\n\n\n\n\nYou can control bins in a more fine-grained manner by setting the binwidth argument. It takes a vector of two numbers, where the first is the width of the bins (in data units) and the second is the height (also in data units). Make bins that are 10000 units wide and 5 units tall.\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nHint\n\n\n\n\n\nggplot(penguins, aes(body_mass_g, bill_length_mm)) +\n  geom_bin2d(\n    na.rm = TRUE,\n    binwidth = ___,\n    alpha = 0.5\n  ) + \n  geom_point(na.rm = TRUE, size = 0.2) +\n  theme_bw() +\n  facet_wrap(~species) +\n  scale_fill_viridis_c()\n\n\n\n\n\n\n\n\n\n\n\nSolution\n\n\n\n\n\nggplot(penguins, aes(body_mass_g, bill_length_mm)) +\n  geom_bin2d(\n    na.rm = TRUE,\n    binwidth = c(10000, 5),\n    alpha = 0.5\n  ) + \n  geom_point(na.rm = TRUE, size = 0.2) +\n  theme_bw() +\n  facet_wrap(~species) +\n  scale_fill_viridis_c()\n\n\n\n\nAlso try making bins that are 30 units tall and 2500 units wide.\nInstead of rectangular bins, you can also make hexbins, with geom_hex(). It mostly works the same as geom_bin2d(). Try it out.\nHint: You will need to set the argument bins to an appropriate value for the hexbins to look good.\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nHint\n\n\n\n\n\nggplot(penguins, aes(body_mass_g, bill_length_mm)) +\n  geom_hex(\n    ___\n  ) + \n  geom_point(na.rm = TRUE, size = 0.2) +\n  theme_bw() +\n  facet_wrap(~species) +\n  scale_fill_viridis_c()\n\n\n\n\n\n\n\n\n\n\n\nSolution\n\n\n\n\n\nggplot(penguins, aes(body_mass_g, bill_length_mm)) +\n  geom_hex(\n    na.rm = TRUE,\n    bins = 5,\n    alpha = 0.5\n  ) + \n  geom_point(na.rm = TRUE, size = 0.2) +\n  theme_bw() +\n  facet_wrap(~species) +\n  scale_fill_viridis_c()\n\n\n\n\nJust as was the case with geom_bin2d(), you can provide an argument binwidth consisting of two values, one controling the width and the other the height. Try this out.\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nHint\n\n\n\n\n\nggplot(penguins, aes(body_mass_g, bill_length_mm)) +\n  geom_hex(\n    na.rm = TRUE,\n    binwidth = ___\n    alpha = 0.5\n  ) + \n  geom_point(na.rm = TRUE, size = 0.2) +\n  theme_bw() +\n  facet_wrap(~species) +\n  scale_fill_viridis_c()\n\n\n\n\n\n\n\n\n\n\n\nSolution\n\n\n\n\n\nggplot(penguins, aes(body_mass_g, bill_length_mm)) +\n  geom_hex(\n    na.rm = TRUE,\n    binwidth = c(1000, 5),\n    alpha = 0.5\n  ) + \n  geom_point(na.rm = TRUE, size = 0.2) +\n  theme_bw() +\n  facet_wrap(~species) +\n  scale_fill_viridis_c()"
  },
  {
    "objectID": "worksheets/know-your-data-1.html",
    "href": "worksheets/know-your-data-1.html",
    "title": "Getting to know your data 1",
    "section": "",
    "text": "In this worksheet, we will discuss how to perform basic inspection of a dataset and simple data-cleaning tasks.\nFirst we need to load the required R packages. Please wait a moment until the live R session is fully set up and all packages are loaded.\n\n\n\n\n\n\n\n\nNext we set up the data.\n\n\n\n\n\n\n\n\nWe will be working with the dataset NCbirths, which contains data about 1450 births in the state of North Carolina in 2001.\nNCbirths"
  },
  {
    "objectID": "worksheets/know-your-data-1.html#introduction",
    "href": "worksheets/know-your-data-1.html#introduction",
    "title": "Getting to know your data 1",
    "section": "",
    "text": "In this worksheet, we will discuss how to perform basic inspection of a dataset and simple data-cleaning tasks.\nFirst we need to load the required R packages. Please wait a moment until the live R session is fully set up and all packages are loaded.\n\n\n\n\n\n\n\n\nNext we set up the data.\n\n\n\n\n\n\n\n\nWe will be working with the dataset NCbirths, which contains data about 1450 births in the state of North Carolina in 2001.\nNCbirths"
  },
  {
    "objectID": "worksheets/know-your-data-1.html#basic-inspection-of-the-data",
    "href": "worksheets/know-your-data-1.html#basic-inspection-of-the-data",
    "title": "Getting to know your data 1",
    "section": "Basic inspection of the data",
    "text": "Basic inspection of the data\nWhen first working with a new dataset, you should always start by just looking at the data. The simplest way to do this is to just enter the name of the dataset in the R command line and run, which causes the data to be printed. You can also use head(...) to only see the first six rows or glimpse(...) to get a list of all columns with their type and first few values.\nTry this yourself. Write code that displays the entire NCbirths dataset, the first six rows, or a list of all columns.\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nHint\n\n\n\n\n\nNCbirths\n\n\n\n\n\n\n\n\n\n\n\nSolution\n\n\n\n\n\nhead(NCbirths)\nglimpse(NCbirths)\nNCbirths\n\n\n\n\nIt is often useful to get a list of all names of the columns in a data frame. You can obtain this with names(...). Try this yourself.\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nSolution\n\n\n\n\n\nnames(NCbirths)\n\n\n\n\nTo inspect individual columns, you can extract them either with pull() like so: data |&gt; pull(column) or with the $ operator like so: data$column. The second option is shorter but the first option integrates better into longer analysis pipelines. Try both options on the NCbirths dataset, for example for the Smoke column.\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nSolution\n\n\n\n\n\n# option using pull()\nNCbirths |&gt;\n  pull(Smoke)\n\n# option using $ operator\nNCbirths$Smoke\n\n\n\n\nFinally, to see all distinct values in a column, you can apply the function unique() to it. Try this with the Smoke column.\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nHint\n\n\n\n\n\nNCbirths |&gt;\n  pull(Smoke) |&gt;\n  ___\n\n\n\n\n\n\n\n\n\n\n\nSolution\n\n\n\n\n\nNCbirths |&gt;\n  pull(Smoke) |&gt;\n  unique()"
  },
  {
    "objectID": "worksheets/know-your-data-1.html#recoding-of-data-values",
    "href": "worksheets/know-your-data-1.html#recoding-of-data-values",
    "title": "Getting to know your data 1",
    "section": "Recoding of data values",
    "text": "Recoding of data values\nWe frequently want to recode data values such that they are more humanly readable. For example, we might want to write smoker/non-smoker instead of 1/0. We can do this with if_else(), which takes three arguments: a logical condition, the data value if the logical condition is true, and the data value if the logical condition is false. Try this out on the Smoke column, creating a new column Smoke_recoded that is human-readable.\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nHint\n\n\n\n\n\nNCbirths |&gt;\n  mutate(\n    Smoke_recoded = if_else(___, ___, ___)\n  ) |&gt;\n  select(Smoke, Smoke_recoded) |&gt;\n  unique()\n\n\n\n\n\n\n\n\n\n\n\nSolution\n\n\n\n\n\nNCbirths |&gt;\n  mutate(\n    Smoke_recoded = if_else(Smoke == 0, \"non-smoker\", \"smoker\")\n  ) |&gt;\n  select(Smoke, Smoke_recoded) |&gt;\n  unique()\n\n\n\n\nWhen you want to recode a variable with more than two categories, you could nest if_else() commands, but usually it is simpler to use case_when(). With case_when(), you provide a list of conditions and corresponding data values as formulas of the form condition ~ data value. For example, the recoding exercise for the Smoke column could be written with case_when() as follows:\n\n\n\n\n\n\n\n\nWhen using case_when(), it is usually a good idea to provide an explicit fallback that is used when none of the earlier conditions match. The logical conditions are evaluated in order, so you want to list the most specific conditions first and the least specific conditions last. The fallback condition is simply TRUE. It applies always if no previous condition applied.\nNow use case_when() to recode the Plural column into singlet/twins/triplets.\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nHint\n\n\n\n\n\nNCbirths |&gt;\n  mutate(\n    Plural_recoded = case_when(\n      Plural == 1 ~ \"singlet\",\n      ___,\n      ___,\n      ___\n    )\n  ) |&gt;\n  select(Plural, Plural_recoded) |&gt;\n  unique()\n\n\n\n\n\n\n\n\n\n\n\nSolution\n\n\n\n\n\nNCbirths |&gt;\n  mutate(\n    Plural_recoded = case_when(\n      Plural == 1 ~ \"singlet\",\n      Plural == 2 ~ \"twins\",\n      Plural == 3 ~ \"triplets\",\n      TRUE ~ NA\n    )\n  ) |&gt;\n  select(Plural, Plural_recoded) |&gt;\n  unique()"
  },
  {
    "objectID": "worksheets/know-your-data-1.html#summaries-of-data-columns",
    "href": "worksheets/know-your-data-1.html#summaries-of-data-columns",
    "title": "Getting to know your data 1",
    "section": "Summaries of data columns",
    "text": "Summaries of data columns\nWhen exploring a new dataset, it is usually a good idea to look at summaries of the data values in each column, to get a quick sense of the range of data values, to see whether there are any unexpected outliers, etc. There are two useful functions for this purpose, summary() for numerical data and table() for categorical data.\nFirst try this for numerical data. Perform summaries for the data columns MomAge, Weeks, and BirthWeightGm.\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nHint\n\n\n\n\n\nsummary(NCbirths$MomAge)\n___\n___\n\n\n\n\n\n\n\n\n\n\n\nSolution\n\n\n\n\n\nsummary(NCbirths$MomAge)\nsummary(NCbirths$Weeks)\nsummary(NCbirths$BirthWeightGm)\n\n\n\n\nNow try this for categorical data. Perform summaries for the data columns Plural, Smoke, and RaceMom.\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nHint\n\n\n\n\n\ntable(NCbirths$Plural)\n___\n___\n\n\n\n\n\n\n\n\n\n\n\nSolution\n\n\n\n\n\ntable(NCbirths$Plural)\ntable(NCbirths$Smoke)\ntable(NCbirths$RaceMom)\n\n\n\n\nDo you understand what the output means? If not, look it up in the R documentation for the table() function.\nOne quirk of the table() function is that by default it omits any NA values. However, it is important to know whether there are any NA values in a data column or not. We can get table() to tabulate NAs as well by providing it with the argument useNA = \"ifany\". Repeat the previous exercise with this modification and see which of the three columns Plural, Smoke, or RaceMom contain any NAs.\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nHint\n\n\n\n\n\ntable(NCbirths$Plural, useNA = \"ifany\")\n___\n___\n\n\n\n\n\n\n\n\n\n\n\nSolution\n\n\n\n\n\ntable(NCbirths$Plural, useNA = \"ifany\")\ntable(NCbirths$Smoke, useNA = \"ifany\")\ntable(NCbirths$RaceMom, useNA = \"ifany\")"
  },
  {
    "objectID": "worksheets/intro-to-Quarto.html",
    "href": "worksheets/intro-to-Quarto.html",
    "title": "Introduction to Quarto",
    "section": "",
    "text": "All assignments in this class will be done via Quarto documents. Quarto documents are documents that combine text, code, and output, including figures. They are a great way to produce self-contained and documented statistical analyses. Quarto has support for a variety of popular programming languages for data analysis, including R and python.\nTo get familiar with Quarto, please download this Quarto template worksheet, complete it, and render into a PDF. You will use this same workflow in all homeworks and projects throughout the semester."
  },
  {
    "objectID": "worksheets/hierarchical-clustering.html",
    "href": "worksheets/hierarchical-clustering.html",
    "title": "Hierarchical clustering",
    "section": "",
    "text": "In this worksheet, we will discuss how to perform hierarchical clustering.\nFirst we need to load the required R packages. Please wait a moment until the live R session is fully set up and all packages are loaded.\n\n\n\n\n\n\n\n\nNext we set up the data. It’s a downsampled and slightly modified version of the penguins dataset from the package palmerpenguins."
  },
  {
    "objectID": "worksheets/hierarchical-clustering.html#introduction",
    "href": "worksheets/hierarchical-clustering.html#introduction",
    "title": "Hierarchical clustering",
    "section": "",
    "text": "In this worksheet, we will discuss how to perform hierarchical clustering.\nFirst we need to load the required R packages. Please wait a moment until the live R session is fully set up and all packages are loaded.\n\n\n\n\n\n\n\n\nNext we set up the data. It’s a downsampled and slightly modified version of the penguins dataset from the package palmerpenguins."
  },
  {
    "objectID": "worksheets/hierarchical-clustering.html#calculating-a-distance-matrix",
    "href": "worksheets/hierarchical-clustering.html#calculating-a-distance-matrix",
    "title": "Hierarchical clustering",
    "section": "Calculating a distance matrix",
    "text": "Calculating a distance matrix\nMany hierarchical clustering algorithms start with calculating a distance matrix. This is done with the built-in R function dist(). Before calculating distances, though, you should first scale the data to zero mean and unit variance, just like we have done previously for PCA and other multivariate techniques. As a reminder, you scale a dataset with the function scale().\nTry this out on the penguins_sampled dataset. Scale the data and then calculate the distance matrix.\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nHint\n\n\n\n\n\npenguins_sampled |&gt;\n  scale() |&gt;\n  ___\n\n\n\n\n\n\n\n\n\n\n\nSolution\n\n\n\n\n\npenguins_sampled |&gt;\n  scale() |&gt;\n  dist()\n\n\n\n\nBy default, the dist() function calculates Euclidean distances. But other options exist, which can be selected via the method argument to the dist() function. Commonly used options include \"maximum\", \"manhattan\", or \"minkowski\". Try this out.\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nHint\n\n\n\n\n\npenguins_sampled |&gt;\n  scale() |&gt;\n  dist(method = ___)\n\n\n\n\n\n\n\n\n\n\n\nSolution\n\n\n\n\n\npenguins_sampled |&gt;\n  scale() |&gt;\n  dist(method = \"maximum\")\n\n# also try \"manhattan\" and \"minkowski\"\n\n\n\n\nWhen using the Minkowski distance, you should also set the parameter p. The Minkowski distance is a generalization of both the Euclidean and the Manhattan distance, and the parameter p interpolates between these distance types.\nVerify that the Minkowski distance is identical to the Euclidean distance for p = 2 and identical to the Manhattan distance for p = 1. The simplest way to do this is to calculate the two distance matrices and then subtract them from each other and check that the values are 0.\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nHint\n\n\n\n\n\n# calculate distances\nd_eucl &lt;- penguins_sampled |&gt;\n  scale() |&gt;\n  dist(method = \"euclidean\")\n\nd_mink &lt;- penguins_sampled |&gt;\n  scale() |&gt;\n  dist(method = \"minkowski\", p = 2)\n\n# then subtract to check for equality\n\n\n\n\n\n\n\n\n\n\n\nSolution\n\n\n\n\n\n# calculate distances\nd_eucl &lt;- penguins_sampled |&gt;\n  scale() |&gt;\n  dist(method = \"euclidean\")\n\nd_mink &lt;- penguins_sampled |&gt;\n  scale() |&gt;\n  dist(method = \"minkowski\", p = 2)\n\n# then subtract to check for equality\nd_eucl - d_mink"
  },
  {
    "objectID": "worksheets/hierarchical-clustering.html#performing-hierarchical-clustering",
    "href": "worksheets/hierarchical-clustering.html#performing-hierarchical-clustering",
    "title": "Hierarchical clustering",
    "section": "Performing hierarchical clustering",
    "text": "Performing hierarchical clustering\nTo perform hierarchical clustering, you simply run the function hclust() on a distance matrix previously computed with dist(). You can then visualize the result with ggdendrogram() from the ggdendro package. Try this out. (Hint: Write one consecutive sequence of pipe commands.)\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nHint\n\n\n\n\n\npenguins_sampled |&gt;\n  scale() |&gt;\n  dist() |&gt;\n  hclust() |&gt;\n  ___\n\n\n\n\n\n\n\n\n\n\n\nSolution\n\n\n\n\n\npenguins_sampled |&gt;\n  scale() |&gt;\n  dist() |&gt;\n  hclust() |&gt;\n  ggdendrogram()\n\n\n\n\nIn the ggdendrogram() function, you can set rotate = TRUE to arrange the leaves of the dendrogram vertically instead of horizontally. Try this out.\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nHint\n\n\n\n\n\npenguins_sampled |&gt;\n  scale() |&gt;\n  dist() |&gt;\n  hclust() |&gt;\n  ggdendrogram(rotate = ___)\n\n\n\n\n\n\n\n\n\n\n\nSolution\n\n\n\n\n\npenguins_sampled |&gt;\n  scale() |&gt;\n  dist() |&gt;\n  hclust() |&gt;\n  ggdendrogram(rotate = TRUE)\n\n\n\n\nYou can run different clustering algorithms by changing the method argument of hclust(). method = \"average\" uses UPGMA, method = \"ward.D2\" uses Ward’s minimum variance method, and method = \"complete\" uses the complete linkage method. Modify the example above to try these different methods."
  },
  {
    "objectID": "worksheets/hierarchical-clustering.html#assigning-observations-to-clusters",
    "href": "worksheets/hierarchical-clustering.html#assigning-observations-to-clusters",
    "title": "Hierarchical clustering",
    "section": "Assigning observations to clusters",
    "text": "Assigning observations to clusters\nIn hierarchical clustering, if we want to assign each observation to a cluster, we need to cut the dendrogram into disjoint parts. There are two ways in which we can do this. First, we can cut such that we obtain a specific number of clusters. Second, we can cut at a set height and see how many clusters we obtain.\nWe can cut a dendrogram with the function cutree(), which takes as input the output from hclust() and either an argument k to determine how many clusters we want or an argument h to determine at which height we want to cut the tree. Let’s try the first approach first. Cut the penguin dendrogram such that there are three clusters. Then check whether the three clusters correspond to the three species.\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nHint\n\n\n\n\n\npenguins_sampled |&gt;\n  scale() |&gt;\n  dist() |&gt;\n  hclust() |&gt;\n  cutree(k = ___)\n\n\n\n\n\n\n\n\n\n\n\nSolution\n\n\n\n\n\npenguins_sampled |&gt;\n  scale() |&gt;\n  dist() |&gt;\n  hclust() |&gt;\n  cutree(k = 3)\n\n\n\n\nNext, by trial-and-error, find a cut height at which you obtain exactly three clusters.\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nHint\n\n\n\n\n\npenguins_sampled |&gt;\n  scale() |&gt;\n  dist() |&gt;\n  hclust() |&gt;\n  cutree(h = ___)\n\n\n\n\n\n\n\n\n\n\n\nSolution\n\n\n\n\n\npenguins_sampled |&gt;\n  scale() |&gt;\n  dist() |&gt;\n  hclust() |&gt;\n  cutree(h = 2.9)\n\n\n\n\nCould you have used the function ggdendrogram() to arrive at a good guess for the value of h?\nFinally, try different distance methods and see whether the clusters continue to match species identity when you cut into k = 3 clusters. Can you find a distance metric for which the clusters do not match the species?\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nSolution\n\n\n\n\n\n# for Manhattan distance, Adelie and Chinstrap are mixed together\npenguins_sampled |&gt;\n  scale() |&gt;\n  dist(method = \"manhattan\") |&gt;\n  hclust() |&gt;\n  cutree(k = 3)"
  },
  {
    "objectID": "worksheets/geospatial-data.html",
    "href": "worksheets/geospatial-data.html",
    "title": "Visualizing geospatial data",
    "section": "",
    "text": "In this worksheet, we will discuss we will discuss how to visualize geospatial data.\nFirst we need to load the required R packages. Please wait a moment until the live R session is fully set up and all packages are loaded.\n\n\n\n\n\n\n\n\nNext we set up the data.\n\n\n\n\n\n\n\n\nWe will be working with the datasets texas_income and texas_counties. The dataset texas_income contains the median income of all counties in Texas, as well as the shape information about each county (stored in the geometry column). The column FIPS contains a five-digit id code that uniquely represents each county.\n\n\n\n\n\n\n\n\nThe dataset texas_counties holds information about how many people lived in Texas counties in 2010, as well as the size of each county (column area). The column popratio is the ratio of the number of inhabitants to the median across all counties. The column FIPS contains a five-digit id code that uniquely represents each county."
  },
  {
    "objectID": "worksheets/geospatial-data.html#introduction",
    "href": "worksheets/geospatial-data.html#introduction",
    "title": "Visualizing geospatial data",
    "section": "",
    "text": "In this worksheet, we will discuss we will discuss how to visualize geospatial data.\nFirst we need to load the required R packages. Please wait a moment until the live R session is fully set up and all packages are loaded.\n\n\n\n\n\n\n\n\nNext we set up the data.\n\n\n\n\n\n\n\n\nWe will be working with the datasets texas_income and texas_counties. The dataset texas_income contains the median income of all counties in Texas, as well as the shape information about each county (stored in the geometry column). The column FIPS contains a five-digit id code that uniquely represents each county.\n\n\n\n\n\n\n\n\nThe dataset texas_counties holds information about how many people lived in Texas counties in 2010, as well as the size of each county (column area). The column popratio is the ratio of the number of inhabitants to the median across all counties. The column FIPS contains a five-digit id code that uniquely represents each county."
  },
  {
    "objectID": "worksheets/geospatial-data.html#wrangling-data",
    "href": "worksheets/geospatial-data.html#wrangling-data",
    "title": "Visualizing geospatial data",
    "section": "Wrangling data",
    "text": "Wrangling data\nBefore we perform any visualizations, we will first gain some experience manipulating data tables containing geospatial information. This does not require us to learn any new concepts, as data tables with geospatial information (i.e., containing a geometry column) can be manipulated just like those without.\nLet’s try this out. Take the texas_income table and filter out the rows for the counties “Travis” and “Harris”.\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nHint\n\n\n\n\n\ntexas_income |&gt;\n  filter(___)\n\n\n\n\n\n\n\n\n\n\n\nSolution\n\n\n\n\n\ntexas_income |&gt;\n  filter(county %in% c(\"Travis\", \"Harris\"))\n\n\n\n\nNow join the texas_income table with the texas_counties table and then find the five largest counties.\nHint: Use the function left_join() to join the tables, and use the functions arrange() and slice() to find the five largest counties.\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nHint\n\n\n\n\n\ntexas_income |&gt;\n  left_join(___) |&gt;\n  ___\n\n\n\n\n\n\n\n\n\n\n\nHint\n\n\n\n\n\ntexas_income |&gt;\n  left_join(texas_counties) |&gt;\n  arrange(___) |&gt;\n  slice(___)\n\n\n\n\n\n\n\n\n\n\n\nSolution\n\n\n\n\n\ntexas_income |&gt;\n  left_join(texas_counties) |&gt;\n  arrange(desc(area)) |&gt;\n  slice(1:5)"
  },
  {
    "objectID": "worksheets/geospatial-data.html#visualizing-simple-features",
    "href": "worksheets/geospatial-data.html#visualizing-simple-features",
    "title": "Visualizing geospatial data",
    "section": "Visualizing simple features",
    "text": "Visualizing simple features\nWe can visualize datasets containing simple features with the function geom_sf(). This geom is very simple to use, as it automatically finds the geometry column and draws it in the appropriate coordinate system. All we need to think about is whether we want to apply a color mapping, e.g. to make a choropleth.\nTry this out by making a plot of the counties in Texas, without applying any kind of aesthetic mapping. Remember, the dataset texas_income contains the required geometry information.\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nHint\n\n\n\n\n\nggplot(texas_income) +\n  ___\n\n\n\n\n\n\n\n\n\n\n\nSolution\n\n\n\n\n\nggplot(texas_income) +\n  geom_sf()\n\n\n\n\nNow map the data column median_income to the fill color. Also choose an appropriate color scale from the colorspace package.\nHint: You can see the available color palettes here.\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nHint\n\n\n\n\n\nggplot(texas_income) +\n  geom_sf(aes(fill = ___)) +\n  scale_fill_continuous_sequential(palette = ___)\n\n\n\n\n\n\n\n\n\n\n\nSolution\n\n\n\n\n\nggplot(texas_income) +\n  geom_sf(aes(fill = median_income)) +\n  scale_fill_continuous_sequential(palette = \"Lajolla\")\n\n\n\n\nFinally, make a plot that highlights the 10 smallest counties in Texas. This will require you to join texas_income and texas_counties first.\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nHint\n\n\n\n\n\ntexas_income |&gt;\n  left_join(texas_counties) |&gt;\n  mutate(\n    smallest = rank(area) &lt;= 5\n  )\n\n\n\n\n\n\n\n\n\n\n\nHint\n\n\n\n\n\ntexas_income |&gt;\n  left_join(texas_counties) |&gt;\n  mutate(\n    smallest = rank(area) &lt;= 5\n  ) |&gt;\n  ggplot() +\n  geom_sf(aes(fill = ___))\n\n\n\n\n\n\n\n\n\n\n\nHint\n\n\n\n\n\ntexas_income |&gt;\n  left_join(texas_counties) |&gt;\n  mutate(\n    smallest = rank(area) &lt;= 5\n  ) |&gt;\n  ggplot() +\n  geom_sf(aes(fill = smallest))\n\n\n\n\n\n\n\n\n\n\n\nSolution\n\n\n\n\n\ntexas_income |&gt;\n  left_join(texas_counties) |&gt;\n  mutate(\n    smallest = rank(area) &lt;= 5\n  ) |&gt;\n  ggplot() +\n  geom_sf(aes(fill = smallest), size = 0.2) +\n  scale_fill_manual(\n    values = c(\n      `TRUE` = \"#D55E00\",\n      `FALSE` = \"#E8EEF9\"\n    )\n  )"
  },
  {
    "objectID": "worksheets/geospatial-data.html#changing-the-projection",
    "href": "worksheets/geospatial-data.html#changing-the-projection",
    "title": "Visualizing geospatial data",
    "section": "Changing the projection",
    "text": "Changing the projection\nOne major benefit of the sf framework is that different map projections are built in and supported out-of-the-box. We can refer to projections by their EPSG codes, and these codes can be looked up on websites such as https://spatialreference.org/ or https://epsg.io/.\nWe can set the coordinate system via coord_sf(), which takes an argument crs that specifies the Coordinate Reference System (CRS). For example, coord_sf(crs = 3083) will select a Texas Centric Albers Equal Area projection (https://spatialreference.org/ref/epsg/3083/). Try this out.\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nHint\n\n\n\n\n\nggplot(texas_income) +\n  geom_sf() +\n  ___\n\n\n\n\n\n\n\n\n\n\n\nSolution\n\n\n\n\n\nggplot(texas_income) +\n  geom_sf() +\n  coord_sf(crs = 3083)\n\n\n\n\nHere are a few other coordinate systems to try out, to see how different projections affect how the map looks.\n\nEPSG:32139: Texas Centric Lambert Conformal Conic; notice the subtle changes compared to 3083.\nEPSG:3857: Web Mercator, used e.g. by Google Maps; not a good projection in practice.\nEPSG:3338: Alaska Albers equal area; not appropriate for Texas, but shows more extreme changes in the plot"
  },
  {
    "objectID": "worksheets/figure-design.html",
    "href": "worksheets/figure-design.html",
    "title": "Figure design",
    "section": "",
    "text": "In this worksheet, we will discuss how to change and customize plot appearance through themes.\nFirst we need to load the required R packages. Please wait a moment until the live R session is fully set up and all packages are loaded.\n\n\n\n\n\n\n\n\nWe will be working with the dataset penguins, which contains data on individual penguins on Antarctica.\npenguins"
  },
  {
    "objectID": "worksheets/figure-design.html#introduction",
    "href": "worksheets/figure-design.html#introduction",
    "title": "Figure design",
    "section": "",
    "text": "In this worksheet, we will discuss how to change and customize plot appearance through themes.\nFirst we need to load the required R packages. Please wait a moment until the live R session is fully set up and all packages are loaded.\n\n\n\n\n\n\n\n\nWe will be working with the dataset penguins, which contains data on individual penguins on Antarctica.\npenguins"
  },
  {
    "objectID": "worksheets/figure-design.html#ready-made-themes",
    "href": "worksheets/figure-design.html#ready-made-themes",
    "title": "Figure design",
    "section": "Ready-made themes",
    "text": "Ready-made themes\nLet’s start with this simple plot with no specific styling.\n\n\n\n\n\n\n\n\nThe default ggplot theme is theme_gray(). Verify that adding this theme to the plot makes no difference in the output. Then change the overall font size by providing the theme function with a numeric font size argument, e.g. theme_gray(16).\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nSolution\n\n\n\n\n\nggplot(penguins, aes(flipper_length_mm, body_mass_g, color = species)) +\n  geom_point(na.rm = TRUE) +\n  theme_gray()\n\nggplot(penguins, aes(flipper_length_mm, body_mass_g, color = species)) +\n  geom_point(na.rm = TRUE) +\n  theme_gray(16)\n\n\n\n\nThe ggplot2 package has many built-in themes, including theme_minimal(), theme_bw(), theme_void(), theme_dark(). Try these different themes on the above plot. Also try again changing the font size. You can see all themes provided by ggplot2 here: https://ggplot2.tidyverse.org/reference/ggtheme.html\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nSolution\n\n\n\n\n\nggplot(penguins, aes(flipper_length_mm, body_mass_g, color = species)) +\n  geom_point(na.rm = TRUE) +\n  theme_bw(12)\n\nggplot(penguins, aes(flipper_length_mm, body_mass_g, color = species)) +\n  geom_point(na.rm = TRUE) +\n  theme_minimal(14)\n\nggplot(penguins, aes(flipper_length_mm, body_mass_g, color = species)) +\n  geom_point(na.rm = TRUE) +\n  theme_void()\n\n\n\n\nMany other packages also provide themes. For example, the cowplot package provides themes theme_half_open(), theme_minimal_grid(), theme_minimal_hgrid(), and theme_minimal_vgrid(). You can see all cowplot themes here: https://wilkelab.org/cowplot/articles/themes.html Try these out.\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nSolution\n\n\n\n\n\nggplot(penguins, aes(flipper_length_mm, body_mass_g, color = species)) +\n  geom_point(na.rm = TRUE) +\n  theme_half_open()\n\nggplot(penguins, aes(flipper_length_mm, body_mass_g, color = species)) +\n  geom_point(na.rm = TRUE) +\n  theme_minimal_grid()\n\nggplot(penguins, aes(flipper_length_mm, body_mass_g, color = species)) +\n  geom_point(na.rm = TRUE) +\n  theme_minimal_hgrid()\n\n\n\n\nCompare the visual appearance of theme_minimal() from ggplot2 to theme_minimal_grid() from cowplot. What similarities and differences to you notice? Which do you prefer? (There is no correct answer here, just be aware of the differences and of your preferences.)\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nSolution\n\n\n\n\n\nggplot(penguins, aes(flipper_length_mm, body_mass_g, color = species)) +\n  geom_point(na.rm = TRUE) +\n  theme_minimal()\n\nggplot(penguins, aes(flipper_length_mm, body_mass_g, color = species)) +\n  geom_point(na.rm = TRUE) +\n  theme_minimal_grid()"
  },
  {
    "objectID": "worksheets/figure-design.html#modifying-theme-elements",
    "href": "worksheets/figure-design.html#modifying-theme-elements",
    "title": "Figure design",
    "section": "Modifying theme elements",
    "text": "Modifying theme elements\nYou can modify theme elements by adding a theme() call to the plot. Inside the theme() call you specify which theme element you want to modify (e.g., axis.title, axis.text.x, panel.background, etc) and what changes you want to make. For example, to make axis titles blue, you would write:\ntheme(\n  axis.title = element_text(color = \"blue\")\n)\nThere are many theme settings, and for each one you need to know what type of an element it is (for example, element_text(), element_line(), element_rect() for text, lines, or rectangles, respectively). A complete description of the available options is available at the ggplot2 website: https://ggplot2.tidyverse.org/reference/theme.html\nHere, we will only try a few simple things. For example, see if you can make the legend title blue and the legend text red.\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nHint\n\n\n\n\n\nggplot(penguins, aes(flipper_length_mm, body_mass_g, color = species)) +\n  geom_point(na.rm = TRUE) +\n  theme(\n    legend.title = ___,\n    legend.text = ___\n  )\n\n\n\n\n\n\n\n\n\n\n\nSolution\n\n\n\n\n\nggplot(penguins, aes(flipper_length_mm, body_mass_g, color = species)) +\n  geom_point(na.rm = TRUE) +\n  theme(\n    legend.title = element_text(color = \"blue\"),\n    legend.text = element_text(color = \"red\")\n  )\n\n\n\n\nNow color the area behind the legend in \"aliceblue\". Hint: The theme element you need to change is called legend.background. There is also an element legend.box.background but it is only visible if legend.background is not shown, and in the default ggplot2 themes that is not the case.\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nHint\n\n\n\n\n\nggplot(penguins, aes(flipper_length_mm, body_mass_g, color = species)) +\n  geom_point(na.rm = TRUE) +\n  theme(\n    legend.background = element_rect(___)\n  )\n\n\n\n\n\n\n\n\n\n\n\nSolution\n\n\n\n\n\nggplot(penguins, aes(flipper_length_mm, body_mass_g, color = species)) +\n  geom_point(na.rm = TRUE) +\n  theme(\n    legend.background = element_rect(fill = \"aliceblue\")\n  )\n\n\n\n\nAnother commonly used feature in themes are margins. Many parts of the plot theme can understand customized margins, which control how much spacing there is between different parts of a plot. Margins are typically specified with the function margin(), which takes four numbers specifying the margins in points, in the order top, right, bottom, left. So, margin(10, 5, 5, 10) would specify a top margin of 10pt, a right margin of 5pt, a bottom margin of 5pt, and a left margin of 10pt.\nTry this out by setting the legend margin (element legend.margin) such that there is no top and no bottom margin but 10pt left and right margin.\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nHint\n\n\n\n\n\nggplot(penguins, aes(flipper_length_mm, body_mass_g, color = species)) +\n  geom_point(na.rm = TRUE) +\n  theme(\n    legend.background = element_rect(fill = \"aliceblue\"),\n    legend.margin = margin(___)\n  )\n\n\n\n\n\n\n\n\n\n\n\nSolution\n\n\n\n\n\nggplot(penguins, aes(flipper_length_mm, body_mass_g, color = species)) +\n  geom_point(na.rm = TRUE) +\n  theme(\n    legend.background = element_rect(fill = \"aliceblue\"),\n    legend.margin = margin(0, 10, 0, 10)\n  )\n\n\n\n\nThere are many other things you can do. Try at least some of the following:\n\nChange the horizontal or vertical justification of text with hjust and vjust.\nChange the font family with family.1\nChange the panel grid. For example, create only horizontal lines, or only vertical lines.\nChange the overall margin of the plot with plot.margin.\nMove the position of the legend with legend.position and legend.justification.\nTurn off some elements by setting them to element_blank().\n\n1 Getting fonts to work well can be tricky in R. Which specific fonts work depends on the graphics device and the operating system. The following fonts work on the edupod class server: \"Palatino\", \"Times\", \"Helvetica\", \"Courier\", \"ITC Bookman\", \"ITC Avant Garde Gothic\", \"ITC Zapf Chancery\"."
  },
  {
    "objectID": "worksheets/figure-design.html#writing-your-own-theme",
    "href": "worksheets/figure-design.html#writing-your-own-theme",
    "title": "Figure design",
    "section": "Writing your own theme",
    "text": "Writing your own theme\nYou can write a theme by taking an existing theme and making some modifications, like so:\n\n\n\n\n\n\n\n\nNow try this out on the penguins scatter plot.\nHint: When using this theme, do you have to add theme_colorful or theme_colorful() to the plot? Do you understand which option is correct and why? If you are unsure, try both and see what happens.\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nHint\n\n\n\n\n\nggplot(penguins, aes(flipper_length_mm, body_mass_g, color = species)) +\n  geom_point(na.rm = TRUE) +\n  ___\n\n\n\n\n\n\n\n\n\n\n\nSolution\n\n\n\n\n\nggplot(penguins, aes(flipper_length_mm, body_mass_g, color = species)) +\n  geom_point(na.rm = TRUE) +\n  theme_colorful\n\n\n\n\nNow write your own theme and then add it to the penguins plot."
  },
  {
    "objectID": "worksheets/dimension-reduction-1.html",
    "href": "worksheets/dimension-reduction-1.html",
    "title": "Dimension reduction 1",
    "section": "",
    "text": "In this worksheet, we will discuss how to perform principal components analysis (PCA).\nFirst we need to load the required R packages. Please wait a moment until the live R session is fully set up and all packages are loaded.\n\n\n\n\n\n\n\n\nNext we set up the data.\n\n\n\n\n\n\n\n\nWe will be working with the dataset blue_jays. It contains various measurements taken on blue jay birds."
  },
  {
    "objectID": "worksheets/dimension-reduction-1.html#introduction",
    "href": "worksheets/dimension-reduction-1.html#introduction",
    "title": "Dimension reduction 1",
    "section": "",
    "text": "In this worksheet, we will discuss how to perform principal components analysis (PCA).\nFirst we need to load the required R packages. Please wait a moment until the live R session is fully set up and all packages are loaded.\n\n\n\n\n\n\n\n\nNext we set up the data.\n\n\n\n\n\n\n\n\nWe will be working with the dataset blue_jays. It contains various measurements taken on blue jay birds."
  },
  {
    "objectID": "worksheets/dimension-reduction-1.html#performing-a-pca",
    "href": "worksheets/dimension-reduction-1.html#performing-a-pca",
    "title": "Dimension reduction 1",
    "section": "Performing a PCA",
    "text": "Performing a PCA\nWe can perform a PCA with the function prcomp(). However, we first need to prepare the data. PCA can only take numeric columns, and it is best to scale all variables to zero mean and unit variance.\nWe can select all numeric columns in a dataset with select(where(is.numeric)) and we can scale an entire dataset consisting of only numeric columns with scale(). Try this on the blue_jays dataset. Modify the dataset so it is entirely numeric and properly scaled.\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nHint\n\n\n\n\n\nblue_jays |&gt;\n  select(where(is.numeric)) |&gt;\n  ___\n\n\n\n\n\n\n\n\n\n\n\nSolution\n\n\n\n\n\nblue_jays |&gt;\n  select(where(is.numeric)) |&gt;\n  scale()\n\n\n\n\nNext run prcomp() on this modified dataset.\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nHint\n\n\n\n\n\nblue_jays |&gt;\n  select(where(is.numeric)) |&gt;\n  scale() |&gt;\n  ___\n\n\n\n\n\n\n\n\n\n\n\nSolution\n\n\n\n\n\nblue_jays |&gt;\n  select(where(is.numeric)) |&gt;\n  scale() |&gt;\n  prcomp()\n\n\n\n\nIn practice, we store the output from prcomp() in a variable for subsequent downstream manipulations:\n\n\n\n\n\n\n\n\nThen we can extract useful data from this model fit object by running various functions from the broom package on it. For example, the tidy() function extracts model parameters in a tidy format. It takes an argument matrix that can take the values \"scores\", \"rotation\", and \"eigenvalues\". See what these different options do.\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nSolution\n\n\n\n\n\npca_fit |&gt;\n  tidy(matrix = \"scores\")\n\npca_fit |&gt;\n  tidy(matrix = \"rotation\")\n\npca_fit |&gt;\n  tidy(matrix = \"eigenvalues\")\n\n\n\n\nWe can also add the original dataset back into the PCA coordinates via the augment() function. This is helpful for example when we want to plot values from the original dataset (such as some of the categorical variables removed at the first step of the analysis) in the transformed coordinate system. Try out how augment() works.\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nHint\n\n\n\n\n\npca_fit |&gt;\n  augment(___)\n\n\n\n\n\n\n\n\n\n\n\nSolution\n\n\n\n\n\npca_fit |&gt;\n  augment(blue_jays)"
  },
  {
    "objectID": "worksheets/dimension-reduction-1.html#making-a-pca-plot",
    "href": "worksheets/dimension-reduction-1.html#making-a-pca-plot",
    "title": "Dimension reduction 1",
    "section": "Making a PCA plot",
    "text": "Making a PCA plot\nWhen plotting the results from a PCA, we usually make three separate plots: (i) we plot the individual data points in PC coordinates, (ii) we plot the rotation matrix, and (iii) we plot the variance explained by each components. Let’s discuss each of these in turn.\n\nPlotting individual data points in PC coordinates\nIn the previous subsection, we used augment() to add the original dataset back into the PCA coordinates. The result from this computation can be used directly in ggplot. Try this out by plotting PC 2 versus PC 1 and coloring by the sex of the birds. Remember: The columns containing PC coordinates are called .fittedPC1, .fittedPC2, etc.\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nHint\n\n\n\n\n\npca_fit |&gt;\n  augment(blue_jays) |&gt;\n  ggplot(aes(.fittedPC1, .fittedPC2, color = sex)) +\n  ___\n\n\n\n\n\n\n\n\n\n\n\nSolution\n\n\n\n\n\npca_fit |&gt;\n  augment(blue_jays) |&gt;\n  ggplot(aes(.fittedPC1, .fittedPC2, color = sex)) +\n  geom_point() +\n  coord_fixed()\n\n\n\n\nTry also plotting other PC coordinates, e.g. PC 3 vs PC 2 or PC 3 vs PC 1.\n\n\nPlotting the rotation matrix\nTo plot the rotation matrix we require a bit of boiler-plate code. It is always the same, so it’s fine to copy-and-paste when needed. This is the baseline for a rotation-matrix plot:\n# define an arrow style\narrow_style &lt;- arrow(\n  angle = 20, length = grid::unit(8, \"pt\"),\n  ends = \"first\", type = \"closed\"\n)\n\npca_fit |&gt;\n  tidy(matrix = \"rotation\") |&gt;  # extract rotation matrix\n  pivot_wider(\n    names_from = \"PC\", values_from = \"value\",\n    names_prefix = \"PC\"\n  ) |&gt;\n  ggplot(aes(PC1, PC2)) +\n  geom_segment(\n    xend = 0, yend = 0,\n    arrow = arrow_style\n  ) +\n  geom_text(aes(label = column)) +\n  coord_fixed(\n    # you will generally have to set the limits appropriately\n    xlim = ___,\n    ylim = ___\n  )\nUse the above code to plot the rotation matrix for the blue jays PCA analysis. Make two customizations: 1. Change the x and y limits to appropriate values. Use hjust and/or vjust in geom_text() to aligne the text labels appropriately.\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nSolution\n\n\n\n\n\n# define an arrow style\narrow_style &lt;- arrow(\n  angle = 20, length = grid::unit(8, \"pt\"),\n  ends = \"first\", type = \"closed\"\n)\n\npca_fit |&gt;\n  tidy(matrix = \"rotation\") |&gt;  # extract rotation matrix\n  pivot_wider(\n    names_from = \"PC\", values_from = \"value\",\n    names_prefix = \"PC\"\n  ) |&gt;\n  ggplot(aes(PC1, PC2)) +\n  geom_segment(\n    xend = 0, yend = 0,\n    arrow = arrow_style\n  ) +\n  geom_text(aes(label = column), hjust = 1) +\n  coord_fixed(\n    xlim = c(-1.7, .5),\n    ylim = c(-1, 1)\n  )\n\n\n\n\nNow do the same for PC 2 versus PC 3. (Hint: This means putting PC 3 on the x axis.)\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nSolution\n\n\n\n\n\n# define an arrow style\narrow_style &lt;- arrow(\n  angle = 20, length = grid::unit(8, \"pt\"),\n  ends = \"first\", type = \"closed\"\n)\n\npca_fit |&gt;\n  tidy(matrix = \"rotation\") |&gt;  # extract rotation matrix\n  pivot_wider(\n    names_from = \"PC\", values_from = \"value\",\n    names_prefix = \"PC\"\n  ) |&gt;\n  ggplot(aes(PC3, PC2)) +\n  geom_segment(\n    xend = 0, yend = 0,\n    arrow = arrow_style\n  ) +\n  geom_text(aes(label = column), hjust = c(1, 0, 1, 1, 1, 1)) +\n  coord_fixed(\n    xlim = c(-1.3, 1.8),\n    ylim = c(-1, .8)\n  )\n\n\n\n\n\n\nPlotting the eigenvalues (variance explained)\nTo plot the variance explained, we extract the eigenvalues with the function tidy(), as discussed above. As a reminder, do this one more time and inspect the structure of the output.\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nHint\n\n\n\n\n\npca_fit |&gt;\n  tidy(___)\n\n\n\n\n\n\n\n\n\n\n\nSolution\n\n\n\n\n\npca_fit |&gt;\n  tidy(matrix = \"eigenvalues\")\n\n\n\n\nNow make a bar plot of the percent variance explained (column percent) by each PC.\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nHint\n\n\n\n\n\npca_fit |&gt;\n  tidy(matrix = \"eigenvalues\") |&gt;\n  ggplot(___) + \n  ___\n\n\n\n\n\n\n\n\n\n\n\nSolution\n\n\n\n\n\npca_fit |&gt;\n  tidy(matrix = \"eigenvalues\") |&gt;\n  ggplot(aes(PC, percent)) +\n  geom_col() +\n  scale_x_continuous(breaks = 1:6) +\n  scale_y_continuous(labels = scales::label_percent())"
  },
  {
    "objectID": "worksheets/data-wrangling-1.html",
    "href": "worksheets/data-wrangling-1.html",
    "title": "Data wrangling 1",
    "section": "",
    "text": "In this worksheet, we will discuss how to perform basic data manipulations, such as filtering data rows that meet certain conditions, choosing data columns, and arranging data in ascending or descending order.\nFirst we need to load the required R packages. Please wait a moment until the live R session is fully set up and all packages are loaded.\n\n\n\n\n\n\n\n\nNext we set up the data. We will be working with data on individual penguins in Antarctica.\npenguins"
  },
  {
    "objectID": "worksheets/data-wrangling-1.html#introduction",
    "href": "worksheets/data-wrangling-1.html#introduction",
    "title": "Data wrangling 1",
    "section": "",
    "text": "In this worksheet, we will discuss how to perform basic data manipulations, such as filtering data rows that meet certain conditions, choosing data columns, and arranging data in ascending or descending order.\nFirst we need to load the required R packages. Please wait a moment until the live R session is fully set up and all packages are loaded.\n\n\n\n\n\n\n\n\nNext we set up the data. We will be working with data on individual penguins in Antarctica.\npenguins"
  },
  {
    "objectID": "worksheets/data-wrangling-1.html#the-pipe-symbol-read-and-then",
    "href": "worksheets/data-wrangling-1.html#the-pipe-symbol-read-and-then",
    "title": "Data wrangling 1",
    "section": "The pipe (symbol |>, read “and then”)",
    "text": "The pipe (symbol |&gt;, read “and then”)\nWhen writing complex data analysis pipelines, we frequently use the pipe operator |&gt; to move data from one analysis step to the next. The pipe is pronounced “and then”, and it takes the data on its left and uses it as the first argument for the function on its right.\nFor example, to see the first few lines of a dataset, we often write head(data). Instead, we can write data |&gt; head().\nTry this yourself. Write code that displays the first few lines of the penguins dataset, using |&gt; and head():\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nHint\n\n\n\n\n\npenguins ___ head()\n\n\n\n\n\n\n\n\n\n\n\nSolution\n\n\n\n\n\npenguins |&gt; head()\n\n\n\n\nIn older R code, you may also see %&gt;% (called the “magrittr” pipe) instead of |&gt; (the “native” pipe). While these two operators have subtle differences, for all intents and purposes you can treat them interchangeably. Try the previous exercise with the magrittr pipe instead of the native pipe.\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nHint\n\n\n\n\n\npenguins ___ head()\n\n\n\n\n\n\n\n\n\n\n\nSolution\n\n\n\n\n\npenguins %&gt;% head()"
  },
  {
    "objectID": "worksheets/data-wrangling-1.html#choosing-data-rows",
    "href": "worksheets/data-wrangling-1.html#choosing-data-rows",
    "title": "Data wrangling 1",
    "section": "Choosing data rows",
    "text": "Choosing data rows\nThe function filter() allows you to find rows in a dataset that meet one or more specific conditions. The syntax is data |&gt; filter(condition), where condition is a logical condition. For example, filter(x &gt; 5) would pick all rows for which the value in column x is greater than 5.\nAs an example, the following code picks all penguins from the island Biscoe:\n\n\n\n\n\n\n\n\nNow it’s your turn. Pick all penguins from the island Dream:\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nSolution\n\n\n\n\n\npenguins |&gt;\n  filter(island == \"Dream\")\n\n\n\n\nYou can also state multiple conditions, separated by a comma. For example, filter(x &gt; 5, y &lt; 2) would pick all rows for which the value in the column x is greater than 5 and the value in the column y is less than 2. Note that the conditions are combined via logical AND, both need to be satisfied for the row to be picked.\nTo try this out, pick all penguins of species Chinstrap from the island Dream:\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nHint\n\n\n\n\n\npenguins |&gt;\n  filter(species == ___, island == ___)\n\n\n\n\n\n\n\n\n\n\n\nSolution\n\n\n\n\n\npenguins |&gt;\n  filter(species == \"Chinstrap\", island == \"Dream\")"
  },
  {
    "objectID": "worksheets/data-wrangling-1.html#choosing-data-columns",
    "href": "worksheets/data-wrangling-1.html#choosing-data-columns",
    "title": "Data wrangling 1",
    "section": "Choosing data columns",
    "text": "Choosing data columns\nThe function select() allows you to pick specific data columns by name. This is frequently useful when a dataset has many more columns than we are interested in at the time. For example, if we are only interested in the penguins’ species, island, and sex, we could select these three columns:\n\n\n\n\n\n\n\n\nTry this yourself, picking the columns representing the penguin species (species), the bill length (bill_length_mm), and then flipper length (flipper_length_mm).\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nHint\n\n\n\n\n\npenguins |&gt;\n  select(___)\n\n\n\n\n\n\n\n\n\n\n\nSolution\n\n\n\n\n\npenguins |&gt;\n  select(species, bill_length_mm, flipper_length_mm)\n\n\n\n\nAnother situation that arises frequently is one where we want to remove specific columns. We can also do this with select(), but now write select(-column) to remove one or more columns.\nTry this. Remove the column species.\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nHint\n\n\n\n\n\npenguins |&gt;\n  select(___)\n\n\n\n\n\n\n\n\n\n\n\nSolution\n\n\n\n\n\npenguins |&gt;\n  select(-species)\n\n\n\n\nAnd now remove both species and island.\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nHint\n\n\n\n\n\npenguins |&gt;\n  select(-___, -___)\n\n\n\n\n\n\n\n\n\n\n\nSolution\n\n\n\n\n\npenguins |&gt;\n  select(-species, -island)"
  },
  {
    "objectID": "worksheets/data-wrangling-1.html#sorting-data",
    "href": "worksheets/data-wrangling-1.html#sorting-data",
    "title": "Data wrangling 1",
    "section": "Sorting data",
    "text": "Sorting data\nThe function arrange() allows you to sort data by one or more columns. For example, data |&gt; arrange(x) would sort the data by increasing values of x, and data |&gt; arrange(x, y) would sort the data first by x and then, for ties in x, by y.\nAs an example, the following code sorts penguins by their flipper length:\n\n\n\n\n\n\n\n\nNow it’s your turn. Sort the penguins by bill length:\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nHint\n\n\n\n\n\npenguins |&gt;\n  arrange(___)\n\n\n\n\n\n\n\n\n\n\n\nSolution\n\n\n\n\n\npenguins |&gt;\n  arrange(bill_length_mm)\n\n\n\n\nTo arrange data in descending order, enclose the data column in desc(). For example, data |&gt; arrange(desc(x)) would sort the data by decreasing values of x. (desc stands for “descending”.)\nTry this out. Sort the penguins by bill length, from largest to smallest:\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nHint\n\n\n\n\n\npenguins |&gt;\n  arrange(___(bill_length_mm))\n\n\n\n\n\n\n\n\n\n\n\nSolution\n\n\n\n\n\npenguins |&gt;\n  arrange(desc(bill_length_mm))"
  },
  {
    "objectID": "worksheets/data-wrangling-1.html#counting",
    "href": "worksheets/data-wrangling-1.html#counting",
    "title": "Data wrangling 1",
    "section": "Counting",
    "text": "Counting\nWe frequently want to count how many times a particular value or combination of values occurs in a dataset. We do this using the count() function. For example, the following code counts how many penguins of the different species there are in the penguins dataset.\n\n\n\n\n\n\n\n\nNow try this yourself. Count how many male and female penguins there are.\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nHint\n\n\n\n\n\npenguins |&gt;\n  count(___)\n\n\n\n\n\n\n\n\n\n\n\nSolution\n\n\n\n\n\npenguins |&gt;\n  count(sex)\n\n\n\n\nWe can also perform more fine-grained counts, by providing the count() function with more than one column name. See if you can count how many male and female penguins the dataset contains for each species.\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nHint\n\n\n\n\n\npenguins |&gt;\n  count(___, sex)\n\n\n\n\n\n\n\n\n\n\n\nSolution\n\n\n\n\n\npenguins |&gt;\n  count(species, sex)\n\n\n\n\nNow count how many penguins of each species the dataset contains for each island.\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nHint\n\n\n\n\n\npenguins |&gt;\n  count(___, species)\n\n\n\n\n\n\n\n\n\n\n\nSolution\n\n\n\n\n\npenguins |&gt;\n  count(island, species)"
  },
  {
    "objectID": "worksheets/data-wrangling-1.html#chaining-analysis-steps-into-pipelines",
    "href": "worksheets/data-wrangling-1.html#chaining-analysis-steps-into-pipelines",
    "title": "Data wrangling 1",
    "section": "Chaining analysis steps into pipelines",
    "text": "Chaining analysis steps into pipelines\nWe can chain multiple analysis steps into a pipeline by continuing to add “and then” statements. For example, data |&gt; count(...) |&gt; arrange(...) would first count and then sort the data.\nTry this out by counting the number of penguins of each species and then sorting by the number of penguins.\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nHint\n\n\n\n\n\npenguins |&gt;\n  count(___) |&gt;\n  arrange(___)\n\n\n\n\n\n\n\n\n\n\n\nSolution\n\n\n\n\n\npenguins |&gt;\n  count(species) |&gt;\n  arrange(n)\n\n\n\n\nYou may remember from before that the default sorting is from the smallest to the largest value. Repeat the previous exercise but now arrange the penguin species from the most frequent to the least frequent:\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nHint\n\n\n\n\n\npenguins |&gt;\n  count(species) |&gt;\n  arrange(___)\n\n\n\n\n\n\n\n\n\n\n\nSolution\n\n\n\n\n\npenguins |&gt;\n  count(species) |&gt;\n  arrange(desc(n))"
  },
  {
    "objectID": "worksheets/data-wrangling-1.html#creating-new-data-columns",
    "href": "worksheets/data-wrangling-1.html#creating-new-data-columns",
    "title": "Data wrangling 1",
    "section": "Creating new data columns",
    "text": "Creating new data columns\nThe function mutate() allows you to add new columns to a data table. For example, data |&gt; mutate(sum = x + y) would create a new column sum that is the sum of the columns x and y:\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nNote that the part to the left of the equals sign (here, sum) is the name of the new column, and the part to the right of the equals sign (here, x + y) is an R expression that evaluates to the values in the new column.\nNow apply this concept to the penguins dataset. Add a new column bill_ratio that is the ratio of bill length and bill depth:\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nHint\n\n\n\n\n\npenguins |&gt;\n  select(species, bill_length_mm, bill_depth_mm) |&gt;\n  mutate(\n    bill_ratio = ___\n  )\n\n\n\n\n\n\n\n\n\n\n\nSolution\n\n\n\n\n\npenguins |&gt;\n  select(species, bill_length_mm, bill_depth_mm) |&gt;\n  mutate(\n    bill_ratio = bill_length_mm / bill_depth_mm\n  )"
  },
  {
    "objectID": "worksheets/data-wrangling-1.html#counting-with-custom-conditions",
    "href": "worksheets/data-wrangling-1.html#counting-with-custom-conditions",
    "title": "Data wrangling 1",
    "section": "Counting with custom conditions",
    "text": "Counting with custom conditions\nIt is quite common that we want to count items that meet a specific condition. For example, let’s say we want to count how many penguins of different species have flippers longer than 200mm. To do this efficiently, we first create a new column that indicates whether the condition is met or not, and we then use count with that indicator column.\nThe easiest way to create indicator columns is via the function if_else(), which takes three arguments: a condition, a result if the condition is met, and a result if the condition is not met. The following example shows how to create an indicator column showing whether a variable is positive or negative:\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nNow try this yourself. Count how many penguins of different species have flippers longer than 200mm. Then sort your results from most frequent to least frequent.\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nHint\n\n\n\n\n\npenguins |&gt;\n  mutate(\n    flipper_length = if_else(___, \"greater than 200mm\", \"less than 200mm\")\n  ) |&gt;\n  count(___, flipper_length) |&gt;\n  arrange(___)\n\n\n\n\n\n\n\n\n\n\n\nSolution\n\n\n\n\n\npenguins |&gt;\n  mutate(\n    flipper_length = if_else(flipper_length_mm &gt; 200, \"greater than 200mm\", \"less than 200mm\")\n  ) |&gt;\n  count(species, flipper_length) |&gt;\n  arrange(desc(n))"
  },
  {
    "objectID": "worksheets/compound-figures.html",
    "href": "worksheets/compound-figures.html",
    "title": "Compound figures",
    "section": "",
    "text": "In this worksheet, we will discuss how to combine several ggplot2 plots into one compound figure.\nFirst we need to load the required R packages. Please wait a moment until the live R session is fully set up and all packages are loaded.\n\n\n\n\n\n\n\n\nWe will be working with the R builtin dataset mtcars, which contains fuel consumption and 10 aspects of automobile design and performance for 32 automobiles (1973–74 models)."
  },
  {
    "objectID": "worksheets/compound-figures.html#introduction",
    "href": "worksheets/compound-figures.html#introduction",
    "title": "Compound figures",
    "section": "",
    "text": "In this worksheet, we will discuss how to combine several ggplot2 plots into one compound figure.\nFirst we need to load the required R packages. Please wait a moment until the live R session is fully set up and all packages are loaded.\n\n\n\n\n\n\n\n\nWe will be working with the R builtin dataset mtcars, which contains fuel consumption and 10 aspects of automobile design and performance for 32 automobiles (1973–74 models)."
  },
  {
    "objectID": "worksheets/compound-figures.html#combining-plots",
    "href": "worksheets/compound-figures.html#combining-plots",
    "title": "Compound figures",
    "section": "Combining plots",
    "text": "Combining plots\nFirst we set up four different plots that we will subsequently combine. The plots are stored in variables p1, p2, p3, p4.\n\n\n\n\n\n\n\n\nTo show plots side-by-side, the patchwork package provides the operator |, as in p1 | p2. Try this by making a compound plot of plots p1, p2, p3 side-by-side.\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nSolution\n\n\n\n\n\np1 | p2 | p3\n\n\n\n\nTo show plots on top of one-another, we use the operator /, as in p1 / p2. Try this by making a compound plot of plots p1, p2, p3 on top of each other.\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nSolution\n\n\n\n\n\np1 / p2 / p3\n\n\n\n\nWe can also use parentheses to group plots with respect to the operators | and /. For example, we can place several plots side-by-side and then place this entire row of plots on top of another plot. Try this out.\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nHint\n\n\n\n\n\n(___) / p4\n\n\n\n\n\n\n\n\n\n\n\nSolution\n\n\n\n\n\n(p1 | p2 | p3 ) / p4"
  },
  {
    "objectID": "worksheets/compound-figures.html#plot-annotations",
    "href": "worksheets/compound-figures.html#plot-annotations",
    "title": "Compound figures",
    "section": "Plot annotations",
    "text": "Plot annotations\nThe patchwork package provides a powerful annotation system via the plot_annotation() function that can be added to a plot assembly. For example, we can add plot tags (the labels in the upper left corner identifying the plots) via the plot annotation tag_levels. You can set tag_levels = \"A\" to generate tags A, B, C, etc. Try this out.\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nHint\n\n\n\n\n\n(p1 | p2 | p3 ) / p4 +\n  plot_annotation(\n    ___\n  )\n\n\n\n\n\n\n\n\n\n\n\nSolution\n\n\n\n\n\n(p1 | p2 | p3 ) / p4 +\n  plot_annotation(\n    tag_levels = \"A\"\n  )\n\n\n\n\nTry also tag levels such as \"a\", \"i\", or \"1\".\nYou can also add elements such as titles, subtitles, and captions, by setting the title, subtitle, or caption argument in plot_annotation(). Try this out by adding an overall title to the figure from the previous exercise.\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nHint\n\n\n\n\n\n(p1 | p2 | p3 ) / p4 +\n  plot_annotation(\n    tag_levels = \"A\",\n    ___\n  )\n\n\n\n\n\n\n\n\n\n\n\nSolution\n\n\n\n\n\n(p1 | p2 | p3 ) / p4 +\n  plot_annotation(\n    tag_levels = \"A\",\n    title = \"Various observations about old cars\"\n  )\n\n\n\n\nAlso set a subtitle and a caption.\nFinally, you can change the theme of all plots in the plot assembly via the & operator, as in (p1 | p2) & theme_bw(). Try this out.\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nSolution\n\n\n\n\n\n(p1 | p2) & theme_bw()\n\n\n\n\nWhat happens if you write this expression without parentheses? Do you understand why?"
  },
  {
    "objectID": "worksheets/color-scales.html",
    "href": "worksheets/color-scales.html",
    "title": "Color scales",
    "section": "",
    "text": "In this worksheet, we will discuss how to change and customize color scales.\nFirst we need to load the required R packages. Please wait a moment until the live R session is fully set up and all packages are loaded.\n\n\n\n\n\n\n\n\nNext we set up the data.\n\n\n\n\n\n\n\n\nWe will be working with the dataset temperatures that we have used in previous worksheets. This dataset contains the average temperature for each day of the year for four different locations.\n\n\n\n\n\n\n\n\nWe will also be working with an aggregated version of this dataset called temps_months, which contains the mean temperature for each month for the same locations."
  },
  {
    "objectID": "worksheets/color-scales.html#introduction",
    "href": "worksheets/color-scales.html#introduction",
    "title": "Color scales",
    "section": "",
    "text": "In this worksheet, we will discuss how to change and customize color scales.\nFirst we need to load the required R packages. Please wait a moment until the live R session is fully set up and all packages are loaded.\n\n\n\n\n\n\n\n\nNext we set up the data.\n\n\n\n\n\n\n\n\nWe will be working with the dataset temperatures that we have used in previous worksheets. This dataset contains the average temperature for each day of the year for four different locations.\n\n\n\n\n\n\n\n\nWe will also be working with an aggregated version of this dataset called temps_months, which contains the mean temperature for each month for the same locations."
  },
  {
    "objectID": "worksheets/color-scales.html#built-in-ggplot2-color-scales",
    "href": "worksheets/color-scales.html#built-in-ggplot2-color-scales",
    "title": "Color scales",
    "section": "Built in ggplot2 color scales",
    "text": "Built in ggplot2 color scales\nWe will start with built-in ggplot2 color scales, which require no additional packages. The scale functions are always named scale_color_*() or scale_fill_*(), depending on whether they apply to the color or fill aesthetic. The * indicates some other words specifying the type of the scale, for example scale_color_brewer() or scale_color_distiller() for discrete or continuous scales from the ColorBrewer project, respectively. You can find all available built-in scales here.\nNow consider the following plot:\n\n\n\n\n\n\n\n\nIf you wanted to change the color scale to one from the ColorBrewer project, which scale function would you have to add? Think about this and then try it out.\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nSolution\n\n\n\n\n\nggplot(temps_months, aes(x = month, y = location, fill = mean)) + \n  geom_tile() + \n  coord_fixed(expand = FALSE) +\n  scale_fill_distiller()\n\n\n\n\nMost color scale functions have additional customizations. How to use them depends on the specific scale function. For the ColorBrewer scales you can set direction = 1 or direction = -1 to set the direction of the scale (light to dark or dark to light). You can also set the palette via a numeric argument, e.g. palette = 1, palette = 2, palette = 3 etc.\nTry this out by setting the direction of the scale from light to dark and using palette #4.\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nHint\n\n\n\n\n\nggplot(temps_months, aes(x = month, y = location, fill = mean)) + \n  geom_tile() + \n  coord_fixed(expand = FALSE) +\n  scale_fill_distiller(direction = ___, palette = ___)\n\n\n\n\n\n\n\n\n\n\n\nSolution\n\n\n\n\n\nggplot(temps_months, aes(x = month, y = location, fill = mean)) + \n  geom_tile() + \n  coord_fixed(expand = FALSE) +\n  scale_fill_distiller(direction = 1, palette = 4)\n\n\n\n\nA popular set of scales are the viridis scales, which are provided by scale_*_viridis_c() for continuous data and scale_*_viridis_d() for discrete data. Change the above plot to use a viridis scale.\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nSolution\n\n\n\n\n\nggplot(temps_months, aes(x = month, y = location, fill = mean)) + \n  geom_tile() + \n  coord_fixed(expand = FALSE) +\n  scale_fill_viridis_c()\n\n\n\n\nThe viridis scales can be customized with direction (as before), option (which can be \"A\", \"B\", \"C\", \"D\", or \"E\"), and begin and end which are numerical values between 0 and 1 indicating where in the color scale the data should begin or end. For example, begin = 0.2 means that the lowest data value is mapped to the 20th percentile in the scale.\nTry different choices for option, begin, and end to see how they change the plot.\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nSolution\n\n\n\n\n\nggplot(temps_months, aes(x = month, y = location, fill = mean)) + \n  geom_tile() + \n  coord_fixed(expand = FALSE) +\n  scale_fill_viridis_c(option = \"B\", begin = 0.15)"
  },
  {
    "objectID": "worksheets/color-scales.html#customizing-scale-title-and-labels",
    "href": "worksheets/color-scales.html#customizing-scale-title-and-labels",
    "title": "Color scales",
    "section": "Customizing scale title and labels",
    "text": "Customizing scale title and labels\nIn a previous worksheet, we used arguments such as name, breaks, labels, and limits to customize the axis. For color scales, instead of an axis we have a legend, and we can use the same arguments inside the scale function to customize how the legend looks.\nTry this out. Set the scale limits from 10 to 110 and set the name of the scale and the breaks as you wish.\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nHint\n\n\n\n\n\nggplot(temps_months, aes(x = month, y = location, fill = mean)) + \n  geom_tile() + \n  coord_fixed(expand = FALSE) +\n  scale_fill_viridis_c(\n    name = ___,\n    breaks = ___,\n    limits = ___\n  )\n\n\n\n\n\n\n\n\n\n\n\nSolution\n\n\n\n\n\nggplot(temps_months, aes(x = month, y = location, fill = mean)) + \n  geom_tile() + \n  coord_fixed(expand = FALSE) +\n  scale_fill_viridis_c(\n    name = \"temperature (F)\",\n    breaks = c(25, 50, 75, 100),\n    limits = c(10, 110)\n  )\n\n\n\n\nNote: Color scales ignore the expand argument, so you cannot use it to expand the scale beyond the data values as you can for position scales."
  },
  {
    "objectID": "worksheets/color-scales.html#binned-scales",
    "href": "worksheets/color-scales.html#binned-scales",
    "title": "Color scales",
    "section": "Binned scales",
    "text": "Binned scales\nResearch into human perception has shown that continuous coloring can be difficult to interpret. Therefore, it is often preferable to use a small number of discrete colors to indicate ranges of data values. You can do this in ggplot with binned scales. For example, scale_fill_viridis_b() provides a binned version of the viridis scale. Try this out.\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nHint\n\n\n\n\n\nggplot(temps_months, aes(x = month, y = location, fill = mean)) + \n  geom_tile() + \n  coord_fixed(expand = FALSE) +\n  ___\n\n\n\n\n\n\n\n\n\n\n\nSolution\n\n\n\n\n\nggplot(temps_months, aes(x = month, y = location, fill = mean)) + \n  geom_tile() + \n  coord_fixed(expand = FALSE) +\n  scale_fill_viridis_b()\n\n\n\n\nYou can provide bin breaks directly with the breaks argument. Try this out.\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nHint\n\n\n\n\n\nggplot(temps_months, aes(x = month, y = location, fill = mean)) + \n  geom_tile() + \n  coord_fixed(expand = FALSE) +\n  scale_fill_viridis_b(\n    breaks = ___\n  )\n\n\n\n\n\n\n\n\n\n\n\nSolution\n\n\n\n\n\nggplot(temps_months, aes(x = month, y = location, fill = mean)) + \n  geom_tile() + \n  coord_fixed(expand = FALSE) +\n  scale_fill_viridis_b(\n    breaks = c(40, 60, 80, 100)\n  )"
  },
  {
    "objectID": "worksheets/color-scales.html#scales-from-the-colorspace-package",
    "href": "worksheets/color-scales.html#scales-from-the-colorspace-package",
    "title": "Color scales",
    "section": "Scales from the colorspace package",
    "text": "Scales from the colorspace package\nThe color scales provided by the colorspace package follow a simple naming scheme of the form scale_&lt;aesthetic&gt;_&lt;datatype&gt;_&lt;colorscale&gt;(), where &lt;aesthetic&gt; is the name of the aesthetic (fill, color, colour), &lt;datatype&gt; indicates the type of variable plotted (discrete, continuous, binned), and colorscale stands for the type of the color scale (qualitative, sequential, diverging, divergingx).\nFor the mean temperature plot we have been using throughout this worksheet, which color scale(s) from the colorspace package is/are appropriate? Think about this and then try it out.\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nHint\n\n\n\n\n\nTwo alternative options are appropriate. Can you think of both?\n\n\n\n\n\n\n\n\n\n\n\nSolution\n\n\n\n\n\n# Option 1: Continuous scale\nggplot(temps_months, aes(x = month, y = location, fill = mean)) + \n  geom_tile() + \n  coord_fixed(expand = FALSE) +\n  scale_fill_continuous_sequential()\n\n# Option 2: Binned scale\nggplot(temps_months, aes(x = month, y = location, fill = mean)) + \n  geom_tile() + \n  coord_fixed(expand = FALSE) +\n  scale_fill_binned_sequential()\n\n\n\n\nYou can customize the colorspace scales with the palette argument, which takes the name of a palette (e.g., \"Inferno\", \"BluYl\", \"Lajolla\"). Try this out. Also try reversing the scale direction with rev = TRUE or rev = FALSE. (The colorspace scales use rev instead of direction.) You can find the names of all supported scales here (consider specifically single-hue and multi-hue sequential palettes).\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nHint\n\n\n\n\n\nggplot(temps_months, aes(x = month, y = location, fill = mean)) + \n  geom_tile() + \n  coord_fixed(expand = FALSE) +\n  scale_fill_continuous_sequential(\n    palette = ___\n  )\n\n\n\n\n\n\n\n\n\n\n\nSolution\n\n\n\n\n\nggplot(temps_months, aes(x = month, y = location, fill = mean)) + \n  geom_tile() + \n  coord_fixed(expand = FALSE) +\n  scale_fill_continuous_sequential(\n    palette = \"Lajolla\"\n  )\n\n\n\n\nYou can also use begin and end just like in the viridis scales."
  },
  {
    "objectID": "worksheets/color-scales.html#manual-scales",
    "href": "worksheets/color-scales.html#manual-scales",
    "title": "Color scales",
    "section": "Manual scales",
    "text": "Manual scales\nFor discrete data with a small number of categories, it’s usually best to set colors manually. This can be done with the scale functions scale_*_manual(). These functions take an argument values that specifies the color values to use.\nTo see how this works, let’s go back to this plot of temperatures over time for four locations:\n\n\n\n\n\n\n\n\nLet’s use the following four colors: \"gold2\", \"firebrick\", \"blue3\", \"springgreen4\". We can visualize this palette using the function swatchplot() from the colorspace package.\n\n\n\n\n\n\n\n\nNow apply this color palette to the temperatures plot, by using the manual color scale.\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nHint\n\n\n\n\n\nggplot(temperatures, aes(day_of_year, temperature, color = location)) +\n  geom_line(linewidth = 1) +\n  scale_color_manual(\n    values = ___\n  )\n\n\n\n\n\n\n\n\n\n\n\nSolution\n\n\n\n\n\nggplot(temperatures, aes(day_of_year, temperature, color = location)) +\n  geom_line(linewidth = 1) +\n  scale_color_manual(\n    values = c(\"gold2\", \"firebrick\", \"blue3\", \"springgreen4\")\n  )\n\n\n\n\nOne problem with this approach is that we can’t easily control which data value gets assigned to which color. What if we wanted San Diego to be shown in green and Chicago in blue? The simplest way to resolve this issue is to use a named vector. A named vector in R is a vector where each value has a name. Named vectors are created by writing c(name1 = value1, name2 = value2, ...). See the following example.\n\n\n\n\n\n\n\n\nThe names in the second example are A, B, and C. Notice that the names are not in quotes. However, if you need a name containing a space (such as Death Valley), you need to enclose the name in backticks. Thus, our named vector of colors could be written like so:\n\n\n\n\n\n\n\n\nNow try to use this color vector in the figure showing temperatures over time.\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nHint\n\n\n\n\n\ncolorvector &lt;- c(___)\n\nggplot(temperatures, aes(day_of_year, temperature, color = location)) +\n  geom_line(linewidth = 1) +\n  scale_color_manual(\n    values = ___\n  )\n\n\n\n\n\n\n\n\n\n\n\nSolution\n\n\n\n\n\ncolorvector &lt;- c(\n  `Death Valley` = \"gold2\",\n  Houston = \"firebrick\",\n  Chicago = \"blue3\",\n  `San Diego` = \"springgreen4\"\n)\n\nggplot(temperatures, aes(day_of_year, temperature, color = location)) +\n  geom_line(linewidth = 1) +\n  scale_color_manual(\n    values = colorvector\n  )\n\n\n\n\nTry some other colors also. For example, you could use the Okabe-Ito colors:\n\n\n\n\n\n\n\n\nAlternatively, you can find a list of all named colors here. You can also run the command colors() in your R console to get a list of all available color names.\nHint: It’s a good idea to never use the colors \"red\", \"green\", \"blue\", \"cyan\", \"magenta\", \"yellow\". They are extreme points in the RGB color space and tend to look unnatural and cheap. Try this by making a swatch plot of these colors, and compare for example to the color scale containing the colors \"firebrick\", \"springgreen4\", \"blue3\", \"turquoise3\", \"darkorchid2\", \"gold2\". Do you see the difference?\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nSolution\n\n\n\n\n\ncolorspace::swatchplot(c(\"red\", \"green\", \"blue\", \"cyan\", \"magenta\", \"yellow\"))\ncolorspace::swatchplot(c(\"firebrick\", \"springgreen4\", \"blue3\", \"turquoise3\", \"darkorchid2\", \"gold2\"))"
  },
  {
    "objectID": "worksheets/aesthetic-mappings.html",
    "href": "worksheets/aesthetic-mappings.html",
    "title": "Aesthetic mappings",
    "section": "",
    "text": "In this worksheet, we will discuss a core concept of ggplot, the mapping of data values onto aesthetics.\nFirst we need to load the required R packages. Please wait a moment until the live R session is fully set up and all packages are loaded.\n\n\n\n\n\n\n\n\nNext we set up the data.\n\n\n\n\n\n\n\n\nWe will first work with the dataset temps_houston which contains the average temperature for each day of the year for Houston, TX."
  },
  {
    "objectID": "worksheets/aesthetic-mappings.html#introduction",
    "href": "worksheets/aesthetic-mappings.html#introduction",
    "title": "Aesthetic mappings",
    "section": "",
    "text": "In this worksheet, we will discuss a core concept of ggplot, the mapping of data values onto aesthetics.\nFirst we need to load the required R packages. Please wait a moment until the live R session is fully set up and all packages are loaded.\n\n\n\n\n\n\n\n\nNext we set up the data.\n\n\n\n\n\n\n\n\nWe will first work with the dataset temps_houston which contains the average temperature for each day of the year for Houston, TX."
  },
  {
    "objectID": "worksheets/aesthetic-mappings.html#basic-use-of-ggplot",
    "href": "worksheets/aesthetic-mappings.html#basic-use-of-ggplot",
    "title": "Aesthetic mappings",
    "section": "Basic use of ggplot",
    "text": "Basic use of ggplot\nIn the most basic use of ggplot, we call the ggplot() function with a dataset and an aesthetic mapping (created with aes()), and then we add a geom, such as geom_line() to draw lines or geom_point() to draw points.\nTry this for yourself. Map the column day_of_year onto the x axis and the column temperature onto the y axis, and use geom_line() to display the data.\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nSolution\n\n\n\n\n\nggplot(temps_houston, aes(x = day_of_year, y = temperature)) +\n  geom_line()\n\n\n\n\nTry again. Now use geom_point() instead of geom_line().\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nSolution\n\n\n\n\n\nggplot(temps_houston, aes(x = day_of_year, y = temperature)) +\n  geom_point()\n\n\n\n\nAnd now swap which column you map to x and which to y.\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nSolution\n\n\n\n\n\nggplot(temps_houston, aes(x = temperature, y = day_of_year)) +\n  geom_point()"
  },
  {
    "objectID": "worksheets/aesthetic-mappings.html#more-complex-geoms",
    "href": "worksheets/aesthetic-mappings.html#more-complex-geoms",
    "title": "Aesthetic mappings",
    "section": "More complex geoms",
    "text": "More complex geoms\nYou can use other geoms to make different types of plots. For example, geom_boxplot() will make boxplots. For boxplots, we frequently want categorical data on the x or y axis. For example, we might want a separate boxplot for each month. Try this out. Puth month on the x axis, temperature on the y axis, and use geom_boxplot().\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nHint\n\n\n\n\n\nggplot(temps_houston, aes(x = month, y = temperature)) +\n  ___()\n\n\n\n\n\n\n\n\n\n\n\nSolution\n\n\n\n\n\nggplot(temps_houston, aes(x = month, y = temperature)) +\n  geom_boxplot()\n\n\n\n\nNow put the month on the y axis and the temperature on the x axis.\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nHint\n\n\n\n\n\nggplot(temps_houston, aes(x = ___, y = ___)) +\n  geom_boxplot()\n\n\n\n\n\n\n\n\n\n\n\nSolution\n\n\n\n\n\nggplot(temps_houston, aes(x = temperature, y = month)) +\n  geom_boxplot()"
  },
  {
    "objectID": "worksheets/aesthetic-mappings.html#adding-color",
    "href": "worksheets/aesthetic-mappings.html#adding-color",
    "title": "Aesthetic mappings",
    "section": "Adding color",
    "text": "Adding color\nNext we will be working with the dataset temperatures, which is similar to temps_houston but contains data for three more locations.\n\n\n\n\n\n\n\n\nMake a line plot of temperature against day_of_year, using the color aesthetic to color the lines by location.\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nHint\n\n\n\n\n\nggplot(temperatures, aes(x = day_of_year, y = temperature, color = ___)) +\n  geom_line()\n\n\n\n\n\n\n\n\n\n\n\nSolution\n\n\n\n\n\nggplot(temperatures, aes(x = day_of_year, y = temperature, color = location)) +\n  geom_line()\n\n\n\n\nTry again, this time using location as the location along the y axis and temperature for the color. This plot looks better with geom_point() than geom_line(). (Try it out to see why. Also, try geom_point(size = 5) to create larger points.)\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nHint\n\n\n\n\n\nggplot(temperatures, aes(x = ___, y = ___, color = ___)) +\n  geom_point()\n\n\n\n\n\n\n\n\n\n\n\nSolution\n\n\n\n\n\nggplot(temperatures, aes(x = day_of_year, y = location, color = temperature)) +\n  geom_point()"
  },
  {
    "objectID": "worksheets/aesthetic-mappings.html#using-the-fill-aesthetic",
    "href": "worksheets/aesthetic-mappings.html#using-the-fill-aesthetic",
    "title": "Aesthetic mappings",
    "section": "Using the fill aesthetic",
    "text": "Using the fill aesthetic\nSome geoms use a fill aesthetic, which is similar to color but applies to shaded areas. (color applies to lines and points.) For example, we can use the fill aesthetic with geom_boxplot() to color the interior of the box. Try this yourself. Plot month on x, temperature on y, and color the interior of the box by location.\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nHint\n\n\n\n\n\nggplot(temperatures, aes(x = month, y = ___, fill = ___)) +\n  geom_boxplot()\n\n\n\n\n\n\n\n\n\n\n\nSolution\n\n\n\n\n\nggplot(temperatures, aes(x = month, y = temperature, fill = location)) +\n  geom_boxplot()\n\n\n\n\nCan you color the lines of the boxplot by location and the interior by month? Try it.\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nHint\n\n\n\n\n\nggplot(temperatures, aes(x = month, y = temperature, color = ___, fill = ___)) +\n  geom_boxplot()\n\n\n\n\n\n\n\n\n\n\n\nSolution\n\n\n\n\n\nggplot(temperatures, aes(x = month, y = temperature, color = location, fill = month)) +\n  geom_boxplot()"
  },
  {
    "objectID": "worksheets/aesthetic-mappings.html#using-aesthetics-as-parameters",
    "href": "worksheets/aesthetic-mappings.html#using-aesthetics-as-parameters",
    "title": "Aesthetic mappings",
    "section": "Using aesthetics as parameters",
    "text": "Using aesthetics as parameters\nMany of the aesthetics (such as color, fill, and also size to change line size or point thickness) can be used as parameters inside a geom rather than inside an aes() statement. The difference is that when you use an aesthetic as a parameter, you specify a specific value, such as color = \"blue\", rather than a mapping, such as aes(color = location). Notice the difference: Inside the aes() function, we don’t actually specify the specific color values, ggplot does that for us. We only say that we want the data values of the location column to correspond to different colors. (We will learn later how to tell ggplot to use specific colors in this mapping.)\nTry this with the boxplot example from the previous section. Map location onto the fill aesthetic but set the color of the lines to \"navyblue\".\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nHint\n\n\n\n\n\nggplot(temperatures, aes(x = month, y = temperature, fill = ___)) +\n  geom_boxplot(color = ___)\n\n\n\n\n\n\n\n\n\n\n\nSolution\n\n\n\n\n\nggplot(temperatures, aes(x = month, y = temperature, fill = location)) +\n  geom_boxplot(color = \"navyblue\")\n\n\n\n\nNow do the reverse. Map location onto the line colors but fill the box with the color \"navyblue\".\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nHint\n\n\n\n\n\nggplot(temperatures, aes(x = month, y = temperature, color = ___)) +\n  geom_boxplot(fill = ___)\n\n\n\n\n\n\n\n\n\n\n\nSolution\n\n\n\n\n\nggplot(temperatures, aes(x = month, y = temperature, color = location)) +\n  geom_boxplot(fill = \"navyblue\")"
  },
  {
    "objectID": "slides/web-design.html#anatomy-of-a-web-site",
    "href": "slides/web-design.html#anatomy-of-a-web-site",
    "title": "Introduction to web design",
    "section": "Anatomy of a web site",
    "text": "Anatomy of a web site\n\nWeb sites consist of three components:\n\n\nHTML: Content of the site\n\n\nCSS: Appearance of the site\n\n\nJavaScript: Interactivity\n\n\nWe won’t be discussing JavaScript here"
  },
  {
    "objectID": "slides/web-design.html#block-and-inline-elements",
    "href": "slides/web-design.html#block-and-inline-elements",
    "title": "Introduction to web design",
    "section": "Block and inline elements",
    "text": "Block and inline elements\n\n&lt;div&gt;: Contents stacked vertically\n\n\n&lt;span&gt;: Contents placed inline"
  },
  {
    "objectID": "slides/web-design.html#block-and-inline-elements-1",
    "href": "slides/web-design.html#block-and-inline-elements-1",
    "title": "Introduction to web design",
    "section": "Block and inline elements",
    "text": "Block and inline elements\n\n\nHTML input:\n&lt;div&gt;This&lt;/div&gt;\n&lt;div&gt;is&lt;/div&gt;\n&lt;div&gt;an&lt;/div&gt;\n&lt;div&gt;example&lt;/div&gt;\n\nRendered output:\n\n\nThis\n\n\nis\n\n\nan\n\n\nexample\n\n\n\n\n&lt;div&gt; elements are stacked vertically from top to bottom"
  },
  {
    "objectID": "slides/web-design.html#block-and-inline-elements-2",
    "href": "slides/web-design.html#block-and-inline-elements-2",
    "title": "Introduction to web design",
    "section": "Block and inline elements",
    "text": "Block and inline elements\n\n\nHTML input:\n&lt;span&gt;This&lt;/span&gt;\n&lt;span&gt;is&lt;/span&gt;\n&lt;span&gt;an&lt;/span&gt;\n&lt;span&gt;example&lt;/span&gt;\n\nRendered output:\n\nThis is an example\n\n\n\n&lt;span&gt; elements are placed inline"
  },
  {
    "objectID": "slides/web-design.html#elements-can-be-nested",
    "href": "slides/web-design.html#elements-can-be-nested",
    "title": "Introduction to web design",
    "section": "Elements can be nested",
    "text": "Elements can be nested\n\n\nHTML input:\n&lt;div&gt;\n  &lt;span&gt;This&lt;/span&gt;\n  &lt;span&gt;is&lt;/span&gt;\n&lt;/div&gt;\n&lt;div&gt;\n  &lt;span&gt;an&lt;/span&gt;\n  &lt;span&gt;example&lt;/span&gt;\n&lt;div&gt;\n\nRendered output:\n\n\nThis is\n\n\nan example"
  },
  {
    "objectID": "slides/web-design.html#elements-are-styled-with-css",
    "href": "slides/web-design.html#elements-are-styled-with-css",
    "title": "Introduction to web design",
    "section": "Elements are styled with CSS",
    "text": "Elements are styled with CSS\n\n\nHTML input:\n&lt;div&gt;\nThis is an &lt;span&gt;example&lt;/span&gt;\n&lt;/div&gt;\n\nCSS input:\nspan { \n  color: #91322F;\n  font-weight: bold;\n}\n\n\nRendered output:\n\nThis is an example"
  },
  {
    "objectID": "slides/web-design.html#elements-are-styled-with-css-1",
    "href": "slides/web-design.html#elements-are-styled-with-css-1",
    "title": "Introduction to web design",
    "section": "Elements are styled with CSS",
    "text": "Elements are styled with CSS\n\n\nHTML input:\n&lt;div&gt;\nThis is an &lt;span&gt;example&lt;/span&gt;\n&lt;/div&gt;\n\nCSS input:\nspan { color: #91322F; }\n\ndiv {\n  background-color: #D4E1F3;\n}\n\n\nRendered output:\n\n\nThis is an example"
  },
  {
    "objectID": "slides/web-design.html#elements-are-styled-with-css-2",
    "href": "slides/web-design.html#elements-are-styled-with-css-2",
    "title": "Introduction to web design",
    "section": "Elements are styled with CSS",
    "text": "Elements are styled with CSS\n\n\nHTML input:\n&lt;div&gt;\nThis is an &lt;span&gt;example&lt;/span&gt;\n&lt;/div&gt;\n\nCSS input:\nspan { color: #91322F; }\n\ndiv {\n  background-color: #D4E1F3;\n  padding: 36px 8px 24px 8px;\n}\n\n\nRendered output:\n\n\nThis is an example"
  },
  {
    "objectID": "slides/web-design.html#elements-are-styled-with-css-3",
    "href": "slides/web-design.html#elements-are-styled-with-css-3",
    "title": "Introduction to web design",
    "section": "Elements are styled with CSS",
    "text": "Elements are styled with CSS\n\n\nHTML input:\n&lt;div&gt;\nThis is an &lt;span&gt;example&lt;/span&gt;\n&lt;/div&gt;\n\nCSS input:\nspan {\n  color: #91322F;\n  background-color: #D4E1F3;\n  padding: 48px 8px 64px 8px;\n}\n\n\nRendered output:\n\n\nThis is an example\n\n\n\n\nTop and bottom padding don’t affect the height of an inline element"
  },
  {
    "objectID": "slides/web-design.html#creating-complex-designs-css-classes-and-selectors",
    "href": "slides/web-design.html#creating-complex-designs-css-classes-and-selectors",
    "title": "Introduction to web design",
    "section": "Creating complex designs: CSS classes and selectors",
    "text": "Creating complex designs: CSS classes and selectors\n\n\nHTML input:\nThis is &lt;span class = \"red\"&gt;red&lt;/span&gt;,\n&lt;span class = \"green\"&gt;green&lt;/span&gt;,\nand &lt;span class = \"blue\"&gt;blue&lt;/span&gt;\ntext.\n\nCSS input:\n.red { color: red; }\n.green { color: green; }\n.blue { color: blue; }\n\n\nRendered output:\n\nThis is red, green, and blue text."
  },
  {
    "objectID": "slides/web-design.html#creating-complex-designs-css-classes-and-selectors-1",
    "href": "slides/web-design.html#creating-complex-designs-css-classes-and-selectors-1",
    "title": "Introduction to web design",
    "section": "Creating complex designs: CSS classes and selectors",
    "text": "Creating complex designs: CSS classes and selectors\n\n\nHTML input:\nThis is &lt;span class = \"red\"&gt;red&lt;/span&gt;,\n&lt;span class = \"green\"&gt;green&lt;/span&gt;,\nand &lt;span class = \"blue\"&gt;blue&lt;/span&gt;\ntext.\n\nCSS input:\n.red { color: red; }\n.green { color: green; }\n.blue { color: blue; }\nspan { font-weight: bold; }\n\n\nRendered output:\n\nThis is red, green, and blue text."
  },
  {
    "objectID": "slides/web-design.html#creating-complex-designs-css-classes-and-selectors-2",
    "href": "slides/web-design.html#creating-complex-designs-css-classes-and-selectors-2",
    "title": "Introduction to web design",
    "section": "Creating complex designs: CSS classes and selectors",
    "text": "Creating complex designs: CSS classes and selectors\n\n\nHTML input:\nThis is &lt;span class = \"red\"&gt;red&lt;/span&gt;,\n&lt;span class = \"green\"&gt;green&lt;/span&gt;,\nand &lt;span class = \"blue\"&gt;blue&lt;/span&gt;\ntext.\n\nCSS input:\n.red { color: red; }\n.green { color: green; }\n.blue { color: blue; }\nspan { font-weight: bold; }\nspan.red { color: firebrick; }\n\n\nRendered output:\n\nThis is red, green, and blue text."
  },
  {
    "objectID": "slides/web-design.html#creating-complex-designs-css-classes-and-selectors-3",
    "href": "slides/web-design.html#creating-complex-designs-css-classes-and-selectors-3",
    "title": "Introduction to web design",
    "section": "Creating complex designs: CSS classes and selectors",
    "text": "Creating complex designs: CSS classes and selectors\n\n\nHTML input:\n&lt;div class = \"red\"&gt;\nThis is &lt;span class = \"red\"&gt;red&lt;/span&gt;,\n&lt;span class = \"green\"&gt;green&lt;/span&gt;,\nand &lt;span class = \"blue\"&gt;blue&lt;/span&gt;\ntext.\n&lt;/div&gt;\n\nCSS input:\n.red { color: red; }\n.green { color: green; }\n.blue { color: blue; }\nspan { font-weight: bold; }\nspan.red { color: firebrick; }\n\n\nRendered output:\n\n\nThis is red, green, and blue text.\n\n\n\n\nThe CSS selector span.red is more specific than .red and therefore takes priority"
  },
  {
    "objectID": "slides/web-design.html#the-img-tag-images",
    "href": "slides/web-design.html#the-img-tag-images",
    "title": "Introduction to web design",
    "section": "The <img> tag: images",
    "text": "The &lt;img&gt; tag: images\n\nHTML input:\n&lt;img src = \"https://clauswilke.com/dataviz/cover.png\", width = 30% /&gt;\n\n\nRendered output:"
  },
  {
    "objectID": "slides/web-design.html#the-img-tag-images-1",
    "href": "slides/web-design.html#the-img-tag-images-1",
    "title": "Introduction to web design",
    "section": "The <img> tag: images",
    "text": "The &lt;img&gt; tag: images\n\nHTML input:\n&lt;img src = \"https://clauswilke.com/dataviz/cover.png\", width = 100% /&gt;\n\n\nRendered output:"
  },
  {
    "objectID": "slides/web-design.html#the-a-tag-links",
    "href": "slides/web-design.html#the-a-tag-links",
    "title": "Introduction to web design",
    "section": "The <a> tag: links",
    "text": "The &lt;a&gt; tag: links\n\nHTML input:\nMy book on data visualization:\n&lt;a href = \"https://clauswilke.com/dataviz/\"&gt;\nFundamentals of Data Visualization&lt;/a&gt;\n\n\nRendered output:\n\nMy book on data visualization:  Fundamentals of Data Visualization"
  },
  {
    "objectID": "slides/web-design.html#the-br-tag-line-breaks",
    "href": "slides/web-design.html#the-br-tag-line-breaks",
    "title": "Introduction to web design",
    "section": "The <br> tag: line breaks",
    "text": "The &lt;br&gt; tag: line breaks\n\nHTML input:\nMy book on data visualization:&lt;br&gt;\n&lt;a href = \"https://clauswilke.com/dataviz/\"&gt;\nFundamentals of Data Visualization&lt;/a&gt;\n\n\nRendered output:\n\nMy book on data visualization:  Fundamentals of Data Visualization"
  },
  {
    "objectID": "slides/web-design.html#the-ul-and-li-tags-unordered-lists",
    "href": "slides/web-design.html#the-ul-and-li-tags-unordered-lists",
    "title": "Introduction to web design",
    "section": "The <ul> and <li> tags: unordered lists",
    "text": "The &lt;ul&gt; and &lt;li&gt; tags: unordered lists\n\n\nHTML input:\nSome fruit:\n\n&lt;ul&gt;\n  &lt;li&gt;Apples&lt;/li&gt;\n  &lt;li&gt;Oranges&lt;/li&gt;\n  &lt;li&gt;Bananas&lt;/li&gt;\n&lt;/ul&gt;\n\nRendered output:\n\nSome fruit:\n\n\nApples\n\n\nOranges\n\n\nBananas"
  },
  {
    "objectID": "slides/web-design.html#the-ol-and-li-tags-unordered-lists",
    "href": "slides/web-design.html#the-ol-and-li-tags-unordered-lists",
    "title": "Introduction to web design",
    "section": "The <ol> and <li> tags: unordered lists",
    "text": "The &lt;ol&gt; and &lt;li&gt; tags: unordered lists\n\n\nHTML input:\nSome fruit:\n\n&lt;ol&gt;\n  &lt;li&gt;Apples&lt;/li&gt;\n  &lt;li&gt;Oranges&lt;/li&gt;\n  &lt;li&gt;Bananas&lt;/li&gt;\n&lt;/ol&gt;\n\nRendered output:\n\nSome fruit:\n\n\nApples\n\n\nOranges\n\n\nBananas"
  },
  {
    "objectID": "slides/web-design.html#publishing-4",
    "href": "slides/web-design.html#publishing-4",
    "title": "Introduction to web design",
    "section": "",
    "text": "https://app.netlify.com/drop"
  },
  {
    "objectID": "slides/web-design.html#alternatives-to-netlify",
    "href": "slides/web-design.html#alternatives-to-netlify",
    "title": "Introduction to web design",
    "section": "Alternatives to Netlify",
    "text": "Alternatives to Netlify\n\n\nGitHub pages\nQuartoPub\nAny webhosting service\n\n\n\nFor details and more options, see: https://quarto.org/docs/publishing/"
  },
  {
    "objectID": "slides/web-design.html#further-reading",
    "href": "slides/web-design.html#further-reading",
    "title": "Introduction to web design",
    "section": "Further reading",
    "text": "Further reading\n\nMDN Web Docs: Learn to style HTML using CSS\nw3schools.com: CSS Tutorial\nQuarto: Guide"
  },
  {
    "objectID": "slides/visualizing-uncertainty.html#we-all-know-how-to-visualize-uncertainty-right",
    "href": "slides/visualizing-uncertainty.html#we-all-know-how-to-visualize-uncertainty-right",
    "title": "Visualizing Uncertainty",
    "section": "We all know how to visualize uncertainty, right?",
    "text": "We all know how to visualize uncertainty, right?\n\n\n\n\n\n\n\n\nMilk butterfat contents by cattle breed. Source: Canadian Record of Performance for Purebred Dairy Cattle"
  },
  {
    "objectID": "slides/visualizing-uncertainty.html#we-all-know-how-to-visualize-uncertainty-right-1",
    "href": "slides/visualizing-uncertainty.html#we-all-know-how-to-visualize-uncertainty-right-1",
    "title": "Visualizing Uncertainty",
    "section": "We all know how to visualize uncertainty, right?",
    "text": "We all know how to visualize uncertainty, right?\n\n\n\n\n\n\n\n\nIncome versus age for 67 counties in Pennsylvania. Source: 2015 Five-Year American Community Survey"
  },
  {
    "objectID": "slides/visualizing-uncertainty.html#we-all-know-how-to-visualize-uncertainty-right-2",
    "href": "slides/visualizing-uncertainty.html#we-all-know-how-to-visualize-uncertainty-right-2",
    "title": "Visualizing Uncertainty",
    "section": "We all know how to visualize uncertainty, right?",
    "text": "We all know how to visualize uncertainty, right?\n\n\n\n\n\n\n\n\nHead length versus body mass for male blue jays. Data source: Keith Tarvin, Oberlin College"
  },
  {
    "objectID": "slides/visualizing-uncertainty.html#these-commonly-used-visualizations-have-problems",
    "href": "slides/visualizing-uncertainty.html#these-commonly-used-visualizations-have-problems",
    "title": "Visualizing Uncertainty",
    "section": "These commonly used visualizations have problems",
    "text": "These commonly used visualizations have problems\n\n\nIt’s often not clear what exactly the visualizations represent\nEven if we know, we can have difficulty interpreting what we see"
  },
  {
    "objectID": "slides/visualizing-uncertainty.html#its-often-not-clear-what-the-visualizations-represent",
    "href": "slides/visualizing-uncertainty.html#its-often-not-clear-what-the-visualizations-represent",
    "title": "Visualizing Uncertainty",
    "section": "It’s often not clear what the visualizations represent",
    "text": "It’s often not clear what the visualizations represent\n\nIn particular, error bars can represent many different quantities\n\n\n\n\n\n\n\n\n\nChocolate bar ratings. Source: Manhattan Chocolate Society"
  },
  {
    "objectID": "slides/visualizing-uncertainty.html#we-can-have-difficulty-interpreting-what-we-see",
    "href": "slides/visualizing-uncertainty.html#we-can-have-difficulty-interpreting-what-we-see",
    "title": "Visualizing Uncertainty",
    "section": "We can have difficulty interpreting what we see",
    "text": "We can have difficulty interpreting what we see\n\n\nPeople are not good at reasoning about probabilities\nPeople will substitute uncertainty with simpler concepts\n(Deterministic Construal Error)\nPeople will interpret intervals as hard boundaries\n\n\n\nLace Padilla, Matthew Kay, and Jessica Hullman (2022): Uncertainty Visualization"
  },
  {
    "objectID": "slides/visualizing-uncertainty.html#uncertainty-shown-as-95-ci-error-bars-with-caps",
    "href": "slides/visualizing-uncertainty.html#uncertainty-shown-as-95-ci-error-bars-with-caps",
    "title": "Visualizing Uncertainty",
    "section": "Uncertainty shown as 95% CI error bars with caps",
    "text": "Uncertainty shown as 95% CI error bars with caps\n\nChocolate bars from four countries compared to bars from the US \n\n\n\n\n\n\n\nRelative rankings compared to US chocolate bars. Source: Manhattan Chocolate Society"
  },
  {
    "objectID": "slides/visualizing-uncertainty.html#uncertainty-shown-as-95-ci-error-bars-with-caps-1",
    "href": "slides/visualizing-uncertainty.html#uncertainty-shown-as-95-ci-error-bars-with-caps-1",
    "title": "Visualizing Uncertainty",
    "section": "Uncertainty shown as 95% CI error bars with caps",
    "text": "Uncertainty shown as 95% CI error bars with caps\n\nDeterminstic Construal Error:Error bars are interpreted as min/max values\n\n\n\n\n\n\n\nRelative rankings compared to US chocolate bars. Source: Manhattan Chocolate Society"
  },
  {
    "objectID": "slides/visualizing-uncertainty.html#uncertainty-shown-as-95-ci-error-bars-with-caps-2",
    "href": "slides/visualizing-uncertainty.html#uncertainty-shown-as-95-ci-error-bars-with-caps-2",
    "title": "Visualizing Uncertainty",
    "section": "Uncertainty shown as 95% CI error bars with caps",
    "text": "Uncertainty shown as 95% CI error bars with caps\n\nCategorical thinking:Areas outside and inside the error bars are categorically different\n\n\n\n\n\n\n\nRelative rankings compared to US chocolate bars. Source: Manhattan Chocolate Society"
  },
  {
    "objectID": "slides/visualizing-uncertainty.html#uncertainty-shown-as-95-ci-error-bars-without-caps",
    "href": "slides/visualizing-uncertainty.html#uncertainty-shown-as-95-ci-error-bars-without-caps",
    "title": "Visualizing Uncertainty",
    "section": "Uncertainty shown as 95% CI error bars without caps",
    "text": "Uncertainty shown as 95% CI error bars without caps\n\nYou can remove caps to make the boundary visually less severe \n\n\n\n\n\n\n\nRelative rankings compared to US chocolate bars. Source: Manhattan Chocolate Society"
  },
  {
    "objectID": "slides/visualizing-uncertainty.html#uncertainty-shown-as-graded-error-bars",
    "href": "slides/visualizing-uncertainty.html#uncertainty-shown-as-graded-error-bars",
    "title": "Visualizing Uncertainty",
    "section": "Uncertainty shown as graded error bars",
    "text": "Uncertainty shown as graded error bars\n\nYou can show multiple confidence levels to de-emphasize existence of boundary\n\n\n\n\n\n\n\nRelative rankings compared to US chocolate bars. Source: Manhattan Chocolate Society"
  },
  {
    "objectID": "slides/visualizing-uncertainty.html#uncertainty-shown-as-confidence-strips",
    "href": "slides/visualizing-uncertainty.html#uncertainty-shown-as-confidence-strips",
    "title": "Visualizing Uncertainty",
    "section": "Uncertainty shown as confidence strips",
    "text": "Uncertainty shown as confidence strips\n\nYou can use faded strips (but hard to read/interpret) \n\n\n\n\n\n\n\nRelative rankings compared to US chocolate bars. Source: Manhattan Chocolate Society"
  },
  {
    "objectID": "slides/visualizing-uncertainty.html#uncertainty-shown-as-distributions",
    "href": "slides/visualizing-uncertainty.html#uncertainty-shown-as-distributions",
    "title": "Visualizing Uncertainty",
    "section": "Uncertainty shown as distributions",
    "text": "Uncertainty shown as distributions\n\nYou can show actual distributions Popular in Bayesian inference, but still difficult to interpret\n\n\n\n\n\n\n\nRelative rankings compared to US chocolate bars. Source: Manhattan Chocolate Society"
  },
  {
    "objectID": "slides/visualizing-uncertainty.html#consider-the-actual-experience-of-a-customer",
    "href": "slides/visualizing-uncertainty.html#consider-the-actual-experience-of-a-customer",
    "title": "Visualizing Uncertainty",
    "section": "Consider the actual experience of a customer",
    "text": "Consider the actual experience of a customer\n\nIf I can buy either a Canadian or a US bar, what is the probability that the Canadian bar will be better?\n\n\nAnswer: The Canadian bar has a 53% chance of being better\n\n\nHow can we communicate this?"
  },
  {
    "objectID": "slides/visualizing-uncertainty.html#use-frequency-framing-to-communicate-probabilities",
    "href": "slides/visualizing-uncertainty.html#use-frequency-framing-to-communicate-probabilities",
    "title": "Visualizing Uncertainty",
    "section": "Use frequency framing to communicate probabilities",
    "text": "Use frequency framing to communicate probabilities"
  },
  {
    "objectID": "slides/visualizing-uncertainty.html#use-frequency-framing-to-communicate-probabilities-1",
    "href": "slides/visualizing-uncertainty.html#use-frequency-framing-to-communicate-probabilities-1",
    "title": "Visualizing Uncertainty",
    "section": "Use frequency framing to communicate probabilities",
    "text": "Use frequency framing to communicate probabilities"
  },
  {
    "objectID": "slides/visualizing-uncertainty.html#use-frequency-framing-to-communicate-probabilities-2",
    "href": "slides/visualizing-uncertainty.html#use-frequency-framing-to-communicate-probabilities-2",
    "title": "Visualizing Uncertainty",
    "section": "Use frequency framing to communicate probabilities",
    "text": "Use frequency framing to communicate probabilities"
  },
  {
    "objectID": "slides/visualizing-uncertainty.html#use-frequency-framing-to-communicate-probabilities-3",
    "href": "slides/visualizing-uncertainty.html#use-frequency-framing-to-communicate-probabilities-3",
    "title": "Visualizing Uncertainty",
    "section": "Use frequency framing to communicate probabilities",
    "text": "Use frequency framing to communicate probabilities"
  },
  {
    "objectID": "slides/visualizing-uncertainty.html#use-frequency-framing-to-communicate-probabilities-4",
    "href": "slides/visualizing-uncertainty.html#use-frequency-framing-to-communicate-probabilities-4",
    "title": "Visualizing Uncertainty",
    "section": "Use frequency framing to communicate probabilities",
    "text": "Use frequency framing to communicate probabilities"
  },
  {
    "objectID": "slides/visualizing-uncertainty.html#alternatively-use-hypothetical-outcome-plots",
    "href": "slides/visualizing-uncertainty.html#alternatively-use-hypothetical-outcome-plots",
    "title": "Visualizing Uncertainty",
    "section": "Alternatively: Use Hypothetical Outcome Plots",
    "text": "Alternatively: Use Hypothetical Outcome Plots\nHypothetical Outcome Plots use animation to let viewers experience uncertainty\n\nHullman et al., PLOS ONE 2015"
  },
  {
    "objectID": "slides/visualizing-uncertainty.html#alternatively-use-hypothetical-outcome-plots-1",
    "href": "slides/visualizing-uncertainty.html#alternatively-use-hypothetical-outcome-plots-1",
    "title": "Visualizing Uncertainty",
    "section": "Alternatively: Use Hypothetical Outcome Plots",
    "text": "Alternatively: Use Hypothetical Outcome Plots\nHypothetical Outcome Plots use animation to let viewers experience uncertainty\n\n\n\n\n\n\nHullman et al., PLOS ONE 2015"
  },
  {
    "objectID": "slides/visualizing-uncertainty.html#lets-now-consider-the-uncertainty-of-trend-lines",
    "href": "slides/visualizing-uncertainty.html#lets-now-consider-the-uncertainty-of-trend-lines",
    "title": "Visualizing Uncertainty",
    "section": "Let’s now consider the uncertainty of trend lines",
    "text": "Let’s now consider the uncertainty of trend lines\n\nWhat does the confidence band show?\n\n\n\n\n\n\nHead length versus body mass for male blue jays. Data source: Keith Tarvin, Oberlin College"
  },
  {
    "objectID": "slides/visualizing-uncertainty.html#lets-now-consider-the-uncertainty-of-trend-lines-1",
    "href": "slides/visualizing-uncertainty.html#lets-now-consider-the-uncertainty-of-trend-lines-1",
    "title": "Visualizing Uncertainty",
    "section": "Let’s now consider the uncertainty of trend lines",
    "text": "Let’s now consider the uncertainty of trend lines\nBoth the intercept and the slope have uncertainty\n\n\n\n\n\n\nHead length versus body mass for male blue jays. Data source: Keith Tarvin, Oberlin College"
  },
  {
    "objectID": "slides/visualizing-uncertainty.html#it-gets-even-more-confusing-for-non-linear-trend-lines",
    "href": "slides/visualizing-uncertainty.html#it-gets-even-more-confusing-for-non-linear-trend-lines",
    "title": "Visualizing Uncertainty",
    "section": "It gets even more confusing for non-linear trend lines",
    "text": "It gets even more confusing for non-linear trend lines\nIndividual sample fits tend to be more wiggly than the mean\n\n\n\n\n\n\nFuel efficiency versus displacement, for 32 cars (1973–74 models). Source: Motor Trend, 1974"
  },
  {
    "objectID": "slides/visualizing-uncertainty.html#hypothetical-outcome-plots-again-help-develop-intuition",
    "href": "slides/visualizing-uncertainty.html#hypothetical-outcome-plots-again-help-develop-intuition",
    "title": "Visualizing Uncertainty",
    "section": "Hypothetical Outcome Plots again help develop intuition",
    "text": "Hypothetical Outcome Plots again help develop intuition\n\n\n\n\n\n\nFuel efficiency versus displacement, for 32 cars (1973–74 models). Source: Motor Trend, 1974"
  },
  {
    "objectID": "slides/visualizing-uncertainty.html#making-a-plot-with-error-bars",
    "href": "slides/visualizing-uncertainty.html#making-a-plot-with-error-bars",
    "title": "Visualizing Uncertainty",
    "section": "Making a plot with error bars",
    "text": "Making a plot with error bars\n\nExample: Relationship between life expectancy and GDP per capita"
  },
  {
    "objectID": "slides/visualizing-uncertainty.html#making-a-plot-with-error-bars-1",
    "href": "slides/visualizing-uncertainty.html#making-a-plot-with-error-bars-1",
    "title": "Visualizing Uncertainty",
    "section": "Making a plot with error bars",
    "text": "Making a plot with error bars\n\nExample: Relationship between life expectancy and GDP per capita"
  },
  {
    "objectID": "slides/visualizing-uncertainty.html#making-a-plot-with-error-bars-2",
    "href": "slides/visualizing-uncertainty.html#making-a-plot-with-error-bars-2",
    "title": "Visualizing Uncertainty",
    "section": "Making a plot with error bars",
    "text": "Making a plot with error bars\n\n\nlm_data &lt;- gapminder |&gt;\n  nest(data = -c(continent, year))\n\nlm_data\n\n# A tibble: 60 × 3\n   continent  year data             \n   &lt;fct&gt;     &lt;int&gt; &lt;list&gt;           \n 1 Asia       1952 &lt;tibble [33 × 4]&gt;\n 2 Asia       1957 &lt;tibble [33 × 4]&gt;\n 3 Asia       1962 &lt;tibble [33 × 4]&gt;\n 4 Asia       1967 &lt;tibble [33 × 4]&gt;\n 5 Asia       1972 &lt;tibble [33 × 4]&gt;\n 6 Asia       1977 &lt;tibble [33 × 4]&gt;\n 7 Asia       1982 &lt;tibble [33 × 4]&gt;\n 8 Asia       1987 &lt;tibble [33 × 4]&gt;\n 9 Asia       1992 &lt;tibble [33 × 4]&gt;\n10 Asia       1997 &lt;tibble [33 × 4]&gt;\n# ℹ 50 more rows"
  },
  {
    "objectID": "slides/visualizing-uncertainty.html#making-a-plot-with-error-bars-3",
    "href": "slides/visualizing-uncertainty.html#making-a-plot-with-error-bars-3",
    "title": "Visualizing Uncertainty",
    "section": "Making a plot with error bars",
    "text": "Making a plot with error bars\n\n\nlm_data &lt;- gapminder |&gt;\n  nest(data = -c(continent, year)) |&gt;\n  mutate(\n    fit = map(data, ~lm(lifeExp ~ log(gdpPercap), data = .x))\n  )\n\nlm_data\n\n# A tibble: 60 × 4\n   continent  year data              fit   \n   &lt;fct&gt;     &lt;int&gt; &lt;list&gt;            &lt;list&gt;\n 1 Asia       1952 &lt;tibble [33 × 4]&gt; &lt;lm&gt;  \n 2 Asia       1957 &lt;tibble [33 × 4]&gt; &lt;lm&gt;  \n 3 Asia       1962 &lt;tibble [33 × 4]&gt; &lt;lm&gt;  \n 4 Asia       1967 &lt;tibble [33 × 4]&gt; &lt;lm&gt;  \n 5 Asia       1972 &lt;tibble [33 × 4]&gt; &lt;lm&gt;  \n 6 Asia       1977 &lt;tibble [33 × 4]&gt; &lt;lm&gt;  \n 7 Asia       1982 &lt;tibble [33 × 4]&gt; &lt;lm&gt;  \n 8 Asia       1987 &lt;tibble [33 × 4]&gt; &lt;lm&gt;  \n 9 Asia       1992 &lt;tibble [33 × 4]&gt; &lt;lm&gt;  \n10 Asia       1997 &lt;tibble [33 × 4]&gt; &lt;lm&gt;  \n# ℹ 50 more rows"
  },
  {
    "objectID": "slides/visualizing-uncertainty.html#making-a-plot-with-error-bars-4",
    "href": "slides/visualizing-uncertainty.html#making-a-plot-with-error-bars-4",
    "title": "Visualizing Uncertainty",
    "section": "Making a plot with error bars",
    "text": "Making a plot with error bars\n\n\nlm_data &lt;- gapminder |&gt;\n  nest(data = -c(continent, year)) |&gt;\n  mutate(\n    fit = map(data, ~lm(lifeExp ~ log(gdpPercap), data = .x)),\n    tidy_out = map(fit, tidy)\n  )\n\nlm_data\n\n# A tibble: 60 × 5\n   continent  year data              fit    tidy_out        \n   &lt;fct&gt;     &lt;int&gt; &lt;list&gt;            &lt;list&gt; &lt;list&gt;          \n 1 Asia       1952 &lt;tibble [33 × 4]&gt; &lt;lm&gt;   &lt;tibble [2 × 5]&gt;\n 2 Asia       1957 &lt;tibble [33 × 4]&gt; &lt;lm&gt;   &lt;tibble [2 × 5]&gt;\n 3 Asia       1962 &lt;tibble [33 × 4]&gt; &lt;lm&gt;   &lt;tibble [2 × 5]&gt;\n 4 Asia       1967 &lt;tibble [33 × 4]&gt; &lt;lm&gt;   &lt;tibble [2 × 5]&gt;\n 5 Asia       1972 &lt;tibble [33 × 4]&gt; &lt;lm&gt;   &lt;tibble [2 × 5]&gt;\n 6 Asia       1977 &lt;tibble [33 × 4]&gt; &lt;lm&gt;   &lt;tibble [2 × 5]&gt;\n 7 Asia       1982 &lt;tibble [33 × 4]&gt; &lt;lm&gt;   &lt;tibble [2 × 5]&gt;\n 8 Asia       1987 &lt;tibble [33 × 4]&gt; &lt;lm&gt;   &lt;tibble [2 × 5]&gt;\n 9 Asia       1992 &lt;tibble [33 × 4]&gt; &lt;lm&gt;   &lt;tibble [2 × 5]&gt;\n10 Asia       1997 &lt;tibble [33 × 4]&gt; &lt;lm&gt;   &lt;tibble [2 × 5]&gt;\n# ℹ 50 more rows"
  },
  {
    "objectID": "slides/visualizing-uncertainty.html#making-a-plot-with-error-bars-5",
    "href": "slides/visualizing-uncertainty.html#making-a-plot-with-error-bars-5",
    "title": "Visualizing Uncertainty",
    "section": "Making a plot with error bars",
    "text": "Making a plot with error bars\n\n\nlm_data &lt;- gapminder |&gt;\n  nest(data = -c(continent, year)) |&gt;\n  mutate(\n    fit = map(data, ~lm(lifeExp ~ log(gdpPercap), data = .x)),\n    tidy_out = map(fit, tidy)\n  ) |&gt;\n  unnest(cols = tidy_out)\n\nlm_data\n\n# A tibble: 120 × 9\n   continent  year data     fit    term     estimate std.error statistic p.value\n   &lt;fct&gt;     &lt;int&gt; &lt;list&gt;   &lt;list&gt; &lt;chr&gt;       &lt;dbl&gt;     &lt;dbl&gt;     &lt;dbl&gt;   &lt;dbl&gt;\n 1 Asia       1952 &lt;tibble&gt; &lt;lm&gt;   (Interc…    15.8       9.27      1.71 9.78e-2\n 2 Asia       1952 &lt;tibble&gt; &lt;lm&gt;   log(gdp…     4.16      1.25      3.33 2.28e-3\n 3 Asia       1957 &lt;tibble&gt; &lt;lm&gt;   (Interc…    18.1       9.70      1.86 7.20e-2\n 4 Asia       1957 &lt;tibble&gt; &lt;lm&gt;   log(gdp…     4.17      1.28      3.26 2.71e-3\n 5 Asia       1962 &lt;tibble&gt; &lt;lm&gt;   (Interc…    16.6       9.52      1.74 9.11e-2\n 6 Asia       1962 &lt;tibble&gt; &lt;lm&gt;   log(gdp…     4.59      1.24      3.72 7.94e-4\n 7 Asia       1967 &lt;tibble&gt; &lt;lm&gt;   (Interc…    19.8       9.05      2.19 3.64e-2\n 8 Asia       1967 &lt;tibble&gt; &lt;lm&gt;   log(gdp…     4.50      1.15      3.90 4.77e-4\n 9 Asia       1972 &lt;tibble&gt; &lt;lm&gt;   (Interc…    21.9       8.14      2.69 1.13e-2\n10 Asia       1972 &lt;tibble&gt; &lt;lm&gt;   log(gdp…     4.44      1.01      4.41 1.16e-4\n# ℹ 110 more rows"
  },
  {
    "objectID": "slides/visualizing-uncertainty.html#making-a-plot-with-error-bars-6",
    "href": "slides/visualizing-uncertainty.html#making-a-plot-with-error-bars-6",
    "title": "Visualizing Uncertainty",
    "section": "Making a plot with error bars",
    "text": "Making a plot with error bars\n\n\nlm_data &lt;- gapminder |&gt;\n  nest(data = -c(continent, year)) |&gt;\n  mutate(\n    fit = map(data, ~lm(lifeExp ~ log(gdpPercap), data = .x)),\n    tidy_out = map(fit, tidy)\n  ) |&gt;\n  unnest(cols = tidy_out) |&gt;\n  select(-fit, -data)\n\nlm_data\n\n# A tibble: 120 × 7\n   continent  year term           estimate std.error statistic  p.value\n   &lt;fct&gt;     &lt;int&gt; &lt;chr&gt;             &lt;dbl&gt;     &lt;dbl&gt;     &lt;dbl&gt;    &lt;dbl&gt;\n 1 Asia       1952 (Intercept)       15.8       9.27      1.71 0.0978  \n 2 Asia       1952 log(gdpPercap)     4.16      1.25      3.33 0.00228 \n 3 Asia       1957 (Intercept)       18.1       9.70      1.86 0.0720  \n 4 Asia       1957 log(gdpPercap)     4.17      1.28      3.26 0.00271 \n 5 Asia       1962 (Intercept)       16.6       9.52      1.74 0.0911  \n 6 Asia       1962 log(gdpPercap)     4.59      1.24      3.72 0.000794\n 7 Asia       1967 (Intercept)       19.8       9.05      2.19 0.0364  \n 8 Asia       1967 log(gdpPercap)     4.50      1.15      3.90 0.000477\n 9 Asia       1972 (Intercept)       21.9       8.14      2.69 0.0113  \n10 Asia       1972 log(gdpPercap)     4.44      1.01      4.41 0.000116\n# ℹ 110 more rows"
  },
  {
    "objectID": "slides/visualizing-uncertainty.html#making-a-plot-with-error-bars-7",
    "href": "slides/visualizing-uncertainty.html#making-a-plot-with-error-bars-7",
    "title": "Visualizing Uncertainty",
    "section": "Making a plot with error bars",
    "text": "Making a plot with error bars\n\n\nlm_data &lt;- gapminder |&gt;\n  nest(data = -c(continent, year)) |&gt;\n  mutate(\n    fit = map(data, ~lm(lifeExp ~ log(gdpPercap), data = .x)),\n    tidy_out = map(fit, tidy)\n  ) |&gt;\n  unnest(cols = tidy_out) |&gt;\n  select(-fit, -data) |&gt;\n  filter(term != \"(Intercept)\", continent != \"Oceania\")\n\nlm_data\n\n# A tibble: 48 × 7\n   continent  year term           estimate std.error statistic       p.value\n   &lt;fct&gt;     &lt;int&gt; &lt;chr&gt;             &lt;dbl&gt;     &lt;dbl&gt;     &lt;dbl&gt;         &lt;dbl&gt;\n 1 Asia       1952 log(gdpPercap)     4.16     1.25       3.33 0.00228      \n 2 Asia       1957 log(gdpPercap)     4.17     1.28       3.26 0.00271      \n 3 Asia       1962 log(gdpPercap)     4.59     1.24       3.72 0.000794     \n 4 Asia       1967 log(gdpPercap)     4.50     1.15       3.90 0.000477     \n 5 Asia       1972 log(gdpPercap)     4.44     1.01       4.41 0.000116     \n 6 Asia       1977 log(gdpPercap)     4.87     1.03       4.75 0.0000442    \n 7 Asia       1982 log(gdpPercap)     4.78     0.852      5.61 0.00000377   \n 8 Asia       1987 log(gdpPercap)     5.17     0.727      7.12 0.0000000531 \n 9 Asia       1992 log(gdpPercap)     5.09     0.649      7.84 0.00000000760\n10 Asia       1997 log(gdpPercap)     5.11     0.628      8.15 0.00000000335\n# ℹ 38 more rows"
  },
  {
    "objectID": "slides/visualizing-uncertainty.html#making-a-plot-with-error-bars-8",
    "href": "slides/visualizing-uncertainty.html#making-a-plot-with-error-bars-8",
    "title": "Visualizing Uncertainty",
    "section": "Making a plot with error bars",
    "text": "Making a plot with error bars\n\n\n\nggplot(lm_data) +\n  aes(\n    x = year, y = estimate,\n    ymin = estimate - 1.96*std.error,\n    ymax = estimate + 1.96*std.error,\n    color = continent\n  ) +\n  geom_pointrange(\n    position = position_dodge(width = 1)\n  ) +\n  scale_x_continuous(\n    breaks = unique(gapminder$year)\n  ) + \n  theme(legend.position = \"top\")"
  },
  {
    "objectID": "slides/visualizing-uncertainty.html#half-eyes-gradient-intervals-etc",
    "href": "slides/visualizing-uncertainty.html#half-eyes-gradient-intervals-etc",
    "title": "Visualizing Uncertainty",
    "section": "Half-eyes, gradient intervals, etc",
    "text": "Half-eyes, gradient intervals, etc\n\nThe ggdist package provides many different visualizations of uncertainty\n\n\n\n\nlibrary(ggdist)\nlibrary(distributional) # for dist_normal()\n\nlm_data |&gt;\n  filter(year == 1952) |&gt;\n  mutate(\n    continent = \n      fct_reorder(continent, estimate) \n  ) |&gt;\n  ggplot(aes(x = estimate, y = continent)) +\n  stat_dist_halfeye(\n    aes(dist = dist_normal(\n      mu = estimate, sigma = std.error\n    )),\n    point_size = 4\n  )"
  },
  {
    "objectID": "slides/visualizing-uncertainty.html#half-eyes-gradient-intervals-etc-1",
    "href": "slides/visualizing-uncertainty.html#half-eyes-gradient-intervals-etc-1",
    "title": "Visualizing Uncertainty",
    "section": "Half-eyes, gradient intervals, etc",
    "text": "Half-eyes, gradient intervals, etc\n\nThe ggdist package provides many different visualizations of uncertainty\n\n\n\n\nlibrary(ggdist)\nlibrary(distributional) # for dist_normal()\n\nlm_data |&gt;\n  filter(year == 1952) |&gt;\n  mutate(\n    continent = \n      fct_reorder(continent, estimate) \n  ) |&gt;\n  ggplot(aes(x = estimate, y = continent)) +\n  stat_dist_gradientinterval(\n    aes(dist = dist_normal(\n      mu = estimate, sigma = std.error\n    )),\n    point_size = 4,\n    fill = \"skyblue\"\n  )"
  },
  {
    "objectID": "slides/visualizing-uncertainty.html#half-eyes-gradient-intervals-etc-2",
    "href": "slides/visualizing-uncertainty.html#half-eyes-gradient-intervals-etc-2",
    "title": "Visualizing Uncertainty",
    "section": "Half-eyes, gradient intervals, etc",
    "text": "Half-eyes, gradient intervals, etc\n\nThe ggdist package provides many different visualizations of uncertainty\n\n\n\n\nlibrary(ggdist)\nlibrary(distributional) # for dist_normal()\n\nlm_data |&gt;\n  filter(year == 1952) |&gt;\n  mutate(\n    continent = \n      fct_reorder(continent, estimate) \n  ) |&gt;\n  ggplot(aes(x = estimate, y = continent)) +\n  stat_dist_dotsinterval(\n    aes(dist = dist_normal(\n      mu = estimate, sigma = std.error\n    )),\n    point_size = 4,\n    fill = \"skyblue\",\n    quantiles = 20\n  )"
  },
  {
    "objectID": "slides/visualizing-uncertainty.html#half-eyes-gradient-intervals-etc-3",
    "href": "slides/visualizing-uncertainty.html#half-eyes-gradient-intervals-etc-3",
    "title": "Visualizing Uncertainty",
    "section": "Half-eyes, gradient intervals, etc",
    "text": "Half-eyes, gradient intervals, etc\n\nThe ggdist package provides many different visualizations of uncertainty\n\n\n\n\nlibrary(ggdist)\nlibrary(distributional) # for dist_normal()\n\nlm_data |&gt;\n  filter(year == 1952) |&gt;\n  mutate(\n    continent = \n      fct_reorder(continent, estimate) \n  ) |&gt;\n  ggplot(aes(x = estimate, y = continent)) +\n  stat_dist_dotsinterval(\n    aes(dist = dist_normal(\n      mu = estimate, sigma = std.error\n    )),\n    point_size = 4,\n    fill = \"skyblue\",\n    quantiles = 10\n  )"
  },
  {
    "objectID": "slides/visualizing-uncertainty.html#further-reading",
    "href": "slides/visualizing-uncertainty.html#further-reading",
    "title": "Visualizing Uncertainty",
    "section": "Further reading",
    "text": "Further reading\n\nFundamentals of Data Visualization: Chapter 16: Visualizing uncertainty\nData Visualization—A Practical Introduction: Chapter 6.6: Grouped analysis and list columns\nData Visualization—A Practical Introduction: Chapter 6.7: Plot marginal effects\nggdist reference documentation: https://mjskay.github.io/ggdist/index.html\nggdist vignette: Frequentist uncertainty visualization"
  },
  {
    "objectID": "slides/visualizing-proportions.html#the-archetypal-visualization-of-proportions-pie-chart",
    "href": "slides/visualizing-proportions.html#the-archetypal-visualization-of-proportions-pie-chart",
    "title": "Visualizing proportions",
    "section": "The archetypal visualization of proportions: pie chart",
    "text": "The archetypal visualization of proportions: pie chart\n\n\n\n\n\n\n\n \n\n\n\n\n\n\nParty composition of the 8th German Bundestag, 1976–1980"
  },
  {
    "objectID": "slides/visualizing-proportions.html#pie-chart-vs-stacked-bars-vs-side-by-side-bars",
    "href": "slides/visualizing-proportions.html#pie-chart-vs-stacked-bars-vs-side-by-side-bars",
    "title": "Visualizing proportions",
    "section": "Pie chart vs stacked bars vs side-by-side bars",
    "text": "Pie chart vs stacked bars vs side-by-side bars"
  },
  {
    "objectID": "slides/visualizing-proportions.html#pie-chart-vs-stacked-bars-vs-side-by-side-bars-1",
    "href": "slides/visualizing-proportions.html#pie-chart-vs-stacked-bars-vs-side-by-side-bars-1",
    "title": "Visualizing proportions",
    "section": "Pie chart vs stacked bars vs side-by-side bars",
    "text": "Pie chart vs stacked bars vs side-by-side bars"
  },
  {
    "objectID": "slides/visualizing-proportions.html#pie-chart-vs-stacked-bars-vs-side-by-side-bars-2",
    "href": "slides/visualizing-proportions.html#pie-chart-vs-stacked-bars-vs-side-by-side-bars-2",
    "title": "Visualizing proportions",
    "section": "Pie chart vs stacked bars vs side-by-side bars",
    "text": "Pie chart vs stacked bars vs side-by-side bars"
  },
  {
    "objectID": "slides/visualizing-proportions.html#example-where-side-by-side-bars-are-preferred",
    "href": "slides/visualizing-proportions.html#example-where-side-by-side-bars-are-preferred",
    "title": "Visualizing proportions",
    "section": "Example where side-by-side bars are preferred",
    "text": "Example where side-by-side bars are preferred\n\n\n\n\n\n\n \n\n\n\n\n\n\nInspired by: https://en.wikipedia.org/wiki/File:Piecharts.svg"
  },
  {
    "objectID": "slides/visualizing-proportions.html#example-where-side-by-side-bars-are-preferred-1",
    "href": "slides/visualizing-proportions.html#example-where-side-by-side-bars-are-preferred-1",
    "title": "Visualizing proportions",
    "section": "Example where side-by-side bars are preferred",
    "text": "Example where side-by-side bars are preferred\n\n\n\n\n\n\n \n\n\n\n\n\n\nInspired by: https://en.wikipedia.org/wiki/File:Piecharts.svg"
  },
  {
    "objectID": "slides/visualizing-proportions.html#example-where-side-by-side-bars-are-preferred-2",
    "href": "slides/visualizing-proportions.html#example-where-side-by-side-bars-are-preferred-2",
    "title": "Visualizing proportions",
    "section": "Example where side-by-side bars are preferred",
    "text": "Example where side-by-side bars are preferred\n\n\n\n\n\n\n \n\n\n\n\n\n\nInspired by: https://en.wikipedia.org/wiki/File:Piecharts.svg"
  },
  {
    "objectID": "slides/visualizing-proportions.html#example-where-side-by-side-bars-are-preferred-3",
    "href": "slides/visualizing-proportions.html#example-where-side-by-side-bars-are-preferred-3",
    "title": "Visualizing proportions",
    "section": "Example where side-by-side bars are preferred",
    "text": "Example where side-by-side bars are preferred\n\n\n\n\n\n\n \n\n\n\n\n\n\nInspired by: https://en.wikipedia.org/wiki/File:Piecharts.svg"
  },
  {
    "objectID": "slides/visualizing-proportions.html#example-where-stacked-bars-are-preferred",
    "href": "slides/visualizing-proportions.html#example-where-stacked-bars-are-preferred",
    "title": "Visualizing proportions",
    "section": "Example where stacked bars are preferred",
    "text": "Example where stacked bars are preferred\n\n\n\n\n\n\n \n\n\n\n\n\n\nChange in the gender composition of the Rwandan parliament from 1997 to 2016"
  },
  {
    "objectID": "slides/visualizing-proportions.html#pros-and-cons-of-different-approaches",
    "href": "slides/visualizing-proportions.html#pros-and-cons-of-different-approaches",
    "title": "Visualizing proportions",
    "section": "Pros and cons of different approaches",
    "text": "Pros and cons of different approaches\n\n\n\n\n\n\n\n\n\n\n \n    Pie chart    \nStacked bars\nSide-by-side bars\n\n\n\n\nAllows easy comparison of relative proportions\n✖\n✖\n✔"
  },
  {
    "objectID": "slides/visualizing-proportions.html#pros-and-cons-of-different-approaches-1",
    "href": "slides/visualizing-proportions.html#pros-and-cons-of-different-approaches-1",
    "title": "Visualizing proportions",
    "section": "Pros and cons of different approaches",
    "text": "Pros and cons of different approaches\n\n\n\n\n\n\n\n\n\n\n \n    Pie chart    \nStacked bars\nSide-by-side bars\n\n\n\n\nAllows easy comparison of relative proportions\n✖\n✖\n✔\n\n\nShows data as proportions of a whole\n✔\n✔\n✖"
  },
  {
    "objectID": "slides/visualizing-proportions.html#pros-and-cons-of-different-approaches-2",
    "href": "slides/visualizing-proportions.html#pros-and-cons-of-different-approaches-2",
    "title": "Visualizing proportions",
    "section": "Pros and cons of different approaches",
    "text": "Pros and cons of different approaches\n\n\n\n\n\n\n\n\n\n\n \n    Pie chart    \nStacked bars\nSide-by-side bars\n\n\n\n\nAllows easy comparison of relative proportions\n✖\n✖\n✔\n\n\nShows data as proportions of a whole\n✔\n✔\n✖\n\n\nEmphasizes simple fractions (1/2, 1/3, …)\n✔\n✖\n✖"
  },
  {
    "objectID": "slides/visualizing-proportions.html#pros-and-cons-of-different-approaches-3",
    "href": "slides/visualizing-proportions.html#pros-and-cons-of-different-approaches-3",
    "title": "Visualizing proportions",
    "section": "Pros and cons of different approaches",
    "text": "Pros and cons of different approaches\n\n\n\n\n\n\n\n\n\n\n \n    Pie chart    \nStacked bars\nSide-by-side bars\n\n\n\n\nAllows easy comparison of relative proportions\n✖\n✖\n✔\n\n\nShows data as proportions of a whole\n✔\n✔\n✖\n\n\nEmphasizes simple fractions (1/2, 1/3, …)\n✔\n✖\n✖\n\n\nVisually appealing for small datasets\n✔\n✖\n✔"
  },
  {
    "objectID": "slides/visualizing-proportions.html#pros-and-cons-of-different-approaches-4",
    "href": "slides/visualizing-proportions.html#pros-and-cons-of-different-approaches-4",
    "title": "Visualizing proportions",
    "section": "Pros and cons of different approaches",
    "text": "Pros and cons of different approaches\n\n\n\n\n\n\n\n\n\n\n \n    Pie chart    \nStacked bars\nSide-by-side bars\n\n\n\n\nAllows easy comparison of relative proportions\n✖\n✖\n✔\n\n\nShows data as proportions of a whole\n✔\n✔\n✖\n\n\nEmphasizes simple fractions (1/2, 1/3, …)\n✔\n✖\n✖\n\n\nVisually appealing for small datasets\n✔\n✖\n✔\n\n\nWorks well for a large number of subsets\n✖\n✖\n✔"
  },
  {
    "objectID": "slides/visualizing-proportions.html#pros-and-cons-of-different-approaches-5",
    "href": "slides/visualizing-proportions.html#pros-and-cons-of-different-approaches-5",
    "title": "Visualizing proportions",
    "section": "Pros and cons of different approaches",
    "text": "Pros and cons of different approaches\n\n\n\n\n\n\n\n\n\n\n \n    Pie chart    \nStacked bars\nSide-by-side bars\n\n\n\n\nAllows easy comparison of relative proportions\n✖\n✖\n✔\n\n\nShows data as proportions of a whole\n✔\n✔\n✖\n\n\nEmphasizes simple fractions (1/2, 1/3, …)\n✔\n✖\n✖\n\n\nVisually appealing for small datasets\n✔\n✖\n✔\n\n\nWorks well for a large number of subsets\n✖\n✖\n✔\n\n\nWorks well for time series and similar\n✖\n✔\n✖\n\n\n\n\n\nNo one visualization fits all scenarios!"
  },
  {
    "objectID": "slides/visualizing-proportions.html#mosaic-plots-subdivide-data-along-two-dimensions",
    "href": "slides/visualizing-proportions.html#mosaic-plots-subdivide-data-along-two-dimensions",
    "title": "Visualizing proportions",
    "section": "Mosaic plots subdivide data along two dimensions",
    "text": "Mosaic plots subdivide data along two dimensions\n\n\n\n\n\n\nDataset: Bridges in Pittsburgh by construction material and era of construction"
  },
  {
    "objectID": "slides/visualizing-proportions.html#closely-related-to-mosaic-plot-treemap",
    "href": "slides/visualizing-proportions.html#closely-related-to-mosaic-plot-treemap",
    "title": "Visualizing proportions",
    "section": "Closely related to mosaic plot: Treemap",
    "text": "Closely related to mosaic plot: Treemap\n\n\n\n\n\n\nDataset: Bridges in Pittsburgh by construction material and era of construction"
  },
  {
    "objectID": "slides/visualizing-proportions.html#treemaps-work-well-for-more-complex-cases",
    "href": "slides/visualizing-proportions.html#treemaps-work-well-for-more-complex-cases",
    "title": "Visualizing proportions",
    "section": "Treemaps work well for more complex cases",
    "text": "Treemaps work well for more complex cases\n\n\n\n\n\n\nDataset: Land surface area of US states"
  },
  {
    "objectID": "slides/visualizing-proportions.html#we-can-nest-pie-charts-with-clever-coloring",
    "href": "slides/visualizing-proportions.html#we-can-nest-pie-charts-with-clever-coloring",
    "title": "Visualizing proportions",
    "section": "We can nest pie charts with clever coloring",
    "text": "We can nest pie charts with clever coloring\n\n\n\n\n\n\nDataset: Bridges in Pittsburgh by construction material and era of construction"
  },
  {
    "objectID": "slides/visualizing-proportions.html#parallel-sets-can-show-many-subdivisions-at-once",
    "href": "slides/visualizing-proportions.html#parallel-sets-can-show-many-subdivisions-at-once",
    "title": "Visualizing proportions",
    "section": "Parallel sets can show many subdivisions at once",
    "text": "Parallel sets can show many subdivisions at once\n\n\n\n\n\n\nDataset: Bridges in Pittsburgh by construction material and era of construction"
  },
  {
    "objectID": "slides/visualizing-proportions.html#dont-show-nested-proportions-without-nesting",
    "href": "slides/visualizing-proportions.html#dont-show-nested-proportions-without-nesting",
    "title": "Visualizing proportions",
    "section": "Don’t show nested proportions without nesting!",
    "text": "Don’t show nested proportions without nesting!\n\n\n\nDataset: Bridges in Pittsburgh by construction material and era of construction"
  },
  {
    "objectID": "slides/visualizing-proportions.html#making-pie-charts-with-ggplot2-1",
    "href": "slides/visualizing-proportions.html#making-pie-charts-with-ggplot2-1",
    "title": "Visualizing proportions",
    "section": "Making pie charts with ggplot2",
    "text": "Making pie charts with ggplot2\n\nWe have three options:\n\n\n\ngeom_bar()/geom_col() with poolar coordinates\nPros: simple\nCons: hard to customize\n\n\n\n\ngeom_arc_bar() with stat_pie()\nPros: relatively simple, some customization\nCons: requires ggforce & some more complex code\n\n\n\n\ngeom_arc_bar() with manual computation\nPros: maximum flexibility for customization\nCons: requires ggforce & much more complex code"
  },
  {
    "objectID": "slides/visualizing-proportions.html#making-pie-charts-with-ggplot2-polar-coords",
    "href": "slides/visualizing-proportions.html#making-pie-charts-with-ggplot2-polar-coords",
    "title": "Visualizing proportions",
    "section": "Making pie charts with ggplot2: polar coords",
    "text": "Making pie charts with ggplot2: polar coords\n\n\n# the data\nbundestag &lt;- tibble(\n  party = c(\"CDU/CSU\", \"SPD\", \"FDP\"),\n  seats = c(243, 214, 39)\n)\n\nbundestag\n\n# A tibble: 3 × 2\n  party   seats\n  &lt;chr&gt;   &lt;dbl&gt;\n1 CDU/CSU   243\n2 SPD       214\n3 FDP        39"
  },
  {
    "objectID": "slides/visualizing-proportions.html#making-pie-charts-with-ggplot2-polar-coords-1",
    "href": "slides/visualizing-proportions.html#making-pie-charts-with-ggplot2-polar-coords-1",
    "title": "Visualizing proportions",
    "section": "Making pie charts with ggplot2: polar coords",
    "text": "Making pie charts with ggplot2: polar coords\n\n\n\n# the data\nbundestag &lt;- tibble(\n  party = c(\"CDU/CSU\", \"SPD\", \"FDP\"),\n  seats = c(243, 214, 39)\n)\n\n# make bar chart\nggplot(bundestag) +\n  aes(seats, \"YY\", fill = party) + \n  geom_col()"
  },
  {
    "objectID": "slides/visualizing-proportions.html#making-pie-charts-with-ggplot2-polar-coords-2",
    "href": "slides/visualizing-proportions.html#making-pie-charts-with-ggplot2-polar-coords-2",
    "title": "Visualizing proportions",
    "section": "Making pie charts with ggplot2: polar coords",
    "text": "Making pie charts with ggplot2: polar coords\n\n\n\n# the data\nbundestag &lt;- tibble(\n  party = c(\"CDU/CSU\", \"SPD\", \"FDP\"),\n  seats = c(243, 214, 39)\n)\n\n# make bar chart in polar coords\nggplot(bundestag) +\n  aes(seats, \"YY\", fill = party) + \n  geom_col() +\n  coord_polar()"
  },
  {
    "objectID": "slides/visualizing-proportions.html#making-pie-charts-with-ggplot2-polar-coords-3",
    "href": "slides/visualizing-proportions.html#making-pie-charts-with-ggplot2-polar-coords-3",
    "title": "Visualizing proportions",
    "section": "Making pie charts with ggplot2: polar coords",
    "text": "Making pie charts with ggplot2: polar coords\n\n\n\n# the data\nbundestag &lt;- tibble(\n  party = c(\"CDU/CSU\", \"SPD\", \"FDP\"),\n  seats = c(243, 214, 39)\n)\n\n# make bar chart in polar coords\nggplot(bundestag) +\n  aes(seats, \"YY\", fill = party) + \n  geom_col() +\n  coord_polar() +\n  scale_x_continuous(\n    name = NULL, breaks = NULL\n  ) +\n  scale_y_discrete(\n    name = NULL, breaks = NULL\n  ) +\n  ggtitle(\"German Bundestag 1976-1980\")"
  },
  {
    "objectID": "slides/visualizing-proportions.html#making-pie-charts-with-ggplot2-ggforce-stat-pie",
    "href": "slides/visualizing-proportions.html#making-pie-charts-with-ggplot2-ggforce-stat-pie",
    "title": "Visualizing proportions",
    "section": "Making pie charts with ggplot2: ggforce stat pie",
    "text": "Making pie charts with ggplot2: ggforce stat pie\n\n\n\nlibrary(ggforce)\n\nggplot(bundestag) +\n  aes(\n    x0 = 0, y0 = 0, # position of pie center\n    r0 = 0, r = 1,  # inner and outer radius\n    amount = seats, # size of pie slices\n    fill = party\n  ) + \n  geom_arc_bar(stat = \"pie\")"
  },
  {
    "objectID": "slides/visualizing-proportions.html#making-pie-charts-with-ggplot2-ggforce-stat-pie-1",
    "href": "slides/visualizing-proportions.html#making-pie-charts-with-ggplot2-ggforce-stat-pie-1",
    "title": "Visualizing proportions",
    "section": "Making pie charts with ggplot2: ggforce stat pie",
    "text": "Making pie charts with ggplot2: ggforce stat pie\n\n\n\nlibrary(ggforce)\n\nggplot(bundestag) +\n  aes(\n    x0 = 0, y0 = 0, # position of pie center\n    r0 = 0, r = 1,  # inner and outer radius\n    amount = seats, # size of pie slices\n    fill = party\n  ) + \n  geom_arc_bar(stat = \"pie\") +\n  coord_fixed() # make pie perfectly circular"
  },
  {
    "objectID": "slides/visualizing-proportions.html#making-pie-charts-with-ggplot2-ggforce-stat-pie-2",
    "href": "slides/visualizing-proportions.html#making-pie-charts-with-ggplot2-ggforce-stat-pie-2",
    "title": "Visualizing proportions",
    "section": "Making pie charts with ggplot2: ggforce stat pie",
    "text": "Making pie charts with ggplot2: ggforce stat pie\n\n\n\nlibrary(ggforce)\n\nggplot(bundestag) +\n  aes(\n    x0 = 0, y0 = 0, # position of pie center\n    r0 = 0, r = 1,  # inner and outer radius\n    amount = seats, # size of pie slices\n    fill = party\n  ) + \n  geom_arc_bar(stat = \"pie\") +\n  coord_fixed(  # make pie perfectly circular\n    # adjust limits as needed\n    xlim = c(-1, 3), ylim = c(-1, 3)\n  )"
  },
  {
    "objectID": "slides/visualizing-proportions.html#making-pie-charts-with-ggplot2-ggforce-stat-pie-3",
    "href": "slides/visualizing-proportions.html#making-pie-charts-with-ggplot2-ggforce-stat-pie-3",
    "title": "Visualizing proportions",
    "section": "Making pie charts with ggplot2: ggforce stat pie",
    "text": "Making pie charts with ggplot2: ggforce stat pie\n\n\n\nlibrary(ggforce)\n\nggplot(bundestag) +\n  aes(\n    x0 = 1, y0 = 1, # position of pie center\n    r0 = 0, r = 1,  # inner and outer radius\n    amount = seats, # size of pie slices\n    fill = party\n  ) + \n  geom_arc_bar(stat = \"pie\") +\n  coord_fixed(  # make pie perfectly circular\n    # adjust limits as needed\n    xlim = c(-1, 3), ylim = c(-1, 3)\n  )"
  },
  {
    "objectID": "slides/visualizing-proportions.html#making-pie-charts-with-ggplot2-ggforce-stat-pie-4",
    "href": "slides/visualizing-proportions.html#making-pie-charts-with-ggplot2-ggforce-stat-pie-4",
    "title": "Visualizing proportions",
    "section": "Making pie charts with ggplot2: ggforce stat pie",
    "text": "Making pie charts with ggplot2: ggforce stat pie\n\n\n\nlibrary(ggforce)\n\nggplot(bundestag) +\n  aes(\n    x0 = 1, y0 = 1, # position of pie center\n    r0 = 1, r = 2,  # inner and outer radius\n    amount = seats, # size of pie slices\n    fill = party\n  ) + \n  geom_arc_bar(stat = \"pie\") +\n  coord_fixed(  # make pie perfectly circular\n    # adjust limits as needed\n    xlim = c(-1, 3), ylim = c(-1, 3)\n  )"
  },
  {
    "objectID": "slides/visualizing-proportions.html#making-pie-charts-with-ggplot2-ggforce-manual",
    "href": "slides/visualizing-proportions.html#making-pie-charts-with-ggplot2-ggforce-manual",
    "title": "Visualizing proportions",
    "section": "Making pie charts with ggplot2: ggforce manual",
    "text": "Making pie charts with ggplot2: ggforce manual\n\n\n# prepare pie data\npie_data &lt;- bundestag |&gt;\n  arrange(seats)    # sort so pie slices end up sorted\n\npie_data\n\n# A tibble: 3 × 2\n  party   seats\n  &lt;chr&gt;   &lt;dbl&gt;\n1 FDP        39\n2 SPD       214\n3 CDU/CSU   243"
  },
  {
    "objectID": "slides/visualizing-proportions.html#making-pie-charts-with-ggplot2-ggforce-manual-1",
    "href": "slides/visualizing-proportions.html#making-pie-charts-with-ggplot2-ggforce-manual-1",
    "title": "Visualizing proportions",
    "section": "Making pie charts with ggplot2: ggforce manual",
    "text": "Making pie charts with ggplot2: ggforce manual\n\n\n# prepare pie data\npie_data &lt;- bundestag |&gt;\n  arrange(seats) |&gt; # sort so pie slices end up sorted\n  mutate(\n    end_angle = 2*pi*cumsum(seats)/sum(seats)    # ending angle for each pie slice\n  )\n\npie_data\n\n# A tibble: 3 × 3\n  party   seats end_angle\n  &lt;chr&gt;   &lt;dbl&gt;     &lt;dbl&gt;\n1 FDP        39     0.494\n2 SPD       214     3.20 \n3 CDU/CSU   243     6.28"
  },
  {
    "objectID": "slides/visualizing-proportions.html#making-pie-charts-with-ggplot2-ggforce-manual-2",
    "href": "slides/visualizing-proportions.html#making-pie-charts-with-ggplot2-ggforce-manual-2",
    "title": "Visualizing proportions",
    "section": "Making pie charts with ggplot2: ggforce manual",
    "text": "Making pie charts with ggplot2: ggforce manual\n\n\n# prepare pie data\npie_data &lt;- bundestag |&gt;\n  arrange(seats) |&gt; # sort so pie slices end up sorted\n  mutate(\n    end_angle = 2*pi*cumsum(seats)/sum(seats),   # ending angle for each pie slice\n    start_angle = lag(end_angle, default = 0)    # starting angle for each pie slice\n  )\n\npie_data\n\n# A tibble: 3 × 4\n  party   seats end_angle start_angle\n  &lt;chr&gt;   &lt;dbl&gt;     &lt;dbl&gt;       &lt;dbl&gt;\n1 FDP        39     0.494       0    \n2 SPD       214     3.20        0.494\n3 CDU/CSU   243     6.28        3.20"
  },
  {
    "objectID": "slides/visualizing-proportions.html#making-pie-charts-with-ggplot2-ggforce-manual-3",
    "href": "slides/visualizing-proportions.html#making-pie-charts-with-ggplot2-ggforce-manual-3",
    "title": "Visualizing proportions",
    "section": "Making pie charts with ggplot2: ggforce manual",
    "text": "Making pie charts with ggplot2: ggforce manual\n\n\n# prepare pie data\npie_data &lt;- bundestag |&gt;\n  arrange(seats) |&gt; # sort so pie slices end up sorted\n  mutate(\n    end_angle = 2*pi*cumsum(seats)/sum(seats),   # ending angle for each pie slice\n    start_angle = lag(end_angle, default = 0),   # starting angle for each pie slice\n    mid_angle = 0.5*(start_angle + end_angle),   # middle of each pie slice, for text labels\n  )\n\npie_data\n\n# A tibble: 3 × 5\n  party   seats end_angle start_angle mid_angle\n  &lt;chr&gt;   &lt;dbl&gt;     &lt;dbl&gt;       &lt;dbl&gt;     &lt;dbl&gt;\n1 FDP        39     0.494       0         0.247\n2 SPD       214     3.20        0.494     1.85 \n3 CDU/CSU   243     6.28        3.20      4.74"
  },
  {
    "objectID": "slides/visualizing-proportions.html#making-pie-charts-with-ggplot2-ggforce-manual-4",
    "href": "slides/visualizing-proportions.html#making-pie-charts-with-ggplot2-ggforce-manual-4",
    "title": "Visualizing proportions",
    "section": "Making pie charts with ggplot2: ggforce manual",
    "text": "Making pie charts with ggplot2: ggforce manual\n\n\n# prepare pie data\npie_data &lt;- bundestag |&gt;\n  arrange(seats) |&gt; # sort so pie slices end up sorted\n  mutate(\n    end_angle = 2*pi*cumsum(seats)/sum(seats),   # ending angle for each pie slice\n    start_angle = lag(end_angle, default = 0),   # starting angle for each pie slice\n    mid_angle = 0.5*(start_angle + end_angle),   # middle of each pie slice, for text labels\n    # horizontal and vertical justifications for outer labels\n    hjust = if_else(mid_angle &gt; pi, 1, 0),\n    vjust = if_else(mid_angle &lt; pi/2 | mid_angle &gt; 3*pi/2, 0, 1)\n  )\n\npie_data\n\n# A tibble: 3 × 7\n  party   seats end_angle start_angle mid_angle hjust vjust\n  &lt;chr&gt;   &lt;dbl&gt;     &lt;dbl&gt;       &lt;dbl&gt;     &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt;\n1 FDP        39     0.494       0         0.247     0     0\n2 SPD       214     3.20        0.494     1.85      0     1\n3 CDU/CSU   243     6.28        3.20      4.74      1     0"
  },
  {
    "objectID": "slides/visualizing-proportions.html#making-pie-charts-with-ggplot2-ggforce-manual-5",
    "href": "slides/visualizing-proportions.html#making-pie-charts-with-ggplot2-ggforce-manual-5",
    "title": "Visualizing proportions",
    "section": "Making pie charts with ggplot2: ggforce manual",
    "text": "Making pie charts with ggplot2: ggforce manual\n\n\n\nggplot(pie_data) +\n  aes(\n    x0 = 0, y0 = 0, r0 = 0, r = 1,\n    start = start_angle, end = end_angle,\n    fill = party\n  ) +\n  geom_arc_bar() +\n  coord_fixed()"
  },
  {
    "objectID": "slides/visualizing-proportions.html#making-pie-charts-with-ggplot2-ggforce-manual-6",
    "href": "slides/visualizing-proportions.html#making-pie-charts-with-ggplot2-ggforce-manual-6",
    "title": "Visualizing proportions",
    "section": "Making pie charts with ggplot2: ggforce manual",
    "text": "Making pie charts with ggplot2: ggforce manual\n\n\n\nggplot(pie_data) +\n  aes(\n    x0 = 0, y0 = 0, r0 = 0, r = 1,\n    start = start_angle, end = end_angle,\n    fill = party\n  ) +\n  geom_arc_bar() +\n  geom_text( # place amounts inside the pie\n    aes(\n      x = 0.6 * sin(mid_angle),\n      y = 0.6 * cos(mid_angle),\n      label = seats\n    )\n  ) +\n  coord_fixed()"
  },
  {
    "objectID": "slides/visualizing-proportions.html#making-pie-charts-with-ggplot2-ggforce-manual-7",
    "href": "slides/visualizing-proportions.html#making-pie-charts-with-ggplot2-ggforce-manual-7",
    "title": "Visualizing proportions",
    "section": "Making pie charts with ggplot2: ggforce manual",
    "text": "Making pie charts with ggplot2: ggforce manual\n\n\n\nggplot(pie_data) +\n  aes(\n    x0 = 0, y0 = 0, r0 = 0, r = 1,\n    start = start_angle, end = end_angle,\n    fill = party\n  ) +\n  geom_arc_bar() +\n  geom_text( # place amounts inside the pie\n    aes(\n      x = 0.2 * sin(mid_angle),\n      y = 0.2 * cos(mid_angle),\n      label = seats\n    )\n  ) +\n  coord_fixed()"
  },
  {
    "objectID": "slides/visualizing-proportions.html#making-pie-charts-with-ggplot2-ggforce-manual-8",
    "href": "slides/visualizing-proportions.html#making-pie-charts-with-ggplot2-ggforce-manual-8",
    "title": "Visualizing proportions",
    "section": "Making pie charts with ggplot2: ggforce manual",
    "text": "Making pie charts with ggplot2: ggforce manual\n\n\n\nggplot(pie_data) +\n  aes(\n    x0 = 0, y0 = 0, r0 = 0, r = 1,\n    start = start_angle, end = end_angle,\n    fill = party\n  ) +\n  geom_arc_bar() +\n  geom_text( # place amounts inside the pie\n    aes(\n      x = 0.8 * sin(mid_angle),\n      y = 0.8 * cos(mid_angle),\n      label = seats\n    )\n  ) +\n  coord_fixed()"
  },
  {
    "objectID": "slides/visualizing-proportions.html#making-pie-charts-with-ggplot2-ggforce-manual-9",
    "href": "slides/visualizing-proportions.html#making-pie-charts-with-ggplot2-ggforce-manual-9",
    "title": "Visualizing proportions",
    "section": "Making pie charts with ggplot2: ggforce manual",
    "text": "Making pie charts with ggplot2: ggforce manual\n\n\n\nggplot(pie_data) +\n  aes(\n    x0 = 0, y0 = 0, r0 = 0, r = 1,\n    start = start_angle, end = end_angle,\n    fill = party\n  ) +\n  geom_arc_bar() +\n  geom_text( # place amounts inside the pie\n    aes(\n      x = 0.6 * sin(mid_angle),\n      y = 0.6 * cos(mid_angle),\n      label = seats\n    )\n  ) +\n  coord_fixed()"
  },
  {
    "objectID": "slides/visualizing-proportions.html#making-pie-charts-with-ggplot2-ggforce-manual-10",
    "href": "slides/visualizing-proportions.html#making-pie-charts-with-ggplot2-ggforce-manual-10",
    "title": "Visualizing proportions",
    "section": "Making pie charts with ggplot2: ggforce manual",
    "text": "Making pie charts with ggplot2: ggforce manual\n\n\n\nggplot(pie_data) +\n  aes(\n    x0 = 0, y0 = 0, r0 = 0, r = 1,\n    start = start_angle, end = end_angle,\n    fill = party\n  ) +\n  geom_arc_bar() +\n  geom_text( # place amounts inside the pie\n    aes(\n      x = 0.6 * sin(mid_angle),\n      y = 0.6 * cos(mid_angle),\n      label = seats\n    )\n  ) +\n  geom_text( # place party name outside the pie\n    aes(\n      x = 1.05 * sin(mid_angle),\n      y = 1.05 * cos(mid_angle),\n      label = party,\n      hjust = hjust, vjust = vjust\n    )\n  ) +\n  coord_fixed()"
  },
  {
    "objectID": "slides/visualizing-proportions.html#making-pie-charts-with-ggplot2-ggforce-manual-11",
    "href": "slides/visualizing-proportions.html#making-pie-charts-with-ggplot2-ggforce-manual-11",
    "title": "Visualizing proportions",
    "section": "Making pie charts with ggplot2: ggforce manual",
    "text": "Making pie charts with ggplot2: ggforce manual\n\n\n\nggplot(pie_data) +\n  aes(\n    x0 = 0, y0 = 0, r0 = 0, r = 1,\n    start = start_angle, end = end_angle,\n    fill = party\n  ) +\n  geom_arc_bar() +\n  geom_text( # place amounts inside the pie\n    aes(\n      x = 0.6 * sin(mid_angle),\n      y = 0.6 * cos(mid_angle),\n      label = seats\n    )\n  ) +\n  geom_text( # place party name outside the pie\n    aes(\n      x = 1.05 * sin(mid_angle),\n      y = 1.05 * cos(mid_angle),\n      label = party,\n      hjust = hjust, vjust = vjust\n    )\n  ) +\n  coord_fixed(\n    xlim = c(-1.8, 1.3)\n  )"
  },
  {
    "objectID": "slides/visualizing-proportions.html#making-pie-charts-with-ggplot2-ggforce-manual-12",
    "href": "slides/visualizing-proportions.html#making-pie-charts-with-ggplot2-ggforce-manual-12",
    "title": "Visualizing proportions",
    "section": "Making pie charts with ggplot2: ggforce manual",
    "text": "Making pie charts with ggplot2: ggforce manual\n\n\n\nggplot(pie_data) +\n  aes(\n    x0 = 0, y0 = 0, r0 = 0.4, r = 1,\n    start = start_angle, end = end_angle,\n    fill = party\n  ) +\n  geom_arc_bar() +\n  geom_text( # place amounts inside the pie\n    aes(\n      x = 0.7 * sin(mid_angle),\n      y = 0.7 * cos(mid_angle),\n      label = seats\n    )\n  ) +\n  geom_text( # place party name outside the pie\n    aes(\n      x = 1.05 * sin(mid_angle),\n      y = 1.05 * cos(mid_angle),\n      label = party,\n      hjust = hjust, vjust = vjust\n    )\n  ) +\n  coord_fixed(\n    xlim = c(-1.8, 1.3)\n  )"
  },
  {
    "objectID": "slides/visualizing-proportions.html#making-pie-charts-with-ggplot2-ggforce-manual-13",
    "href": "slides/visualizing-proportions.html#making-pie-charts-with-ggplot2-ggforce-manual-13",
    "title": "Visualizing proportions",
    "section": "Making pie charts with ggplot2: ggforce manual",
    "text": "Making pie charts with ggplot2: ggforce manual\n\n\n\nggplot(pie_data) +\n  aes(\n    x0 = 0, y0 = 0, r0 = 0.4, r = 1,\n    start = start_angle, end = end_angle,\n    fill = party\n  ) +\n  geom_arc_bar() +\n  geom_text( # place amounts inside the pie\n    aes(\n      x = 0.7 * sin(mid_angle),\n      y = 0.7 * cos(mid_angle),\n      label = seats\n    )\n  ) +\n  geom_text( # place party name outside the pie\n    aes(\n      x = 1.05 * sin(mid_angle),\n      y = 1.05 * cos(mid_angle),\n      label = party,\n      hjust = hjust, vjust = vjust\n    )\n  ) +\n  coord_fixed(\n    xlim = c(-1.8, 1.3), ylim = c(-1.0, 1.1)\n  ) +\n  theme_void()"
  },
  {
    "objectID": "slides/visualizing-proportions.html#further-reading",
    "href": "slides/visualizing-proportions.html#further-reading",
    "title": "Visualizing proportions",
    "section": "Further reading",
    "text": "Further reading\n\nFundamentals of Data Visualization: Chapter 10: Visualizing proportions\nFundamentals of Data Visualization: Chapter 11: Visualizing nested proportions\nggplot2 reference documentation: position_stack(), position_fill()\nggplot2 reference documentation: position_dodge()\nggforce reference documentation: geom_arc_bar()"
  },
  {
    "objectID": "slides/visualizing-distributions-1.html#passengers-on-the-titanic",
    "href": "slides/visualizing-distributions-1.html#passengers-on-the-titanic",
    "title": "Visualizing distributions 1",
    "section": "Passengers on the Titanic",
    "text": "Passengers on the Titanic\n\n\n\n\n\n\n\nage\nsex\nclass\nsurvived\n\n\n\n\n0.2\nfemale\n3rd\nsurvived\n\n\n0.3\nmale\n3rd\ndied\n\n\n0.8\nmale\n2nd\nsurvived\n\n\n0.8\nmale\n2nd\nsurvived\n\n\n0.8\nmale\n3rd\nsurvived\n\n\n0.9\nmale\n1st\nsurvived\n\n\n1.0\nfemale\n2nd\nsurvived\n\n\n1.0\nfemale\n3rd\nsurvived\n\n\n1.0\nmale\n2nd\nsurvived\n\n\n1.0\nmale\n2nd\nsurvived\n\n\n1.0\nmale\n3rd\nsurvived\n\n\n1.5\nfemale\n3rd\ndied\n\n\n1.5\nfemale\n3rd\ndied\n\n\n2.0\nfemale\n1st\ndied\n\n\n2.0\nfemale\n2nd\nsurvived\n\n\n\n\n\n\n\n\n\n\n\n\n\nage\nsex\nclass\nsurvived\n\n\n\n\n2\nfemale\n3rd\ndied\n\n\n2\nfemale\n3rd\ndied\n\n\n2\nmale\n2nd\nsurvived\n\n\n2\nmale\n2nd\nsurvived\n\n\n2\nmale\n2nd\nsurvived\n\n\n3\nfemale\n2nd\nsurvived\n\n\n3\nfemale\n3rd\nsurvived\n\n\n3\nmale\n2nd\nsurvived\n\n\n3\nmale\n2nd\nsurvived\n\n\n3\nmale\n3rd\nsurvived\n\n\n3\nmale\n3rd\nsurvived\n\n\n4\nfemale\n2nd\nsurvived\n\n\n4\nfemale\n2nd\nsurvived\n\n\n4\nfemale\n3rd\nsurvived\n\n\n4\nfemale\n3rd\nsurvived\n\n\n\n\n\n\n\n\n\n\n\n\n\nage\nsex\nclass\nsurvived\n\n\n\n\n4\nmale\n1st\nsurvived\n\n\n4\nmale\n3rd\ndied\n\n\n4\nmale\n3rd\nsurvived\n\n\n5\nfemale\n3rd\nsurvived\n\n\n5\nfemale\n3rd\nsurvived\n\n\n5\nmale\n3rd\ndied\n\n\n6\nfemale\n2nd\nsurvived\n\n\n6\nfemale\n3rd\ndied\n\n\n6\nmale\n1st\nsurvived\n\n\n6\nmale\n3rd\ndied\n\n\n6\nmale\n3rd\ndied\n\n\n7\nfemale\n2nd\nsurvived\n\n\n8\nfemale\n2nd\nsurvived\n\n\n8\nfemale\n2nd\nsurvived\n\n\n8\nmale\n2nd\nsurvived"
  },
  {
    "objectID": "slides/visualizing-distributions-1.html#histogram-define-bins-and-count-cases",
    "href": "slides/visualizing-distributions-1.html#histogram-define-bins-and-count-cases",
    "title": "Visualizing distributions 1",
    "section": "Histogram: Define bins and count cases",
    "text": "Histogram: Define bins and count cases\n\n\n\n\n\n\n\n\nage range\ncount\n\n\n\n\n0–4\n33\n\n\n5–9\n20\n\n\n10–14\n15\n\n\n15–19\n81\n\n\n20–24\n139\n\n\n25–29\n113\n\n\n30–34\n93\n\n\n35–39\n75\n\n\n\n\n\n\n\n\n\n\n\n\n\nage range\ncount\n\n\n\n\n40–44\n47\n\n\n45–49\n59\n\n\n50–54\n31\n\n\n55–59\n23\n\n\n60–64\n19\n\n\n65–69\n4\n\n\n70–74\n4\n\n\n75–79\n0"
  },
  {
    "objectID": "slides/visualizing-distributions-1.html#histograms-depend-on-the-chosen-bin-width",
    "href": "slides/visualizing-distributions-1.html#histograms-depend-on-the-chosen-bin-width",
    "title": "Visualizing distributions 1",
    "section": "Histograms depend on the chosen bin width",
    "text": "Histograms depend on the chosen bin width"
  },
  {
    "objectID": "slides/visualizing-distributions-1.html#alternative-to-histogram-kernel-density-estimate-kde",
    "href": "slides/visualizing-distributions-1.html#alternative-to-histogram-kernel-density-estimate-kde",
    "title": "Visualizing distributions 1",
    "section": "Alternative to histogram: Kernel density estimate (KDE)",
    "text": "Alternative to histogram: Kernel density estimate (KDE)\n\n\n\n\n\n\n\n\n \n\n\n\n\n\n\n\n\n\n\n \n\n\n\n\n\n\nHistograms show raw counts, KDEs show proportions.(KDE total area = 1)"
  },
  {
    "objectID": "slides/visualizing-distributions-1.html#kdes-also-depend-on-parameter-settings",
    "href": "slides/visualizing-distributions-1.html#kdes-also-depend-on-parameter-settings",
    "title": "Visualizing distributions 1",
    "section": "KDEs also depend on parameter settings",
    "text": "KDEs also depend on parameter settings"
  },
  {
    "objectID": "slides/visualizing-distributions-1.html#careful-kdes-can-show-non-sensical-data",
    "href": "slides/visualizing-distributions-1.html#careful-kdes-can-show-non-sensical-data",
    "title": "Visualizing distributions 1",
    "section": "Careful: KDEs can show non-sensical data",
    "text": "Careful: KDEs can show non-sensical data"
  },
  {
    "objectID": "slides/visualizing-distributions-1.html#careful-are-bars-stacked-or-overlapping",
    "href": "slides/visualizing-distributions-1.html#careful-are-bars-stacked-or-overlapping",
    "title": "Visualizing distributions 1",
    "section": "Careful: Are bars stacked or overlapping?",
    "text": "Careful: Are bars stacked or overlapping?\n\n\n\n\n\n\n\n\n \n\n\n\n\n\n\n\n\n\n\n \n\n\n\n\n\n\nStacked or overlapping histograms are rarely a good choice."
  },
  {
    "objectID": "slides/visualizing-distributions-1.html#alternative-age-pyramid",
    "href": "slides/visualizing-distributions-1.html#alternative-age-pyramid",
    "title": "Visualizing distributions 1",
    "section": "Alternative: Age pyramid",
    "text": "Alternative: Age pyramid"
  },
  {
    "objectID": "slides/visualizing-distributions-1.html#alternative-densities-showing-proportions-of-total",
    "href": "slides/visualizing-distributions-1.html#alternative-densities-showing-proportions-of-total",
    "title": "Visualizing distributions 1",
    "section": "Alternative: Densities showing proportions of total",
    "text": "Alternative: Densities showing proportions of total"
  },
  {
    "objectID": "slides/visualizing-distributions-1.html#overlapping-density-plots-usually-look-fine",
    "href": "slides/visualizing-distributions-1.html#overlapping-density-plots-usually-look-fine",
    "title": "Visualizing distributions 1",
    "section": "Overlapping density plots usually look fine",
    "text": "Overlapping density plots usually look fine"
  },
  {
    "objectID": "slides/visualizing-distributions-1.html#getting-the-data",
    "href": "slides/visualizing-distributions-1.html#getting-the-data",
    "title": "Visualizing distributions 1",
    "section": "Getting the data",
    "text": "Getting the data\n\nAll examples will use the titanic dataset:\n\ntitanic &lt;- read_csv(\"https://wilkelab.org/DSC385/datasets/titanic.csv\") |&gt;\n  select(age, sex, class, survived)\n\ntitanic\n\n# A tibble: 756 × 4\n     age sex    class survived\n   &lt;dbl&gt; &lt;chr&gt;  &lt;chr&gt; &lt;chr&gt;   \n 1 29    female 1st   survived\n 2  2    female 1st   died    \n 3 30    male   1st   died    \n 4 25    female 1st   died    \n 5  0.92 male   1st   survived\n 6 47    male   1st   survived\n 7 63    female 1st   survived\n 8 39    male   1st   died    \n 9 58    female 1st   survived\n10 71    male   1st   died    \n# ℹ 746 more rows"
  },
  {
    "objectID": "slides/visualizing-distributions-1.html#making-histograms-with-ggplot-geom_histogram",
    "href": "slides/visualizing-distributions-1.html#making-histograms-with-ggplot-geom_histogram",
    "title": "Visualizing distributions 1",
    "section": "Making histograms with ggplot: geom_histogram()",
    "text": "Making histograms with ggplot: geom_histogram()\n\nggplot(titanic, aes(age)) +\n  geom_histogram()\n\n`stat_bin()` using `bins = 30`. Pick better value with `binwidth`."
  },
  {
    "objectID": "slides/visualizing-distributions-1.html#setting-the-bin-width",
    "href": "slides/visualizing-distributions-1.html#setting-the-bin-width",
    "title": "Visualizing distributions 1",
    "section": "Setting the bin width",
    "text": "Setting the bin width\n\nggplot(titanic, aes(age)) +\n  geom_histogram(binwidth = 5)\n\n\n\n\n \n\n\n\n\n\nDo you like the bin placement?"
  },
  {
    "objectID": "slides/visualizing-distributions-1.html#always-set-the-bin-center-as-well",
    "href": "slides/visualizing-distributions-1.html#always-set-the-bin-center-as-well",
    "title": "Visualizing distributions 1",
    "section": "Always set the bin center as well",
    "text": "Always set the bin center as well\n\nggplot(titanic, aes(age)) +\n  geom_histogram(\n    binwidth = 5,  # width of the bins\n    center = 2.5   # center of the bin containing that value\n  )"
  },
  {
    "objectID": "slides/visualizing-distributions-1.html#always-set-the-bin-center-as-well-1",
    "href": "slides/visualizing-distributions-1.html#always-set-the-bin-center-as-well-1",
    "title": "Visualizing distributions 1",
    "section": "Always set the bin center as well",
    "text": "Always set the bin center as well\n\nggplot(titanic, aes(age)) +\n  geom_histogram(\n    binwidth = 5,  # width of the bins\n    center = 12.5   # center of the bin containing that value\n  )"
  },
  {
    "objectID": "slides/visualizing-distributions-1.html#making-density-plots-with-ggplot-geom_density",
    "href": "slides/visualizing-distributions-1.html#making-density-plots-with-ggplot-geom_density",
    "title": "Visualizing distributions 1",
    "section": "Making density plots with ggplot: geom_density()",
    "text": "Making density plots with ggplot: geom_density()\n\nggplot(titanic, aes(age)) +\n  geom_density(fill = \"skyblue\")"
  },
  {
    "objectID": "slides/visualizing-distributions-1.html#making-density-plots-with-ggplot-geom_density-1",
    "href": "slides/visualizing-distributions-1.html#making-density-plots-with-ggplot-geom_density-1",
    "title": "Visualizing distributions 1",
    "section": "Making density plots with ggplot: geom_density()",
    "text": "Making density plots with ggplot: geom_density()\n\nggplot(titanic, aes(age)) +\n  geom_density() # without fill"
  },
  {
    "objectID": "slides/visualizing-distributions-1.html#modifying-bandwidth-bw-and-kernel-parameters",
    "href": "slides/visualizing-distributions-1.html#modifying-bandwidth-bw-and-kernel-parameters",
    "title": "Visualizing distributions 1",
    "section": "Modifying bandwidth (bw) and kernel parameters",
    "text": "Modifying bandwidth (bw) and kernel parameters\n\nggplot(titanic, aes(age)) +\n  geom_density(\n    fill = \"skyblue\",\n    bw = 0.5,               # a small bandwidth\n    kernel = \"gaussian\"     # Gaussian kernel (the default)\n  )"
  },
  {
    "objectID": "slides/visualizing-distributions-1.html#modifying-bandwidth-bw-and-kernel-parameters-1",
    "href": "slides/visualizing-distributions-1.html#modifying-bandwidth-bw-and-kernel-parameters-1",
    "title": "Visualizing distributions 1",
    "section": "Modifying bandwidth (bw) and kernel parameters",
    "text": "Modifying bandwidth (bw) and kernel parameters\n\nggplot(titanic, aes(age)) +\n  geom_density(\n    fill = \"skyblue\",\n    bw = 2,                 # a moderate bandwidth\n    kernel = \"rectangular\"  # rectangular kernel\n  )"
  },
  {
    "objectID": "slides/visualizing-distributions-1.html#the-grammar-of-graphics-pipeline-facets",
    "href": "slides/visualizing-distributions-1.html#the-grammar-of-graphics-pipeline-facets",
    "title": "Visualizing distributions 1",
    "section": "The Grammar-of-Graphics pipeline: Facets",
    "text": "The Grammar-of-Graphics pipeline: Facets\n\n\n\n\n\n\n\n\nFacets are also called “small multiples”"
  },
  {
    "objectID": "slides/visualizing-distributions-1.html#faceting-by-one-variable-facet_wrap",
    "href": "slides/visualizing-distributions-1.html#faceting-by-one-variable-facet_wrap",
    "title": "Visualizing distributions 1",
    "section": "Faceting by one variable: facet_wrap()",
    "text": "Faceting by one variable: facet_wrap()\n\nggplot(titanic, aes(age)) +\n  geom_density(fill = \"skyblue\") +\n  # make a separate facet for each class\n  facet_wrap(~class)"
  },
  {
    "objectID": "slides/visualizing-distributions-1.html#faceting-by-two-variables-facet_grid",
    "href": "slides/visualizing-distributions-1.html#faceting-by-two-variables-facet_grid",
    "title": "Visualizing distributions 1",
    "section": "Faceting by two variables: facet_grid()",
    "text": "Faceting by two variables: facet_grid()\n\nggplot(titanic, aes(age)) +\n  geom_density(fill = \"skyblue\") +\n  # make a separate facet for each combination of class and survival\n  facet_grid(survived ~ class)"
  },
  {
    "objectID": "slides/visualizing-distributions-1.html#the-grammar-of-graphics-pipeline-stats",
    "href": "slides/visualizing-distributions-1.html#the-grammar-of-graphics-pipeline-stats",
    "title": "Visualizing distributions 1",
    "section": "The Grammar-of-Graphics pipeline: Stats",
    "text": "The Grammar-of-Graphics pipeline: Stats"
  },
  {
    "objectID": "slides/visualizing-distributions-1.html#taking-advantage-of-statistical-transformations-stats",
    "href": "slides/visualizing-distributions-1.html#taking-advantage-of-statistical-transformations-stats",
    "title": "Visualizing distributions 1",
    "section": "Taking advantage of statistical transformations (stats)",
    "text": "Taking advantage of statistical transformations (stats)\n\nggplot(titanic, aes(age)) +\n  geom_density(\n    stat = \"density\",    # the default for geom_density()\n    fill = \"skyblue\"\n  )"
  },
  {
    "objectID": "slides/visualizing-distributions-1.html#taking-advantage-of-statistical-transformations-stats-1",
    "href": "slides/visualizing-distributions-1.html#taking-advantage-of-statistical-transformations-stats-1",
    "title": "Visualizing distributions 1",
    "section": "Taking advantage of statistical transformations (stats)",
    "text": "Taking advantage of statistical transformations (stats)\n\nggplot(titanic, aes(age)) +\n  geom_area(  # geom_area() does not normally use stat = \"density\"\n    stat = \"density\",\n    fill = \"skyblue\"\n  )"
  },
  {
    "objectID": "slides/visualizing-distributions-1.html#taking-advantage-of-statistical-transformations-stats-2",
    "href": "slides/visualizing-distributions-1.html#taking-advantage-of-statistical-transformations-stats-2",
    "title": "Visualizing distributions 1",
    "section": "Taking advantage of statistical transformations (stats)",
    "text": "Taking advantage of statistical transformations (stats)\n\nggplot(titanic, aes(age)) +\n  geom_line(  # neither does geom_line()\n    stat = \"density\"\n  )"
  },
  {
    "objectID": "slides/visualizing-distributions-1.html#taking-advantage-of-statistical-transformations-stats-3",
    "href": "slides/visualizing-distributions-1.html#taking-advantage-of-statistical-transformations-stats-3",
    "title": "Visualizing distributions 1",
    "section": "Taking advantage of statistical transformations (stats)",
    "text": "Taking advantage of statistical transformations (stats)\n\nggplot(titanic, aes(age)) +\n  # we can use multiple geoms on top of each other\n  geom_area(stat = \"density\", fill = \"skyblue\") +\n  geom_line(stat = \"density\")"
  },
  {
    "objectID": "slides/visualizing-distributions-1.html#parameters-are-handed-through-to-the-stat",
    "href": "slides/visualizing-distributions-1.html#parameters-are-handed-through-to-the-stat",
    "title": "Visualizing distributions 1",
    "section": "Parameters are handed through to the stat",
    "text": "Parameters are handed through to the stat\n\n\n\nggplot(titanic, aes(age)) +\n  geom_line(stat = \"density\", bw = 3)\n\n\n\n\n \n\n\n\n\n\n\nggplot(titanic, aes(age)) +\n  geom_line(stat = \"density\", bw = 0.3)\n\n\n\n\n \n\n\n\n\n\n\nHere, bw is a parameter of stat_density(), not of geom_line()."
  },
  {
    "objectID": "slides/visualizing-distributions-1.html#we-can-explicitly-map-results-from-stat-computations",
    "href": "slides/visualizing-distributions-1.html#we-can-explicitly-map-results-from-stat-computations",
    "title": "Visualizing distributions 1",
    "section": "We can explicitly map results from stat computations",
    "text": "We can explicitly map results from stat computations\n\nggplot(titanic, aes(age)) +\n  geom_tile( # geom_tile() draws rectangular colored areas\n    aes(\n      y = 1, # draw all tiles at the same y location\n      fill = after_stat(density)  # use computed density for fill\n    ),\n    stat = \"density\",\n    n = 20    # number of points calculated by stat_density() \n  )"
  },
  {
    "objectID": "slides/visualizing-distributions-1.html#we-can-explicitly-map-results-from-stat-computations-1",
    "href": "slides/visualizing-distributions-1.html#we-can-explicitly-map-results-from-stat-computations-1",
    "title": "Visualizing distributions 1",
    "section": "We can explicitly map results from stat computations",
    "text": "We can explicitly map results from stat computations\n\nggplot(titanic, aes(age)) +\n  geom_tile( # geom_tile() draws rectangular colored areas\n    aes(\n      y = 1, # draw all tiles at the same y location\n      fill = after_stat(density)  # use computed density for fill\n    ),\n    stat = \"density\",\n    n = 200    # number of points calculated by stat_density() \n  )"
  },
  {
    "objectID": "slides/visualizing-distributions-1.html#further-reading",
    "href": "slides/visualizing-distributions-1.html#further-reading",
    "title": "Visualizing distributions 1",
    "section": "Further reading",
    "text": "Further reading\n\nFundamentals of Data Visualization: Chapter 7: Visualizing distributions\nData Visualization—A Practical Introduction: 4.6 Histograms and density plots\nggplot2 reference documentation: geom_histogram()\nggplot2 reference documentation: geom_density()"
  },
  {
    "objectID": "slides/telling-a-story.html#how-did-i-get-to-teach-data-visualization",
    "href": "slides/telling-a-story.html#how-did-i-get-to-teach-data-visualization",
    "title": "Telling a story",
    "section": "How did I get to teach data visualization?",
    "text": "How did I get to teach data visualization?"
  },
  {
    "objectID": "slides/telling-a-story.html#what-is-a-story",
    "href": "slides/telling-a-story.html#what-is-a-story",
    "title": "Telling a story",
    "section": "What is a story?",
    "text": "What is a story?\n\nA story is a collection of observations, facts, or events presented in a specific order such that they create an emotional reaction."
  },
  {
    "objectID": "slides/telling-a-story.html#every-story-needs-an-arc",
    "href": "slides/telling-a-story.html#every-story-needs-an-arc",
    "title": "Telling a story",
    "section": "Every story needs an arc",
    "text": "Every story needs an arc\n\nOpening\n\n\n\nChallenge\n\n\n\nAction\n\n\n\nResolution"
  },
  {
    "objectID": "slides/telling-a-story.html#every-story-needs-an-arc-1",
    "href": "slides/telling-a-story.html#every-story-needs-an-arc-1",
    "title": "Telling a story",
    "section": "Every story needs an arc",
    "text": "Every story needs an arc\n\nOpening\n\n\n\nChallenge\n\n\n\nAction\n\n\n\nResolution\n\n\nChallenge and resolution arethe two most important parts"
  },
  {
    "objectID": "slides/telling-a-story.html#mapping-my-story-onto-this-format",
    "href": "slides/telling-a-story.html#mapping-my-story-onto-this-format",
    "title": "Telling a story",
    "section": "Mapping my story onto this format",
    "text": "Mapping my story onto this format\n\nOpening: We need to make many data visualizations in my lab\n\n\nChallenge: I end up telling my students the same things over and over\n\n\nAction: I go and write a book about data visualization\n\n\nResolution: The book is written. But now I teach the material, so I still keep saying the same things over and over"
  },
  {
    "objectID": "slides/telling-a-story.html#other-story-structures",
    "href": "slides/telling-a-story.html#other-story-structures",
    "title": "Telling a story",
    "section": "Other story structures",
    "text": "Other story structures\n\nAction\n\n\n\nBackground\n\n\n\nDevelopment\n\n\n\nClimax\n\n\n\nEnding\n\n\n(Better for action moviesthan for scientific reports)"
  },
  {
    "objectID": "slides/telling-a-story.html#mapping-my-story-onto-this-format-1",
    "href": "slides/telling-a-story.html#mapping-my-story-onto-this-format-1",
    "title": "Telling a story",
    "section": "Mapping my story onto this format",
    "text": "Mapping my story onto this format\n\nAction: In May 2017, I embark on a major project: Write a book on data visualization\n\n\nBackground: I do this because we need to make many data visualizations in my lab, and I end up telling my students the same things over and over\n\n\nDevelopment: Writing the book takes me almost two years; along the way, I add many features to ggplot2 and become a member of the ggplot2 team\n\n\nClimax: The book is released in April 2019\n\n\nEnding: Now I’m a dataviz teacher"
  },
  {
    "objectID": "slides/telling-a-story.html#other-story-structures-1",
    "href": "slides/telling-a-story.html#other-story-structures-1",
    "title": "Telling a story",
    "section": "Other story structures",
    "text": "Other story structures\n\nLead\n\n\n\nDevelopment\n\n\n(Commonly used in newspaper articles)"
  },
  {
    "objectID": "slides/telling-a-story.html#mapping-my-story-onto-this-format-2",
    "href": "slides/telling-a-story.html#mapping-my-story-onto-this-format-2",
    "title": "Telling a story",
    "section": "Mapping my story onto this format",
    "text": "Mapping my story onto this format\n\nLead: Because I see the need for more education in data visualization, I have written an entire book about the topic\n\n\nDevelopment: I had previously written an R package to improve figure design, but it wasn’t sufficient: Good judgement cannot be automated\n\n\nSo I wrote a book; the book is entirely about concepts, not about coding, and it is meant as a resource for anybody doing data visualizations, regardless of their preferred visualization software"
  },
  {
    "objectID": "slides/telling-a-story.html#example-preprints-in-biology",
    "href": "slides/telling-a-story.html#example-preprints-in-biology",
    "title": "Telling a story",
    "section": "Example: Preprints in biology",
    "text": "Example: Preprints in biology\n\n\n\n\n\n \n\n\n\n\n\nOpening"
  },
  {
    "objectID": "slides/telling-a-story.html#example-preprints-in-biology-1",
    "href": "slides/telling-a-story.html#example-preprints-in-biology-1",
    "title": "Telling a story",
    "section": "Example: Preprints in biology",
    "text": "Example: Preprints in biology\n\n\n\n\n\n \n\n\n\n\nWhat happened in 2014 to curtail the growth?\n\nChallenge"
  },
  {
    "objectID": "slides/telling-a-story.html#example-preprints-in-biology-2",
    "href": "slides/telling-a-story.html#example-preprints-in-biology-2",
    "title": "Telling a story",
    "section": "Example: Preprints in biology",
    "text": "Example: Preprints in biology\n\n\n\n\n\n \n\n\n\n\nbioRxiv opened in 2014\n\nResolution"
  },
  {
    "objectID": "slides/telling-a-story.html#keep-in-mind",
    "href": "slides/telling-a-story.html#keep-in-mind",
    "title": "Telling a story",
    "section": "Keep in mind",
    "text": "Keep in mind\n\n\nEvery figure needs a clear purpose within the story arc\nA complete arc will usually require at least two figures"
  },
  {
    "objectID": "slides/telling-a-story.html#prepare-figures-that-make-a-clear-point",
    "href": "slides/telling-a-story.html#prepare-figures-that-make-a-clear-point",
    "title": "Telling a story",
    "section": "Prepare figures that make a clear point",
    "text": "Prepare figures that make a clear point"
  },
  {
    "objectID": "slides/telling-a-story.html#prepare-figures-that-make-a-clear-point-1",
    "href": "slides/telling-a-story.html#prepare-figures-that-make-a-clear-point-1",
    "title": "Telling a story",
    "section": "Prepare figures that make a clear point",
    "text": "Prepare figures that make a clear point\n\n\n\n\n\n \n\n\n\n\nAmerican and Delta have the shortest delays"
  },
  {
    "objectID": "slides/telling-a-story.html#make-your-figures-memorable",
    "href": "slides/telling-a-story.html#make-your-figures-memorable",
    "title": "Telling a story",
    "section": "Make your figures memorable",
    "text": "Make your figures memorable"
  },
  {
    "objectID": "slides/telling-a-story.html#make-your-figures-memorable-1",
    "href": "slides/telling-a-story.html#make-your-figures-memorable-1",
    "title": "Telling a story",
    "section": "Make your figures memorable",
    "text": "Make your figures memorable"
  },
  {
    "objectID": "slides/telling-a-story.html#further-reading",
    "href": "slides/telling-a-story.html#further-reading",
    "title": "Telling a story",
    "section": "Further reading",
    "text": "Further reading\n\nFundamentals of Data Visualization: Chapter 29: Telling a story and making a point\nJoshua Schimel (2011) Writing Science: How to Write Papers That Get Cited and Proposals That Get Funded"
  },
  {
    "objectID": "slides/overplotting.html#be-aware-of-points-plotted-exactly-on-top-of-one-another",
    "href": "slides/overplotting.html#be-aware-of-points-plotted-exactly-on-top-of-one-another",
    "title": "Dealing with issues of overplotting",
    "section": "Be aware of points plotted exactly on top of one another",
    "text": "Be aware of points plotted exactly on top of one another\n\n\n\n\n\n \n\n\n\n\n\nTechnical term for this problem: overplotting"
  },
  {
    "objectID": "slides/overplotting.html#partial-transparency-helps-highlight-overlapping-points",
    "href": "slides/overplotting.html#partial-transparency-helps-highlight-overlapping-points",
    "title": "Dealing with issues of overplotting",
    "section": "Partial transparency helps highlight overlapping points",
    "text": "Partial transparency helps highlight overlapping points"
  },
  {
    "objectID": "slides/overplotting.html#a-little-jitter-shows-overlaps-even-more-clearly",
    "href": "slides/overplotting.html#a-little-jitter-shows-overlaps-even-more-clearly",
    "title": "Dealing with issues of overplotting",
    "section": "A little jitter shows overlaps even more clearly",
    "text": "A little jitter shows overlaps even more clearly"
  },
  {
    "objectID": "slides/overplotting.html#but-dont-jitter-too-much",
    "href": "slides/overplotting.html#but-dont-jitter-too-much",
    "title": "Dealing with issues of overplotting",
    "section": "But don’t jitter too much",
    "text": "But don’t jitter too much"
  },
  {
    "objectID": "slides/overplotting.html#contour-lines-are-the-2d-version-of-density-plots",
    "href": "slides/overplotting.html#contour-lines-are-the-2d-version-of-density-plots",
    "title": "Dealing with issues of overplotting",
    "section": "Contour lines are the 2D version of density plots",
    "text": "Contour lines are the 2D version of density plots"
  },
  {
    "objectID": "slides/overplotting.html#contour-lines-are-the-2d-version-of-density-plots-1",
    "href": "slides/overplotting.html#contour-lines-are-the-2d-version-of-density-plots-1",
    "title": "Dealing with issues of overplotting",
    "section": "Contour lines are the 2D version of density plots",
    "text": "Contour lines are the 2D version of density plots"
  },
  {
    "objectID": "slides/overplotting.html#we-can-vary-shading-for-added-effect",
    "href": "slides/overplotting.html#we-can-vary-shading-for-added-effect",
    "title": "Dealing with issues of overplotting",
    "section": "We can vary shading for added effect",
    "text": "We can vary shading for added effect"
  },
  {
    "objectID": "slides/overplotting.html#what-do-we-do-when-there-are-multiple-groups",
    "href": "slides/overplotting.html#what-do-we-do-when-there-are-multiple-groups",
    "title": "Dealing with issues of overplotting",
    "section": "What do we do when there are multiple groups?",
    "text": "What do we do when there are multiple groups?"
  },
  {
    "objectID": "slides/overplotting.html#colored-contour-lines-can-work-for-2-to-3-groups",
    "href": "slides/overplotting.html#colored-contour-lines-can-work-for-2-to-3-groups",
    "title": "Dealing with issues of overplotting",
    "section": "Colored contour lines can work for 2 to 3 groups",
    "text": "Colored contour lines can work for 2 to 3 groups"
  },
  {
    "objectID": "slides/overplotting.html#what-if-there-are-multiple-groups-intermingled",
    "href": "slides/overplotting.html#what-if-there-are-multiple-groups-intermingled",
    "title": "Dealing with issues of overplotting",
    "section": "What if there are multiple groups intermingled?",
    "text": "What if there are multiple groups intermingled?"
  },
  {
    "objectID": "slides/overplotting.html#dont-make-plots-that-look-like-spaghetti",
    "href": "slides/overplotting.html#dont-make-plots-that-look-like-spaghetti",
    "title": "Dealing with issues of overplotting",
    "section": "Don’t make plots that look like spaghetti",
    "text": "Don’t make plots that look like spaghetti"
  },
  {
    "objectID": "slides/overplotting.html#contour-lines-work-well-with-small-multiples-facets",
    "href": "slides/overplotting.html#contour-lines-work-well-with-small-multiples-facets",
    "title": "Dealing with issues of overplotting",
    "section": "Contour lines work well with small multiples (facets)",
    "text": "Contour lines work well with small multiples (facets)"
  },
  {
    "objectID": "slides/overplotting.html#d-histograms-rectangular-bins",
    "href": "slides/overplotting.html#d-histograms-rectangular-bins",
    "title": "Dealing with issues of overplotting",
    "section": "2D histograms: rectangular bins",
    "text": "2D histograms: rectangular bins\n\n\n\n\n\n \n\n\n\n\n\nWe need to choose a bin size as in regular histograms"
  },
  {
    "objectID": "slides/overplotting.html#d-histograms-rectangular-bins-1",
    "href": "slides/overplotting.html#d-histograms-rectangular-bins-1",
    "title": "Dealing with issues of overplotting",
    "section": "2D histograms: rectangular bins",
    "text": "2D histograms: rectangular bins\n\n\n\n\n\n \n\n\n\n\n\nWe need to choose a bin size as in regular histograms"
  },
  {
    "objectID": "slides/overplotting.html#d-histograms-hex-bins",
    "href": "slides/overplotting.html#d-histograms-hex-bins",
    "title": "Dealing with issues of overplotting",
    "section": "2D histograms: hex bins",
    "text": "2D histograms: hex bins"
  },
  {
    "objectID": "slides/overplotting.html#d-histograms-hex-bins-1",
    "href": "slides/overplotting.html#d-histograms-hex-bins-1",
    "title": "Dealing with issues of overplotting",
    "section": "2D histograms: hex bins",
    "text": "2D histograms: hex bins"
  },
  {
    "objectID": "slides/overplotting.html#choosing-the-right-color-scale",
    "href": "slides/overplotting.html#choosing-the-right-color-scale",
    "title": "Dealing with issues of overplotting",
    "section": "Choosing the right color scale",
    "text": "Choosing the right color scale\n\n\n\n\n\n \n\n\n\n\n\npalette: SunsetDark"
  },
  {
    "objectID": "slides/overplotting.html#choosing-the-right-color-scale-1",
    "href": "slides/overplotting.html#choosing-the-right-color-scale-1",
    "title": "Dealing with issues of overplotting",
    "section": "Choosing the right color scale",
    "text": "Choosing the right color scale\n\n\n\n\n\n \n\n\n\n\n\npalette: Batlow"
  },
  {
    "objectID": "slides/overplotting.html#choosing-the-right-color-scale-2",
    "href": "slides/overplotting.html#choosing-the-right-color-scale-2",
    "title": "Dealing with issues of overplotting",
    "section": "Choosing the right color scale",
    "text": "Choosing the right color scale\n\n\n\n\n\n \n\n\n\n\n\npalette: YlOrRd"
  },
  {
    "objectID": "slides/overplotting.html#choosing-the-right-color-scale-3",
    "href": "slides/overplotting.html#choosing-the-right-color-scale-3",
    "title": "Dealing with issues of overplotting",
    "section": "Choosing the right color scale",
    "text": "Choosing the right color scale\n\n\n\n\n\n \n\n\n\n\n\npalette: BluYl"
  },
  {
    "objectID": "slides/overplotting.html#choosing-the-right-color-scale-4",
    "href": "slides/overplotting.html#choosing-the-right-color-scale-4",
    "title": "Dealing with issues of overplotting",
    "section": "Choosing the right color scale",
    "text": "Choosing the right color scale\n\n\n\n\n\n \n\n\n\n\n\npalette: Heat"
  },
  {
    "objectID": "slides/overplotting.html#choosing-the-right-color-scale-5",
    "href": "slides/overplotting.html#choosing-the-right-color-scale-5",
    "title": "Dealing with issues of overplotting",
    "section": "Choosing the right color scale",
    "text": "Choosing the right color scale\n\n\n\n\n\n \n\n\n\n\n\npalette: ag_GrnYl"
  },
  {
    "objectID": "slides/overplotting.html#choosing-the-right-color-scale-6",
    "href": "slides/overplotting.html#choosing-the-right-color-scale-6",
    "title": "Dealing with issues of overplotting",
    "section": "Choosing the right color scale",
    "text": "Choosing the right color scale\n\n\n\n\n\n \n\n\n\n\n\npalette: SunsetDark"
  },
  {
    "objectID": "slides/overplotting.html#contour-lines",
    "href": "slides/overplotting.html#contour-lines",
    "title": "Dealing with issues of overplotting",
    "section": "Contour lines",
    "text": "Contour lines\n\nGetting the data:\n\nblue_jays &lt;- read_csv(\"https://wilkelab.org/DSC385/datasets/blue_jays.csv\")\n\nblue_jays\n\n# A tibble: 123 × 8\n   bird_id    sex   bill_depth_mm bill_width_mm bill_length_mm head_length_mm\n   &lt;chr&gt;      &lt;chr&gt;         &lt;dbl&gt;         &lt;dbl&gt;          &lt;dbl&gt;          &lt;dbl&gt;\n 1 0000-00000 M              8.26          9.21           25.9           56.6\n 2 1142-05901 M              8.54          8.76           25.0           56.4\n 3 1142-05905 M              8.39          8.78           26.1           57.3\n 4 1142-05907 F              7.78          9.3            23.5           53.8\n 5 1142-05909 M              8.71          9.84           25.5           57.3\n 6 1142-05911 F              7.28          9.3            22.2           52.2\n 7 1142-05912 M              8.74          9.28           25.4           57.1\n 8 1142-05914 M              8.72          9.94           30             60.7\n 9 1142-05917 F              8.2           9.01           22.8           52.8\n10 1142-05920 F              7.67          9.31           24.6           54.9\n# ℹ 113 more rows\n# ℹ 2 more variables: body_mass_g &lt;dbl&gt;, skull_size_mm &lt;dbl&gt;"
  },
  {
    "objectID": "slides/overplotting.html#contour-lines-1",
    "href": "slides/overplotting.html#contour-lines-1",
    "title": "Dealing with issues of overplotting",
    "section": "Contour lines",
    "text": "Contour lines\n\n\n\nblue_jays |&gt;\n  ggplot() +\n  aes(body_mass_g, head_length_mm) +\n  geom_point() +\n  theme_bw()"
  },
  {
    "objectID": "slides/overplotting.html#contour-lines-2",
    "href": "slides/overplotting.html#contour-lines-2",
    "title": "Dealing with issues of overplotting",
    "section": "Contour lines",
    "text": "Contour lines\n\n\n\nblue_jays |&gt;\n  ggplot() +\n  aes(body_mass_g, head_length_mm) +\n  geom_density_2d() +\n  geom_point() +\n  theme_bw()"
  },
  {
    "objectID": "slides/overplotting.html#contour-lines-3",
    "href": "slides/overplotting.html#contour-lines-3",
    "title": "Dealing with issues of overplotting",
    "section": "Contour lines",
    "text": "Contour lines\n\n\n\nblue_jays |&gt;\n  ggplot() +\n  aes(body_mass_g, head_length_mm) +\n  geom_density_2d(bins = 5) +\n  geom_point() +\n  theme_bw()"
  },
  {
    "objectID": "slides/overplotting.html#contour-bands",
    "href": "slides/overplotting.html#contour-bands",
    "title": "Dealing with issues of overplotting",
    "section": "Contour bands",
    "text": "Contour bands\n\n\n\nblue_jays |&gt;\n  ggplot() +\n  aes(body_mass_g, head_length_mm) +\n  geom_density_2d_filled(bins = 5) +\n  geom_point() +\n  theme_bw()"
  },
  {
    "objectID": "slides/overplotting.html#contour-bands-1",
    "href": "slides/overplotting.html#contour-bands-1",
    "title": "Dealing with issues of overplotting",
    "section": "Contour bands",
    "text": "Contour bands\n\n\n\nblue_jays |&gt;\n  ggplot() +\n  aes(body_mass_g, head_length_mm) +\n  geom_density_2d_filled(\n    bins = 5,\n    alpha = 0.5\n  ) +\n  geom_point() +\n  theme_bw()"
  },
  {
    "objectID": "slides/overplotting.html#contour-bands-2",
    "href": "slides/overplotting.html#contour-bands-2",
    "title": "Dealing with issues of overplotting",
    "section": "Contour bands",
    "text": "Contour bands\n\n\n\nblue_jays |&gt;\n  ggplot() +\n  aes(body_mass_g, head_length_mm) +\n  geom_density_2d_filled(\n    bins = 5,\n    alpha = 0.5\n  ) +\n  geom_density_2d(\n    bins = 5,\n    color = \"black\",\n    linewidth = 0.2\n  ) +\n  geom_point() +\n  theme_bw()"
  },
  {
    "objectID": "slides/overplotting.html#d-histograms",
    "href": "slides/overplotting.html#d-histograms",
    "title": "Dealing with issues of overplotting",
    "section": "2D histograms",
    "text": "2D histograms\n\n\n\nblue_jays |&gt;\n  ggplot() +\n  aes(body_mass_g, head_length_mm) +\n  geom_bin_2d() +\n  theme_bw()"
  },
  {
    "objectID": "slides/overplotting.html#d-histograms-1",
    "href": "slides/overplotting.html#d-histograms-1",
    "title": "Dealing with issues of overplotting",
    "section": "2D histograms",
    "text": "2D histograms\n\n\n\nblue_jays |&gt;\n  ggplot() +\n  aes(body_mass_g, head_length_mm) +\n  geom_bin_2d(binwidth = c(3, 3)) +\n  theme_bw()"
  },
  {
    "objectID": "slides/overplotting.html#d-histograms-2",
    "href": "slides/overplotting.html#d-histograms-2",
    "title": "Dealing with issues of overplotting",
    "section": "2D histograms",
    "text": "2D histograms\n\n\n\nblue_jays |&gt;\n  ggplot() +\n  aes(body_mass_g, head_length_mm) +\n  geom_bin_2d(binwidth = c(1, 5)) +\n  theme_bw()"
  },
  {
    "objectID": "slides/overplotting.html#d-histograms-3",
    "href": "slides/overplotting.html#d-histograms-3",
    "title": "Dealing with issues of overplotting",
    "section": "2D histograms",
    "text": "2D histograms\n\n\n\nblue_jays |&gt;\n  ggplot() +\n  aes(body_mass_g, head_length_mm) +\n  geom_bin_2d(binwidth = c(5, 1)) +\n  theme_bw()"
  },
  {
    "objectID": "slides/overplotting.html#hex-bins",
    "href": "slides/overplotting.html#hex-bins",
    "title": "Dealing with issues of overplotting",
    "section": "Hex bins",
    "text": "Hex bins\n\n\n\nblue_jays |&gt;\n  ggplot() +\n  aes(body_mass_g, head_length_mm) +\n  geom_hex() +\n  theme_bw()"
  },
  {
    "objectID": "slides/overplotting.html#hex-bins-1",
    "href": "slides/overplotting.html#hex-bins-1",
    "title": "Dealing with issues of overplotting",
    "section": "Hex bins",
    "text": "Hex bins\n\n\n\nblue_jays |&gt;\n  ggplot() +\n  aes(body_mass_g, head_length_mm) +\n  geom_hex(bins = 15) +\n  theme_bw()"
  },
  {
    "objectID": "slides/overplotting.html#hex-bins-2",
    "href": "slides/overplotting.html#hex-bins-2",
    "title": "Dealing with issues of overplotting",
    "section": "Hex bins",
    "text": "Hex bins\n\n\n\nblue_jays |&gt;\n  ggplot() +\n  aes(body_mass_g, head_length_mm) +\n  geom_hex(bins = 10) +\n  theme_bw()"
  },
  {
    "objectID": "slides/overplotting.html#further-reading",
    "href": "slides/overplotting.html#further-reading",
    "title": "Dealing with issues of overplotting",
    "section": "Further reading",
    "text": "Further reading\n\nFundamentals of Data Visualization: Chapter 18: Handling overlapping points\nggplot2 reference documentation: geom_density_2d()\nggplot2 reference documentation: geom_bin_2d()\nggplot2 reference documentation: geom_hex()"
  },
  {
    "objectID": "slides/introduction.html#why-data-visualization",
    "href": "slides/introduction.html#why-data-visualization",
    "title": "Introduction",
    "section": "Why Data Visualization?",
    "text": "Why Data Visualization?"
  },
  {
    "objectID": "slides/introduction.html#why-data-visualization-1",
    "href": "slides/introduction.html#why-data-visualization-1",
    "title": "Introduction",
    "section": "Why Data Visualization?",
    "text": "Why Data Visualization?"
  },
  {
    "objectID": "slides/introduction.html#why-r",
    "href": "slides/introduction.html#why-r",
    "title": "Introduction",
    "section": "Why R?",
    "text": "Why R?"
  },
  {
    "objectID": "slides/introduction.html#why-me",
    "href": "slides/introduction.html#why-me",
    "title": "Introduction",
    "section": "Why me?",
    "text": "Why me?\n\n\n\nhttps://clauswilke.com/dataviz"
  },
  {
    "objectID": "slides/introduction.html#why-me-1",
    "href": "slides/introduction.html#why-me-1",
    "title": "Introduction",
    "section": "Why me?",
    "text": "Why me?"
  },
  {
    "objectID": "slides/introduction.html#we-will-use-quarto-for-all-assignments",
    "href": "slides/introduction.html#we-will-use-quarto-for-all-assignments",
    "title": "Introduction",
    "section": "We will use Quarto for all assignments",
    "text": "We will use Quarto for all assignments\n\n\n\n\nhttps://quarto.org/"
  },
  {
    "objectID": "slides/introduction.html#edupod-login-httpsedupod.cns.utexas.edu",
    "href": "slides/introduction.html#edupod-login-httpsedupod.cns.utexas.edu",
    "title": "Introduction",
    "section": "Edupod login: https://edupod.cns.utexas.edu",
    "text": "Edupod login: https://edupod.cns.utexas.edu"
  },
  {
    "objectID": "slides/introduction.html#edupod-login-httpsedupod.cns.utexas.edu-1",
    "href": "slides/introduction.html#edupod-login-httpsedupod.cns.utexas.edu-1",
    "title": "Introduction",
    "section": "Edupod login: https://edupod.cns.utexas.edu",
    "text": "Edupod login: https://edupod.cns.utexas.edu"
  },
  {
    "objectID": "slides/introduction.html#edupod-login-httpsedupod.cns.utexas.edu-2",
    "href": "slides/introduction.html#edupod-login-httpsedupod.cns.utexas.edu-2",
    "title": "Introduction",
    "section": "Edupod login: https://edupod.cns.utexas.edu",
    "text": "Edupod login: https://edupod.cns.utexas.edu"
  },
  {
    "objectID": "slides/introduction.html#working-with-quarto-documents",
    "href": "slides/introduction.html#working-with-quarto-documents",
    "title": "Introduction",
    "section": "Working with Quarto documents",
    "text": "Working with Quarto documents"
  },
  {
    "objectID": "slides/introduction.html#working-with-quarto-documents-1",
    "href": "slides/introduction.html#working-with-quarto-documents-1",
    "title": "Introduction",
    "section": "Working with Quarto documents",
    "text": "Working with Quarto documents"
  },
  {
    "objectID": "slides/introduction.html#working-with-quarto-documents-2",
    "href": "slides/introduction.html#working-with-quarto-documents-2",
    "title": "Introduction",
    "section": "Working with Quarto documents",
    "text": "Working with Quarto documents"
  },
  {
    "objectID": "slides/introduction.html#working-with-quarto-documents-3",
    "href": "slides/introduction.html#working-with-quarto-documents-3",
    "title": "Introduction",
    "section": "Working with Quarto documents",
    "text": "Working with Quarto documents"
  },
  {
    "objectID": "slides/introduction.html#working-with-quarto-documents-4",
    "href": "slides/introduction.html#working-with-quarto-documents-4",
    "title": "Introduction",
    "section": "Working with Quarto documents",
    "text": "Working with Quarto documents"
  },
  {
    "objectID": "slides/introduction.html#use-export-to-download-pdfs",
    "href": "slides/introduction.html#use-export-to-download-pdfs",
    "title": "Introduction",
    "section": "Use “Export” to download PDFs",
    "text": "Use “Export” to download PDFs"
  },
  {
    "objectID": "slides/introduction.html#the-source-for-the-class-website-is-on-github",
    "href": "slides/introduction.html#the-source-for-the-class-website-is-on-github",
    "title": "Introduction",
    "section": "The source for the class website is on GitHub",
    "text": "The source for the class website is on GitHub"
  },
  {
    "objectID": "slides/introduction.html#the-source-for-the-class-website-is-on-github-1",
    "href": "slides/introduction.html#the-source-for-the-class-website-is-on-github-1",
    "title": "Introduction",
    "section": "The source for the class website is on GitHub",
    "text": "The source for the class website is on GitHub"
  },
  {
    "objectID": "slides/introduction.html#the-source-for-the-class-website-is-on-github-2",
    "href": "slides/introduction.html#the-source-for-the-class-website-is-on-github-2",
    "title": "Introduction",
    "section": "The source for the class website is on GitHub",
    "text": "The source for the class website is on GitHub\n\n\n\n\nhttps://github.com/wilkelab/DSC385"
  },
  {
    "objectID": "slides/introduction.html#press-e-to-save-slides-as-pdf",
    "href": "slides/introduction.html#press-e-to-save-slides-as-pdf",
    "title": "Introduction",
    "section": "Press ‘e’ to save slides as PDF",
    "text": "Press ‘e’ to save slides as PDF\n\n\n\n(Works best on Chrome)"
  },
  {
    "objectID": "slides/introduction.html#further-reading",
    "href": "slides/introduction.html#further-reading",
    "title": "Introduction",
    "section": "Further reading",
    "text": "Further reading\n\nFundamentals of Data Visualization: Read the book online\nQuarto docs: Comprehensive guide"
  },
  {
    "objectID": "slides/hierarchical-clustering.html#example-data-state-level-statistics-for-us",
    "href": "slides/hierarchical-clustering.html#example-data-state-level-statistics-for-us",
    "title": "Hierarchical clustering",
    "section": "Example data: State level statistics for US",
    "text": "Example data: State level statistics for US\n\n\nUS_state_stats\n\n# A tibble: 50 × 20\n   state       homeownership multiunit income med_income poverty fed_spend smoke\n   &lt;chr&gt;               &lt;dbl&gt;     &lt;dbl&gt;  &lt;dbl&gt;      &lt;dbl&gt;   &lt;dbl&gt;     &lt;dbl&gt; &lt;dbl&gt;\n 1 Alabama              71.1      15.5  22984      42081    17.1     11.7   24.8\n 2 Alaska               64.7      24.6  30726      66521     9.5     16.8   25  \n 3 Arizona              67.4      20.7  25680      50448    15.3      9.85  20.4\n 4 Arkansas             67.7      15.2  21274      39267    18        9.61  23.5\n 5 California           57.4      30.7  29188      60883    13.7      8.89  15.2\n 6 Colorado             67.6      25.6  30151      56456    12.2      9.15  19.9\n 7 Connecticut          69.2      34.6  36775      67740     9.2     14.8   16.5\n 8 Delaware             73.6      17.7  29007      57599    11        8.89  20.7\n 9 Florida              69.7      30    26551      47661    13.8      9.62  21.6\n10 Georgia              67.2      20.5  25134      49347    15.7      8.88  22.2\n# ℹ 40 more rows\n# ℹ 12 more variables: murder &lt;dbl&gt;, robbery &lt;dbl&gt;, agg_assault &lt;dbl&gt;,\n#   larceny &lt;dbl&gt;, motor_theft &lt;dbl&gt;, soc_sec &lt;dbl&gt;, nuclear &lt;dbl&gt;, coal &lt;dbl&gt;,\n#   tr_deaths &lt;dbl&gt;, tr_deaths_no_alc &lt;dbl&gt;, unempl &lt;dbl&gt;, popdens2010 &lt;dbl&gt;"
  },
  {
    "objectID": "slides/hierarchical-clustering.html#pca-reveals-broad-trends",
    "href": "slides/hierarchical-clustering.html#pca-reveals-broad-trends",
    "title": "Hierarchical clustering",
    "section": "PCA reveals broad trends",
    "text": "PCA reveals broad trends"
  },
  {
    "objectID": "slides/hierarchical-clustering.html#hierarchical-clustering",
    "href": "slides/hierarchical-clustering.html#hierarchical-clustering",
    "title": "Hierarchical clustering",
    "section": "Hierarchical clustering",
    "text": "Hierarchical clustering\n\n\n\n\n\n \n\n\n\n\n\nThis visualization is called a dendrogram"
  },
  {
    "objectID": "slides/hierarchical-clustering.html#cut-the-dendrogram-to-obtain-defined-clusters",
    "href": "slides/hierarchical-clustering.html#cut-the-dendrogram-to-obtain-defined-clusters",
    "title": "Hierarchical clustering",
    "section": "Cut the dendrogram to obtain defined clusters",
    "text": "Cut the dendrogram to obtain defined clusters"
  },
  {
    "objectID": "slides/hierarchical-clustering.html#cut-the-dendrogram-to-obtain-defined-clusters-1",
    "href": "slides/hierarchical-clustering.html#cut-the-dendrogram-to-obtain-defined-clusters-1",
    "title": "Hierarchical clustering",
    "section": "Cut the dendrogram to obtain defined clusters",
    "text": "Cut the dendrogram to obtain defined clusters"
  },
  {
    "objectID": "slides/hierarchical-clustering.html#cut-the-dendrogram-to-obtain-defined-clusters-2",
    "href": "slides/hierarchical-clustering.html#cut-the-dendrogram-to-obtain-defined-clusters-2",
    "title": "Hierarchical clustering",
    "section": "Cut the dendrogram to obtain defined clusters",
    "text": "Cut the dendrogram to obtain defined clusters"
  },
  {
    "objectID": "slides/hierarchical-clustering.html#cut-the-dendrogram-to-obtain-defined-clusters-3",
    "href": "slides/hierarchical-clustering.html#cut-the-dendrogram-to-obtain-defined-clusters-3",
    "title": "Hierarchical clustering",
    "section": "Cut the dendrogram to obtain defined clusters",
    "text": "Cut the dendrogram to obtain defined clusters"
  },
  {
    "objectID": "slides/hierarchical-clustering.html#cut-the-dendrogram-to-obtain-defined-clusters-4",
    "href": "slides/hierarchical-clustering.html#cut-the-dendrogram-to-obtain-defined-clusters-4",
    "title": "Hierarchical clustering",
    "section": "Cut the dendrogram to obtain defined clusters",
    "text": "Cut the dendrogram to obtain defined clusters"
  },
  {
    "objectID": "slides/hierarchical-clustering.html#display-clusters-in-pca-space",
    "href": "slides/hierarchical-clustering.html#display-clusters-in-pca-space",
    "title": "Hierarchical clustering",
    "section": "Display clusters in PCA space",
    "text": "Display clusters in PCA space"
  },
  {
    "objectID": "slides/hierarchical-clustering.html#hierarchical-clustering-can-be-useful-with-heatmaps",
    "href": "slides/hierarchical-clustering.html#hierarchical-clustering-can-be-useful-with-heatmaps",
    "title": "Hierarchical clustering",
    "section": "Hierarchical clustering can be useful with heatmaps",
    "text": "Hierarchical clustering can be useful with heatmaps\n\n\nArbitrary ordering:\n\n\n\n\n\n \n\n\n\n\n\nOrdering by clustering similarity:"
  },
  {
    "objectID": "slides/hierarchical-clustering.html#hierarchical-clustering-methods-require-two-ingredients",
    "href": "slides/hierarchical-clustering.html#hierarchical-clustering-methods-require-two-ingredients",
    "title": "Hierarchical clustering",
    "section": "Hierarchical clustering methods require two ingredients",
    "text": "Hierarchical clustering methods require two ingredients\n\n1. Distance metric\nExamples: Euclidean distance, maximum distance\n\n\n\n2. Linkage criteria\nExamples:\n\nUnweighted average linkage clustering\n(unweighted pair group method with arithmetic mean, UPGMA)\nComplete linkage clustering\nMinimum energy clustering\n\n(See: https://en.wikipedia.org/wiki/Hierarchical_clustering)"
  },
  {
    "objectID": "slides/hierarchical-clustering.html#hierarchical-clustering-via-upgma-1",
    "href": "slides/hierarchical-clustering.html#hierarchical-clustering-via-upgma-1",
    "title": "Hierarchical clustering",
    "section": "Hierarchical clustering via UPGMA",
    "text": "Hierarchical clustering via UPGMA\n\n\n\n\n\n\n\n \n\n\n\n\n\nDistance matrix:\n\n\n\n\n\n\nA\nB\nC\nD\nE\n\n\n\n\nA\n0.00\n2.79\n3.840\n3.56\n3.610\n\n\nB\n2.79\n0.00\n4.020\n1.34\n3.330\n\n\nC\n3.84\n4.02\n0.000\n3.57\n0.791\n\n\nD\n3.56\n1.34\n3.570\n0.00\n2.820\n\n\nE\n3.61\n3.33\n0.791\n2.82\n0.000"
  },
  {
    "objectID": "slides/hierarchical-clustering.html#hierarchical-clustering-via-upgma-2",
    "href": "slides/hierarchical-clustering.html#hierarchical-clustering-via-upgma-2",
    "title": "Hierarchical clustering",
    "section": "Hierarchical clustering via UPGMA",
    "text": "Hierarchical clustering via UPGMA\n\n\n\n\n\n\n\n \n\n\n\n\n\nDistance matrix:\n\n\n\n\n\n\nA\nB\nC\nD\nE\n\n\n\n\nA\n0.00\n2.79\n3.840\n3.56\n3.610\n\n\nB\n2.79\n0.00\n4.020\n1.34\n3.330\n\n\nC\n3.84\n4.02\n0.000\n3.57\n0.791\n\n\nD\n3.56\n1.34\n3.570\n0.00\n2.820\n\n\nE\n3.61\n3.33\n0.791\n2.82\n0.000\n\n\n\n\n\n\n\nJoin points with minimum distance"
  },
  {
    "objectID": "slides/hierarchical-clustering.html#hierarchical-clustering-via-upgma-3",
    "href": "slides/hierarchical-clustering.html#hierarchical-clustering-via-upgma-3",
    "title": "Hierarchical clustering",
    "section": "Hierarchical clustering via UPGMA",
    "text": "Hierarchical clustering via UPGMA\n\n\n\n\n\n\n\n \n\n\n\n\n\nUpdate distances by averaging: \\[d_{A:(C, E)} = (d_{A:C} + d_{A:E})/2,\\]\nsimilarly for points B and D"
  },
  {
    "objectID": "slides/hierarchical-clustering.html#hierarchical-clustering-via-upgma-4",
    "href": "slides/hierarchical-clustering.html#hierarchical-clustering-via-upgma-4",
    "title": "Hierarchical clustering",
    "section": "Hierarchical clustering via UPGMA",
    "text": "Hierarchical clustering via UPGMA\n\n\n\n\n\n\n\n \n\n\n\n\n\nUpdated distance matrix:\n\n\n\n\n\n\nA\nB\nD\n(C, E)\n\n\n\n\nA\n0.00\n2.79\n3.56\n3.73\n\n\nB\n2.79\n0.00\n1.34\n3.68\n\n\nD\n3.56\n1.34\n0.00\n3.20\n\n\n(C, E)\n3.73\n3.68\n3.20\n0.00"
  },
  {
    "objectID": "slides/hierarchical-clustering.html#hierarchical-clustering-via-upgma-5",
    "href": "slides/hierarchical-clustering.html#hierarchical-clustering-via-upgma-5",
    "title": "Hierarchical clustering",
    "section": "Hierarchical clustering via UPGMA",
    "text": "Hierarchical clustering via UPGMA\n\n\n\n\n\n\n\n \n\n\n\n\n\nUpdated distance matrix:\n\n\n\n\n\n\nA\nB\nD\n(C, E)\n\n\n\n\nA\n0.00\n2.79\n3.56\n3.73\n\n\nB\n2.79\n0.00\n1.34\n3.68\n\n\nD\n3.56\n1.34\n0.00\n3.20\n\n\n(C, E)\n3.73\n3.68\n3.20\n0.00\n\n\n\n\n\n\n\nContinue joining points with minimum distance"
  },
  {
    "objectID": "slides/hierarchical-clustering.html#hierarchical-clustering-via-upgma-6",
    "href": "slides/hierarchical-clustering.html#hierarchical-clustering-via-upgma-6",
    "title": "Hierarchical clustering",
    "section": "Hierarchical clustering via UPGMA",
    "text": "Hierarchical clustering via UPGMA\n\n\n\n\n\n\n\n \n\n\n\n\n\nUpdated distance matrix:\n\n\n\n\n\n\nA\n(C, E)\n(B, D)\n\n\n\n\nA\n0.00\n3.73\n3.17\n\n\n(C, E)\n3.73\n0.00\n3.44\n\n\n(B, D)\n3.17\n3.44\n0.00"
  },
  {
    "objectID": "slides/hierarchical-clustering.html#hierarchical-clustering-via-upgma-7",
    "href": "slides/hierarchical-clustering.html#hierarchical-clustering-via-upgma-7",
    "title": "Hierarchical clustering",
    "section": "Hierarchical clustering via UPGMA",
    "text": "Hierarchical clustering via UPGMA\n\n\n\n\n\n\n\n \n\n\n\n\n\nUpdated distance matrix:\n\n\n\n\n\n\nA\n(C, E)\n(B, D)\n\n\n\n\nA\n0.00\n3.73\n3.17\n\n\n(C, E)\n3.73\n0.00\n3.44\n\n\n(B, D)\n3.17\n3.44\n0.00"
  },
  {
    "objectID": "slides/hierarchical-clustering.html#hierarchical-clustering-via-upgma-8",
    "href": "slides/hierarchical-clustering.html#hierarchical-clustering-via-upgma-8",
    "title": "Hierarchical clustering",
    "section": "Hierarchical clustering via UPGMA",
    "text": "Hierarchical clustering via UPGMA\n\n\n\n\n\n\n\n \n\n\n\n\n\nIn general, distances are weighted by # of data points added to the new cluster: \\[\\begin{eqnarray}\n  d_{(C, E): (A, (B, D))} &=& \\\\\n   \\qquad\\qquad(d_{(C, E): A} &+& 2 d_{(C, E): (B, D)})/(1+2)\n  \\end{eqnarray}\\]"
  },
  {
    "objectID": "slides/hierarchical-clustering.html#hierarchical-clustering-via-upgma-9",
    "href": "slides/hierarchical-clustering.html#hierarchical-clustering-via-upgma-9",
    "title": "Hierarchical clustering",
    "section": "Hierarchical clustering via UPGMA",
    "text": "Hierarchical clustering via UPGMA\n\n\n\n\n\n\n\n \n\n\n\n\n\nDistance matrix:\n\n\n\n\n\n\n(C, E)\n(A, (B, D))\n\n\n\n\n(C, E)\n0.00\n3.53\n\n\n(A, (B, D))\n3.53\n0.00"
  },
  {
    "objectID": "slides/hierarchical-clustering.html#hierarchical-clustering-via-upgma-10",
    "href": "slides/hierarchical-clustering.html#hierarchical-clustering-via-upgma-10",
    "title": "Hierarchical clustering",
    "section": "Hierarchical clustering via UPGMA",
    "text": "Hierarchical clustering via UPGMA\n\n\n\n\n\n\n\n \n\n\n\n\n\nFinal clustering:  ((A, (B, D)), (C, E))"
  },
  {
    "objectID": "slides/hierarchical-clustering.html#hierarchical-clustering-via-upgma-11",
    "href": "slides/hierarchical-clustering.html#hierarchical-clustering-via-upgma-11",
    "title": "Hierarchical clustering",
    "section": "Hierarchical clustering via UPGMA",
    "text": "Hierarchical clustering via UPGMA\n\n\n\n\n\n\n\n \n\n\n\n\n\nFinal clustering:"
  },
  {
    "objectID": "slides/hierarchical-clustering.html#doing-hierarchical-clustering-in-r-1",
    "href": "slides/hierarchical-clustering.html#doing-hierarchical-clustering-in-r-1",
    "title": "Hierarchical clustering",
    "section": "Doing hierarchical clustering in R",
    "text": "Doing hierarchical clustering in R\n\nWe’ll cluster the US state stats dataset:\n\n\n\nUS_state_stats &lt;- read_csv(\"https://wilkelab.org/DSC385/datasets/US_state_stats.csv\") |&gt;\n  filter(state != \"District of Columbia\")\n\nUS_state_stats \n\n# A tibble: 50 × 20\n   state       homeownership multiunit income med_income poverty fed_spend smoke\n   &lt;chr&gt;               &lt;dbl&gt;     &lt;dbl&gt;  &lt;dbl&gt;      &lt;dbl&gt;   &lt;dbl&gt;     &lt;dbl&gt; &lt;dbl&gt;\n 1 Alabama              71.1      15.5  22984      42081    17.1     11.7   24.8\n 2 Alaska               64.7      24.6  30726      66521     9.5     16.8   25  \n 3 Arizona              67.4      20.7  25680      50448    15.3      9.85  20.4\n 4 Arkansas             67.7      15.2  21274      39267    18        9.61  23.5\n 5 California           57.4      30.7  29188      60883    13.7      8.89  15.2\n 6 Colorado             67.6      25.6  30151      56456    12.2      9.15  19.9\n 7 Connecticut          69.2      34.6  36775      67740     9.2     14.8   16.5\n 8 Delaware             73.6      17.7  29007      57599    11        8.89  20.7\n 9 Florida              69.7      30    26551      47661    13.8      9.62  21.6\n10 Georgia              67.2      20.5  25134      49347    15.7      8.88  22.2\n# ℹ 40 more rows\n# ℹ 12 more variables: murder &lt;dbl&gt;, robbery &lt;dbl&gt;, agg_assault &lt;dbl&gt;,\n#   larceny &lt;dbl&gt;, motor_theft &lt;dbl&gt;, soc_sec &lt;dbl&gt;, nuclear &lt;dbl&gt;, coal &lt;dbl&gt;,\n#   tr_deaths &lt;dbl&gt;, tr_deaths_no_alc &lt;dbl&gt;, unempl &lt;dbl&gt;, popdens2010 &lt;dbl&gt;"
  },
  {
    "objectID": "slides/hierarchical-clustering.html#step-1-calculate-the-distance-matrix",
    "href": "slides/hierarchical-clustering.html#step-1-calculate-the-distance-matrix",
    "title": "Hierarchical clustering",
    "section": "Step 1: Calculate the distance matrix",
    "text": "Step 1: Calculate the distance matrix\n\n\nUS_state_stats |&gt;\n  column_to_rownames(var = \"state\") |&gt;\n  scale() |&gt;\n  dist(method = \"euclidean\")\n\n                 Alabama    Alaska   Arizona  Arkansas California  Colorado Connecticut  Delaware   Florida   Georgia    Hawaii     Idaho  Illinois   Indiana      Iowa    Kansas  Kentucky Louisiana\nAlaska         10.598996                                                                                                                                                                             \nArizona         3.330008  9.367964                                                                                                                                                                   \nArkansas        2.101623 10.258034  3.460202                                                                                                                                                         \nCalifornia      7.387598 10.417133  4.574415  7.213409                                                                                                                                               \nColorado        5.853785  8.784506  3.584944  5.667544   4.905273                                                                                                                                    \nConnecticut     8.163739  9.632134  6.647566  8.581965   6.413761  6.054845                                                                                                                          \nDelaware        6.852026  6.873437  6.099149  6.443272   8.224788  5.836395    7.471686                                                                                                              \nFlorida         3.817288 10.483883  3.058667  4.111477   5.074512  4.373974    6.059186  6.305386                                                                                                    \nGeorgia         3.718662  9.954441  1.731379  3.841420   4.757818  3.278357    7.153667  6.451118  3.147390                                                                                          \nHawaii          8.937729  6.700074  7.068674  8.508732   7.035466  6.118096    6.293809  6.878239  7.514385  7.792204                                                                                \nIdaho           5.597221  9.004979  4.419521  4.548114   6.607359  4.469112    7.676599  5.801041  5.045858  4.799015  6.969588                                                                      \nIllinois        5.254690 10.316944  3.192744  5.609923   4.396773  3.944139    5.238648  6.674979  3.160311  3.311714  7.447009  6.015498                                                            \nIndiana         3.604745 10.172037  3.853444  3.882761   7.044651  4.062005    7.864817  6.213848  3.787589  3.140930  8.375538  5.298522  4.811957                                                  \nIowa            5.007138  9.958779  4.840562  4.587101   7.634487  4.002106    6.966781  5.674885  4.667862  4.859556  7.354684  3.935105  5.395395  3.885737                                        \nKansas          4.408601  7.409098  3.060602  4.442553   6.598661  3.512435    7.294319  3.735978  4.258347  3.615391  6.183604  3.905887  4.316269  4.282286  2.020848                              \nKentucky        2.896963  8.930716  5.257548  3.631240   9.364228  6.754618   10.274920  6.475033  5.154735  4.953492  9.129675  6.531273  7.275413  3.384898  5.400969  5.740308                    \nLouisiana       2.187868  9.890864  2.803839  2.411572   6.355365  5.410132    7.975901  6.748584  3.939756  3.518586  8.236106  4.961559  5.256562  4.220968  5.384255  4.020284  3.898974          \nMaine           5.449459  9.500632  5.356080  4.816331   7.595522  5.251686    6.878787  5.995987  4.764959  5.823169  6.944840  3.188682  6.143050  5.141585  3.249026  4.222520  5.968985  5.401479\nMaryland        7.611163  9.273961  6.327444  8.668010   6.722458  6.408493    4.868335  7.423132  6.638708  6.740797  7.515811  8.851332  5.771450  7.475384  8.018422  6.383880  9.115635  7.319302\nMassachusetts   7.963086  9.781969  6.354021  8.072120   5.455518  5.195148    3.060985  7.225595  5.278116  6.487500  5.717072  7.309502  5.055135  7.032772  6.492189  6.865981  9.469819  7.491380\nMichigan        3.219770 10.438840  2.876205  3.585488   6.172830  4.156116    6.718661  6.002538  2.794426  2.920050  8.228620  4.716282  3.390219  2.702043  3.778241  3.360651  4.829221  3.688944\nMinnesota       5.699186  9.792369  4.346035  5.729161   6.486491  2.933653    5.706504  5.782694  4.478219  4.323841  7.140860  4.643832  3.857913  4.315508  2.716098  2.943799  7.133466  5.836457\nMississippi     2.883395 11.407078  4.665463  2.644596   8.218904  7.060859    9.761691  7.962489  5.091162  4.947830  9.825048  5.547383  7.061814  5.136325  6.216101  6.501396  3.987288  3.266231\nMissouri        2.193270  9.917924  2.932619  2.820666   6.655760  4.228391    7.353772  5.963989  3.232413  2.995409  7.834503  5.026190  4.551890  2.291596  3.673264  2.990748  3.026295  2.921983\nMontana         3.778946  8.061485  3.997077  3.462787   7.773931  5.249206    9.107011  4.420878  4.673883  4.419328  7.284882  3.631654  6.333142  4.746282  3.332278  3.110260  4.808803  3.374796\nNebraska        5.010139  8.818975  4.374697  4.393229   7.323869  4.062795    6.927510  5.277823  5.158065  4.691573  6.423243  4.068942  5.195917  4.537399  2.470144  2.287313  6.083651  5.127234\nNevada          6.867679  8.696989  4.599803  6.614218   5.019683  5.218190    8.358046  6.695426  5.604532  4.833401  6.778081  6.817587  5.516908  6.030305  7.702788  6.141385  7.205939  6.315798\nNew Hampshire   7.032307  9.342326  5.896818  6.871723   7.463344  5.057318    5.090292  6.242540  5.863305  6.372527  6.696511  5.337879  5.194277  6.441029  4.299915  4.980274  8.770819  7.124445\nNew Jersey      8.480882 10.991190  6.720639  8.755648   5.736034  6.305088    3.633544  7.650389  5.777136  6.795657  7.618642  8.219887  4.804280  7.707355  7.699712  8.015335 10.731633  8.247333\nNew Mexico      3.680324  8.522460  4.141634  3.438805   7.732973  5.405001    8.705953  5.658454  5.487654  4.472108  7.876981  5.083431  6.601013  4.562994  5.203417  4.088725  3.360258  3.383514\nNew York        7.740170 10.726266  5.889495  7.622262   4.069967  5.830359    5.910359  8.683771  5.156224  5.945851  6.716974  7.941413  4.649067  7.279079  7.735557  7.558194  9.310169  7.104194\nNorth Carolina  2.964659 10.446575  2.011604  3.162292   5.346357  4.219042    7.172742  6.558336  2.854521  1.673388  8.316637  4.971980  3.299835  3.014498  4.783395  3.728261  4.552803  3.294185\nNorth Dakota    6.830398  8.494124  6.726308  6.215588   9.102334  5.825150    8.078210  6.274746  7.143179  7.022232  6.067419  5.591146  7.800522  6.406683  4.333533  4.269167  6.384704  6.832059\nOhio            3.756038 10.503530  3.207573  3.964614   5.829037  3.634401    6.763715  6.086862  2.761796  2.645838  7.765809  5.294823  3.414807  2.337553  3.693684  2.922134  4.539927  4.122743\nOklahoma        2.746771  9.590296  3.485447  2.160842   7.093379  4.597272    8.206370  6.013341  4.026087  3.514846  7.809859  4.144994  5.635490  2.949381  3.685416  3.896042  3.236769  2.712148\nOregon          5.548912  9.264492  3.668999  4.628232   4.605672  3.465647    6.494161  6.242370  3.774078  4.028477  5.799009  3.010644  4.661539  4.918500  4.211692  3.995912  6.544470  4.859990\nPennsylvania    3.278011 10.332521  3.342653  4.088292   6.229582  4.611578    5.783043  6.249101  2.736122  3.577485  7.875235  5.678008  3.172094  3.276966  4.092980  3.516435  4.990771  4.012989\nRhode Island    8.299825  8.727605  6.894639  7.765106   6.657274  6.679551    6.042031  6.508415  6.088086  7.287467  5.160020  6.871825  6.752070  7.613243  7.566176  7.738592  8.938709  7.772664\nSouth Carolina  2.215120 10.099229  2.490228  2.549883   6.425645  5.464897    7.510363  6.526626  3.601202  3.138396  8.511209  5.060045  4.305294  4.303923  5.276383  4.459678  4.725989  2.765308\nSouth Dakota    5.342727  8.707087  5.423795  4.524657   8.151475  5.319894    7.848930  5.668781  5.828860  5.846903  6.674934  3.605722  6.993915  5.527714  3.431093  3.665688  5.645236  5.154360\nTennessee       1.592758 10.217475  2.929816  2.455450   6.825626  5.211316    7.910098  6.451256  3.357974  2.869454  8.663065  5.604460  4.496692  2.836403  4.945482  4.346147  2.903620  2.663005\nTexas           4.732795 10.096352  2.507271  4.552391   4.110426  3.320189    7.219854  7.019202  3.748023  2.073875  7.473824  4.796109  3.747254  4.304938  5.192502  3.882935  6.240198  3.758654\nUtah            7.816158  9.971541  5.886282  7.294373   7.035596  4.025850    7.845243  6.827859  6.908662  5.766022  7.201289  4.877627  6.305243  6.466673  4.757319  4.528537  9.209289  7.334168\nVermont         7.853224  9.342110  7.331872  7.357606   9.369040  7.662961    7.198676  7.277386  7.861043  8.097009  7.691579  6.377467  7.270864  8.433320  6.365156  6.540232  9.630963  7.996153\nVirginia        5.753364  8.798401  4.670117  6.490933   6.171084  4.301018    4.253637  6.930069  5.205486  5.131602  6.528350  6.267057  4.758796  5.509324  5.179441  4.622325  7.411418  5.481934\nWashington      6.100880  8.812749  3.607467  5.795693   3.680065  2.581905    4.948654  6.302339  3.986082  4.020214  5.250266  4.144214  3.791803  5.258658  4.655437  4.116854  7.604610  5.325361\nWest Virginia   3.873600 10.991010  5.946337  3.513818   9.654607  6.783430    9.605647  6.816279  5.733335  5.935861  9.565350  5.812334  7.473856  4.004706  4.372867  5.827139  3.110384  4.962556\nWisconsin       4.364111  9.825504  3.273309  4.235680   5.727754  2.696602    5.899727  5.849888  3.071053  3.246268  6.758584  4.164685  3.394139  3.129319  2.282848  2.033971  5.447424  4.520653\nWyoming         8.354493  7.492609  8.226198  7.759220  10.664883  7.652842    9.921622  5.697209  8.976007  8.516690  7.911546  6.819268  9.534238  8.124581  6.861121  5.593932  7.161100  8.439725\n                   Maine  Maryland Massachusetts  Michigan Minnesota Mississippi  Missouri   Montana  Nebraska    Nevada New Hampshire New Jersey New Mexico  New York North Carolina North Dakota\nAlaska                                                                                                                                                                                            \nArizona                                                                                                                                                                                           \nArkansas                                                                                                                                                                                          \nCalifornia                                                                                                                                                                                        \nColorado                                                                                                                                                                                          \nConnecticut                                                                                                                                                                                       \nDelaware                                                                                                                                                                                          \nFlorida                                                                                                                                                                                           \nGeorgia                                                                                                                                                                                           \nHawaii                                                                                                                                                                                            \nIdaho                                                                                                                                                                                             \nIllinois                                                                                                                                                                                          \nIndiana                                                                                                                                                                                           \nIowa                                                                                                                                                                                              \nKansas                                                                                                                                                                                            \nKentucky                                                                                                                                                                                          \nLouisiana                                                                                                                                                                                         \nMaine                                                                                                                                                                                             \nMaryland        8.589605                                                                                                                                                                          \nMassachusetts   6.619401  5.444320                                                                                                                                                                \nMichigan        4.510982  6.891263      6.464100                                                                                                                                                  \nMinnesota       4.485471  6.695074      5.548868  3.581946                                                                                                                                        \nMississippi     6.008202  9.723329      9.418208  4.948954  7.356641                                                                                                                              \nMissouri        4.892887  6.787230      6.796929  2.684878  4.399936    4.127669                                                                                                                  \nMontana         4.160841  8.207678      8.403983  4.667686  5.307321    4.753047  3.053530                                                                                                        \nNebraska        4.054463  7.708930      6.601193  4.418092  3.198633    6.438225  4.032172  3.688675                                                                                              \nNevada          7.824494  7.645061      7.495758  6.191369  7.070806    7.638030  6.029728  6.659527  7.046413                                                                                    \nNew Hampshire   4.561159  7.429595      5.714043  5.619372  3.356284    8.495515  6.212605  6.589170  3.879067  8.137473                                                                          \nNew Jersey      7.951568  5.737290      3.395446  6.730956  6.213064   10.001374  7.660068  9.696761  7.648360  7.682244      6.126948                                                            \nNew Mexico      5.873785  7.862505      8.285417  4.873973  6.239279    4.073579  3.355320  2.922670  4.978582  6.621719      7.716956   9.420024                                                 \nNew York        7.723006  7.091664      4.143738  6.772569  6.857682    9.003420  6.987451  8.708403  7.313364  6.295759      7.330703   5.408281   8.515242                                      \nNorth Carolina  5.487191  7.071247      6.794340  2.102464  4.565711    4.446084  2.746438  4.567294  4.785123  5.333058      6.327946   6.862369   4.664005  6.268931                            \nNorth Dakota    5.008931  8.852050      7.533362  6.931520  5.893309    7.612123  5.711863  3.859775  3.748656  8.534916      5.974491   9.465422   5.503519  8.669587       7.282022             \nOhio            5.087764  6.627267      5.791114  2.109893  3.650569    5.593289  2.440079  4.327799  4.194522  5.893166      5.992299   6.502035   4.923876  5.875571       2.489281     6.361795\nOklahoma        4.358549  8.039996      7.394851  3.590942  4.839118    3.673270  2.266944  2.940617  3.679251  6.424026      6.381849   8.500283   3.190292  7.414962       3.526575     5.343542\nOregon          3.656905  7.934215      5.557330  4.272458  4.331402    6.002440  4.659856  4.650299  4.258624  5.426520      5.288891   6.817479   5.634277  5.463209       4.215200     5.934161\nPennsylvania    4.838128  5.912135      5.665029  2.080653  3.777518    5.651725  2.761281  5.021885  4.355587  6.503932      5.146335   6.006059   5.459081  6.083498       2.754122     6.788586\nRhode Island    6.528749  8.114487      5.008645  7.227053  7.547637    8.840137  7.557499  8.276331  7.313252  6.409380      7.182960   5.772403   8.093078  5.986392       7.275119     7.663675\nSouth Carolina  5.630992  7.487290      7.603678  3.235657  5.423490    3.523234  3.158677  4.523471  4.874313  6.177323      6.430322   7.649252   4.164027  7.175516       2.329532     7.236684\nSouth Dakota    3.438765  8.644534      7.405576  5.657342  5.175878    5.748209  4.624357  1.983415  3.157721  7.953556      5.346449   8.968003   4.399006  8.359152       5.988650     2.701569\nTennessee       5.609207  7.334145      7.474428  2.804910  5.237431    3.764199  2.195797  4.277971  4.776192  6.037960      6.787385   7.877657   4.008972  6.990206       2.214183     6.978381\nTexas           5.934945  6.905895      6.151740  3.844443  4.498445    5.802564  4.034896  4.834120  4.890119  5.384088      6.552911   6.946721   5.132624  5.322347       3.176829     7.118197\nUtah            6.366016  8.354401      7.296731  6.164955  4.413720    8.625013  6.365106  6.177063  4.851634  7.792762      6.146926   8.237101   6.680453  8.446089       6.541281     6.005682\nVermont         5.750459  9.430157      8.260979  7.389970  6.408482    8.907407  7.833774  7.430777  5.091342  9.671883      4.209895   8.633394   8.253892  9.087153       7.741963     6.307128\nVirginia        5.805975  4.003073      4.769055  5.014803  4.261891    7.689765  4.790444  6.459736  5.068947  7.419712      4.989951   6.063187   6.111441  6.426794       5.365508     6.397805\nWashington      4.621560  6.256025      4.237212  4.434985  3.653237    7.171936  4.981488  5.769384  4.569590  5.395136      4.714175   5.548317   6.173554  4.770796       4.514208     6.387711\nWest Virginia   4.895459  9.802177      9.108152  4.655579  6.370725    4.226412  3.790895  4.718712  5.231977  8.486123      7.616860  10.111724   4.390298  9.593673       5.287663     5.860449\nWisconsin       3.920615  6.744556      5.216107  2.734616  2.202186    5.931485  2.848045  3.955807  2.896716  6.147798      4.157304   6.216018   5.146218  5.846711       3.303504     5.291888\nWyoming         7.126880 10.105004      9.906165  8.743662  7.897871    8.711600  7.551584  4.333896  6.103995  9.153755      7.491362  10.901153   6.510596 11.108905       8.808637     4.795353\n                    Ohio  Oklahoma    Oregon Pennsylvania Rhode Island South Carolina South Dakota Tennessee     Texas      Utah   Vermont  Virginia Washington West Virginia Wisconsin\nAlaska                                                                                                                                                                                 \nArizona                                                                                                                                                                                \nArkansas                                                                                                                                                                               \nCalifornia                                                                                                                                                                             \nColorado                                                                                                                                                                               \nConnecticut                                                                                                                                                                            \nDelaware                                                                                                                                                                               \nFlorida                                                                                                                                                                                \nGeorgia                                                                                                                                                                                \nHawaii                                                                                                                                                                                 \nIdaho                                                                                                                                                                                  \nIllinois                                                                                                                                                                               \nIndiana                                                                                                                                                                                \nIowa                                                                                                                                                                                   \nKansas                                                                                                                                                                                 \nKentucky                                                                                                                                                                               \nLouisiana                                                                                                                                                                              \nMaine                                                                                                                                                                                  \nMaryland                                                                                                                                                                               \nMassachusetts                                                                                                                                                                          \nMichigan                                                                                                                                                                               \nMinnesota                                                                                                                                                                              \nMississippi                                                                                                                                                                            \nMissouri                                                                                                                                                                               \nMontana                                                                                                                                                                                \nNebraska                                                                                                                                                                               \nNevada                                                                                                                                                                                 \nNew Hampshire                                                                                                                                                                          \nNew Jersey                                                                                                                                                                             \nNew Mexico                                                                                                                                                                             \nNew York                                                                                                                                                                               \nNorth Carolina                                                                                                                                                                         \nNorth Dakota                                                                                                                                                                           \nOhio                                                                                                                                                                                   \nOklahoma        3.450637                                                                                                                                                               \nOregon          4.221053  4.206247                                                                                                                                                     \nPennsylvania    2.405404  3.980486  4.781168                                                                                                                                           \nRhode Island    6.996460  7.656694  5.560826     7.069158                                                                                                                              \nSouth Carolina  4.078721  3.618968  5.026658     3.454359     7.704205                                                                                                                 \nSouth Dakota    5.575686  3.772286  4.674182     5.793156     7.443807       5.658435                                                                                                  \nTennessee       3.006111  2.665695  5.200718     2.852044     7.860988       2.250386     5.683295                                                                                     \nTexas           3.311304  3.957736  3.692048     4.403557     7.459784       4.340904     5.933274  4.070610                                                                           \nUtah            5.820170  6.516477  5.388702     6.975968     8.438162       7.360012     5.741575  7.592907  5.444679                                                                 \nVermont         7.981582  7.654685  6.981145     7.030258     8.167112       7.041482     5.854341  7.898382  8.341997  7.926106                                                       \nVirginia        4.993860  5.631299  5.561860     4.104011     7.531600       5.724971     5.947832  5.660883  5.197778  6.452475  7.215077                                             \nWashington      4.321383  5.108779  2.237714     4.559541     5.678181       5.464591     5.505772  5.650595  3.492007  5.017698  7.085641  4.083678                                   \nWest Virginia   4.933222  3.494353  6.332121     5.195085     8.738638       5.204569     4.787221  4.310947  6.850242  8.065666  8.282668  7.472877   7.462814                        \nWisconsin       2.327254  3.507086  3.276736     2.778869     6.699085       4.264763     4.428909  3.954716  3.628860  4.813705  6.653113  4.176491   3.228251      5.200544          \nWyoming         8.644524  7.238965  8.071010     8.835251     9.108380       8.328574     4.973078  8.477997  9.144074  7.732709  7.294573  8.519401   8.512051      7.556514  7.685097"
  },
  {
    "objectID": "slides/hierarchical-clustering.html#step-1-calculate-the-distance-matrix-1",
    "href": "slides/hierarchical-clustering.html#step-1-calculate-the-distance-matrix-1",
    "title": "Hierarchical clustering",
    "section": "Step 1: Calculate the distance matrix",
    "text": "Step 1: Calculate the distance matrix\n\n\nUS_state_stats |&gt;\n  column_to_rownames(var = \"state\") |&gt;\n  scale() |&gt;\n  dist(method = \"manhattan\")\n\n                 Alabama    Alaska   Arizona  Arkansas California  Colorado Connecticut  Delaware   Florida   Georgia    Hawaii     Idaho  Illinois   Indiana      Iowa    Kansas  Kentucky Louisiana\nAlaska         39.364617                                                                                                                                                                             \nArizona        11.457393 34.256754                                                                                                                                                                   \nArkansas        7.563727 36.979698 12.282109                                                                                                                                                         \nCalifornia     27.092569 35.778165 17.267495 27.473571                                                                                                                                               \nColorado       20.486385 26.830814 12.303813 18.723663  16.577681                                                                                                                                    \nConnecticut    27.881993 32.490872 23.810292 29.803273  23.519703 20.333207                                                                                                                          \nDelaware       25.565431 24.114268 22.085864 24.654841  28.860191 18.919099   28.283941                                                                                                              \nFlorida        14.757703 37.487025 10.813581 15.947303  14.771631 15.949390   21.862262 21.536576                                                                                                    \nGeorgia        12.722919 35.663923  6.033199 13.493929  15.433219 12.168010   26.520525 22.328604  9.602667                                                                                          \nHawaii         34.819691 19.783897 27.766370 32.305331  24.016901 21.547728   20.223625 23.485511 28.690091 30.706527                                                                                \nIdaho          19.745449 32.227050 15.412817 15.999750  23.900019 15.496762   26.810291 20.777305 18.505853 17.569117 23.408972                                                                      \nIllinois       19.534776 36.554042 11.861539 21.097936  12.472733 12.717012   17.823019 22.194732  9.976896 11.117761 25.943819 22.116396                                                            \nIndiana        12.753238 35.519382 12.812347 14.848398  22.206667 13.352968   26.441818 20.677876 12.183197 10.113156 30.437677 16.207176 15.523156                                                  \nIowa           16.887848 36.070057 15.710044 15.935214  26.912765 12.974164   25.517710 18.651812 15.708193 15.867194 25.775804 13.555946 19.622490 12.111341                                        \nKansas         16.132276 28.312776 10.999284 15.758134  24.228312 12.783725   26.664013 13.944676 15.248182 12.667386 22.191425 12.943138 16.005273 12.645178  6.528961                              \nKentucky        8.879573 33.818930 18.687634 11.872833  35.856603 23.981172   37.865451 24.475962 18.640994 17.745640 34.148013 20.581355 27.759876 10.986555 18.385613 19.250124                    \nLouisiana       7.341806 35.810798 10.924207  8.575925  24.205810 18.792486   26.200688 24.897868 14.158552 12.542016 29.682396 17.218745 20.217441 13.946551 17.005256 13.780842 11.500321          \nMaine          18.893906 31.188934 18.303720 17.954955  26.770330 16.574771   25.198845 19.631394 17.253112 20.260276 23.406068  9.825994 22.515036 16.250223  9.054923 13.491801 20.787123 17.698318\nMaryland       25.805656 31.675335 20.806442 29.704523  24.095626 19.793805   15.526273 27.350394 23.930061 22.707238 26.258090 31.258360 19.061221 26.788525 27.085683 21.811227 34.558648 24.019984\nMassachusetts  27.610370 32.348280 22.706743 28.991138  20.095868 17.844923    9.836393 25.796140 19.106424 23.719136 17.807773 26.258625 18.528311 23.938428 22.671947 24.176227 35.593178 23.416700\nMichigan       10.892408 37.731162  9.333866 12.990808  18.845509 14.659201   23.999365 19.623196  9.285337  6.945999 30.860859 17.966644 11.158765  8.069259 11.947356 12.242973 17.086716 13.017955\nMinnesota      19.445605 32.475859 14.420244 20.003122  20.599158  9.133611   19.435055 18.127856 17.212266 14.384316 22.538527 17.623839 12.072838 14.771491  9.745534 11.476417 27.329071 19.707720\nMississippi     9.663576 41.516351 15.960822  8.415174  29.470958 23.447245   32.729832 30.242143 17.246017 17.527327 36.513600 19.940493 24.719654 17.346186 19.728993 22.334799 14.005749 11.439921\nMissouri        7.610217 35.417698  9.961130 10.138051  22.859271 14.467240   25.367467 21.763993 10.972625  9.934061 30.042068 17.101701 17.060413  7.803763 11.519870 10.530092 10.061856  8.091016\nMontana        13.043659 29.681100 14.858367 13.219795  30.821872 18.277643   34.740921 15.034760 17.402251 16.386288 26.661423 11.731440 23.457669 15.508538 12.219795 10.143727 15.291925 11.828956\nNebraska       18.737310 32.137251 13.935147 15.665617  27.906480 13.838232   25.181656 17.958883 18.467426 15.358309 23.227217 12.914711 18.901255 15.574059  8.283421  7.150246 22.523107 17.457847\nNevada         25.071960 30.052598 16.832981 23.195984  17.162031 17.188030   32.418899 22.901218 19.861440 17.464555 23.546802 23.620484 18.225749 22.043616 24.762569 20.244312 27.873980 22.828637\nNew Hampshire  25.637810 30.952351 21.461364 24.533148  25.554741 16.771438   17.519240 20.889699 21.502428 23.563682 21.808457 17.975251 17.969381 22.780764 13.282445 19.341475 34.108060 24.302570\nNew Jersey     29.229522 37.110486 20.867874 30.068037  18.720608 20.180116   10.704776 27.749816 17.831686 20.929297 25.755317 28.711458 13.270208 24.967964 27.643298 27.550045 41.034094 27.931479\nNew Mexico     12.685293 31.647812 15.669371 11.617146  31.227012 19.638299   31.876644 21.272159 21.565973 17.598827 28.172359 15.988255 25.428154 16.280465 18.731333 14.175000  9.304608 11.454328\nNew York       26.114656 37.852758 18.181192 26.783061  12.968452 19.077331   20.286075 27.630758 14.139010 18.674509 24.293757 27.347706 12.921183 22.303422 26.024397 24.813468 34.887015 24.230301\nNorth Carolina 10.319309 38.802747  7.446743 11.907696  17.557676 15.648799   25.558962 22.449534  9.897016  4.868379 32.148962 18.056033 10.884715  9.480474 16.099142 12.500428 16.711862 11.406332\nNorth Dakota   26.061847 29.624019 22.675114 24.010357  34.721456 19.589040   31.217967 21.930020 24.312128 24.777472 22.020599 18.003735 28.687232 22.217109 14.389066 14.677949 20.608835 23.732389\nOhio           13.826927 36.220795 11.794776 15.322582  17.309009 12.460479   23.316813 19.716962  7.436731  8.085043 29.193779 18.706337 11.021343  7.764234 12.622645 11.068050 16.217131 13.993672\nOklahoma        8.929367 33.166327 12.491627  7.080033  26.986146 15.193265   28.506319 21.671704 15.195802 13.047307 28.282550 14.175486 20.920568 10.631406 13.021217 12.579024 10.516689  8.034751\nOregon         20.609313 30.077416 11.721054 17.447993  16.885635 10.594128   21.472858 22.143437 14.021381 14.083179 19.588485  9.833415 16.409481 14.170722 12.942133 12.391392 21.916091 16.839859\nPennsylvania   10.622794 35.821054 11.706567 14.798249  19.463068 15.562500   21.086788 20.360240  9.355917 10.615641 29.680309 21.651206 10.029327 10.968759 14.606625 12.341548 18.968970 15.124029\nRhode Island   32.574009 29.404593 26.342309 28.871952  23.870786 21.575907   22.988741 21.949430 22.771182 28.842765 16.554458 22.700590 24.092097 28.247248 25.561136 26.981077 33.852692 29.478300\nSouth Carolina  7.534312 38.926594  9.025351  9.182206  23.984869 19.746607   25.090109 24.506851 13.059331 10.801379 32.799809 17.540498 15.024322 13.249993 18.192465 15.527733 13.546455  7.710250\nSouth Dakota   18.426645 31.431828 18.285225 16.001491  31.778541 18.799516   29.442488 20.436812 20.137226 21.171254 24.509916 10.754237 25.537500 18.932092 12.213913 13.109386 17.378240 16.386444\nTennessee       5.779919 38.584488  9.344479  9.345081  23.533637 18.465746   26.990937 23.338196 12.108336  9.307380 33.710207 19.067733 15.956930  9.262523 16.440284 13.619979  9.678722  8.508175\nTexas          16.139287 32.808115  9.153110 16.353664  13.120956 11.597821   26.650051 23.620983 11.708841  6.976128 27.715606 18.155539 12.106739 13.872454 16.821420 14.259404 22.383038 13.597655\nUtah           26.260382 32.311477 21.223510 24.655275  25.258503 12.561220   27.417314 23.393697 25.550868 20.756311 24.448452 14.706314 22.678405 18.392145 13.307426 15.572565 28.263004 25.332988\nVermont        28.777699 31.700599 24.958772 27.095827  33.149379 24.024744   27.053885 23.658541 26.765388 29.616863 24.792779 18.914221 25.568846 28.418282 17.566895 19.346604 33.946720 27.623194\nVirginia       19.980949 27.270728 14.400683 21.668542  19.218570 13.698095   15.551851 23.509069 17.543482 15.395190 21.843737 23.801562 12.962813 17.677008 17.885015 16.284319 28.253853 18.770132\nWashington     22.185323 26.463377 12.501963 20.806337  13.112197  7.064249   16.019791 22.210963 14.974729 14.868716 17.297056 14.635503 12.965558 16.412173 16.550914 14.672008 27.581817 18.355271\nWest Virginia  13.819041 38.774625 21.780926 11.528138  36.257929 22.314531   35.763154 24.985774 22.396856 21.603417 34.105318 17.104790 29.709254 14.629234 15.803289 21.185233 10.987548 16.239855\nWisconsin      15.455751 32.496025 11.453120 15.346039  19.430383  7.884163   19.637135 17.978207 10.239927 10.439779 23.813409 16.070823 11.643856  9.960649  8.265174  7.044122 19.823646 14.339788\nWyoming        29.906309 27.173530 28.517161 28.801932  40.629967 24.873327   37.049912 19.816190 31.764923 30.393671 27.741781 22.234256 33.339692 27.328553 21.455659 16.974509 23.731847 29.182222\n                   Maine  Maryland Massachusetts  Michigan Minnesota Mississippi  Missouri   Montana  Nebraska    Nevada New Hampshire New Jersey New Mexico  New York North Carolina North Dakota\nAlaska                                                                                                                                                                                            \nArizona                                                                                                                                                                                           \nArkansas                                                                                                                                                                                          \nCalifornia                                                                                                                                                                                        \nColorado                                                                                                                                                                                          \nConnecticut                                                                                                                                                                                       \nDelaware                                                                                                                                                                                          \nFlorida                                                                                                                                                                                           \nGeorgia                                                                                                                                                                                           \nHawaii                                                                                                                                                                                            \nIdaho                                                                                                                                                                                             \nIllinois                                                                                                                                                                                          \nIndiana                                                                                                                                                                                           \nIowa                                                                                                                                                                                              \nKansas                                                                                                                                                                                            \nKentucky                                                                                                                                                                                          \nLouisiana                                                                                                                                                                                         \nMaine                                                                                                                                                                                             \nMaryland       30.761983                                                                                                                                                                          \nMassachusetts  23.673133 18.172812                                                                                                                                                                \nMichigan       15.372217 23.593521     22.387806                                                                                                                                                  \nMinnesota      15.867013 19.750511     17.626432 11.557404                                                                                                                                        \nMississippi    20.157039 33.626080     31.821963 16.215734 24.547154                                                                                                                              \nMissouri       15.135665 23.887302     22.766769  8.863121 15.870148   12.623194                                                                                                                  \nMontana        13.097015 29.363592     30.401189 16.045604 19.392116   17.669828 10.707897                                                                                                        \nNebraska       12.969741 26.692684     24.738214 14.884091 12.135819   22.638419 14.889073 12.634011                                                                                              \nNevada         27.260706 26.608474     28.298399 22.327457 23.193390   27.304145 21.705181 24.553351 22.629561                                                                                    \nNew Hampshire  13.491797 23.730018     20.213063 19.890094 12.076524   28.743098 23.038951 23.515789 14.249492 28.861021                                                                          \nNew Jersey     29.334700 18.139708     11.151831 20.932440 19.801818   33.821907 26.755159 35.999363 26.767042 28.573222     20.112728                                                            \nNew Mexico     19.865650 28.943640     30.601543 18.907161 23.012443   15.115886 11.884397  9.623528 16.850745 24.134972     29.028684  35.749268                                                 \nNew York       26.117693 24.806937     15.036843 18.240629 20.031358   30.670356 23.188818 30.670798 26.066276 23.642492     24.274177  16.069327  32.126386                                      \nNorth Carolina 20.007664 24.188508     24.404811  6.196769 15.385799   15.667506  9.426212 15.332328 14.644977 19.506845     22.866755  20.392445  17.183687 19.163133                            \nNorth Dakota   15.670782 32.391528     28.148771 25.368076 22.295672   28.822664 19.326822 13.637233 13.003647 27.942718     21.223498  36.068846  18.968782 33.570273      25.987557             \nOhio           16.858559 22.435097     20.133078  6.549243 13.748388   19.599339  7.675325 14.546511 15.082362 21.733593     21.307301  20.127389  18.065514 16.510663       8.205989    21.902712\nOklahoma       16.148164 27.825917     25.634278 13.205045 17.165680   12.114288  8.812459  8.048941 13.561660 22.310308     22.878414  29.549027  11.049805 25.847849      12.043752    19.444345\nOregon         11.547196 27.348602     18.282478 14.015917 14.019834   20.424974 15.707416 16.046703 12.922771 18.650262     17.055011  21.491776  20.289379 18.359011      15.201312    18.783142\nPennsylvania   15.790440 20.929248     20.607652  7.511174 13.816418   18.161597  9.604403 18.815490 16.035231 22.514320     19.591486  19.571947  21.482173 17.812933       9.400328    25.309376\nRhode Island   20.023439 32.257531     17.739055 27.134583 26.205180   31.655257 28.125811 27.794018 23.864827 21.130403     25.102546  22.101111  30.014082 21.496894      28.779428    24.377074\nSouth Carolina 19.983025 26.618771     27.081046 10.496299 19.884757   11.387501  9.407850 13.529259 17.005252 22.188035     22.116064  25.021297  13.283755 23.666508       8.224572    26.588417\nSouth Dakota   11.338985 31.209689     26.741990 19.973828 19.381215   20.485043 14.796577  6.452830 10.406530 27.268253     18.940603  33.924858  15.114362 30.753969      20.933066     9.063993\nTennessee      19.996080 24.459514     26.681235  9.295897 18.274519   13.412056  7.191153 12.720936 16.484459 22.621774     24.497506  26.197992  14.591292 22.555724       7.536444    25.273351\nTexas          19.401428 23.217318     20.545190 11.496219 15.212010   20.639393 13.346891 17.611304 18.099673 18.387170     23.076380  21.673437  19.417936 17.217764      10.607533    25.243526\nUtah           17.847726 28.262351     25.874627 21.554323 12.975953   28.642052 20.604086 20.643193 14.897366 25.459721     19.026230  29.940862  22.102110 30.982791      23.901114    20.562986\nVermont        15.174179 33.390229     29.301329 25.321936 20.217056   31.553956 26.101607 22.970440 16.182841 33.251526     14.279325  31.772850  29.596370 32.123540      28.867406    17.051873\nVirginia       21.417589 12.309755     15.702151 15.089570 10.392017   25.490009 16.915196 23.814041 17.765089 25.070717     16.138210  18.442732  22.272700 19.651659      15.921588    25.146148\nWashington     16.160035 20.368978     13.191440 15.954762 10.824922   23.867231 16.921238 21.710647 17.286058 19.080272     16.709648  16.702402  23.386570 14.796973      17.306217    22.708232\nWest Virginia  15.695032 36.503979     33.703987 18.633802 23.585395   14.556596 13.858266 16.615720 19.101353 30.742534     26.926197  38.404246  14.460035 34.453129      20.818540    21.703957\nWisconsin      13.658604 21.062285     16.898714  9.542290  7.794500   19.606658 10.214511 14.078979  9.638931 20.772246     14.426283  19.631344  18.809586 18.189315      11.128356    18.298274\nWyoming        23.358541 37.018216     34.966270 31.018062 24.654408   30.299377 24.946730 14.636990 19.824625 32.127388     26.132282  40.851635  19.980524 39.945219      31.444499    16.295284\n                    Ohio  Oklahoma    Oregon Pennsylvania Rhode Island South Carolina South Dakota Tennessee     Texas      Utah   Vermont  Virginia Washington West Virginia Wisconsin\nAlaska                                                                                                                                                                                 \nArizona                                                                                                                                                                                \nArkansas                                                                                                                                                                               \nCalifornia                                                                                                                                                                             \nColorado                                                                                                                                                                               \nConnecticut                                                                                                                                                                            \nDelaware                                                                                                                                                                               \nFlorida                                                                                                                                                                                \nGeorgia                                                                                                                                                                                \nHawaii                                                                                                                                                                                 \nIdaho                                                                                                                                                                                  \nIllinois                                                                                                                                                                               \nIndiana                                                                                                                                                                                \nIowa                                                                                                                                                                                   \nKansas                                                                                                                                                                                 \nKentucky                                                                                                                                                                               \nLouisiana                                                                                                                                                                              \nMaine                                                                                                                                                                                  \nMaryland                                                                                                                                                                               \nMassachusetts                                                                                                                                                                          \nMichigan                                                                                                                                                                               \nMinnesota                                                                                                                                                                              \nMississippi                                                                                                                                                                            \nMissouri                                                                                                                                                                               \nMontana                                                                                                                                                                                \nNebraska                                                                                                                                                                               \nNevada                                                                                                                                                                                 \nNew Hampshire                                                                                                                                                                          \nNew Jersey                                                                                                                                                                             \nNew Mexico                                                                                                                                                                             \nNew York                                                                                                                                                                               \nNorth Carolina                                                                                                                                                                         \nNorth Dakota                                                                                                                                                                           \nOhio                                                                                                                                                                                   \nOklahoma       13.192733                                                                                                                                                               \nOregon         13.804684 14.460831                                                                                                                                                     \nPennsylvania    7.703123 15.367328 17.442336                                                                                                                                           \nRhode Island   26.637750 27.820854 17.992930    26.225444                                                                                                                              \nSouth Carolina 14.102342  9.890319 17.500843    13.029383    29.416749                                                                                                                 \nSouth Dakota   19.629029 12.427434 15.363569    21.531977    23.655525      17.862611                                                                                                  \nTennessee      10.562274  8.320692 18.777025    10.487609    31.254816       6.561510    18.955424                                                                                     \nTexas           9.617867 14.888464 12.572941    12.845620    28.050352      15.391440    21.492927 14.036198                                                                           \nUtah           19.457312 19.992631 16.236775    23.546790    29.039621      26.397215    18.648339 25.608327 19.685801                                                                 \nVermont        26.663653 26.033323 20.144664    23.134844    24.666394      25.446111    16.016361 28.546519 28.645105 23.935294                                                       \nVirginia       15.422349 19.279284 19.893824    12.800078    28.712510      19.784178    22.391629 19.051815 15.704802 21.262725 25.094335                                             \nWashington     15.130598 17.846874  8.440218    16.310862    18.038310      19.784162    20.709173 19.883098 12.571810 16.828013 22.159450 13.641454                                   \nWest Virginia  19.313608 11.168484 21.990419    20.567401    31.415898      18.177472    17.246612 14.878690 23.865663 22.410871 29.028447 28.749971  26.168082                        \nWisconsin       7.971613 12.889222 11.039865     9.867973    23.284892      15.468640    16.634515 13.320727 11.235804 15.952210 20.450072 12.313105  10.541120     19.852494          \nWyoming        29.363848 24.440022 27.382921    30.496770    31.239854      29.665212    16.379129 30.899715 32.785761 24.033473 21.141481 28.721895  28.481907     26.311153 24.315956"
  },
  {
    "objectID": "slides/hierarchical-clustering.html#step-1-calculate-the-distance-matrix-2",
    "href": "slides/hierarchical-clustering.html#step-1-calculate-the-distance-matrix-2",
    "title": "Hierarchical clustering",
    "section": "Step 1: Calculate the distance matrix",
    "text": "Step 1: Calculate the distance matrix\n\n\nUS_state_stats |&gt;\n  column_to_rownames(var = \"state\") |&gt;\n  scale() |&gt;\n  dist(method = \"maximum\")\n\n                 Alabama    Alaska   Arizona  Arkansas California  Colorado Connecticut  Delaware   Florida   Georgia    Hawaii     Idaho  Illinois   Indiana      Iowa    Kansas  Kentucky Louisiana\nAlaska         5.0230030                                                                                                                                                                             \nArizona        1.8008087 5.0313330                                                                                                                                                                   \nArkansas       0.9729239 4.3482712 1.8791047                                                                                                                                                         \nCalifornia     3.3092126 5.3811939 2.4154837 2.7012130                                                                                                                                               \nColorado       2.7795090 5.0146730 1.5829457 2.8578051  2.4637933                                                                                                                                    \nConnecticut    3.6364712 5.1312933 2.9255781 4.0873715  2.8502707 2.6410745                                                                                                                          \nDelaware       3.5402592 3.6328111 3.5485892 2.8655274  3.9130835 3.5319291   3.6485494                                                                                                              \nFlorida        1.7813269 5.2395836 1.6050686 1.8181819  2.9710449 2.5837690   2.6959090 3.7568397                                                                                                    \nGeorgia        2.4271769 5.2312535 0.8018184 2.5054729  2.3671740 1.3229045   3.0695498 3.7485097 2.2314368                                                                                          \nHawaii         3.6822218 4.5481918 3.0120101 3.4456765  4.0055004 3.2800948   3.5008704 3.4541417 3.9739610 3.7531854                                                                                \nIdaho          2.4160750 4.4149114 2.1887403 1.8399567  3.2850578 2.3458157   3.7593481 2.9321676 2.6237046 2.3696855 3.1381676                                                                      \nIllinois       2.2162604 5.2395836 1.5110566 2.1867323  2.8502707 2.5343795   2.9061736 3.7568397 1.8440448 1.5356266 3.9660762 2.8377070                                                            \nIndiana        1.5564577 5.2229235 2.1840278 1.5241176  3.8299617 2.3422906   3.4184782 3.7401797 2.1801508 1.6142814 3.7374157 3.0913080 2.5343795                                                  \nIowa           2.8742961 4.8480725 2.5827009 2.2494491  3.8164642 2.5446210   3.0165492 3.3653287 2.2705136 2.1922888 3.6743370 2.5413004 2.4845160 2.1840278                                        \nKansas         2.2156803 2.9542017 1.4290311 1.8877119  2.8985804 1.6833646   2.8657218 1.6313258 1.8137702 1.6488820 2.6781328 2.4617812 1.9164620 3.0069948 0.9178838                              \nKentucky       1.5414323 3.6016173 2.6271638 1.6459340  4.2730978 2.7854267   3.8616143 2.5322061 2.2473329 2.2705848 3.6716989 3.4184782 2.7854267 1.6165849 2.6271638 3.4501308                    \nLouisiana      1.0503158 4.6564820 0.9997552 1.3330069  2.6087224 2.5827009   3.6074659 3.1737382 2.0411668 1.5659206 3.6033734 3.1242349 1.8673220 2.2961162 3.5824560 1.9214210 2.1934040          \nMaine          2.8326397 5.0729831 2.5410444 2.2077927  3.7923094 3.3275812   3.0033650 3.5902393 2.5227929 2.9752491 3.5481795 2.3097329 2.7367953 3.0648016 2.5147940 2.4352748 2.9620893 3.5407996\nMaryland       3.4064270 4.8564026 3.1247996 3.7419898  3.5670360 3.4444384   2.9159526 3.5653120 3.2288227 3.5686674 3.3325172 4.1425999 3.7366825 3.3075913 3.7894089 2.8867025 3.4666471 3.2437733\nMassachusetts  3.2186734 5.0646531 2.9995576 3.3466821  2.2991351 3.0292250   1.9575245 3.5819093 2.0301622 2.6044228 3.8004944 3.2923835 2.3299369 2.9120370 3.0061926 3.0814208 3.3551731 2.9992655\nMichigan       2.0809162 5.1479533 1.6425289 1.8271459  4.0580126 2.3488809   3.0692861 3.6652095 1.4742016 1.9965487 3.7768399 1.9695183 1.8427520 1.6459340 1.9995103 1.4839938 2.0890700 1.6410477\nMinnesota      2.4993879 5.2062635 2.2077927 2.4944764  4.0580126 1.5942192   2.9786360 3.7235196 2.0336212 1.8687330 3.7453005 2.0277390 1.8687330 2.3106381 1.2918845 1.1594322 2.7537741 3.2075478\nMississippi    1.3820748 5.0396630 2.1993423 1.5564577  3.3497676 3.2820955   4.4293701 3.5569192 2.4944764 2.3880289 3.9102604 2.5618947 3.5189477 2.8591450 3.2360775 2.9664044 1.7958081 1.7425559\nMissouri       1.0449834 4.9480328 1.5141777 1.3483656  3.0435094 2.3880289   3.1776604 3.4652890 1.8852672 2.0356968 3.5718340 2.7964244 1.9858944 1.2344505 2.3327621 1.7725443 1.6775865 2.0012326\nMontana        1.7725443 3.0926932 1.6575024 1.3610608  2.8019611 2.2670144   3.4118121 1.7763919 1.8942885 1.7616607 2.8132680 2.0840651 2.5343795 2.5638587 1.7933099 1.7594739 3.0069948 1.4996450\nNebraska       2.3744185 4.5815119 2.5832485 2.0899667  3.7924287 2.0885839   3.0444998 3.0987680 2.9679877 2.8030995 2.7912345 2.1985094 2.8030995 2.4183603 1.1726234 1.1542174 2.5832485 3.0825784\nNevada         2.7833497 4.3399412 2.1131380 2.5832485  3.1066282 2.4733230   3.4354174 3.2609030 3.0750889 2.8543133 3.2428013 3.0638885 3.0672040 2.8385436 3.8473914 3.4076895 2.5749199 2.9130249\nNew Hampshire  3.1349501 4.9980129 2.5410444 3.4383324  3.6715352 2.6667725   2.7090692 3.5152691 2.4705972 2.6630221 3.5402946 2.6667725 2.6845996 2.6667725 2.1750272 1.9217134 3.3372050 3.5407996\nNew Jersey     4.2173266 5.2812337 4.3632746 4.3641692  3.6628521 4.3929420   2.6596375 3.7984898 3.2359428 3.9336543 3.8714580 4.5061457 3.6936539 3.8856315 4.3699096 4.4451378 4.1578889 4.1769078\nNew Mexico     1.7576345 3.2653684 1.7659646 1.7156437  2.9468901 2.0899667   3.6412175 2.4944764 1.9742151 2.0509729 2.9664044 2.7931111 2.5343795 1.9575551 2.5410444 2.0225485 2.2789855 1.9979193\nNew York       4.3120396 5.3562039 3.6732189 4.3488946  2.4447176 3.0712533   3.3816771 4.4444900 3.5024513 3.6977889 4.0764640 4.3857497 3.3816771 3.9372384 4.3478706 4.0786243 4.0417693 4.0294843\nNorth Carolina 1.2857694 5.2062635 0.8752176 1.2918845  2.5845675 1.7211085   3.1721230 3.7235196 1.6093367 1.2135885 3.8872277 2.2078787 1.9778871 1.7211085 2.5282858 2.0885839 1.8991546 1.5939193\nNorth Dakota   2.9576090 4.6481520 3.0779131 2.4733230  4.2870933 2.6046466   2.8931450 3.1654082 3.4626523 3.2977641 2.6705190 3.1111878 3.2977641 2.9130249 2.1310745 2.1705389 3.0779131 3.6657690\nOhio           2.0639982 5.3562039 1.5771303 1.8102279  2.8527505 2.1531408   3.0750872 3.8734600 1.9482198 1.8008087 3.9108823 2.8593771 1.9480678 1.5826288 2.1609026 1.4243659 2.0257649 2.0641853\nOklahoma       1.5414323 4.6314920 1.4876711 1.2293632  3.1336051 2.0356968   3.6074659 3.1487481 1.8687330 1.7038448 3.3352887 2.2789855 2.5343795 1.3650792 1.6662586 2.3106381 1.4839938 1.9161974\nOregon         2.4993879 5.0646531 2.2077927 1.8745409  1.9578539 2.1437045   2.7961091 3.5819093 1.7624753 1.8819539 3.0672040 1.7391482 2.5343795 2.8891968 2.3391891 2.2596699 3.2285628 3.2075478\nPennsylvania   1.8609820 5.2978937 1.9574007 1.8877119  3.2850578 2.9361011   2.5645942 3.8151499 1.2482765 2.5837690 4.0055004 2.3662058 1.6442166 1.9386112 2.0130147 1.8675020 1.9386112 1.9214210\nRhode Island   3.5380808 4.2982911 3.6840288 3.6849234  2.9836063 3.7136962   2.4208998 2.8155473 2.8779678 3.2544085 3.0883497 3.8268999 3.0144081 3.2063857 3.6906638 3.7658920 3.4786431 3.4976620\nSouth Carolina 1.1726234 4.4149114 1.2388198 1.4846925  3.0193546 2.7140557   3.5154401 2.9321676 2.0237210 1.6643686 3.5008704 2.7140557 2.1993423 2.7140557 2.5410444 1.7116518 2.7140557 1.9669811\nSouth Dakota   2.4577315 4.3482712 2.4183603 1.8942885  3.6275405 2.2889319   3.3395626 2.8655274 2.8030995 2.6382113 3.1066282 2.0336212 2.8377070 2.3739432 1.8153598 1.8548241 2.8170793 3.1658914\nTennessee      0.6444247 4.7481123 2.0257649 1.3257712  3.6716989 2.1840278   3.4418721 3.2653684 1.6459340 1.8008087 3.6349127 2.8170793 2.1840278 1.5508890 2.4577315 2.8487319 1.5508890 1.3294082\nTexas          2.7795090 5.3478738 1.0213171 2.8578051  2.0885839 1.5506205   3.1391625 3.8651300 2.5837690 1.0992547 4.0291549 2.4010029 2.0804608 2.3106381 2.5446210 1.6833646 2.7537741 1.9182527\nUtah           4.2097927 5.0230030 2.8170793 3.7983092  3.3333675 2.6588164   3.5956001 3.5402592 3.3275812 3.3868257 3.1775918 3.0913080 2.6588164 5.0011071 3.2884332 2.4271769 5.4442431 3.5134360\nVermont        3.2755405 4.7756032 3.4333978 3.5462400  4.1136384 4.7756032   3.1571474 4.7756032 4.0852685 3.7259162 4.7756032 4.7756032 3.6307196 4.7756032 4.2838579 3.7731994 4.7756032 4.0285286\nVirginia       2.4156125 5.2978937 2.8179051 2.9264437  3.2601415 3.1375439   2.0509251 3.8151499 2.9219282 3.2617730 3.9503065 3.2883654 3.4297881 3.0006969 2.9763605 2.5798081 2.5638587 2.6293130\nWashington     2.3854405 5.1979334 1.7495715 2.2305061  1.7874579 2.0343656   2.4393689 3.7151896 1.7225126 1.7726150 3.2327857 1.9024828 2.1466573 3.0702999 2.2298503 2.1503311 3.5134360 2.7493267\nWest Virginia  1.6841817 5.1283899 3.1709892 1.6666837  4.1546319 4.1496896   4.0984462 3.0487879 2.2928029 3.7973574 3.6956900 3.2039602 2.8578051 2.3488809 1.9624597 2.7854267 1.5267726 2.4087684\nWisconsin      1.9578539 5.2562436 1.6662586 2.1573850  2.9227352 1.9965487   2.6766601 3.7734998 1.5171555 1.6442166 3.8399187 2.2033439 1.7311579 2.0574175 0.9164422 0.9950861 2.5005535 2.6660138\nWyoming        4.1475733 3.4005216 4.2422668 3.7519651  4.6768045 4.1580948   4.1938679 2.5884568 4.5821110 4.4316537 3.3666856 3.4342159 4.5526509 4.3390645 4.0244718 3.4333978 3.7096482 4.1517819\n                   Maine  Maryland Massachusetts  Michigan Minnesota Mississippi  Missouri   Montana  Nebraska    Nevada New Hampshire New Jersey New Mexico  New York North Carolina North Dakota\nAlaska                                                                                                                                                                                            \nArizona                                                                                                                                                                                           \nArkansas                                                                                                                                                                                          \nCalifornia                                                                                                                                                                                        \nColorado                                                                                                                                                                                          \nConnecticut                                                                                                                                                                                       \nDelaware                                                                                                                                                                                          \nFlorida                                                                                                                                                                                           \nGeorgia                                                                                                                                                                                           \nHawaii                                                                                                                                                                                            \nIdaho                                                                                                                                                                                             \nIllinois                                                                                                                                                                                          \nIndiana                                                                                                                                                                                           \nIowa                                                                                                                                                                                              \nKansas                                                                                                                                                                                            \nKentucky                                                                                                                                                                                          \nLouisiana                                                                                                                                                                                         \nMaine                                                                                                                                                                                             \nMaryland       4.0416882                                                                                                                                                                          \nMassachusetts  3.0501224 2.9992655                                                                                                                                                                \nMichigan       1.9578539 3.4044967     2.9115481                                                                                                                                                  \nMinnesota      2.0748448 3.8091449     2.9599580 1.7038448                                                                                                                                        \nMississippi    3.1636694 4.2473518     4.1618324 3.3836036 3.5731689                                                                                                                              \nMissouri       2.7699180 2.9078528     2.8813937 1.6241297 1.9578539   2.4270582                                                                                                                  \nMontana        2.1485883 3.1928546     3.1890410 2.3685225 2.5207847   2.2585124 1.6180381                                                                                                        \nNebraska       2.1370779 3.4379578     3.1240256 2.6382113 1.3526709   3.1686593 1.8687330 1.7425559                                                                                              \nNevada         3.1401288 4.2659263     3.1208605 3.4058320 3.6275405   3.1349501 2.6931740 3.3527268 4.5619070                                                                                    \nNew Hampshire  2.6667725 3.9894925     2.6518749 2.3596399 1.4876713   4.5170249 2.2911056 2.6667725 1.6617153 3.9023541                                                                          \nNew Jersey     4.4138394 3.4901464     1.6832819 3.9092571 4.3236750   4.3365924 4.2451107 4.5527580 4.4877426 4.4845775     4.0155919                                                            \nNew Mexico     2.7666047 3.3034958     3.2678135 2.0809162 2.6293130   1.7742946 1.6826644 1.3234250 2.2248033 2.8030995     3.5731689  4.5137749                                                 \nNew York       4.3237158 3.3333675     2.1256256 4.5894190 4.5894190   4.5700249 3.8083540 4.2137595 3.8452091 3.1775918     4.2029416  3.0038970  4.3611796                                      \nNorth Carolina 2.2077927 3.5133130     3.0466832 1.4734450 2.3084348   2.5884568 1.3740684 2.0336212 3.2428013 2.9883556     2.5956039  3.8276012  1.9956185 4.1400494                            \nNorth Dakota   3.0846814 4.3374639     3.1777438 3.1328759 2.6046466   3.5176150 2.6835753 1.7038448 1.8867862 5.0565716     2.6667725  4.5414608  2.6243573 3.0499696      3.7374659             \nOhio           2.8328707 3.4608698     2.3343978 1.2077418 1.2370384   3.3666856 1.6072117 2.3516045 1.9786584 3.0120101     2.3609862  3.4974257  2.0908354 3.3906636      1.2641429    2.8808970\nOklahoma       1.6997224 3.2993427     3.2432434 1.6918018 1.8877119   1.9236957 1.0701956 1.8675020 1.6643686 3.4626523     2.8315678  4.3693346  1.4474456 4.3366096      2.1435466    2.4073249\nOregon         2.2463998 3.6201592     3.0622123 2.5121030 2.5121030   3.1636694 2.5943132 2.1485883 2.6382113 2.6243573     2.6667725  4.4259293  2.5909999 3.3538086      1.8745409    3.1328759\nPennsylvania   2.2652940 2.5888574     2.5798527 0.8156393 1.6833646   3.1636694 1.4041955 2.1485883 1.9786584 3.1066282     2.2130983  3.4914475  2.0325253 3.8164642      1.3701805    2.8808970\nRhode Island   3.7345936 3.2117763     2.7045012 3.2300113 3.6444292   3.9080622 3.5658649 3.8735122 3.8473914 3.8053317     3.3363461  2.7754648  3.8345290 2.9804707      3.1483554    4.3420560\nSouth Carolina 2.7140557 3.1848650     2.9852582 2.0639982 2.2162604   2.0048077 2.1655706 2.7140557 2.8030995 2.7140557     2.8989861  3.9894733  2.7140557 4.0786243      1.2688514    3.2977641\nSouth Dakota   1.7087198 4.1425999     3.1739443 2.5257179 2.2889319   2.8580622 2.3678606 1.0442920 1.6643686 4.3970188     2.6667725  4.5376613  2.1244797 3.9434892      3.0779131    1.6168899\nTennessee      2.4862559 3.2593947     2.8992631 1.4876711 2.1523752   1.9286541 1.0761876 2.4055958 2.1985094 2.7360406     2.9326953  3.9893437  1.6775865 3.9926292      1.2977556    2.7820316\nTexas          3.3275812 3.6961715     2.8464051 2.3488809 2.2705547   2.9606532 2.3880289 2.1139928 1.7616607 3.1302828     3.0338227  4.2101221  2.1784770 3.2555285      1.5659206    2.9992901\nUtah           4.0713935 3.9366101     3.0862485 3.3551731 2.6904690   3.8616143 3.7666566 2.8578051 3.1019525 3.6716989     2.8487319  4.4499655  3.1652576 3.8647739      3.5450886    2.9752491\nVermont        4.7756032 4.2626501     4.3122278 3.5517909 3.5084134   4.0663552 4.2271181 4.7756032 3.1112346 4.7756032     2.1088307  4.3187628  4.7756032 3.9130835      3.5123265    4.7756032\nVirginia       2.3488809 2.7402750     2.4938576 3.0976022 3.5022505   3.6742964 2.1727685 2.5342250 3.1184066 3.9590319     3.2326836  3.8027927  2.7304404 3.5872238      3.2064185    2.7625040\nWashington     2.4663249 2.9357244     2.8275194 2.2705547 2.2705547   3.6881279 2.4849743 2.6730468 2.3084348 2.3339136     2.2790502  4.1912365  2.4816610 3.0343982      1.6632761    2.8030995\nWest Virginia  3.1774538 3.8477624     3.6363639 1.8008087 2.8969531   2.0111725 1.7616607 2.3422906 2.3880289 3.6799134     3.2360775  4.2835532  2.8186571 4.7297300      2.5837690    2.2534721\nWisconsin      2.1768375 3.4033435     2.8128920 1.1352773 1.1352773   3.2360775 1.4163198 1.8779000 1.5939193 2.9679877     1.7400218  4.1766090  2.2922216 3.4541417      1.6488820    2.6835753\nWyoming        3.2784978 4.3127608     4.4853133 4.5263471 4.2885613   3.9918552 4.2475275 2.3283962 3.2469333 3.8908488     3.6299157  4.5565611  3.3816085 4.6452400      4.4495402    2.3831186\n                    Ohio  Oklahoma    Oregon Pennsylvania Rhode Island South Carolina South Dakota Tennessee     Texas      Utah   Vermont  Virginia Washington West Virginia Wisconsin\nAlaska                                                                                                                                                                                 \nArizona                                                                                                                                                                                \nArkansas                                                                                                                                                                               \nCalifornia                                                                                                                                                                             \nColorado                                                                                                                                                                               \nConnecticut                                                                                                                                                                            \nDelaware                                                                                                                                                                               \nFlorida                                                                                                                                                                                \nGeorgia                                                                                                                                                                                \nHawaii                                                                                                                                                                                 \nIdaho                                                                                                                                                                                  \nIllinois                                                                                                                                                                               \nIndiana                                                                                                                                                                                \nIowa                                                                                                                                                                                   \nKansas                                                                                                                                                                                 \nKentucky                                                                                                                                                                               \nLouisiana                                                                                                                                                                              \nMaine                                                                                                                                                                                  \nMaryland                                                                                                                                                                               \nMassachusetts                                                                                                                                                                          \nMichigan                                                                                                                                                                               \nMinnesota                                                                                                                                                                              \nMississippi                                                                                                                                                                            \nMissouri                                                                                                                                                                               \nMontana                                                                                                                                                                                \nNebraska                                                                                                                                                                               \nNevada                                                                                                                                                                                 \nNew Hampshire                                                                                                                                                                          \nNew Jersey                                                                                                                                                                             \nNew Mexico                                                                                                                                                                             \nNew York                                                                                                                                                                               \nNorth Carolina                                                                                                                                                                         \nNorth Dakota                                                                                                                                                                           \nOhio                                                                                                                                                                                   \nOklahoma       1.6748838                                                                                                                                                               \nOregon         2.6572658 2.0890700                                                                                                                                                     \nPennsylvania   1.3522995 1.9386112 1.9386112                                                                                                                                           \nRhode Island   2.8891968 3.6900888 3.7466835    2.9095072                                                                                                                              \nSouth Carolina 2.1277440 2.7140557 2.7140557    1.8440640    3.3102274                                                                                                                 \nSouth Dakota   2.5651823 2.0916102 2.4733230    2.5651823    3.8584155      2.7140557                                                                                                  \nTennessee      1.4380315 1.5508890 2.6271638    1.3820748    3.3100979      1.3294082    2.5871676                                                                                     \nTexas          2.1531408 2.0356968 1.7616607    2.9361011    3.5308763      2.2601370    2.6835753 2.1531408                                                                           \nUtah           3.4184782 4.3047504 2.8891968    3.8616143    3.7707197      3.5134360    3.0143971 4.8428442 2.6904690                                                                 \nVermont        4.1892915 4.7756032 4.7756032    3.5912552    4.7756032      3.3150048    4.7756032 3.3939335 4.3216845 4.7756032                                                       \nVirginia       3.1539754 2.6582456 3.3132648    2.2819629    3.1235469      2.5409257    2.4467893 2.5979446 3.3892770 3.6297157 3.4728622                                             \nWashington     2.5479270 2.3739432 0.9520729    2.0748448    3.5119906      2.3685225    2.4467893 2.9120370 1.5843296 2.7798579 4.3878810 2.6288299                                   \nWest Virginia  2.0617307 2.1139928 3.0018489    1.9386112    3.6043074      2.7140557    2.1523752 2.1348047 4.1496896 4.8935018 4.7756032 3.1709892  3.2884332                        \nWisconsin      1.4075445 1.5506205 2.0012326    1.2596566    3.4973632      1.7873050    2.3678606 1.8991546 1.9965487 2.9436896 3.8488525 3.0964490  1.8918938     2.1531408          \nWyoming        4.5084606 3.9886987 3.8761187    4.5873718    3.8773153      4.0581406    2.9944175 4.2612054 4.6063105 3.6193943 4.7756032 4.4632181  4.2380582     3.7119834 4.3622118"
  },
  {
    "objectID": "slides/hierarchical-clustering.html#step-1-calculate-the-distance-matrix-3",
    "href": "slides/hierarchical-clustering.html#step-1-calculate-the-distance-matrix-3",
    "title": "Hierarchical clustering",
    "section": "Step 1: Calculate the distance matrix",
    "text": "Step 1: Calculate the distance matrix\n\n\nUS_state_stats |&gt;\n  column_to_rownames(var = \"state\") |&gt;\n  scale() |&gt;\n  dist(method = \"euclidean\")\n\n                 Alabama    Alaska   Arizona  Arkansas California  Colorado Connecticut  Delaware   Florida   Georgia    Hawaii     Idaho  Illinois   Indiana      Iowa    Kansas  Kentucky Louisiana\nAlaska         10.598996                                                                                                                                                                             \nArizona         3.330008  9.367964                                                                                                                                                                   \nArkansas        2.101623 10.258034  3.460202                                                                                                                                                         \nCalifornia      7.387598 10.417133  4.574415  7.213409                                                                                                                                               \nColorado        5.853785  8.784506  3.584944  5.667544   4.905273                                                                                                                                    \nConnecticut     8.163739  9.632134  6.647566  8.581965   6.413761  6.054845                                                                                                                          \nDelaware        6.852026  6.873437  6.099149  6.443272   8.224788  5.836395    7.471686                                                                                                              \nFlorida         3.817288 10.483883  3.058667  4.111477   5.074512  4.373974    6.059186  6.305386                                                                                                    \nGeorgia         3.718662  9.954441  1.731379  3.841420   4.757818  3.278357    7.153667  6.451118  3.147390                                                                                          \nHawaii          8.937729  6.700074  7.068674  8.508732   7.035466  6.118096    6.293809  6.878239  7.514385  7.792204                                                                                \nIdaho           5.597221  9.004979  4.419521  4.548114   6.607359  4.469112    7.676599  5.801041  5.045858  4.799015  6.969588                                                                      \nIllinois        5.254690 10.316944  3.192744  5.609923   4.396773  3.944139    5.238648  6.674979  3.160311  3.311714  7.447009  6.015498                                                            \nIndiana         3.604745 10.172037  3.853444  3.882761   7.044651  4.062005    7.864817  6.213848  3.787589  3.140930  8.375538  5.298522  4.811957                                                  \nIowa            5.007138  9.958779  4.840562  4.587101   7.634487  4.002106    6.966781  5.674885  4.667862  4.859556  7.354684  3.935105  5.395395  3.885737                                        \nKansas          4.408601  7.409098  3.060602  4.442553   6.598661  3.512435    7.294319  3.735978  4.258347  3.615391  6.183604  3.905887  4.316269  4.282286  2.020848                              \nKentucky        2.896963  8.930716  5.257548  3.631240   9.364228  6.754618   10.274920  6.475033  5.154735  4.953492  9.129675  6.531273  7.275413  3.384898  5.400969  5.740308                    \nLouisiana       2.187868  9.890864  2.803839  2.411572   6.355365  5.410132    7.975901  6.748584  3.939756  3.518586  8.236106  4.961559  5.256562  4.220968  5.384255  4.020284  3.898974          \nMaine           5.449459  9.500632  5.356080  4.816331   7.595522  5.251686    6.878787  5.995987  4.764959  5.823169  6.944840  3.188682  6.143050  5.141585  3.249026  4.222520  5.968985  5.401479\nMaryland        7.611163  9.273961  6.327444  8.668010   6.722458  6.408493    4.868335  7.423132  6.638708  6.740797  7.515811  8.851332  5.771450  7.475384  8.018422  6.383880  9.115635  7.319302\nMassachusetts   7.963086  9.781969  6.354021  8.072120   5.455518  5.195148    3.060985  7.225595  5.278116  6.487500  5.717072  7.309502  5.055135  7.032772  6.492189  6.865981  9.469819  7.491380\nMichigan        3.219770 10.438840  2.876205  3.585488   6.172830  4.156116    6.718661  6.002538  2.794426  2.920050  8.228620  4.716282  3.390219  2.702043  3.778241  3.360651  4.829221  3.688944\nMinnesota       5.699186  9.792369  4.346035  5.729161   6.486491  2.933653    5.706504  5.782694  4.478219  4.323841  7.140860  4.643832  3.857913  4.315508  2.716098  2.943799  7.133466  5.836457\nMississippi     2.883395 11.407078  4.665463  2.644596   8.218904  7.060859    9.761691  7.962489  5.091162  4.947830  9.825048  5.547383  7.061814  5.136325  6.216101  6.501396  3.987288  3.266231\nMissouri        2.193270  9.917924  2.932619  2.820666   6.655760  4.228391    7.353772  5.963989  3.232413  2.995409  7.834503  5.026190  4.551890  2.291596  3.673264  2.990748  3.026295  2.921983\nMontana         3.778946  8.061485  3.997077  3.462787   7.773931  5.249206    9.107011  4.420878  4.673883  4.419328  7.284882  3.631654  6.333142  4.746282  3.332278  3.110260  4.808803  3.374796\nNebraska        5.010139  8.818975  4.374697  4.393229   7.323869  4.062795    6.927510  5.277823  5.158065  4.691573  6.423243  4.068942  5.195917  4.537399  2.470144  2.287313  6.083651  5.127234\nNevada          6.867679  8.696989  4.599803  6.614218   5.019683  5.218190    8.358046  6.695426  5.604532  4.833401  6.778081  6.817587  5.516908  6.030305  7.702788  6.141385  7.205939  6.315798\nNew Hampshire   7.032307  9.342326  5.896818  6.871723   7.463344  5.057318    5.090292  6.242540  5.863305  6.372527  6.696511  5.337879  5.194277  6.441029  4.299915  4.980274  8.770819  7.124445\nNew Jersey      8.480882 10.991190  6.720639  8.755648   5.736034  6.305088    3.633544  7.650389  5.777136  6.795657  7.618642  8.219887  4.804280  7.707355  7.699712  8.015335 10.731633  8.247333\nNew Mexico      3.680324  8.522460  4.141634  3.438805   7.732973  5.405001    8.705953  5.658454  5.487654  4.472108  7.876981  5.083431  6.601013  4.562994  5.203417  4.088725  3.360258  3.383514\nNew York        7.740170 10.726266  5.889495  7.622262   4.069967  5.830359    5.910359  8.683771  5.156224  5.945851  6.716974  7.941413  4.649067  7.279079  7.735557  7.558194  9.310169  7.104194\nNorth Carolina  2.964659 10.446575  2.011604  3.162292   5.346357  4.219042    7.172742  6.558336  2.854521  1.673388  8.316637  4.971980  3.299835  3.014498  4.783395  3.728261  4.552803  3.294185\nNorth Dakota    6.830398  8.494124  6.726308  6.215588   9.102334  5.825150    8.078210  6.274746  7.143179  7.022232  6.067419  5.591146  7.800522  6.406683  4.333533  4.269167  6.384704  6.832059\nOhio            3.756038 10.503530  3.207573  3.964614   5.829037  3.634401    6.763715  6.086862  2.761796  2.645838  7.765809  5.294823  3.414807  2.337553  3.693684  2.922134  4.539927  4.122743\nOklahoma        2.746771  9.590296  3.485447  2.160842   7.093379  4.597272    8.206370  6.013341  4.026087  3.514846  7.809859  4.144994  5.635490  2.949381  3.685416  3.896042  3.236769  2.712148\nOregon          5.548912  9.264492  3.668999  4.628232   4.605672  3.465647    6.494161  6.242370  3.774078  4.028477  5.799009  3.010644  4.661539  4.918500  4.211692  3.995912  6.544470  4.859990\nPennsylvania    3.278011 10.332521  3.342653  4.088292   6.229582  4.611578    5.783043  6.249101  2.736122  3.577485  7.875235  5.678008  3.172094  3.276966  4.092980  3.516435  4.990771  4.012989\nRhode Island    8.299825  8.727605  6.894639  7.765106   6.657274  6.679551    6.042031  6.508415  6.088086  7.287467  5.160020  6.871825  6.752070  7.613243  7.566176  7.738592  8.938709  7.772664\nSouth Carolina  2.215120 10.099229  2.490228  2.549883   6.425645  5.464897    7.510363  6.526626  3.601202  3.138396  8.511209  5.060045  4.305294  4.303923  5.276383  4.459678  4.725989  2.765308\nSouth Dakota    5.342727  8.707087  5.423795  4.524657   8.151475  5.319894    7.848930  5.668781  5.828860  5.846903  6.674934  3.605722  6.993915  5.527714  3.431093  3.665688  5.645236  5.154360\nTennessee       1.592758 10.217475  2.929816  2.455450   6.825626  5.211316    7.910098  6.451256  3.357974  2.869454  8.663065  5.604460  4.496692  2.836403  4.945482  4.346147  2.903620  2.663005\nTexas           4.732795 10.096352  2.507271  4.552391   4.110426  3.320189    7.219854  7.019202  3.748023  2.073875  7.473824  4.796109  3.747254  4.304938  5.192502  3.882935  6.240198  3.758654\nUtah            7.816158  9.971541  5.886282  7.294373   7.035596  4.025850    7.845243  6.827859  6.908662  5.766022  7.201289  4.877627  6.305243  6.466673  4.757319  4.528537  9.209289  7.334168\nVermont         7.853224  9.342110  7.331872  7.357606   9.369040  7.662961    7.198676  7.277386  7.861043  8.097009  7.691579  6.377467  7.270864  8.433320  6.365156  6.540232  9.630963  7.996153\nVirginia        5.753364  8.798401  4.670117  6.490933   6.171084  4.301018    4.253637  6.930069  5.205486  5.131602  6.528350  6.267057  4.758796  5.509324  5.179441  4.622325  7.411418  5.481934\nWashington      6.100880  8.812749  3.607467  5.795693   3.680065  2.581905    4.948654  6.302339  3.986082  4.020214  5.250266  4.144214  3.791803  5.258658  4.655437  4.116854  7.604610  5.325361\nWest Virginia   3.873600 10.991010  5.946337  3.513818   9.654607  6.783430    9.605647  6.816279  5.733335  5.935861  9.565350  5.812334  7.473856  4.004706  4.372867  5.827139  3.110384  4.962556\nWisconsin       4.364111  9.825504  3.273309  4.235680   5.727754  2.696602    5.899727  5.849888  3.071053  3.246268  6.758584  4.164685  3.394139  3.129319  2.282848  2.033971  5.447424  4.520653\nWyoming         8.354493  7.492609  8.226198  7.759220  10.664883  7.652842    9.921622  5.697209  8.976007  8.516690  7.911546  6.819268  9.534238  8.124581  6.861121  5.593932  7.161100  8.439725\n                   Maine  Maryland Massachusetts  Michigan Minnesota Mississippi  Missouri   Montana  Nebraska    Nevada New Hampshire New Jersey New Mexico  New York North Carolina North Dakota\nAlaska                                                                                                                                                                                            \nArizona                                                                                                                                                                                           \nArkansas                                                                                                                                                                                          \nCalifornia                                                                                                                                                                                        \nColorado                                                                                                                                                                                          \nConnecticut                                                                                                                                                                                       \nDelaware                                                                                                                                                                                          \nFlorida                                                                                                                                                                                           \nGeorgia                                                                                                                                                                                           \nHawaii                                                                                                                                                                                            \nIdaho                                                                                                                                                                                             \nIllinois                                                                                                                                                                                          \nIndiana                                                                                                                                                                                           \nIowa                                                                                                                                                                                              \nKansas                                                                                                                                                                                            \nKentucky                                                                                                                                                                                          \nLouisiana                                                                                                                                                                                         \nMaine                                                                                                                                                                                             \nMaryland        8.589605                                                                                                                                                                          \nMassachusetts   6.619401  5.444320                                                                                                                                                                \nMichigan        4.510982  6.891263      6.464100                                                                                                                                                  \nMinnesota       4.485471  6.695074      5.548868  3.581946                                                                                                                                        \nMississippi     6.008202  9.723329      9.418208  4.948954  7.356641                                                                                                                              \nMissouri        4.892887  6.787230      6.796929  2.684878  4.399936    4.127669                                                                                                                  \nMontana         4.160841  8.207678      8.403983  4.667686  5.307321    4.753047  3.053530                                                                                                        \nNebraska        4.054463  7.708930      6.601193  4.418092  3.198633    6.438225  4.032172  3.688675                                                                                              \nNevada          7.824494  7.645061      7.495758  6.191369  7.070806    7.638030  6.029728  6.659527  7.046413                                                                                    \nNew Hampshire   4.561159  7.429595      5.714043  5.619372  3.356284    8.495515  6.212605  6.589170  3.879067  8.137473                                                                          \nNew Jersey      7.951568  5.737290      3.395446  6.730956  6.213064   10.001374  7.660068  9.696761  7.648360  7.682244      6.126948                                                            \nNew Mexico      5.873785  7.862505      8.285417  4.873973  6.239279    4.073579  3.355320  2.922670  4.978582  6.621719      7.716956   9.420024                                                 \nNew York        7.723006  7.091664      4.143738  6.772569  6.857682    9.003420  6.987451  8.708403  7.313364  6.295759      7.330703   5.408281   8.515242                                      \nNorth Carolina  5.487191  7.071247      6.794340  2.102464  4.565711    4.446084  2.746438  4.567294  4.785123  5.333058      6.327946   6.862369   4.664005  6.268931                            \nNorth Dakota    5.008931  8.852050      7.533362  6.931520  5.893309    7.612123  5.711863  3.859775  3.748656  8.534916      5.974491   9.465422   5.503519  8.669587       7.282022             \nOhio            5.087764  6.627267      5.791114  2.109893  3.650569    5.593289  2.440079  4.327799  4.194522  5.893166      5.992299   6.502035   4.923876  5.875571       2.489281     6.361795\nOklahoma        4.358549  8.039996      7.394851  3.590942  4.839118    3.673270  2.266944  2.940617  3.679251  6.424026      6.381849   8.500283   3.190292  7.414962       3.526575     5.343542\nOregon          3.656905  7.934215      5.557330  4.272458  4.331402    6.002440  4.659856  4.650299  4.258624  5.426520      5.288891   6.817479   5.634277  5.463209       4.215200     5.934161\nPennsylvania    4.838128  5.912135      5.665029  2.080653  3.777518    5.651725  2.761281  5.021885  4.355587  6.503932      5.146335   6.006059   5.459081  6.083498       2.754122     6.788586\nRhode Island    6.528749  8.114487      5.008645  7.227053  7.547637    8.840137  7.557499  8.276331  7.313252  6.409380      7.182960   5.772403   8.093078  5.986392       7.275119     7.663675\nSouth Carolina  5.630992  7.487290      7.603678  3.235657  5.423490    3.523234  3.158677  4.523471  4.874313  6.177323      6.430322   7.649252   4.164027  7.175516       2.329532     7.236684\nSouth Dakota    3.438765  8.644534      7.405576  5.657342  5.175878    5.748209  4.624357  1.983415  3.157721  7.953556      5.346449   8.968003   4.399006  8.359152       5.988650     2.701569\nTennessee       5.609207  7.334145      7.474428  2.804910  5.237431    3.764199  2.195797  4.277971  4.776192  6.037960      6.787385   7.877657   4.008972  6.990206       2.214183     6.978381\nTexas           5.934945  6.905895      6.151740  3.844443  4.498445    5.802564  4.034896  4.834120  4.890119  5.384088      6.552911   6.946721   5.132624  5.322347       3.176829     7.118197\nUtah            6.366016  8.354401      7.296731  6.164955  4.413720    8.625013  6.365106  6.177063  4.851634  7.792762      6.146926   8.237101   6.680453  8.446089       6.541281     6.005682\nVermont         5.750459  9.430157      8.260979  7.389970  6.408482    8.907407  7.833774  7.430777  5.091342  9.671883      4.209895   8.633394   8.253892  9.087153       7.741963     6.307128\nVirginia        5.805975  4.003073      4.769055  5.014803  4.261891    7.689765  4.790444  6.459736  5.068947  7.419712      4.989951   6.063187   6.111441  6.426794       5.365508     6.397805\nWashington      4.621560  6.256025      4.237212  4.434985  3.653237    7.171936  4.981488  5.769384  4.569590  5.395136      4.714175   5.548317   6.173554  4.770796       4.514208     6.387711\nWest Virginia   4.895459  9.802177      9.108152  4.655579  6.370725    4.226412  3.790895  4.718712  5.231977  8.486123      7.616860  10.111724   4.390298  9.593673       5.287663     5.860449\nWisconsin       3.920615  6.744556      5.216107  2.734616  2.202186    5.931485  2.848045  3.955807  2.896716  6.147798      4.157304   6.216018   5.146218  5.846711       3.303504     5.291888\nWyoming         7.126880 10.105004      9.906165  8.743662  7.897871    8.711600  7.551584  4.333896  6.103995  9.153755      7.491362  10.901153   6.510596 11.108905       8.808637     4.795353\n                    Ohio  Oklahoma    Oregon Pennsylvania Rhode Island South Carolina South Dakota Tennessee     Texas      Utah   Vermont  Virginia Washington West Virginia Wisconsin\nAlaska                                                                                                                                                                                 \nArizona                                                                                                                                                                                \nArkansas                                                                                                                                                                               \nCalifornia                                                                                                                                                                             \nColorado                                                                                                                                                                               \nConnecticut                                                                                                                                                                            \nDelaware                                                                                                                                                                               \nFlorida                                                                                                                                                                                \nGeorgia                                                                                                                                                                                \nHawaii                                                                                                                                                                                 \nIdaho                                                                                                                                                                                  \nIllinois                                                                                                                                                                               \nIndiana                                                                                                                                                                                \nIowa                                                                                                                                                                                   \nKansas                                                                                                                                                                                 \nKentucky                                                                                                                                                                               \nLouisiana                                                                                                                                                                              \nMaine                                                                                                                                                                                  \nMaryland                                                                                                                                                                               \nMassachusetts                                                                                                                                                                          \nMichigan                                                                                                                                                                               \nMinnesota                                                                                                                                                                              \nMississippi                                                                                                                                                                            \nMissouri                                                                                                                                                                               \nMontana                                                                                                                                                                                \nNebraska                                                                                                                                                                               \nNevada                                                                                                                                                                                 \nNew Hampshire                                                                                                                                                                          \nNew Jersey                                                                                                                                                                             \nNew Mexico                                                                                                                                                                             \nNew York                                                                                                                                                                               \nNorth Carolina                                                                                                                                                                         \nNorth Dakota                                                                                                                                                                           \nOhio                                                                                                                                                                                   \nOklahoma        3.450637                                                                                                                                                               \nOregon          4.221053  4.206247                                                                                                                                                     \nPennsylvania    2.405404  3.980486  4.781168                                                                                                                                           \nRhode Island    6.996460  7.656694  5.560826     7.069158                                                                                                                              \nSouth Carolina  4.078721  3.618968  5.026658     3.454359     7.704205                                                                                                                 \nSouth Dakota    5.575686  3.772286  4.674182     5.793156     7.443807       5.658435                                                                                                  \nTennessee       3.006111  2.665695  5.200718     2.852044     7.860988       2.250386     5.683295                                                                                     \nTexas           3.311304  3.957736  3.692048     4.403557     7.459784       4.340904     5.933274  4.070610                                                                           \nUtah            5.820170  6.516477  5.388702     6.975968     8.438162       7.360012     5.741575  7.592907  5.444679                                                                 \nVermont         7.981582  7.654685  6.981145     7.030258     8.167112       7.041482     5.854341  7.898382  8.341997  7.926106                                                       \nVirginia        4.993860  5.631299  5.561860     4.104011     7.531600       5.724971     5.947832  5.660883  5.197778  6.452475  7.215077                                             \nWashington      4.321383  5.108779  2.237714     4.559541     5.678181       5.464591     5.505772  5.650595  3.492007  5.017698  7.085641  4.083678                                   \nWest Virginia   4.933222  3.494353  6.332121     5.195085     8.738638       5.204569     4.787221  4.310947  6.850242  8.065666  8.282668  7.472877   7.462814                        \nWisconsin       2.327254  3.507086  3.276736     2.778869     6.699085       4.264763     4.428909  3.954716  3.628860  4.813705  6.653113  4.176491   3.228251      5.200544          \nWyoming         8.644524  7.238965  8.071010     8.835251     9.108380       8.328574     4.973078  8.477997  9.144074  7.732709  7.294573  8.519401   8.512051      7.556514  7.685097"
  },
  {
    "objectID": "slides/hierarchical-clustering.html#step-2-cluster-and-plot",
    "href": "slides/hierarchical-clustering.html#step-2-cluster-and-plot",
    "title": "Hierarchical clustering",
    "section": "Step 2: Cluster and plot",
    "text": "Step 2: Cluster and plot\n\n\n\ndist_out &lt;- US_state_stats |&gt;\n  column_to_rownames(var = \"state\") |&gt;\n  scale() |&gt;\n  dist(method = \"euclidean\")\n\nhc_out &lt;- hclust(\n  dist_out, method = \"average\"\n)\n\nlibrary(ggdendro)\nggdendrogram(hc_out, rotate = TRUE)\n\nmethod = \"average\": UPGMA"
  },
  {
    "objectID": "slides/hierarchical-clustering.html#step-2-cluster-and-plot-1",
    "href": "slides/hierarchical-clustering.html#step-2-cluster-and-plot-1",
    "title": "Hierarchical clustering",
    "section": "Step 2: Cluster and plot",
    "text": "Step 2: Cluster and plot\n\n\n\ndist_out &lt;- US_state_stats |&gt;\n  column_to_rownames(var = \"state\") |&gt;\n  scale() |&gt;\n  dist(method = \"euclidean\")\n\nhc_out &lt;- hclust(\n  dist_out, method = \"ward.D2\"\n)\n\nlibrary(ggdendro)\nggdendrogram(hc_out, rotate = TRUE)\n\nmethod = \"ward.D2\": Ward’s minimum variance method"
  },
  {
    "objectID": "slides/hierarchical-clustering.html#step-2-cluster-and-plot-2",
    "href": "slides/hierarchical-clustering.html#step-2-cluster-and-plot-2",
    "title": "Hierarchical clustering",
    "section": "Step 2: Cluster and plot",
    "text": "Step 2: Cluster and plot\n\n\n\ndist_out &lt;- US_state_stats |&gt;\n  column_to_rownames(var = \"state\") |&gt;\n  scale() |&gt;\n  dist(method = \"euclidean\")\n\nhc_out &lt;- hclust(\n  dist_out, method = \"complete\"\n)\n\nlibrary(ggdendro)\nggdendrogram(hc_out, rotate = TRUE)\n\nmethod = \"complete\": complete linkage method"
  },
  {
    "objectID": "slides/hierarchical-clustering.html#we-can-also-plot-manually",
    "href": "slides/hierarchical-clustering.html#we-can-also-plot-manually",
    "title": "Hierarchical clustering",
    "section": "We can also plot manually",
    "text": "We can also plot manually\n\n\n\nddata &lt;- dendro_data(\n  hc_out,\n  type = \"rectangle\"\n)\nsegments &lt;- segment(ddata)\nlabels &lt;- label(ddata)\n\nggplot() + \n  geom_segment(\n    data = segments,\n    aes(x, y, xend = xend, yend = yend)\n  ) + \n  geom_text(\n    data = labels,\n    aes(x, y - .5, label = label),\n    hjust = 1,\n    size = 8/.pt\n  ) +\n  coord_flip(ylim = c(-5, 12))"
  },
  {
    "objectID": "slides/hierarchical-clustering.html#assign-clusters-by-cutting-the-dendrogram",
    "href": "slides/hierarchical-clustering.html#assign-clusters-by-cutting-the-dendrogram",
    "title": "Hierarchical clustering",
    "section": "Assign clusters by cutting the dendrogram",
    "text": "Assign clusters by cutting the dendrogram\n\n\n# cut dendrogram at height 5\ncutree(hc_out, h = 5) \n\n       Alabama         Alaska        Arizona       Arkansas     California       Colorado \n             1              2              1              1              3              4 \n   Connecticut       Delaware        Florida        Georgia         Hawaii          Idaho \n             5              6              4              1              7              8 \n      Illinois        Indiana           Iowa         Kansas       Kentucky      Louisiana \n             4              1              8              8              9              1 \n         Maine       Maryland  Massachusetts       Michigan      Minnesota    Mississippi \n             8             10              5              4              4              9 \n      Missouri        Montana       Nebraska         Nevada  New Hampshire     New Jersey \n             1              8              8             11             12              5 \n    New Mexico       New York North Carolina   North Dakota           Ohio       Oklahoma \n             9              3              1             13              1              1 \n        Oregon   Pennsylvania   Rhode Island South Carolina   South Dakota      Tennessee \n             4              4             14              1              8              1 \n         Texas           Utah        Vermont       Virginia     Washington  West Virginia \n             4             15             12             10              4              9 \n     Wisconsin        Wyoming \n             4             13"
  },
  {
    "objectID": "slides/hierarchical-clustering.html#assign-clusters-by-cutting-the-dendrogram-1",
    "href": "slides/hierarchical-clustering.html#assign-clusters-by-cutting-the-dendrogram-1",
    "title": "Hierarchical clustering",
    "section": "Assign clusters by cutting the dendrogram",
    "text": "Assign clusters by cutting the dendrogram\n\n\n# cut dendrogram at height 8\ncutree(hc_out, h = 8) \n\n       Alabama         Alaska        Arizona       Arkansas     California       Colorado \n             1              2              1              1              3              4 \n   Connecticut       Delaware        Florida        Georgia         Hawaii          Idaho \n             5              4              4              1              3              4 \n      Illinois        Indiana           Iowa         Kansas       Kentucky      Louisiana \n             4              1              4              4              1              1 \n         Maine       Maryland  Massachusetts       Michigan      Minnesota    Mississippi \n             4              5              5              4              4              1 \n      Missouri        Montana       Nebraska         Nevada  New Hampshire     New Jersey \n             1              4              4              3              6              5 \n    New Mexico       New York North Carolina   North Dakota           Ohio       Oklahoma \n             1              3              1              6              1              1 \n        Oregon   Pennsylvania   Rhode Island South Carolina   South Dakota      Tennessee \n             4              4              3              1              4              1 \n         Texas           Utah        Vermont       Virginia     Washington  West Virginia \n             4              4              6              5              4              1 \n     Wisconsin        Wyoming \n             4              6"
  },
  {
    "objectID": "slides/hierarchical-clustering.html#assign-clusters-by-cutting-the-dendrogram-2",
    "href": "slides/hierarchical-clustering.html#assign-clusters-by-cutting-the-dendrogram-2",
    "title": "Hierarchical clustering",
    "section": "Assign clusters by cutting the dendrogram",
    "text": "Assign clusters by cutting the dendrogram\n\n\n# cut dendrogram so there are 4 clusters\ncutree(hc_out, k = 4) \n\n       Alabama         Alaska        Arizona       Arkansas     California       Colorado \n             1              2              1              1              3              1 \n   Connecticut       Delaware        Florida        Georgia         Hawaii          Idaho \n             3              1              1              1              3              1 \n      Illinois        Indiana           Iowa         Kansas       Kentucky      Louisiana \n             1              1              1              1              1              1 \n         Maine       Maryland  Massachusetts       Michigan      Minnesota    Mississippi \n             1              3              3              1              1              1 \n      Missouri        Montana       Nebraska         Nevada  New Hampshire     New Jersey \n             1              1              1              3              4              3 \n    New Mexico       New York North Carolina   North Dakota           Ohio       Oklahoma \n             1              3              1              4              1              1 \n        Oregon   Pennsylvania   Rhode Island South Carolina   South Dakota      Tennessee \n             1              1              3              1              1              1 \n         Texas           Utah        Vermont       Virginia     Washington  West Virginia \n             1              1              4              3              1              1 \n     Wisconsin        Wyoming \n             1              4"
  },
  {
    "objectID": "slides/hierarchical-clustering.html#add-cluster-info-into-scatterplot",
    "href": "slides/hierarchical-clustering.html#add-cluster-info-into-scatterplot",
    "title": "Hierarchical clustering",
    "section": "Add cluster info into scatterplot",
    "text": "Add cluster info into scatterplot\n\n\n\n# cut dendrogram so there are 4 clusters\ncluster &lt;- cutree(hc_out, k = 4)\n\nUS_state_stats |&gt;\n  left_join(\n    tibble(\n      state = names(cluster),\n      cluster = factor(cluster)\n    )\n  ) |&gt;\n  ggplot(aes(income, tr_deaths)) +\n  geom_point(aes(color = cluster))"
  },
  {
    "objectID": "slides/hierarchical-clustering.html#further-reading",
    "href": "slides/hierarchical-clustering.html#further-reading",
    "title": "Hierarchical clustering",
    "section": "Further reading",
    "text": "Further reading\n\nWikipedia: Hierarchical clustering\nggdendro documentation: Introduction to ggdendro\nggdendro documentation: reference documentation (pdf)"
  },
  {
    "objectID": "slides/geospatial-data.html#parallels-latitude-and-meridians-longitude",
    "href": "slides/geospatial-data.html#parallels-latitude-and-meridians-longitude",
    "title": "Visualizing geospatial data",
    "section": "Parallels (latitude) and meridians (longitude)",
    "text": "Parallels (latitude) and meridians (longitude)"
  },
  {
    "objectID": "slides/geospatial-data.html#there-are-many-ways-to-project-onto-a-2d-plane",
    "href": "slides/geospatial-data.html#there-are-many-ways-to-project-onto-a-2d-plane",
    "title": "Visualizing geospatial data",
    "section": "There are many ways to project onto a 2D plane",
    "text": "There are many ways to project onto a 2D plane"
  },
  {
    "objectID": "slides/geospatial-data.html#there-are-many-ways-to-project-onto-a-2d-plane-1",
    "href": "slides/geospatial-data.html#there-are-many-ways-to-project-onto-a-2d-plane-1",
    "title": "Visualizing geospatial data",
    "section": "There are many ways to project onto a 2D plane",
    "text": "There are many ways to project onto a 2D plane\n\n\n\n\n\n\nMercator projection: Shapes are preserved, areas are severely distorted"
  },
  {
    "objectID": "slides/geospatial-data.html#there-are-many-ways-to-project-onto-a-2d-plane-2",
    "href": "slides/geospatial-data.html#there-are-many-ways-to-project-onto-a-2d-plane-2",
    "title": "Visualizing geospatial data",
    "section": "There are many ways to project onto a 2D plane",
    "text": "There are many ways to project onto a 2D plane\n\n\n\n\n\n\nGoode homolosine: Areas are preserved, shapes are somewhat distorted"
  },
  {
    "objectID": "slides/geospatial-data.html#projecting-the-us",
    "href": "slides/geospatial-data.html#projecting-the-us",
    "title": "Visualizing geospatial data",
    "section": "Projecting the US",
    "text": "Projecting the US\n\n\n\n\n\n\nAlaska, Hawaii, and the lower 48 are far apart; difficult to show on one map"
  },
  {
    "objectID": "slides/geospatial-data.html#projecting-the-us-1",
    "href": "slides/geospatial-data.html#projecting-the-us-1",
    "title": "Visualizing geospatial data",
    "section": "Projecting the US",
    "text": "Projecting the US\n\n\n\n\n\n\nA fair, area-preserving projection"
  },
  {
    "objectID": "slides/geospatial-data.html#a-common-visualization.-what-happened-to-alaska",
    "href": "slides/geospatial-data.html#a-common-visualization.-what-happened-to-alaska",
    "title": "Visualizing geospatial data",
    "section": "A common visualization. What happened to Alaska?",
    "text": "A common visualization. What happened to Alaska?\n\n\n\n\n\n\nAlaska and Hawaii were moved closer; Alaska was also reduced in size"
  },
  {
    "objectID": "slides/geospatial-data.html#a-fair-visualization-of-the-50-states",
    "href": "slides/geospatial-data.html#a-fair-visualization-of-the-50-states",
    "title": "Visualizing geospatial data",
    "section": "A fair visualization of the 50 states",
    "text": "A fair visualization of the 50 states\n\n\n\n\n\n\nAlaska is the largest state; 2.2 the size of Texas"
  },
  {
    "objectID": "slides/geospatial-data.html#us-population-density-as-a-choropleth-map",
    "href": "slides/geospatial-data.html#us-population-density-as-a-choropleth-map",
    "title": "Visualizing geospatial data",
    "section": "US population density as a choropleth map",
    "text": "US population density as a choropleth map\n\n\n\n\n\n\nAlaska has very low population density"
  },
  {
    "objectID": "slides/geospatial-data.html#us-population-density-as-a-choropleth-map-1",
    "href": "slides/geospatial-data.html#us-population-density-as-a-choropleth-map-1",
    "title": "Visualizing geospatial data",
    "section": "US population density as a choropleth map",
    "text": "US population density as a choropleth map\n\n\n\n\n\n\nAlaska has very low population density"
  },
  {
    "objectID": "slides/geospatial-data.html#us-median-income-as-a-choropleth-map",
    "href": "slides/geospatial-data.html#us-median-income-as-a-choropleth-map",
    "title": "Visualizing geospatial data",
    "section": "US median income as a choropleth map",
    "text": "US median income as a choropleth map\n\n\n\n\n\n\nA binned color scale can make the map more readable"
  },
  {
    "objectID": "slides/geospatial-data.html#choropleth-maps-can-be-misleading",
    "href": "slides/geospatial-data.html#choropleth-maps-can-be-misleading",
    "title": "Visualizing geospatial data",
    "section": "Choropleth maps can be misleading",
    "text": "Choropleth maps can be misleading\n\n\n\n\n\n\nLarge area of Alaska makes it appear very rich; but remember, it’s mostly empty"
  },
  {
    "objectID": "slides/geospatial-data.html#a-cartogram-heatmap-may-be-preferable",
    "href": "slides/geospatial-data.html#a-cartogram-heatmap-may-be-preferable",
    "title": "Visualizing geospatial data",
    "section": "A cartogram heatmap may be preferable",
    "text": "A cartogram heatmap may be preferable\n\n\n\n\n\n\nEach state is shown as an equally sized square"
  },
  {
    "objectID": "slides/geospatial-data.html#maps-show-data-in-a-geospatial-context",
    "href": "slides/geospatial-data.html#maps-show-data-in-a-geospatial-context",
    "title": "Visualizing geospatial data",
    "section": "Maps show data in a geospatial context",
    "text": "Maps show data in a geospatial context\n\n\n\n\n\n\nWind turbines in the San Francisco Bay Area"
  },
  {
    "objectID": "slides/geospatial-data.html#maps-are-composed-of-several-distinct-layers",
    "href": "slides/geospatial-data.html#maps-are-composed-of-several-distinct-layers",
    "title": "Visualizing geospatial data",
    "section": "Maps are composed of several distinct layers",
    "text": "Maps are composed of several distinct layers\n\n\n\n\n\n\nWind turbines in the San Francisco Bay Area"
  },
  {
    "objectID": "slides/geospatial-data.html#the-concept-of-aesthetic-mappings-still-applies",
    "href": "slides/geospatial-data.html#the-concept-of-aesthetic-mappings-still-applies",
    "title": "Visualizing geospatial data",
    "section": "The concept of aesthetic mappings still applies",
    "text": "The concept of aesthetic mappings still applies\n\n\n\n\n\n\nLocation of individual wind turbines in the Shiloh Wind Farm"
  },
  {
    "objectID": "slides/geospatial-data.html#the-sf-package-simple-features-in-r",
    "href": "slides/geospatial-data.html#the-sf-package-simple-features-in-r",
    "title": "Visualizing geospatial data",
    "section": "The sf package: Simple Features in R",
    "text": "The sf package: Simple Features in R\n\n\n\n\n\n\n\n \n\nArtwork by Allison Horst"
  },
  {
    "objectID": "slides/geospatial-data.html#getting-the-data",
    "href": "slides/geospatial-data.html#getting-the-data",
    "title": "Visualizing geospatial data",
    "section": "Getting the data",
    "text": "Getting the data\n\nWe’ll be working with the texas_income dataset:\n\n\n\nlibrary(sf)  # always load the sf package when working with geospatial data\n\ntexas_income &lt;- readRDS(url(\"https://wilkelab.org/DSC385/datasets/Texas_income.rds\"))\n\ntexas_income\n\nSimple feature collection with 254 features and 4 fields\nGeometry type: MULTIPOLYGON\nDimension:     XY\nBounding box:  xmin: -106.6456 ymin: 25.83738 xmax: -93.50829 ymax: 36.5007\nGeodetic CRS:  NAD83\nFirst 10 features:\n    FIPS    county median_income  moe                       geometry\n1  48001  Anderson         41327 1842 MULTIPOLYGON (((-96.0648 31...\n2  48003   Andrews         70423 6038 MULTIPOLYGON (((-103.0647 3...\n3  48005  Angelina         44223 1611 MULTIPOLYGON (((-95.00488 3...\n4  48007   Aransas         41690 3678 MULTIPOLYGON (((-96.8229 28...\n5  48009    Archer         60275 5182 MULTIPOLYGON (((-98.95382 3...\n6  48011 Armstrong         59737 4968 MULTIPOLYGON (((-101.6294 3...\n7  48013  Atascosa         52192 3005 MULTIPOLYGON (((-98.80479 2...\n8  48015    Austin         53687 3810 MULTIPOLYGON (((-96.62085 3...\n9  48017    Bailey         37397 8652 MULTIPOLYGON (((-103.0469 3...\n10 48019   Bandera         49863 7193 MULTIPOLYGON (((-99.60332 2..."
  },
  {
    "objectID": "slides/geospatial-data.html#the-sf-package-simple-features-in-r-1",
    "href": "slides/geospatial-data.html#the-sf-package-simple-features-in-r-1",
    "title": "Visualizing geospatial data",
    "section": "The sf package: Simple Features in R",
    "text": "The sf package: Simple Features in R\n\n\n# the entire dataset\ntexas_income\n\nSimple feature collection with 254 features and 4 fields\nGeometry type: MULTIPOLYGON\nDimension:     XY\nBounding box:  xmin: -106.6456 ymin: 25.83738 xmax: -93.50829 ymax: 36.5007\nGeodetic CRS:  NAD83\nFirst 10 features:\n    FIPS    county median_income  moe                       geometry\n1  48001  Anderson         41327 1842 MULTIPOLYGON (((-96.0648 31...\n2  48003   Andrews         70423 6038 MULTIPOLYGON (((-103.0647 3...\n3  48005  Angelina         44223 1611 MULTIPOLYGON (((-95.00488 3...\n4  48007   Aransas         41690 3678 MULTIPOLYGON (((-96.8229 28...\n5  48009    Archer         60275 5182 MULTIPOLYGON (((-98.95382 3...\n6  48011 Armstrong         59737 4968 MULTIPOLYGON (((-101.6294 3...\n7  48013  Atascosa         52192 3005 MULTIPOLYGON (((-98.80479 2...\n8  48015    Austin         53687 3810 MULTIPOLYGON (((-96.62085 3...\n9  48017    Bailey         37397 8652 MULTIPOLYGON (((-103.0469 3...\n10 48019   Bandera         49863 7193 MULTIPOLYGON (((-99.60332 2..."
  },
  {
    "objectID": "slides/geospatial-data.html#the-sf-package-simple-features-in-r-2",
    "href": "slides/geospatial-data.html#the-sf-package-simple-features-in-r-2",
    "title": "Visualizing geospatial data",
    "section": "The sf package: Simple Features in R",
    "text": "The sf package: Simple Features in R\n\n\n# the column holding geometry information\nprint(texas_income$geometry)\n\nGeometry set for 254 features \nGeometry type: MULTIPOLYGON\nDimension:     XY\nBounding box:  xmin: -106.6456 ymin: 25.83738 xmax: -93.50829 ymax: 36.5007\nGeodetic CRS:  NAD83\nFirst 5 geometries:\n\n\nMULTIPOLYGON (((-96.0648 31.98066, -96.06305 31...\n\n\nMULTIPOLYGON (((-103.0647 32.52219, -103.0005 3...\n\n\nMULTIPOLYGON (((-95.00488 31.42396, -95.00334 3...\n\n\nMULTIPOLYGON (((-96.8229 28.16743, -96.82127 28...\n\n\nMULTIPOLYGON (((-98.95382 33.49637, -98.95377 3..."
  },
  {
    "objectID": "slides/geospatial-data.html#the-sf-package-simple-features-in-r-3",
    "href": "slides/geospatial-data.html#the-sf-package-simple-features-in-r-3",
    "title": "Visualizing geospatial data",
    "section": "The sf package: Simple Features in R",
    "text": "The sf package: Simple Features in R\n\n\n# data wrangling works as normal\ntexas_income |&gt;\n  filter(county == \"Travis\")\n\nSimple feature collection with 1 feature and 4 fields\nGeometry type: MULTIPOLYGON\nDimension:     XY\nBounding box:  xmin: -98.17298 ymin: 30.0245 xmax: -97.36954 ymax: 30.62825\nGeodetic CRS:  NAD83\n   FIPS county median_income moe                       geometry\n1 48453 Travis         61451 591 MULTIPOLYGON (((-98.15927 3..."
  },
  {
    "objectID": "slides/geospatial-data.html#ggplot-supports-simple-features-with-geom_sf",
    "href": "slides/geospatial-data.html#ggplot-supports-simple-features-with-geom_sf",
    "title": "Visualizing geospatial data",
    "section": "ggplot supports simple features with geom_sf()",
    "text": "ggplot supports simple features with geom_sf()\n\n\n\n# plot all of Texas\nggplot(texas_income) + \n  geom_sf()"
  },
  {
    "objectID": "slides/geospatial-data.html#ggplot-supports-simple-features-with-geom_sf-1",
    "href": "slides/geospatial-data.html#ggplot-supports-simple-features-with-geom_sf-1",
    "title": "Visualizing geospatial data",
    "section": "ggplot supports simple features with geom_sf()",
    "text": "ggplot supports simple features with geom_sf()\n\n\n\n# plot only Travis County\ntexas_income |&gt;\n  filter(county == \"Travis\") |&gt;\n  ggplot() + \n  geom_sf()"
  },
  {
    "objectID": "slides/geospatial-data.html#ggplot-supports-simple-features-with-geom_sf-2",
    "href": "slides/geospatial-data.html#ggplot-supports-simple-features-with-geom_sf-2",
    "title": "Visualizing geospatial data",
    "section": "ggplot supports simple features with geom_sf()",
    "text": "ggplot supports simple features with geom_sf()\n\n\n\n# plot the ten richest counties\ntexas_income |&gt;\n  slice_max(median_income, n = 10) |&gt;\n  ggplot() + \n  geom_sf()"
  },
  {
    "objectID": "slides/geospatial-data.html#ggplot-supports-simple-features-with-geom_sf-3",
    "href": "slides/geospatial-data.html#ggplot-supports-simple-features-with-geom_sf-3",
    "title": "Visualizing geospatial data",
    "section": "ggplot supports simple features with geom_sf()",
    "text": "ggplot supports simple features with geom_sf()\n\n\n\n# color counties by median income\ntexas_income |&gt;\n  ggplot(aes(fill = median_income)) + \n  geom_sf() +\n  scale_fill_continuous_sequential(\n    palette = \"Blues\", rev = TRUE\n  )"
  },
  {
    "objectID": "slides/geospatial-data.html#ggplot-supports-simple-features-with-geom_sf-4",
    "href": "slides/geospatial-data.html#ggplot-supports-simple-features-with-geom_sf-4",
    "title": "Visualizing geospatial data",
    "section": "ggplot supports simple features with geom_sf()",
    "text": "ggplot supports simple features with geom_sf()\n\n\n\n# highlight the ten richest counties\ntexas_income |&gt;\n  mutate(\n    top_ten = rank(desc(median_income)) &lt;= 10\n  ) |&gt;\n  ggplot(aes(fill = top_ten)) + \n  geom_sf() +\n  scale_fill_manual(\n    values = c(\n      `TRUE` = \"#D55E00\",\n      `FALSE` = \"#E8EEF9\"\n    )\n  )"
  },
  {
    "objectID": "slides/geospatial-data.html#ggplot-supports-simple-features-with-geom_sf-5",
    "href": "slides/geospatial-data.html#ggplot-supports-simple-features-with-geom_sf-5",
    "title": "Visualizing geospatial data",
    "section": "ggplot supports simple features with geom_sf()",
    "text": "ggplot supports simple features with geom_sf()\n\n\n\n# highlight the ten richest counties\ntexas_income |&gt;\n  mutate(\n    top_ten = rank(desc(median_income)) &lt;= 10\n  ) |&gt;\n  ggplot(aes(fill = top_ten)) + \n  geom_sf(color = \"black\", linewidth = 0.1) +\n  scale_fill_manual(\n    name = NULL,\n    values = c(\n      `TRUE` = \"#D55E00\",\n      `FALSE` = \"#E8EEF9\"\n    ),\n    breaks = c(TRUE),\n    labels = \"top-10 median income\"\n  ) +\n  theme_minimal_grid(14)\n\n\n\n\n\n \n\n\n\n\n\n\nWe apply styling as usual"
  },
  {
    "objectID": "slides/geospatial-data.html#we-can-customize-the-projection-with-coord_sf",
    "href": "slides/geospatial-data.html#we-can-customize-the-projection-with-coord_sf",
    "title": "Visualizing geospatial data",
    "section": "We can customize the projection with coord_sf()",
    "text": "We can customize the projection with coord_sf()\n\n\n\nggplot(texas_income) + \n  geom_sf(\n    aes(fill = median_income),\n    color = \"black\", linewidth = 0.1\n  ) +\n  scale_fill_continuous_sequential(\n    palette = \"Blues\", rev = TRUE\n  ) +\n  theme_minimal_grid(14)"
  },
  {
    "objectID": "slides/geospatial-data.html#we-can-customize-the-projection-with-coord_sf-1",
    "href": "slides/geospatial-data.html#we-can-customize-the-projection-with-coord_sf-1",
    "title": "Visualizing geospatial data",
    "section": "We can customize the projection with coord_sf()",
    "text": "We can customize the projection with coord_sf()\n\n\n\nggplot(texas_income) + \n  geom_sf(\n    aes(fill = median_income),\n    color = \"black\", linewidth = 0.1\n  ) +\n  scale_fill_continuous_sequential(\n    palette = \"Blues\", rev = TRUE\n  ) +\n  coord_sf() + # added by default with geom_sf()\n  theme_minimal_grid(14)"
  },
  {
    "objectID": "slides/geospatial-data.html#we-can-customize-the-projection-with-coord_sf-2",
    "href": "slides/geospatial-data.html#we-can-customize-the-projection-with-coord_sf-2",
    "title": "Visualizing geospatial data",
    "section": "We can customize the projection with coord_sf()",
    "text": "We can customize the projection with coord_sf()\n\n\n\nggplot(texas_income) + \n  geom_sf(\n    aes(fill = median_income),\n    color = \"black\", linewidth = 0.1\n  ) +\n  scale_fill_continuous_sequential(\n    palette = \"Blues\", rev = TRUE\n  ) +\n  coord_sf(\n    # Texas Centric Albers Equal Area projection\n    crs = 3083\n  ) +\n  theme_minimal_grid(14)\n\n\n\n\n\n \n\n\n\n\n\n\nReference: https://spatialreference.org/ref/epsg/3083/"
  },
  {
    "objectID": "slides/geospatial-data.html#we-can-customize-the-projection-with-coord_sf-3",
    "href": "slides/geospatial-data.html#we-can-customize-the-projection-with-coord_sf-3",
    "title": "Visualizing geospatial data",
    "section": "We can customize the projection with coord_sf()",
    "text": "We can customize the projection with coord_sf()\n\n\n\nggplot(texas_income) + \n  geom_sf(\n    aes(fill = median_income),\n    color = \"black\", linewidth = 0.1\n  ) +\n  scale_fill_continuous_sequential(\n    palette = \"Blues\", rev = TRUE\n  ) +\n  coord_sf(\n    # Texas Centric Lambert Conformal Conic projection\n    crs = 32139\n  ) +\n  theme_minimal_grid(14)\n\n\n\n\n\n \n\n\n\n\n\n\nReference: https://spatialreference.org/ref/epsg/32139/"
  },
  {
    "objectID": "slides/geospatial-data.html#we-can-customize-the-projection-with-coord_sf-4",
    "href": "slides/geospatial-data.html#we-can-customize-the-projection-with-coord_sf-4",
    "title": "Visualizing geospatial data",
    "section": "We can customize the projection with coord_sf()",
    "text": "We can customize the projection with coord_sf()\n\n\n\nggplot(texas_income) + \n  geom_sf(\n    aes(fill = median_income),\n    color = \"black\", linewidth = 0.1\n  ) +\n  scale_fill_continuous_sequential(\n    palette = \"Blues\", rev = TRUE\n  ) +\n  coord_sf(\n    # Web Mercator (Google Maps)\n    crs = 3857\n  ) +\n  theme_minimal_grid(14)\n\n\n\n\n\n \n\n\n\n\n\n\nReference: https://spatialreference.org/ref/epsg/3857"
  },
  {
    "objectID": "slides/geospatial-data.html#we-can-customize-the-projection-with-coord_sf-5",
    "href": "slides/geospatial-data.html#we-can-customize-the-projection-with-coord_sf-5",
    "title": "Visualizing geospatial data",
    "section": "We can customize the projection with coord_sf()",
    "text": "We can customize the projection with coord_sf()\n\n\n\nggplot(texas_income) + \n  geom_sf(\n    aes(fill = median_income),\n    color = \"black\", linewidth = 0.1\n  ) +\n  scale_fill_continuous_sequential(\n    palette = \"Blues\", rev = TRUE\n  ) +\n  coord_sf(\n    # Longitude-Latitude WGS84 (GPS)\n    crs = 4326\n  ) +\n  theme_minimal_grid(14)\n\n\n\n\n\n \n\n\n\n\n\n\nReference: https://spatialreference.org/ref/epsg/4326/"
  },
  {
    "objectID": "slides/geospatial-data.html#we-can-customize-the-projection-with-coord_sf-6",
    "href": "slides/geospatial-data.html#we-can-customize-the-projection-with-coord_sf-6",
    "title": "Visualizing geospatial data",
    "section": "We can customize the projection with coord_sf()",
    "text": "We can customize the projection with coord_sf()\n\n\n\nggplot(texas_income) + \n  geom_sf(\n    aes(fill = median_income),\n    color = \"black\", linewidth = 0.1\n  ) +\n  scale_fill_continuous_sequential(\n    palette = \"Blues\", rev = TRUE\n  ) +\n  coord_sf(\n    # Alaska Albers equal area\n    crs = 3338\n  ) +\n  theme_minimal_grid(14)\n\n\n\n\n\n \n\n\n\n\n\n\nReference: https://spatialreference.org/ref/epsg/3338/"
  },
  {
    "objectID": "slides/geospatial-data.html#we-can-get-map-data-from-the-rnaturalearth-package",
    "href": "slides/geospatial-data.html#we-can-get-map-data-from-the-rnaturalearth-package",
    "title": "Visualizing geospatial data",
    "section": "We can get map data from the rnaturalearth package",
    "text": "We can get map data from the rnaturalearth package\n\n\nlibrary(rnaturalearth)\n\nsf_world &lt;- ne_countries(returnclass='sf')\nggplot(sf_world) + geom_sf()"
  },
  {
    "objectID": "slides/geospatial-data.html#we-can-get-map-data-from-the-rnaturalearth-package-1",
    "href": "slides/geospatial-data.html#we-can-get-map-data-from-the-rnaturalearth-package-1",
    "title": "Visualizing geospatial data",
    "section": "We can get map data from the rnaturalearth package",
    "text": "We can get map data from the rnaturalearth package\n\n\nlibrary(rnaturalearth)\n\nsf_world &lt;- ne_countries(returnclass='sf')\nggplot(sf_world) + geom_sf() + coord_sf(crs = \"ESRI:54030\") # Robinson projection\n\n\n\n\n \n\n\n\n\n\n\nReference: https://spatialreference.org/ref/esri/54030/"
  },
  {
    "objectID": "slides/geospatial-data.html#we-can-get-map-data-from-the-rnaturalearth-package-2",
    "href": "slides/geospatial-data.html#we-can-get-map-data-from-the-rnaturalearth-package-2",
    "title": "Visualizing geospatial data",
    "section": "We can get map data from the rnaturalearth package",
    "text": "We can get map data from the rnaturalearth package\n\nA map of the lower 48:\n\n\n\nsf_us &lt;- ne_states(\n  country = \"United States of America\",\n  returnclass='sf'\n)\n\nsf_us |&gt;\n  # exclude Alaska (US02), Hawaii (US15)\n  filter(!code_local %in% c(\"US02\", \"US15\")) |&gt;\n  ggplot() + geom_sf()"
  },
  {
    "objectID": "slides/geospatial-data.html#we-can-get-map-data-from-the-rnaturalearth-package-3",
    "href": "slides/geospatial-data.html#we-can-get-map-data-from-the-rnaturalearth-package-3",
    "title": "Visualizing geospatial data",
    "section": "We can get map data from the rnaturalearth package",
    "text": "We can get map data from the rnaturalearth package\n\nA map of the lower 48:\n\n\n\nsf_us &lt;- ne_states(\n  country = \"United States of America\",\n  returnclass='sf'\n)\n\nsf_us |&gt;\n  # exclude Alaska (US02), Hawaii (US15)\n  filter(!code_local %in% c(\"US02\", \"US15\")) |&gt;\n  ggplot() + geom_sf() + coord_sf(crs = \"ESRI:102003\") # US Albers equal area\n\n\n\n\n \n\n\n\n\n\n\nReference: https://spatialreference.org/ref/esri/102003/"
  },
  {
    "objectID": "slides/geospatial-data.html#further-reading",
    "href": "slides/geospatial-data.html#further-reading",
    "title": "Visualizing geospatial data",
    "section": "Further reading",
    "text": "Further reading\n\nFundamentals of Data Visualization: Chapter 15: Visualizing geospatial data\nsf package documentation: Simple Features for R\nggplot2 reference documentation: geom_sf(), coord_sf()"
  },
  {
    "objectID": "slides/figure-design.html#how-do-we-go",
    "href": "slides/figure-design.html#how-do-we-go",
    "title": "Figure design",
    "section": "",
    "text": "How do we go from this\n\n\n\n\n\n \n\n\n\n\n\n   to this?\n\n\n\n\n\n \n\n\n\n\n\n\nRequires coordinated modification of multiple elements:\n\n\n\ngeoms (via arguments to geoms)\nscales (via scale_*() functions)\nplot appearance (via themes)"
  },
  {
    "objectID": "slides/figure-design.html#the-starting-point-a-rough-draft",
    "href": "slides/figure-design.html#the-starting-point-a-rough-draft",
    "title": "Figure design",
    "section": "The starting point, a rough draft",
    "text": "The starting point, a rough draft\n\n\n\nggplot(lincoln_temps) +\n  aes(x = mean_temp, y = month_long) +\n  geom_density_ridges()\n\n\n\n\n\n \n\n\n\n\n\n\nYou can download the dataset using this code:\nlincoln_temps &lt;- readRDS(url(\"https://wilkelab.org/DSC385/datasets/lincoln_temps.rds\"))"
  },
  {
    "objectID": "slides/figure-design.html#set-scale-and-bandwidth-to-shape-ridgelines",
    "href": "slides/figure-design.html#set-scale-and-bandwidth-to-shape-ridgelines",
    "title": "Figure design",
    "section": "Set scale and bandwidth to shape ridgelines",
    "text": "Set scale and bandwidth to shape ridgelines\n\n\n\nggplot(lincoln_temps) +\n  aes(x = mean_temp, y = month_long) +\n  geom_density_ridges(\n    scale = 3, bandwidth = 3.4\n  )"
  },
  {
    "objectID": "slides/figure-design.html#set-rel_min_height-to-cut-ridgelines-near-zero",
    "href": "slides/figure-design.html#set-rel_min_height-to-cut-ridgelines-near-zero",
    "title": "Figure design",
    "section": "Set rel_min_height to cut ridgelines near zero",
    "text": "Set rel_min_height to cut ridgelines near zero\n\n\n\nggplot(lincoln_temps) +\n  aes(x = mean_temp, y = month_long) +\n  geom_density_ridges(\n    scale = 3, bandwidth = 3.4,\n    rel_min_height = 0.01\n  )"
  },
  {
    "objectID": "slides/figure-design.html#use-scale_-functions-to-specify-axis-labels",
    "href": "slides/figure-design.html#use-scale_-functions-to-specify-axis-labels",
    "title": "Figure design",
    "section": "Use scale_*() functions to specify axis labels",
    "text": "Use scale_*() functions to specify axis labels\n\n\n\nggplot(lincoln_temps) +\n  aes(x = mean_temp, y = month_long) +\n  geom_density_ridges(\n    scale = 3, bandwidth = 3.4,\n    rel_min_height = 0.01,\n  ) +\n  scale_x_continuous(\n    name = \"mean temperature (°F)\"\n  ) +\n  scale_y_discrete(\n    name = NULL  # NULL means no label\n  )"
  },
  {
    "objectID": "slides/figure-design.html#specify-scale-expansion",
    "href": "slides/figure-design.html#specify-scale-expansion",
    "title": "Figure design",
    "section": "Specify scale expansion",
    "text": "Specify scale expansion\n\n\n\nggplot(lincoln_temps) +\n  aes(x = mean_temp, y = month_long) +\n  geom_density_ridges(\n    scale = 3, bandwidth = 3.4,\n    rel_min_height = 0.01\n  ) +\n  scale_x_continuous(\n    name = \"mean temperature (°F)\",\n    expand = c(0, 0)\n  ) +\n  scale_y_discrete(\n    name = NULL,\n    expand = expansion(add = c(0.2, 2.6))\n  )"
  },
  {
    "objectID": "slides/figure-design.html#set-overall-plot-theme",
    "href": "slides/figure-design.html#set-overall-plot-theme",
    "title": "Figure design",
    "section": "Set overall plot theme",
    "text": "Set overall plot theme\n\n\n\nggplot(lincoln_temps) +\n  aes(x = mean_temp, y = month_long) +\n  geom_density_ridges(\n    scale = 3, bandwidth = 3.4,\n    rel_min_height = 0.01\n  ) +\n  scale_x_continuous(\n    name = \"mean temperature (°F)\",\n    expand = c(0, 0)\n  ) +\n  scale_y_discrete(\n    name = NULL,\n    expand = expansion(add = c(0.2, 2.6))\n  ) +\n  theme_minimal_grid()  # from cowplot"
  },
  {
    "objectID": "slides/figure-design.html#align-y-axis-labels-to-grid-lines",
    "href": "slides/figure-design.html#align-y-axis-labels-to-grid-lines",
    "title": "Figure design",
    "section": "Align y axis labels to grid lines",
    "text": "Align y axis labels to grid lines\n\n\n\nggplot(lincoln_temps) +\n  aes(x = mean_temp, y = month_long) +\n  geom_density_ridges(\n    scale = 3, bandwidth = 3.4,\n    rel_min_height = 0.01\n  ) +\n  scale_x_continuous(\n    name = \"mean temperature (°F)\",\n    expand = c(0, 0)\n  ) +\n  scale_y_discrete(\n    name = NULL,\n    expand = expansion(add = c(0.2, 2.6))\n  ) +\n  theme_minimal_grid() +\n  theme(\n    axis.text.y = element_text(vjust = 0)\n  )"
  },
  {
    "objectID": "slides/figure-design.html#change-fill-color-from-default-gray-to-blue",
    "href": "slides/figure-design.html#change-fill-color-from-default-gray-to-blue",
    "title": "Figure design",
    "section": "Change fill color from default gray to blue",
    "text": "Change fill color from default gray to blue\n\n\n\nggplot(lincoln_temps) +\n  aes(x = mean_temp, y = month_long) +\n  geom_density_ridges(\n    scale = 3, bandwidth = 3.4,\n    rel_min_height = 0.01,\n    fill = \"#7DCCFF\"\n  ) +\n  scale_x_continuous(\n    name = \"mean temperature (°F)\",\n    expand = c(0, 0)\n  ) +\n  scale_y_discrete(\n    name = NULL,\n    expand = expansion(add = c(0.2, 2.6))\n  ) +\n  theme_minimal_grid() +\n  theme(\n    axis.text.y = element_text(vjust = 0)\n  )"
  },
  {
    "objectID": "slides/figure-design.html#draw-lines-in-white-instead-of-black",
    "href": "slides/figure-design.html#draw-lines-in-white-instead-of-black",
    "title": "Figure design",
    "section": "Draw lines in white instead of black",
    "text": "Draw lines in white instead of black\n\n\n\nggplot(lincoln_temps) +\n  aes(x = mean_temp, y = month_long) +\n  geom_density_ridges(\n    scale = 3, bandwidth = 3.4,\n    rel_min_height = 0.01,\n    fill = \"#7DCCFF\",\n    color = \"white\"\n  ) +\n  scale_x_continuous(\n    name = \"mean temperature (°F)\",\n    expand = c(0, 0)\n  ) +\n  scale_y_discrete(\n    name = NULL,\n    expand = expansion(add = c(0.2, 2.6))\n  ) +\n  theme_minimal_grid() +\n  theme(\n    axis.text.y = element_text(vjust = 0)\n  )"
  },
  {
    "objectID": "slides/figure-design.html#using-ready-made-themes",
    "href": "slides/figure-design.html#using-ready-made-themes",
    "title": "Figure design",
    "section": "Using ready-made themes",
    "text": "Using ready-made themes\n\n\nggplot(penguins, aes(flipper_length_mm, body_mass_g, color = species)) +\n  geom_point()\n  # default theme is theme_gray()"
  },
  {
    "objectID": "slides/figure-design.html#using-ready-made-themes-1",
    "href": "slides/figure-design.html#using-ready-made-themes-1",
    "title": "Figure design",
    "section": "Using ready-made themes",
    "text": "Using ready-made themes\n\n\nggplot(penguins, aes(flipper_length_mm, body_mass_g, color = species)) +\n  geom_point() +\n  theme_gray()"
  },
  {
    "objectID": "slides/figure-design.html#using-ready-made-themes-2",
    "href": "slides/figure-design.html#using-ready-made-themes-2",
    "title": "Figure design",
    "section": "Using ready-made themes",
    "text": "Using ready-made themes\n\n\nggplot(penguins, aes(flipper_length_mm, body_mass_g, color = species)) +\n  geom_point() +\n  theme_gray(14) # most themes take a font-size argument to scale text size"
  },
  {
    "objectID": "slides/figure-design.html#using-ready-made-themes-3",
    "href": "slides/figure-design.html#using-ready-made-themes-3",
    "title": "Figure design",
    "section": "Using ready-made themes",
    "text": "Using ready-made themes\n\n\nggplot(penguins, aes(flipper_length_mm, body_mass_g, color = species)) +\n  geom_point() +\n  theme_bw(14)"
  },
  {
    "objectID": "slides/figure-design.html#using-ready-made-themes-4",
    "href": "slides/figure-design.html#using-ready-made-themes-4",
    "title": "Figure design",
    "section": "Using ready-made themes",
    "text": "Using ready-made themes\n\n\nggplot(penguins, aes(flipper_length_mm, body_mass_g, color = species)) +\n  geom_point() +\n  theme_minimal(14)"
  },
  {
    "objectID": "slides/figure-design.html#using-ready-made-themes-5",
    "href": "slides/figure-design.html#using-ready-made-themes-5",
    "title": "Figure design",
    "section": "Using ready-made themes",
    "text": "Using ready-made themes\n\n\nggplot(penguins, aes(flipper_length_mm, body_mass_g, color = species)) +\n  geom_point() +\n  theme_classic(14)"
  },
  {
    "objectID": "slides/figure-design.html#using-ready-made-themes-6",
    "href": "slides/figure-design.html#using-ready-made-themes-6",
    "title": "Figure design",
    "section": "Using ready-made themes",
    "text": "Using ready-made themes\n\n\nggplot(penguins, aes(flipper_length_mm, body_mass_g, color = species)) +\n  geom_point() +\n  theme_half_open()  # from package cowplot"
  },
  {
    "objectID": "slides/figure-design.html#using-ready-made-themes-7",
    "href": "slides/figure-design.html#using-ready-made-themes-7",
    "title": "Figure design",
    "section": "Using ready-made themes",
    "text": "Using ready-made themes\n\n\nggplot(penguins, aes(flipper_length_mm, body_mass_g, color = species)) +\n  geom_point() +\n  theme_minimal_grid()  # from package cowplot"
  },
  {
    "objectID": "slides/figure-design.html#using-ready-made-themes-8",
    "href": "slides/figure-design.html#using-ready-made-themes-8",
    "title": "Figure design",
    "section": "Using ready-made themes",
    "text": "Using ready-made themes\n\n\nggplot(penguins, aes(flipper_length_mm, body_mass_g, color = species)) +\n  geom_point() +\n  theme_minimal_hgrid()  # from package cowplot"
  },
  {
    "objectID": "slides/figure-design.html#using-ready-made-themes-9",
    "href": "slides/figure-design.html#using-ready-made-themes-9",
    "title": "Figure design",
    "section": "Using ready-made themes",
    "text": "Using ready-made themes\n\n\nggplot(penguins, aes(flipper_length_mm, body_mass_g, color = species)) +\n  geom_point() +\n  theme_minimal_vgrid()  # from package cowplot"
  },
  {
    "objectID": "slides/figure-design.html#using-ready-made-themes-10",
    "href": "slides/figure-design.html#using-ready-made-themes-10",
    "title": "Figure design",
    "section": "Using ready-made themes",
    "text": "Using ready-made themes\n\n\nggplot(penguins, aes(flipper_length_mm, body_mass_g, color = species)) +\n  geom_point() +\n  theme_economist(14)       # from package ggthemes"
  },
  {
    "objectID": "slides/figure-design.html#using-ready-made-themes-11",
    "href": "slides/figure-design.html#using-ready-made-themes-11",
    "title": "Figure design",
    "section": "Using ready-made themes",
    "text": "Using ready-made themes\n\n\nggplot(penguins, aes(flipper_length_mm, body_mass_g, color = species)) +\n  geom_point() +\n  theme_economist(14) + # from package ggthemes\n  scale_color_economist()"
  },
  {
    "objectID": "slides/figure-design.html#using-ready-made-themes-12",
    "href": "slides/figure-design.html#using-ready-made-themes-12",
    "title": "Figure design",
    "section": "Using ready-made themes",
    "text": "Using ready-made themes\n\n\nggplot(penguins, aes(flipper_length_mm, body_mass_g, color = species)) +\n  geom_point() +\n  theme_fivethirtyeight(14) + # from package ggthemes\n  scale_color_fivethirtyeight()"
  },
  {
    "objectID": "slides/figure-design.html#customizing-theme-elements",
    "href": "slides/figure-design.html#customizing-theme-elements",
    "title": "Figure design",
    "section": "Customizing theme elements",
    "text": "Customizing theme elements\n\n\n\nggplot(penguins) +\n  aes(flipper_length_mm, body_mass_g) +\n  geom_point(aes(color = species)) +\n  theme_minimal_grid()"
  },
  {
    "objectID": "slides/figure-design.html#customizing-theme-elements-1",
    "href": "slides/figure-design.html#customizing-theme-elements-1",
    "title": "Figure design",
    "section": "Customizing theme elements",
    "text": "Customizing theme elements\n\n\n\nggplot(penguins) +\n  aes(flipper_length_mm, body_mass_g) +\n  geom_point(aes(color = species)) +\n  theme_minimal_grid() +\n  theme(\n    # change overall font family\n    # (requires font to be available)\n    text = element_text(\n      family = \"Comic Sans MS\"\n    )\n  )"
  },
  {
    "objectID": "slides/figure-design.html#customizing-theme-elements-2",
    "href": "slides/figure-design.html#customizing-theme-elements-2",
    "title": "Figure design",
    "section": "Customizing theme elements",
    "text": "Customizing theme elements\n\n\n\nggplot(penguins) +\n  aes(flipper_length_mm, body_mass_g) +\n  geom_point(aes(color = species)) +\n  theme_minimal_grid() +\n  theme(\n    # change color of axis titles\n    axis.title = element_text(\n      color = \"royalblue2\"\n    )\n  )"
  },
  {
    "objectID": "slides/figure-design.html#customizing-theme-elements-3",
    "href": "slides/figure-design.html#customizing-theme-elements-3",
    "title": "Figure design",
    "section": "Customizing theme elements",
    "text": "Customizing theme elements\n\n\n\nggplot(penguins) +\n  aes(flipper_length_mm, body_mass_g) +\n  geom_point(aes(color = species)) +\n  theme_minimal_grid() +\n  theme(\n    # change color of only the x axis title\n    axis.title.x = element_text(\n      color = \"royalblue2\"\n    )\n  )"
  },
  {
    "objectID": "slides/figure-design.html#customizing-theme-elements-4",
    "href": "slides/figure-design.html#customizing-theme-elements-4",
    "title": "Figure design",
    "section": "Customizing theme elements",
    "text": "Customizing theme elements\n\n\n\nggplot(penguins) +\n  aes(flipper_length_mm, body_mass_g) +\n  geom_point(aes(color = species)) +\n  theme_minimal_grid() +\n  theme(\n    # change all text colors?\n    # why does it not work?\n    text = element_text(color = \"royalblue2\")\n  )"
  },
  {
    "objectID": "slides/figure-design.html#customizing-theme-elements-5",
    "href": "slides/figure-design.html#customizing-theme-elements-5",
    "title": "Figure design",
    "section": "Customizing theme elements",
    "text": "Customizing theme elements\n\n\n\nggplot(penguins) +\n  aes(flipper_length_mm, body_mass_g) +\n  geom_point(aes(color = species)) +\n  theme_minimal_grid() +\n  theme(\n    text = element_text(color = \"royalblue2\"),\n    axis.text = element_text(\n      color = \"royalblue2\"\n    )\n  )\n\n\n\n\n\n \n\n\n\n\n\n\nThe element axis.text has its own color set in the theme. Therefore it doesn’t inherit from text."
  },
  {
    "objectID": "slides/figure-design.html#horizontal-and-vertical-alignment",
    "href": "slides/figure-design.html#horizontal-and-vertical-alignment",
    "title": "Figure design",
    "section": "Horizontal and vertical alignment",
    "text": "Horizontal and vertical alignment\n\n\n\nggplot(penguins) +\n  aes(flipper_length_mm, body_mass_g) +\n  geom_point(aes(color = species)) +\n  theme_minimal_grid() +\n  theme(\n    axis.title.x = element_text(\n      # horizontal justification\n      # (0 = left)\n      hjust = 0\n    )\n  )"
  },
  {
    "objectID": "slides/figure-design.html#horizontal-and-vertical-alignment-1",
    "href": "slides/figure-design.html#horizontal-and-vertical-alignment-1",
    "title": "Figure design",
    "section": "Horizontal and vertical alignment",
    "text": "Horizontal and vertical alignment\n\n\n\nggplot(penguins) +\n  aes(flipper_length_mm, body_mass_g) +\n  geom_point(aes(color = species)) +\n  theme_minimal_grid() +\n  theme(\n    axis.title.x = element_text(\n      # horizontal justification\n      # (0.5 = center)\n      hjust = 0.5\n    )\n  )"
  },
  {
    "objectID": "slides/figure-design.html#horizontal-and-vertical-alignment-2",
    "href": "slides/figure-design.html#horizontal-and-vertical-alignment-2",
    "title": "Figure design",
    "section": "Horizontal and vertical alignment",
    "text": "Horizontal and vertical alignment\n\n\n\nggplot(penguins) +\n  aes(flipper_length_mm, body_mass_g) +\n  geom_point(aes(color = species)) +\n  theme_minimal_grid() +\n  theme(\n    axis.title.x = element_text(\n      # horizontal justification\n      # (1 = right)\n      hjust = 1\n    )\n  )"
  },
  {
    "objectID": "slides/figure-design.html#horizontal-and-vertical-alignment-3",
    "href": "slides/figure-design.html#horizontal-and-vertical-alignment-3",
    "title": "Figure design",
    "section": "Horizontal and vertical alignment",
    "text": "Horizontal and vertical alignment\n\n\n\nggplot(penguins) +\n  aes(flipper_length_mm, body_mass_g) +\n  geom_point(aes(color = species)) +\n  theme_minimal_grid() +\n  theme(\n    axis.text.y = element_text(\n      # vertical justification\n      # (0 = bottom)\n      vjust = 0\n    )\n  )"
  },
  {
    "objectID": "slides/figure-design.html#horizontal-and-vertical-alignment-4",
    "href": "slides/figure-design.html#horizontal-and-vertical-alignment-4",
    "title": "Figure design",
    "section": "Horizontal and vertical alignment",
    "text": "Horizontal and vertical alignment\n\n\n\nggplot(penguins) +\n  aes(flipper_length_mm, body_mass_g) +\n  geom_point(aes(color = species)) +\n  theme_minimal_grid() +\n  theme(\n    axis.text.y = element_text(\n      # vertical justification\n      # (0.5 = center)\n      vjust = 0.5\n    )\n  )"
  },
  {
    "objectID": "slides/figure-design.html#horizontal-and-vertical-alignment-5",
    "href": "slides/figure-design.html#horizontal-and-vertical-alignment-5",
    "title": "Figure design",
    "section": "Horizontal and vertical alignment",
    "text": "Horizontal and vertical alignment\n\n\n\nggplot(penguins) +\n  aes(flipper_length_mm, body_mass_g) +\n  geom_point(aes(color = species)) +\n  theme_minimal_grid() +\n  theme(\n    axis.text.y = element_text(\n      # vertical justification\n      # (1 = top)\n      vjust = 1\n    )\n  )"
  },
  {
    "objectID": "slides/figure-design.html#remove-elements-entirely-element_blank",
    "href": "slides/figure-design.html#remove-elements-entirely-element_blank",
    "title": "Figure design",
    "section": "Remove elements entirely: element_blank()",
    "text": "Remove elements entirely: element_blank()\n\n\n\nggplot(penguins) +\n  aes(flipper_length_mm, body_mass_g) +\n  geom_point(aes(color = species)) +\n  theme_minimal_grid() +\n  theme(\n    # all text gone\n    text = element_blank()\n  )"
  },
  {
    "objectID": "slides/figure-design.html#remove-elements-entirely-element_blank-1",
    "href": "slides/figure-design.html#remove-elements-entirely-element_blank-1",
    "title": "Figure design",
    "section": "Remove elements entirely: element_blank()",
    "text": "Remove elements entirely: element_blank()\n\n\n\nggplot(penguins) +\n  aes(flipper_length_mm, body_mass_g) +\n  geom_point(aes(color = species)) +\n  theme_minimal_grid() +\n  theme(\n    # no axis titles\n    axis.title = element_blank()\n  )"
  },
  {
    "objectID": "slides/figure-design.html#set-background-color-element_rect",
    "href": "slides/figure-design.html#set-background-color-element_rect",
    "title": "Figure design",
    "section": "Set background color: element_rect()",
    "text": "Set background color: element_rect()\n\n\n\nggplot(penguins) +\n  aes(flipper_length_mm, body_mass_g) +\n  geom_point(aes(color = species)) +\n  theme_minimal_grid() +\n  theme(\n    plot.background = element_rect(\n      fill = \"aliceblue\"\n    )\n  )"
  },
  {
    "objectID": "slides/figure-design.html#set-background-color-element_rect-1",
    "href": "slides/figure-design.html#set-background-color-element_rect-1",
    "title": "Figure design",
    "section": "Set background color: element_rect()",
    "text": "Set background color: element_rect()\n\n\n\nggplot(penguins) +\n  aes(flipper_length_mm, body_mass_g) +\n  geom_point(aes(color = species)) +\n  theme_minimal_grid() +\n  theme(\n    panel.background = element_rect(\n      fill = \"aliceblue\"\n    )\n  )"
  },
  {
    "objectID": "slides/figure-design.html#set-background-color-element_rect-2",
    "href": "slides/figure-design.html#set-background-color-element_rect-2",
    "title": "Figure design",
    "section": "Set background color: element_rect()",
    "text": "Set background color: element_rect()\n\n\n\nggplot(penguins) +\n  aes(flipper_length_mm, body_mass_g) +\n  geom_point(aes(color = species)) +\n  theme_minimal_grid() +\n  theme(\n    legend.box.background = element_rect(\n      fill = \"aliceblue\",\n      color = \"steelblue4\" # line color\n    )\n  )"
  },
  {
    "objectID": "slides/figure-design.html#set-background-color-element_rect-3",
    "href": "slides/figure-design.html#set-background-color-element_rect-3",
    "title": "Figure design",
    "section": "Set background color: element_rect()",
    "text": "Set background color: element_rect()\n\n\n\nggplot(penguins) +\n  aes(flipper_length_mm, body_mass_g) +\n  geom_point(aes(color = species)) +\n  theme_minimal_grid() +\n  theme(\n    legend.box.background = element_rect(\n      fill = \"aliceblue\",\n      color = \"steelblue4\" # line color\n    ),\n    legend.box.margin = margin(7, 7, 7, 7)\n  )"
  },
  {
    "objectID": "slides/figure-design.html#move-the-legend-legend.position",
    "href": "slides/figure-design.html#move-the-legend-legend.position",
    "title": "Figure design",
    "section": "Move the legend: legend.position",
    "text": "Move the legend: legend.position\n\n\n\nggplot(penguins) +\n  aes(flipper_length_mm, body_mass_g) +\n  geom_point(aes(color = species)) +\n  theme_minimal_grid() +\n  theme(\n    legend.box.background = element_rect(\n      fill = \"aliceblue\",\n      color = \"steelblue4\" # line color\n    ),\n    legend.box.margin = margin(7, 7, 7, 7),\n    # legend on top of plot\n    legend.position = \"top\"\n  )"
  },
  {
    "objectID": "slides/figure-design.html#move-the-legend-legend.position-1",
    "href": "slides/figure-design.html#move-the-legend-legend.position-1",
    "title": "Figure design",
    "section": "Move the legend: legend.position",
    "text": "Move the legend: legend.position\n\n\n\nggplot(penguins) +\n  aes(flipper_length_mm, body_mass_g) +\n  geom_point(aes(color = species)) +\n  theme_minimal_grid() +\n  theme(\n    legend.box.background = element_rect(\n      fill = \"aliceblue\",\n      color = \"steelblue4\" # line color\n    ),\n    legend.box.margin = margin(7, 7, 7, 7),\n    # legend inside plot\n    legend.position = \"inside\", \n    # relative position inside plot panel\n    legend.position.inside = c(0.98, 0.02),\n    # justification relative to position\n    legend.justification = c(1, 0)\n  )"
  },
  {
    "objectID": "slides/figure-design.html#further-reading",
    "href": "slides/figure-design.html#further-reading",
    "title": "Figure design",
    "section": "Further reading",
    "text": "Further reading\n\nFundamentals of Data Visualization: Chapter 23: Balance the data and the context\nData Visualization—A Practical Introduction: Chapter 8.3: Change the appearance of plots with themes\nggplot2 reference documentation: Complete themes\nggplot2 reference documentation: Modify components of a theme"
  },
  {
    "objectID": "slides/dimension-reduction-1.html#problem-how-do-we-visualize-datasets-with-many-variables",
    "href": "slides/dimension-reduction-1.html#problem-how-do-we-visualize-datasets-with-many-variables",
    "title": "Dimension reduction 1",
    "section": "Problem:How do we visualize datasets with many variables?",
    "text": "Problem:How do we visualize datasets with many variables?"
  },
  {
    "objectID": "slides/dimension-reduction-1.html#problem-how-do-we-visualize-datasets-with-many-variables-1",
    "href": "slides/dimension-reduction-1.html#problem-how-do-we-visualize-datasets-with-many-variables-1",
    "title": "Dimension reduction 1",
    "section": "Problem:How do we visualize datasets with many variables?",
    "text": "Problem:How do we visualize datasets with many variables?\nExample: blue jays dataset\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nsex\nbill_depth_mm\nbill_width_mm\nbill_length_mm\nhead_length_mm\nbody_mass_g\nskull_size_mm\n\n\n\n\nM\n8.26\n9.21\n25.92\n56.58\n73.30\n30.66\n\n\nM\n8.54\n8.76\n24.99\n56.36\n75.10\n31.38\n\n\nM\n8.39\n8.78\n26.07\n57.32\n70.25\n31.25\n\n\nF\n7.78\n9.30\n23.48\n53.77\n65.50\n30.29\n\n\nM\n8.71\n9.84\n25.47\n57.32\n74.90\n31.85\n\n\nF\n7.28\n9.30\n22.25\n52.25\n63.90\n30.00\n\n\nM\n8.74\n9.28\n25.35\n57.12\n75.10\n31.77\n\n\nM\n8.72\n9.94\n30.00\n60.67\n78.10\n30.67\n\n\nF\n8.20\n9.01\n22.78\n52.83\n64.00\n30.05\n\n\nF\n7.67\n9.31\n24.61\n54.94\n67.33\n30.33\n\n\nM\n8.78\n8.83\n25.72\n56.54\n76.40\n30.82\n\n\nF\n8.15\n8.67\n24.66\n54.69\n71.50\n30.03\n\n\nM\n8.62\n9.28\n24.50\n56.48\n78.20\n31.98\n\n\nF\n7.65\n9.11\n23.93\n55.75\n73.40\n31.83\n\n\nM\n7.96\n9.31\n25.62\n57.34\n77.00\n31.73\n\n\nF\n8.17\n8.49\n23.15\n53.05\n65.00\n29.90\n\n\nF\n8.13\n8.88\n25.00\n54.81\n75.20\n29.81\n\n\nM\n8.19\n9.98\n25.40\n58.70\n75.70\n33.30\n\n\nM\n8.49\n8.81\n25.93\n57.07\n78.40\n31.15\n\n\nM\n8.35\n9.57\n24.40\n55.79\n70.60\n31.39\n\n\nM\n8.53\n9.71\n26.30\n58.31\n74.70\n32.00\n\n\nM\n8.07\n8.38\n23.62\n54.51\n70.00\n30.89\n\n\nM\n8.23\n10.31\n26.66\n58.21\n75.40\n31.55\n\n\nF\n7.86\n9.21\n23.87\n54.09\n75.20\n30.22\n\n\nM\n8.42\n9.30\n24.98\n56.80\n74.50\n31.83\n\n\nF\n8.48\n9.64\n25.40\n56.82\n62.20\n31.42\n\n\nF\n8.22\n9.09\n23.00\n55.39\n72.30\n32.39\n\n\nF\n8.18\n9.44\n23.44\n54.21\n74.00\n30.77\n\n\nM\n8.23\n9.67\n24.86\n56.88\n73.73\n32.02\n\n\nF\n8.44\n9.19\n26.14\n56.37\n73.97\n30.24\n\n\nF\n7.21\n8.21\n23.13\n53.70\n66.80\n30.57\n\n\nM\n8.88\n9.58\n26.19\n55.96\n75.18\n29.77\n\n\nF\n8.58\n10.63\n24.75\n55.83\n78.30\n31.08\n\n\nF\n8.36\n9.63\n24.92\n55.47\n70.60\n30.55\n\n\nM\n8.20\n8.68\n24.24\n55.96\n72.10\n31.72\n\n\nM\n8.42\n10.24\n25.40\n56.59\n70.20\n31.19\n\n\nM\n8.60\n8.40\n25.50\n57.50\n74.00\n32.00\n\n\nM\n7.96\n8.62\n24.55\n56.01\n69.67\n31.46\n\n\nF\n7.58\n10.00\n23.42\n54.49\n69.40\n31.07\n\n\nF\n8.05\n9.35\n24.46\n56.04\n77.60\n31.58\n\n\nM\n8.34\n8.62\n23.92\n53.74\n60.17\n29.82\n\n\nF\n7.69\n9.01\n23.31\n54.13\n70.50\n30.82\n\n\nM\n8.88\n9.22\n25.68\n56.80\n67.50\n31.12\n\n\nM\n8.55\n9.03\n26.55\n57.86\n75.95\n31.31\n\n\nF\n8.42\n9.49\n26.30\n56.50\n79.50\n30.20\n\n\nM\n8.54\n8.96\n25.73\n56.82\n77.50\n31.09\n\n\nM\n8.54\n9.40\n24.29\n56.35\n79.20\n32.06\n\n\nF\n7.57\n9.32\n23.48\n54.31\n65.30\n30.83\n\n\nM\n8.40\n8.20\n25.70\n56.40\n69.00\n30.70\n\n\nF\n8.11\n8.37\n24.07\n53.04\n65.60\n28.97\n\n\nF\n8.19\n9.38\n24.93\n55.58\n67.83\n30.64\n\n\nF\n8.46\n9.69\n25.30\n56.84\n75.70\n31.54\n\n\nM\n8.58\n9.63\n26.12\n57.00\n72.60\n30.88\n\n\nF\n7.80\n8.74\n23.89\n53.74\n58.80\n29.85\n\n\nF\n8.10\n8.44\n23.75\n55.74\n70.90\n32.00\n\n\nF\n8.70\n8.91\n25.46\n55.37\n66.30\n29.91\n\n\nM\n8.82\n8.60\n25.46\n56.86\n73.90\n31.40\n\n\nM\n8.39\n9.12\n26.58\n57.64\n71.35\n31.06\n\n\nM\n7.89\n9.07\n26.12\n57.86\n73.90\n31.74\n\n\nM\n7.93\n8.72\n24.93\n55.02\n67.20\n30.09\n\n\nM\n8.86\n10.02\n25.04\n57.30\n73.00\n32.26\n\n\nM\n9.00\n9.40\n25.50\n56.90\n74.00\n31.40\n\n\nF\n8.00\n8.90\n23.60\n52.80\n63.70\n29.20\n\n\nF\n8.20\n9.00\n25.00\n54.20\n72.80\n29.20\n\n\nM\n8.70\n9.80\n25.60\n57.30\n76.30\n31.70\n\n\nF\n7.80\n8.00\n23.10\n53.90\n66.00\n30.80\n\n\nM\n8.20\n9.90\n24.40\n56.70\n74.00\n32.30\n\n\nM\n8.20\n9.50\n24.00\n56.30\n76.30\n32.30\n\n\nM\n8.60\n9.60\n23.70\n55.50\n71.30\n31.80\n\n\nF\n7.30\n9.90\n22.40\n53.90\n65.00\n31.50\n\n\nM\n8.40\n9.40\n25.00\n56.10\n73.80\n31.10\n\n\nF\n8.00\n9.30\n23.40\n54.00\n69.00\n30.60\n\n\nM\n8.30\n9.20\n24.30\n54.90\n72.10\n30.60\n\n\nM\n8.60\n9.80\n26.00\n59.20\n80.90\n33.20\n\n\nF\n8.30\n9.00\n25.70\n55.00\n68.50\n29.30\n\n\nF\n8.20\n9.70\n24.60\n54.40\n70.00\n29.80\n\n\nM\n8.50\n9.60\n25.50\n56.70\n75.90\n31.20\n\n\nM\n8.20\n9.30\n24.90\n55.50\n70.00\n30.60\n\n\nF\n8.30\n8.20\n23.70\n53.60\n69.00\n29.90\n\n\nM\n8.80\n9.70\n25.30\n56.60\n75.80\n31.30\n\n\nM\n8.20\n8.10\n25.90\n57.50\n69.70\n31.60\n\n\nM\n8.80\n9.80\n27.30\n56.20\n65.50\n28.90\n\n\nF\n7.60\n8.30\n24.80\n56.20\n67.90\n31.40\n\n\nF\n8.80\n9.70\n25.50\n56.70\n81.50\n31.20\n\n\nM\n8.56\n9.20\n26.62\n56.48\n74.00\n29.86\n\n\nM\n8.92\n9.22\n24.78\n56.45\n71.50\n31.67\n\n\nF\n7.74\n9.27\n25.05\n55.76\n66.10\n30.71\n\n\nF\n7.91\n9.38\n25.73\n55.70\n69.80\n29.97\n\n\nM\n8.72\n9.25\n24.30\n54.76\n68.50\n30.46\n\n\nF\n7.55\n8.62\n23.55\n52.74\n70.00\n29.19\n\n\nM\n8.43\n9.27\n26.32\n56.44\n66.75\n30.12\n\n\nM\n8.20\n9.28\n26.27\n58.50\n76.50\n32.23\n\n\nF\n7.62\n9.88\n25.71\n55.97\n69.30\n30.26\n\n\nM\n8.51\n9.64\n25.91\n55.64\n67.80\n29.73\n\n\nF\n8.21\n9.21\n23.60\n53.88\n75.50\n30.28\n\n\nF\n7.86\n9.39\n23.36\n54.04\n73.25\n30.69\n\n\nM\n8.58\n9.73\n27.04\n57.56\n71.90\n30.52\n\n\nM\n8.59\n9.97\n25.88\n56.00\n79.55\n30.12\n\n\nF\n7.72\n8.97\n22.88\n53.03\n66.75\n30.15\n\n\nF\n7.58\n9.04\n24.02\n55.65\n73.20\n31.63\n\n\nF\n8.40\n8.40\n23.90\n54.70\n72.35\n30.80\n\n\nF\n7.90\n8.48\n22.78\n51.60\n64.00\n28.82\n\n\nM\n8.12\n9.67\n24.90\n55.91\n73.50\n31.01\n\n\nF\n7.92\n9.16\n23.92\n54.69\n68.90\n30.77\n\n\nF\n7.96\n9.09\n24.33\n54.58\n73.80\n30.25\n\n\nM\n8.10\n9.10\n25.90\n57.10\n77.40\n31.20\n\n\nF\n7.50\n9.57\n24.60\n53.80\n61.40\n29.20\n\n\nM\n8.15\n9.72\n26.05\n56.85\n73.40\n30.80\n\n\nF\n7.71\n8.58\n25.06\n54.15\n61.20\n29.09\n\n\nF\n8.05\n9.25\n25.20\n56.25\n69.65\n31.05\n\n\nF\n8.57\n8.97\n25.15\n54.80\n77.00\n29.64\n\n\nF\n8.69\n9.43\n24.94\n56.09\n72.20\n31.15\n\n\nF\n8.02\n8.62\n24.09\n55.82\n76.55\n31.73\n\n\nF\n8.57\n10.82\n23.68\n53.95\n68.25\n30.27\n\n\nM\n8.33\n9.27\n25.78\n56.71\n71.50\n30.93\n\n\nM\n8.43\n9.23\n25.28\n57.25\n77.53\n31.97\n\n\nM\n8.20\n9.06\n24.22\n54.58\n68.95\n30.36\n\n\nF\n8.30\n9.28\n23.92\n56.28\n78.80\n32.36\n\n\nM\n8.70\n9.12\n24.62\n56.61\n77.00\n31.99\n\n\nM\n7.96\n9.80\n25.07\n55.68\n68.00\n30.61\n\n\nF\n7.90\n9.30\n23.60\n53.90\n63.90\n30.30\n\n\nF\n7.63\n8.56\n24.29\n54.19\n70.45\n29.90\n\n\nF\n7.90\n8.00\n23.00\n52.70\n66.00\n29.70"
  },
  {
    "objectID": "slides/dimension-reduction-1.html#all-by-all-scatter-plots-are-hard-to-read",
    "href": "slides/dimension-reduction-1.html#all-by-all-scatter-plots-are-hard-to-read",
    "title": "Dimension reduction 1",
    "section": "All-by-all scatter plots are hard to read",
    "text": "All-by-all scatter plots are hard to read"
  },
  {
    "objectID": "slides/dimension-reduction-1.html#solution-dimension-reduction",
    "href": "slides/dimension-reduction-1.html#solution-dimension-reduction",
    "title": "Dimension reduction 1",
    "section": "Solution: Dimension reduction",
    "text": "Solution: Dimension reduction\n\n\nWe project the data into a lower-dimensional space\nCommonly-used method:Principal Components Analysis (PCA)\nPCA is a rotation of the coordinate system"
  },
  {
    "objectID": "slides/dimension-reduction-1.html#principal-components-analysis-pca",
    "href": "slides/dimension-reduction-1.html#principal-components-analysis-pca",
    "title": "Dimension reduction 1",
    "section": "Principal Components Analysis (PCA)",
    "text": "Principal Components Analysis (PCA)"
  },
  {
    "objectID": "slides/dimension-reduction-1.html#principal-components-analysis-pca-1",
    "href": "slides/dimension-reduction-1.html#principal-components-analysis-pca-1",
    "title": "Dimension reduction 1",
    "section": "Principal Components Analysis (PCA)",
    "text": "Principal Components Analysis (PCA)"
  },
  {
    "objectID": "slides/dimension-reduction-1.html#principal-components-analysis-pca-2",
    "href": "slides/dimension-reduction-1.html#principal-components-analysis-pca-2",
    "title": "Dimension reduction 1",
    "section": "Principal Components Analysis (PCA)",
    "text": "Principal Components Analysis (PCA)\n\n\n\n\n\n \n\n\n\n\n\nPCA aligns the major axes with directions of maximum variation in the data"
  },
  {
    "objectID": "slides/dimension-reduction-1.html#pca-analysis-of-the-entire-blue-jays-dataset",
    "href": "slides/dimension-reduction-1.html#pca-analysis-of-the-entire-blue-jays-dataset",
    "title": "Dimension reduction 1",
    "section": "PCA analysis of the entire blue jays dataset",
    "text": "PCA analysis of the entire blue jays dataset\n\n\n\n\n\n \n\n\n\n\n\nMale and female birds separate along PC1"
  },
  {
    "objectID": "slides/dimension-reduction-1.html#the-rotation-matrix-allows-us-to-interpret-the-pcs",
    "href": "slides/dimension-reduction-1.html#the-rotation-matrix-allows-us-to-interpret-the-pcs",
    "title": "Dimension reduction 1",
    "section": "The rotation matrix allows us to interpret the PCs",
    "text": "The rotation matrix allows us to interpret the PCs\n\n\n\n\n\n \n\n\n\n\n\nAll variables contribute negatively to PC1; it represents the overall size of the bird"
  },
  {
    "objectID": "slides/dimension-reduction-1.html#the-rotation-matrix-allows-us-to-interpret-the-pcs-1",
    "href": "slides/dimension-reduction-1.html#the-rotation-matrix-allows-us-to-interpret-the-pcs-1",
    "title": "Dimension reduction 1",
    "section": "The rotation matrix allows us to interpret the PCs",
    "text": "The rotation matrix allows us to interpret the PCs\n\n\n\n\n\n \n\n\n\n\n\nPC2 represents the difference between bill length and skull size"
  },
  {
    "objectID": "slides/dimension-reduction-1.html#the-rotation-matrix-allows-us-to-interpret-the-pcs-2",
    "href": "slides/dimension-reduction-1.html#the-rotation-matrix-allows-us-to-interpret-the-pcs-2",
    "title": "Dimension reduction 1",
    "section": "The rotation matrix allows us to interpret the PCs",
    "text": "The rotation matrix allows us to interpret the PCs\n\n\n\n\n\n \n\n\n\n\n\n\nMale birds are larger than female birds\nBoth male and female birds have long and short bills relative to their overall size"
  },
  {
    "objectID": "slides/dimension-reduction-1.html#we-also-plot-the-variance-explained-by-each-pc",
    "href": "slides/dimension-reduction-1.html#we-also-plot-the-variance-explained-by-each-pc",
    "title": "Dimension reduction 1",
    "section": "We also plot the variance explained by each PC",
    "text": "We also plot the variance explained by each PC\n\n\n\n\n\n \n\n\n\n\n\nPC 1 captures over 50% of the total variance in the dataset"
  },
  {
    "objectID": "slides/dimension-reduction-1.html#we-also-plot-the-variance-explained-by-each-pc-1",
    "href": "slides/dimension-reduction-1.html#we-also-plot-the-variance-explained-by-each-pc-1",
    "title": "Dimension reduction 1",
    "section": "We also plot the variance explained by each PC",
    "text": "We also plot the variance explained by each PC\n\n\n\n\n\n \n\n\n\n\n\nOverall bird size explains &gt;50% of the variation in the various measurements"
  },
  {
    "objectID": "slides/dimension-reduction-1.html#the-mathematics-of-pca",
    "href": "slides/dimension-reduction-1.html#the-mathematics-of-pca",
    "title": "Dimension reduction 1",
    "section": "The mathematics of PCA",
    "text": "The mathematics of PCA\nVariance of one variable \\(X\\):\n\\[\\text{Var}(X) = \\frac{1}{n}\\sum_j (\\bar x - x_j)^2 = \\sigma_X^2\\]\n\nCovariance of two variables \\(X\\) and \\(Y\\):\n\\[\\text{Cov}(X, Y) = \\frac{1}{n}\\sum_j (\\bar x - x_j)(\\bar y - y_j) = \\sigma_{XY}\\]"
  },
  {
    "objectID": "slides/dimension-reduction-1.html#the-mathematics-of-pca-1",
    "href": "slides/dimension-reduction-1.html#the-mathematics-of-pca-1",
    "title": "Dimension reduction 1",
    "section": "The mathematics of PCA",
    "text": "The mathematics of PCA\nCovariance matrix of \\(n\\) variables \\(X_1 \\dots X_n\\):\n\\[\\text{C} = \\left(\n\\begin{array}{cccc}\n  \\sigma_{11}^2 & \\sigma_{12} & \\dots & \\sigma_{1n}  \\\\\n  \\sigma_{21} & \\sigma_{22}^2 & \\dots & \\sigma_{2n} \\\\\n  \\vdots & \\vdots & \\ddots & \\vdots \\\\\n  \\sigma_{n1} & \\sigma_{n2} & \\dots & \\sigma_{nn}^2  \\\\\n\\end{array}\n\\right)\\]"
  },
  {
    "objectID": "slides/dimension-reduction-1.html#the-mathematics-of-pca-2",
    "href": "slides/dimension-reduction-1.html#the-mathematics-of-pca-2",
    "title": "Dimension reduction 1",
    "section": "The mathematics of PCA",
    "text": "The mathematics of PCA\nPCA diagonalizes the covariance matrix \\(\\text{C}\\):\n\\[\\begin{eqnarray}\n\\text{C} & = & \\text{U}\\text{D}\\text{U}^\\text{T}\\\\\n& = & \\text{U}\\left(\n\\begin{array}{cccc}\n  \\lambda_{1}^2 & 0 & \\dots & 0  \\\\\n  0 & \\lambda_{2}^2 & \\dots & 0  \\\\\n  \\vdots & \\vdots & \\ddots & \\vdots \\\\\n  0 & 0 & \\dots & \\lambda_{n}^2  \\\\\n\\end{array}\n\\right)\\text{U}^\\text{T}\n\\end{eqnarray}\\]\n\n\\(\\text{U}\\): rotation matrix\n\n\n\\(\\text{D}\\): diagonal matrix\n\n\n\\(\\lambda_j^2\\): eigenvalues (= variance explained by each component)"
  },
  {
    "objectID": "slides/dimension-reduction-1.html#the-mathematics-of-pca-3",
    "href": "slides/dimension-reduction-1.html#the-mathematics-of-pca-3",
    "title": "Dimension reduction 1",
    "section": "The mathematics of PCA",
    "text": "The mathematics of PCA\nPCA diagonalizes the covariance matrix \\(\\text{C}\\):\n\\[\\begin{eqnarray}\n\\text{C} & = & \\text{U}\\text{D}\\text{U}^\\text{T}\\\\\n& = & \\text{U}\\left(\n\\begin{array}{cccc}\n  \\lambda_{1}^2 & 0 & \\dots & 0  \\\\\n  0 & \\lambda_{2}^2 & \\dots & 0  \\\\\n  \\vdots & \\vdots & \\ddots & \\vdots \\\\\n  0 & 0 & \\dots & \\lambda_{n}^2  \\\\\n\\end{array}\n\\right)\\text{U}^\\text{T}\n\\end{eqnarray}\\]\nThe covariances between components are all 0\nComponents are uncorrelated"
  },
  {
    "objectID": "slides/dimension-reduction-1.html#the-components-are-uncorrelated",
    "href": "slides/dimension-reduction-1.html#the-components-are-uncorrelated",
    "title": "Dimension reduction 1",
    "section": "The components are uncorrelated",
    "text": "The components are uncorrelated"
  },
  {
    "objectID": "slides/dimension-reduction-1.html#getting-the-data",
    "href": "slides/dimension-reduction-1.html#getting-the-data",
    "title": "Dimension reduction 1",
    "section": "Getting the data",
    "text": "Getting the data\nWe’ll be working with the blue_jays dataset:\n\n\nblue_jays &lt;- read_csv(\"https://wilkelab.org/DSC385/datasets/blue_jays.csv\")\n\nblue_jays\n\n# A tibble: 123 × 8\n   bird_id    sex   bill_depth_mm bill_width_mm bill_length_mm head_length_mm\n   &lt;chr&gt;      &lt;chr&gt;         &lt;dbl&gt;         &lt;dbl&gt;          &lt;dbl&gt;          &lt;dbl&gt;\n 1 0000-00000 M              8.26          9.21           25.9           56.6\n 2 1142-05901 M              8.54          8.76           25.0           56.4\n 3 1142-05905 M              8.39          8.78           26.1           57.3\n 4 1142-05907 F              7.78          9.3            23.5           53.8\n 5 1142-05909 M              8.71          9.84           25.5           57.3\n 6 1142-05911 F              7.28          9.3            22.2           52.2\n 7 1142-05912 M              8.74          9.28           25.4           57.1\n 8 1142-05914 M              8.72          9.94           30             60.7\n 9 1142-05917 F              8.2           9.01           22.8           52.8\n10 1142-05920 F              7.67          9.31           24.6           54.9\n# ℹ 113 more rows\n# ℹ 2 more variables: body_mass_g &lt;dbl&gt;, skull_size_mm &lt;dbl&gt;"
  },
  {
    "objectID": "slides/dimension-reduction-1.html#prerequisite-scaling-of-numeric-columns",
    "href": "slides/dimension-reduction-1.html#prerequisite-scaling-of-numeric-columns",
    "title": "Dimension reduction 1",
    "section": "Prerequisite: Scaling of numeric columns",
    "text": "Prerequisite: Scaling of numeric columns\n\nPlot without scaling\n\n\n\n\nblue_jays |&gt;\n  ggplot() +\n  aes(skull_size_mm, head_length_mm) + \n  geom_point(aes(color = sex))"
  },
  {
    "objectID": "slides/dimension-reduction-1.html#prerequisite-scaling-of-numeric-columns-1",
    "href": "slides/dimension-reduction-1.html#prerequisite-scaling-of-numeric-columns-1",
    "title": "Dimension reduction 1",
    "section": "Prerequisite: Scaling of numeric columns",
    "text": "Prerequisite: Scaling of numeric columns\n\nPlot with scaling\n\n\n\n\nblue_jays |&gt;\n  # scale all numeric columns\n  mutate(across(where(is.numeric), scale)) |&gt;\n  ggplot() +\n  aes(skull_size_mm, head_length_mm) + \n  geom_point(aes(color = sex))"
  },
  {
    "objectID": "slides/dimension-reduction-1.html#we-perform-a-pca-with-prcomp",
    "href": "slides/dimension-reduction-1.html#we-perform-a-pca-with-prcomp",
    "title": "Dimension reduction 1",
    "section": "We perform a PCA with prcomp()",
    "text": "We perform a PCA with prcomp()\n\n\nblue_jays |&gt; \n  select(where(is.numeric)) |&gt; # retain only numeric columns\n  scale() |&gt;                   # scale to zero mean and unit variance\n  prcomp()                     # do PCA\n\nStandard deviations (1, .., p=6):\n[1] 1.801735505 1.001664889 0.898426518 0.736457067 0.633147386 0.001337779\n\nRotation (n x k) = (6 x 6):\n                      PC1          PC2         PC3         PC4          PC5\nbill_depth_mm  -0.3969857  0.342262537 -0.15267580  0.70664985  0.450105291\nbill_width_mm  -0.2810408  0.044926541  0.95822204  0.02838445 -0.001569506\nbill_length_mm -0.4209312  0.544180448 -0.13629166 -0.43921746 -0.141941341\nhead_length_mm -0.5231576 -0.007875712 -0.14075388 -0.40403900  0.131442872\nbody_mass_g    -0.4308880 -0.277787878 -0.12517605  0.35651048 -0.770973799\nskull_size_mm  -0.3561979 -0.712374529 -0.06666709 -0.12876761  0.406912265\n                         PC6\nbill_depth_mm  -0.0001782600\nbill_width_mm  -0.0001746131\nbill_length_mm -0.5431849028\nhead_length_mm  0.7251949252\nbody_mass_g     0.0002123608\nskull_size_mm  -0.4231339911"
  },
  {
    "objectID": "slides/dimension-reduction-1.html#calculate-the-components-and-plot",
    "href": "slides/dimension-reduction-1.html#calculate-the-components-and-plot",
    "title": "Dimension reduction 1",
    "section": "Calculate the components and plot",
    "text": "Calculate the components and plot\n\nFirst we run the PCA and store results as pca_fit:\n\npca_fit &lt;- blue_jays |&gt; \n  select(where(is.numeric)) |&gt; # retain only numeric columns\n  scale() |&gt;                   # scale to zero mean and unit variance\n  prcomp()                     # do PCA\n\n\n\nThen we add PC coordinates into original dataset and plot:\nlibrary(broom)  # for augment(), tidy()\n\npca_fit |&gt;\n  # add PCs to the original dataset\n  augment(blue_jays) |&gt;\n  ggplot(aes(.fittedPC1, .fittedPC2)) +\n  geom_point(aes(color = sex))"
  },
  {
    "objectID": "slides/dimension-reduction-1.html#calculate-the-components-and-plot-1",
    "href": "slides/dimension-reduction-1.html#calculate-the-components-and-plot-1",
    "title": "Dimension reduction 1",
    "section": "Calculate the components and plot",
    "text": "Calculate the components and plot\n\nPlot PC 2 against PC 1\n\n\n\n\npca_fit |&gt;\n  # add PCs to the original dataset\n  augment(blue_jays) |&gt;\n  ggplot(aes(.fittedPC1, .fittedPC2)) +\n  geom_point(aes(color = sex))"
  },
  {
    "objectID": "slides/dimension-reduction-1.html#calculate-the-components-and-plot-2",
    "href": "slides/dimension-reduction-1.html#calculate-the-components-and-plot-2",
    "title": "Dimension reduction 1",
    "section": "Calculate the components and plot",
    "text": "Calculate the components and plot\n\nPlot PC 3 against PC 2\n\n\n\n\npca_fit |&gt;\n  # add PCs to the original dataset\n  augment(blue_jays) |&gt;\n  ggplot(aes(.fittedPC2, .fittedPC3)) +\n  geom_point(aes(color = sex))"
  },
  {
    "objectID": "slides/dimension-reduction-1.html#plot-the-rotation-matrix",
    "href": "slides/dimension-reduction-1.html#plot-the-rotation-matrix",
    "title": "Dimension reduction 1",
    "section": "Plot the rotation matrix",
    "text": "Plot the rotation matrix\n\n\n\narrow_style &lt;- arrow(\n  angle = 20, length = grid::unit(8, \"pt\"),\n  ends = \"first\", type = \"closed\"\n)\n\npca_fit |&gt;\n  # extract rotation matrix\n  tidy(matrix = \"rotation\") |&gt;\n  pivot_wider(\n    names_from = \"PC\", values_from = \"value\",\n    names_prefix = \"PC\"\n  ) |&gt;\n  ggplot(aes(PC1, PC2)) +\n  geom_segment(\n    xend = 0, yend = 0,\n    arrow = arrow_style\n  ) +\n  geom_text(aes(label = column), hjust = 1) +\n  coord_fixed(\n    xlim = c(-1.5, 0.5),\n    ylim = c(-1, 1) \n  )"
  },
  {
    "objectID": "slides/dimension-reduction-1.html#plot-the-variance-explained",
    "href": "slides/dimension-reduction-1.html#plot-the-variance-explained",
    "title": "Dimension reduction 1",
    "section": "Plot the variance explained",
    "text": "Plot the variance explained\n\n\n\npca_fit |&gt;\n  # extract eigenvalues\n  tidy(matrix = \"eigenvalues\") |&gt;\n  ggplot(aes(PC, percent)) + \n  geom_col() + \n  scale_x_continuous(\n    # create one axis tick per PC\n    breaks = 1:6\n  ) +\n  scale_y_continuous(\n    name = \"variance explained\",\n    # format y axis ticks as percent values\n    label = scales::label_percent(accuracy = 1)\n  )"
  },
  {
    "objectID": "slides/dimension-reduction-1.html#further-reading",
    "href": "slides/dimension-reduction-1.html#further-reading",
    "title": "Dimension reduction 1",
    "section": "Further reading",
    "text": "Further reading\n\nFundamentals of Data Visualization: Chapter 12.3: Dimension reduction\nBlogpost on PCA: Principal Component Analysis Explained Visually\nPCA tutorial with mathematical background: A Tutorial on Principal Component Analysis"
  },
  {
    "objectID": "slides/data-wrangling-1.html#elementary-data-manipulations",
    "href": "slides/data-wrangling-1.html#elementary-data-manipulations",
    "title": "Data wrangling 1",
    "section": "Elementary data manipulations",
    "text": "Elementary data manipulations\n\n\nPick rows: filter()\nPick columns: select()\nSort rows: arrange()\nCount things: count()\nMake new columns: mutate()"
  },
  {
    "objectID": "slides/data-wrangling-1.html#the-pipe-feeds-data-into-functions",
    "href": "slides/data-wrangling-1.html#the-pipe-feeds-data-into-functions",
    "title": "Data wrangling 1",
    "section": "The pipe |> feeds data into functions",
    "text": "The pipe |&gt; feeds data into functions\n\n\nlibrary(palmerpenguins) # loads the `penguins` dataset\n\nhead(penguins)\n\n# A tibble: 6 × 8\n  species island    bill_length_mm bill_depth_mm flipper_length_mm body_mass_g\n  &lt;fct&gt;   &lt;fct&gt;              &lt;dbl&gt;         &lt;dbl&gt;             &lt;int&gt;       &lt;int&gt;\n1 Adelie  Torgersen           39.1          18.7               181        3750\n2 Adelie  Torgersen           39.5          17.4               186        3800\n3 Adelie  Torgersen           40.3          18                 195        3250\n4 Adelie  Torgersen           NA            NA                  NA          NA\n5 Adelie  Torgersen           36.7          19.3               193        3450\n6 Adelie  Torgersen           39.3          20.6               190        3650\n# ℹ 2 more variables: sex &lt;fct&gt;, year &lt;int&gt;"
  },
  {
    "objectID": "slides/data-wrangling-1.html#the-pipe-feeds-data-into-functions-1",
    "href": "slides/data-wrangling-1.html#the-pipe-feeds-data-into-functions-1",
    "title": "Data wrangling 1",
    "section": "The pipe |> feeds data into functions",
    "text": "The pipe |&gt; feeds data into functions\n\n\nlibrary(palmerpenguins) # loads the `penguins` dataset\n\n# head(penguins)\npenguins |&gt;\n  head()\n\n# A tibble: 6 × 8\n  species island    bill_length_mm bill_depth_mm flipper_length_mm body_mass_g\n  &lt;fct&gt;   &lt;fct&gt;              &lt;dbl&gt;         &lt;dbl&gt;             &lt;int&gt;       &lt;int&gt;\n1 Adelie  Torgersen           39.1          18.7               181        3750\n2 Adelie  Torgersen           39.5          17.4               186        3800\n3 Adelie  Torgersen           40.3          18                 195        3250\n4 Adelie  Torgersen           NA            NA                  NA          NA\n5 Adelie  Torgersen           36.7          19.3               193        3450\n6 Adelie  Torgersen           39.3          20.6               190        3650\n# ℹ 2 more variables: sex &lt;fct&gt;, year &lt;int&gt;"
  },
  {
    "objectID": "slides/data-wrangling-1.html#the-pipe-feeds-data-into-functions-2",
    "href": "slides/data-wrangling-1.html#the-pipe-feeds-data-into-functions-2",
    "title": "Data wrangling 1",
    "section": "The pipe |> feeds data into functions",
    "text": "The pipe |&gt; feeds data into functions\n\n\nggplot(penguins, aes(bill_length_mm, bill_depth_mm, color = species)) + \n  geom_point()"
  },
  {
    "objectID": "slides/data-wrangling-1.html#the-pipe-feeds-data-into-functions-3",
    "href": "slides/data-wrangling-1.html#the-pipe-feeds-data-into-functions-3",
    "title": "Data wrangling 1",
    "section": "The pipe |> feeds data into functions",
    "text": "The pipe |&gt; feeds data into functions\n\n\npenguins |&gt;\n  ggplot(aes(bill_length_mm, bill_depth_mm, color = species)) +\n  geom_point()"
  },
  {
    "objectID": "slides/data-wrangling-1.html#old-school-magrittr-pipe",
    "href": "slides/data-wrangling-1.html#old-school-magrittr-pipe",
    "title": "Data wrangling 1",
    "section": "Old-school “magrittr” pipe: %>%",
    "text": "Old-school “magrittr” pipe: %&gt;%\n\n\npenguins %&gt;%\n  ggplot(aes(bill_length_mm, bill_depth_mm, color = species)) +\n  geom_point()"
  },
  {
    "objectID": "slides/data-wrangling-1.html#which-to-use-native-pipe-or-old-school-pipe",
    "href": "slides/data-wrangling-1.html#which-to-use-native-pipe-or-old-school-pipe",
    "title": "Data wrangling 1",
    "section": "Which to use? Native pipe or old-school pipe?",
    "text": "Which to use? Native pipe or old-school pipe?\n\n\nThe native pipe |&gt; is the future. I’ll be using it throughout.\nThe magrittr %&gt;% works fine. You can use it if you like to."
  },
  {
    "objectID": "slides/data-wrangling-1.html#pick-rows-from-a-table-filter",
    "href": "slides/data-wrangling-1.html#pick-rows-from-a-table-filter",
    "title": "Data wrangling 1",
    "section": "Pick rows from a table: filter()",
    "text": "Pick rows from a table: filter()"
  },
  {
    "objectID": "slides/data-wrangling-1.html#filter-out-penguins-of-species-gentoo",
    "href": "slides/data-wrangling-1.html#filter-out-penguins-of-species-gentoo",
    "title": "Data wrangling 1",
    "section": "Filter out penguins of species Gentoo",
    "text": "Filter out penguins of species Gentoo\n\n\npenguins |&gt;\n  filter(species == \"Gentoo\")\n\n# A tibble: 124 × 8\n   species island bill_length_mm bill_depth_mm flipper_length_mm body_mass_g\n   &lt;fct&gt;   &lt;fct&gt;           &lt;dbl&gt;         &lt;dbl&gt;             &lt;int&gt;       &lt;int&gt;\n 1 Gentoo  Biscoe           46.1          13.2               211        4500\n 2 Gentoo  Biscoe           50            16.3               230        5700\n 3 Gentoo  Biscoe           48.7          14.1               210        4450\n 4 Gentoo  Biscoe           50            15.2               218        5700\n 5 Gentoo  Biscoe           47.6          14.5               215        5400\n 6 Gentoo  Biscoe           46.5          13.5               210        4550\n 7 Gentoo  Biscoe           45.4          14.6               211        4800\n 8 Gentoo  Biscoe           46.7          15.3               219        5200\n 9 Gentoo  Biscoe           43.3          13.4               209        4400\n10 Gentoo  Biscoe           46.8          15.4               215        5150\n# ℹ 114 more rows\n# ℹ 2 more variables: sex &lt;fct&gt;, year &lt;int&gt;"
  },
  {
    "objectID": "slides/data-wrangling-1.html#filter-out-penguins-with-bill-length-50-mm",
    "href": "slides/data-wrangling-1.html#filter-out-penguins-with-bill-length-50-mm",
    "title": "Data wrangling 1",
    "section": "Filter out penguins with bill length > 50 mm",
    "text": "Filter out penguins with bill length &gt; 50 mm\n\n\npenguins |&gt;\n  filter(bill_length_mm &gt; 50)\n\n# A tibble: 52 × 8\n   species island bill_length_mm bill_depth_mm flipper_length_mm body_mass_g\n   &lt;fct&gt;   &lt;fct&gt;           &lt;dbl&gt;         &lt;dbl&gt;             &lt;int&gt;       &lt;int&gt;\n 1 Gentoo  Biscoe           50.2          14.3               218        5700\n 2 Gentoo  Biscoe           59.6          17                 230        6050\n 3 Gentoo  Biscoe           50.5          15.9               222        5550\n 4 Gentoo  Biscoe           50.5          15.9               225        5400\n 5 Gentoo  Biscoe           50.1          15                 225        5000\n 6 Gentoo  Biscoe           50.4          15.3               224        5550\n 7 Gentoo  Biscoe           54.3          15.7               231        5650\n 8 Gentoo  Biscoe           50.7          15                 223        5550\n 9 Gentoo  Biscoe           51.1          16.3               220        6000\n10 Gentoo  Biscoe           52.5          15.6               221        5450\n# ℹ 42 more rows\n# ℹ 2 more variables: sex &lt;fct&gt;, year &lt;int&gt;"
  },
  {
    "objectID": "slides/data-wrangling-1.html#pick-columns-from-a-table-select",
    "href": "slides/data-wrangling-1.html#pick-columns-from-a-table-select",
    "title": "Data wrangling 1",
    "section": "Pick columns from a table: select()",
    "text": "Pick columns from a table: select()"
  },
  {
    "objectID": "slides/data-wrangling-1.html#pick-columns-species-island-and-sex",
    "href": "slides/data-wrangling-1.html#pick-columns-species-island-and-sex",
    "title": "Data wrangling 1",
    "section": "Pick columns species, island, and sex",
    "text": "Pick columns species, island, and sex\n\n\npenguins |&gt;\n  select(species, island, sex)\n\n# A tibble: 344 × 3\n   species island    sex   \n   &lt;fct&gt;   &lt;fct&gt;     &lt;fct&gt; \n 1 Adelie  Torgersen male  \n 2 Adelie  Torgersen female\n 3 Adelie  Torgersen female\n 4 Adelie  Torgersen &lt;NA&gt;  \n 5 Adelie  Torgersen female\n 6 Adelie  Torgersen male  \n 7 Adelie  Torgersen female\n 8 Adelie  Torgersen male  \n 9 Adelie  Torgersen &lt;NA&gt;  \n10 Adelie  Torgersen &lt;NA&gt;  \n# ℹ 334 more rows"
  },
  {
    "objectID": "slides/data-wrangling-1.html#sort-the-rows-in-a-table-arrange",
    "href": "slides/data-wrangling-1.html#sort-the-rows-in-a-table-arrange",
    "title": "Data wrangling 1",
    "section": "Sort the rows in a table: arrange()",
    "text": "Sort the rows in a table: arrange()"
  },
  {
    "objectID": "slides/data-wrangling-1.html#sort-penguins-by-bill-length-ascending",
    "href": "slides/data-wrangling-1.html#sort-penguins-by-bill-length-ascending",
    "title": "Data wrangling 1",
    "section": "Sort penguins by bill length, ascending",
    "text": "Sort penguins by bill length, ascending\n\n\npenguins |&gt;\n  arrange(bill_length_mm)\n\n# A tibble: 344 × 8\n   species island    bill_length_mm bill_depth_mm flipper_length_mm body_mass_g\n   &lt;fct&gt;   &lt;fct&gt;              &lt;dbl&gt;         &lt;dbl&gt;             &lt;int&gt;       &lt;int&gt;\n 1 Adelie  Dream               32.1          15.5               188        3050\n 2 Adelie  Dream               33.1          16.1               178        2900\n 3 Adelie  Torgersen           33.5          19                 190        3600\n 4 Adelie  Dream               34            17.1               185        3400\n 5 Adelie  Torgersen           34.1          18.1               193        3475\n 6 Adelie  Torgersen           34.4          18.4               184        3325\n 7 Adelie  Biscoe              34.5          18.1               187        2900\n 8 Adelie  Torgersen           34.6          21.1               198        4400\n 9 Adelie  Torgersen           34.6          17.2               189        3200\n10 Adelie  Biscoe              35            17.9               190        3450\n# ℹ 334 more rows\n# ℹ 2 more variables: sex &lt;fct&gt;, year &lt;int&gt;"
  },
  {
    "objectID": "slides/data-wrangling-1.html#sort-penguins-by-bill-length-descending",
    "href": "slides/data-wrangling-1.html#sort-penguins-by-bill-length-descending",
    "title": "Data wrangling 1",
    "section": "Sort penguins by bill length, descending",
    "text": "Sort penguins by bill length, descending\n\n\npenguins |&gt;\n  arrange(desc(bill_length_mm))\n\n# A tibble: 344 × 8\n   species   island bill_length_mm bill_depth_mm flipper_length_mm body_mass_g\n   &lt;fct&gt;     &lt;fct&gt;           &lt;dbl&gt;         &lt;dbl&gt;             &lt;int&gt;       &lt;int&gt;\n 1 Gentoo    Biscoe           59.6          17                 230        6050\n 2 Chinstrap Dream            58            17.8               181        3700\n 3 Gentoo    Biscoe           55.9          17                 228        5600\n 4 Chinstrap Dream            55.8          19.8               207        4000\n 5 Gentoo    Biscoe           55.1          16                 230        5850\n 6 Gentoo    Biscoe           54.3          15.7               231        5650\n 7 Chinstrap Dream            54.2          20.8               201        4300\n 8 Chinstrap Dream            53.5          19.9               205        4500\n 9 Gentoo    Biscoe           53.4          15.8               219        5500\n10 Chinstrap Dream            52.8          20                 205        4550\n# ℹ 334 more rows\n# ℹ 2 more variables: sex &lt;fct&gt;, year &lt;int&gt;"
  },
  {
    "objectID": "slides/data-wrangling-1.html#count-things",
    "href": "slides/data-wrangling-1.html#count-things",
    "title": "Data wrangling 1",
    "section": "Count things",
    "text": "Count things\n\n\npenguins\n\n# A tibble: 344 × 8\n   species island    bill_length_mm bill_depth_mm flipper_length_mm body_mass_g\n   &lt;fct&gt;   &lt;fct&gt;              &lt;dbl&gt;         &lt;dbl&gt;             &lt;int&gt;       &lt;int&gt;\n 1 Adelie  Torgersen           39.1          18.7               181        3750\n 2 Adelie  Torgersen           39.5          17.4               186        3800\n 3 Adelie  Torgersen           40.3          18                 195        3250\n 4 Adelie  Torgersen           NA            NA                  NA          NA\n 5 Adelie  Torgersen           36.7          19.3               193        3450\n 6 Adelie  Torgersen           39.3          20.6               190        3650\n 7 Adelie  Torgersen           38.9          17.8               181        3625\n 8 Adelie  Torgersen           39.2          19.6               195        4675\n 9 Adelie  Torgersen           34.1          18.1               193        3475\n10 Adelie  Torgersen           42            20.2               190        4250\n# ℹ 334 more rows\n# ℹ 2 more variables: sex &lt;fct&gt;, year &lt;int&gt;"
  },
  {
    "objectID": "slides/data-wrangling-1.html#count-things-1",
    "href": "slides/data-wrangling-1.html#count-things-1",
    "title": "Data wrangling 1",
    "section": "Count things",
    "text": "Count things\n\n\npenguins |&gt;\n  count(species)\n\n# A tibble: 3 × 2\n  species       n\n  &lt;fct&gt;     &lt;int&gt;\n1 Adelie      152\n2 Chinstrap    68\n3 Gentoo      124"
  },
  {
    "objectID": "slides/data-wrangling-1.html#count-things-2",
    "href": "slides/data-wrangling-1.html#count-things-2",
    "title": "Data wrangling 1",
    "section": "Count things",
    "text": "Count things\n\n\npenguins |&gt;\n  count(species, island)\n\n# A tibble: 5 × 3\n  species   island        n\n  &lt;fct&gt;     &lt;fct&gt;     &lt;int&gt;\n1 Adelie    Biscoe       44\n2 Adelie    Dream        56\n3 Adelie    Torgersen    52\n4 Chinstrap Dream        68\n5 Gentoo    Biscoe      124"
  },
  {
    "objectID": "slides/data-wrangling-1.html#use-the-pipe-to-build-analysis-pipelines",
    "href": "slides/data-wrangling-1.html#use-the-pipe-to-build-analysis-pipelines",
    "title": "Data wrangling 1",
    "section": "Use the pipe to build analysis pipelines",
    "text": "Use the pipe to build analysis pipelines\n\n\npenguins |&gt;\n  filter(species == \"Adelie\")\n\n# A tibble: 152 × 8\n   species island    bill_length_mm bill_depth_mm flipper_length_mm body_mass_g\n   &lt;fct&gt;   &lt;fct&gt;              &lt;dbl&gt;         &lt;dbl&gt;             &lt;int&gt;       &lt;int&gt;\n 1 Adelie  Torgersen           39.1          18.7               181        3750\n 2 Adelie  Torgersen           39.5          17.4               186        3800\n 3 Adelie  Torgersen           40.3          18                 195        3250\n 4 Adelie  Torgersen           NA            NA                  NA          NA\n 5 Adelie  Torgersen           36.7          19.3               193        3450\n 6 Adelie  Torgersen           39.3          20.6               190        3650\n 7 Adelie  Torgersen           38.9          17.8               181        3625\n 8 Adelie  Torgersen           39.2          19.6               195        4675\n 9 Adelie  Torgersen           34.1          18.1               193        3475\n10 Adelie  Torgersen           42            20.2               190        4250\n# ℹ 142 more rows\n# ℹ 2 more variables: sex &lt;fct&gt;, year &lt;int&gt;"
  },
  {
    "objectID": "slides/data-wrangling-1.html#use-the-pipe-to-build-analysis-pipelines-1",
    "href": "slides/data-wrangling-1.html#use-the-pipe-to-build-analysis-pipelines-1",
    "title": "Data wrangling 1",
    "section": "Use the pipe to build analysis pipelines",
    "text": "Use the pipe to build analysis pipelines\n\n\npenguins |&gt;\n  filter(species == \"Adelie\") |&gt;\n  select(island, sex)\n\n# A tibble: 152 × 2\n   island    sex   \n   &lt;fct&gt;     &lt;fct&gt; \n 1 Torgersen male  \n 2 Torgersen female\n 3 Torgersen female\n 4 Torgersen &lt;NA&gt;  \n 5 Torgersen female\n 6 Torgersen male  \n 7 Torgersen female\n 8 Torgersen male  \n 9 Torgersen &lt;NA&gt;  \n10 Torgersen &lt;NA&gt;  \n# ℹ 142 more rows"
  },
  {
    "objectID": "slides/data-wrangling-1.html#use-the-pipe-to-build-analysis-pipelines-2",
    "href": "slides/data-wrangling-1.html#use-the-pipe-to-build-analysis-pipelines-2",
    "title": "Data wrangling 1",
    "section": "Use the pipe to build analysis pipelines",
    "text": "Use the pipe to build analysis pipelines\n\n\npenguins |&gt;\n  filter(species == \"Adelie\") |&gt;\n  select(island, sex) |&gt;\n  count(island, sex)\n\n# A tibble: 8 × 3\n  island    sex        n\n  &lt;fct&gt;     &lt;fct&gt;  &lt;int&gt;\n1 Biscoe    female    22\n2 Biscoe    male      22\n3 Dream     female    27\n4 Dream     male      28\n5 Dream     &lt;NA&gt;       1\n6 Torgersen female    24\n7 Torgersen male      23\n8 Torgersen &lt;NA&gt;       5"
  },
  {
    "objectID": "slides/data-wrangling-1.html#make-a-new-table-column-mutate",
    "href": "slides/data-wrangling-1.html#make-a-new-table-column-mutate",
    "title": "Data wrangling 1",
    "section": "Make a new table column: mutate()",
    "text": "Make a new table column: mutate()"
  },
  {
    "objectID": "slides/data-wrangling-1.html#example-flipper-length-in-cm",
    "href": "slides/data-wrangling-1.html#example-flipper-length-in-cm",
    "title": "Data wrangling 1",
    "section": "Example: flipper length in cm",
    "text": "Example: flipper length in cm\n\n\npenguins |&gt;\n  select(species, island, flipper_length_mm)\n\n# A tibble: 344 × 3\n   species island    flipper_length_mm\n   &lt;fct&gt;   &lt;fct&gt;                 &lt;int&gt;\n 1 Adelie  Torgersen               181\n 2 Adelie  Torgersen               186\n 3 Adelie  Torgersen               195\n 4 Adelie  Torgersen                NA\n 5 Adelie  Torgersen               193\n 6 Adelie  Torgersen               190\n 7 Adelie  Torgersen               181\n 8 Adelie  Torgersen               195\n 9 Adelie  Torgersen               193\n10 Adelie  Torgersen               190\n# ℹ 334 more rows"
  },
  {
    "objectID": "slides/data-wrangling-1.html#example-flipper-length-in-cm-1",
    "href": "slides/data-wrangling-1.html#example-flipper-length-in-cm-1",
    "title": "Data wrangling 1",
    "section": "Example: flipper length in cm",
    "text": "Example: flipper length in cm\n\n\npenguins |&gt;\n  select(species, island, flipper_length_mm) |&gt;\n  mutate(flipper_length_cm = flipper_length_mm / 10)\n\n# A tibble: 344 × 4\n   species island    flipper_length_mm flipper_length_cm\n   &lt;fct&gt;   &lt;fct&gt;                 &lt;int&gt;             &lt;dbl&gt;\n 1 Adelie  Torgersen               181              18.1\n 2 Adelie  Torgersen               186              18.6\n 3 Adelie  Torgersen               195              19.5\n 4 Adelie  Torgersen                NA              NA  \n 5 Adelie  Torgersen               193              19.3\n 6 Adelie  Torgersen               190              19  \n 7 Adelie  Torgersen               181              18.1\n 8 Adelie  Torgersen               195              19.5\n 9 Adelie  Torgersen               193              19.3\n10 Adelie  Torgersen               190              19  \n# ℹ 334 more rows"
  },
  {
    "objectID": "slides/data-wrangling-1.html#make-multiple-columns-at-once",
    "href": "slides/data-wrangling-1.html#make-multiple-columns-at-once",
    "title": "Data wrangling 1",
    "section": "Make multiple columns at once",
    "text": "Make multiple columns at once\n\n\npenguins |&gt;\n  select(species, island, flipper_length_mm) |&gt;\n  mutate(\n    flipper_length_cm = flipper_length_mm / 10,  # &lt;- notice the comma\n    flipper_length_in = flipper_length_mm / 25.4\n  )\n\n# A tibble: 344 × 5\n   species island    flipper_length_mm flipper_length_cm flipper_length_in\n   &lt;fct&gt;   &lt;fct&gt;                 &lt;int&gt;             &lt;dbl&gt;             &lt;dbl&gt;\n 1 Adelie  Torgersen               181              18.1              7.13\n 2 Adelie  Torgersen               186              18.6              7.32\n 3 Adelie  Torgersen               195              19.5              7.68\n 4 Adelie  Torgersen                NA              NA               NA   \n 5 Adelie  Torgersen               193              19.3              7.60\n 6 Adelie  Torgersen               190              19                7.48\n 7 Adelie  Torgersen               181              18.1              7.13\n 8 Adelie  Torgersen               195              19.5              7.68\n 9 Adelie  Torgersen               193              19.3              7.60\n10 Adelie  Torgersen               190              19                7.48\n# ℹ 334 more rows"
  },
  {
    "objectID": "slides/data-wrangling-1.html#further-reading",
    "href": "slides/data-wrangling-1.html#further-reading",
    "title": "Data wrangling 1",
    "section": "Further reading",
    "text": "Further reading\n\nR for Data Science: Chapter 5: Data transformation\nR for Data Science: Chapter 18: Pipes\ndplyr documentation: Introduction to dplyr\ndplyr reference documentation: One table verbs"
  },
  {
    "objectID": "slides/compound-figures.html#compound-figures",
    "href": "slides/compound-figures.html#compound-figures",
    "title": "Compound Figures",
    "section": "Compound figures",
    "text": "Compound figures\n Two common scenarios:\n\n1. The same type of plot is replicated many times (small multiples)\n\n\n2. Several disparate plots are combined into one display"
  },
  {
    "objectID": "slides/compound-figures.html#small-multiples-facets",
    "href": "slides/compound-figures.html#small-multiples-facets",
    "title": "Compound Figures",
    "section": "Small multiples (facets)",
    "text": "Small multiples (facets)"
  },
  {
    "objectID": "slides/compound-figures.html#small-multiples-facets-1",
    "href": "slides/compound-figures.html#small-multiples-facets-1",
    "title": "Compound Figures",
    "section": "Small multiples (facets)",
    "text": "Small multiples (facets)\n\n\n\n\n\n\nAvoid bars or other elements that are floating in space"
  },
  {
    "objectID": "slides/compound-figures.html#small-multiples-facets-2",
    "href": "slides/compound-figures.html#small-multiples-facets-2",
    "title": "Compound Figures",
    "section": "Small multiples (facets)",
    "text": "Small multiples (facets)"
  },
  {
    "objectID": "slides/compound-figures.html#y-axis-ranges-should-be-consistent-among-panels",
    "href": "slides/compound-figures.html#y-axis-ranges-should-be-consistent-among-panels",
    "title": "Compound Figures",
    "section": "y-axis ranges should be consistent among panels",
    "text": "y-axis ranges should be consistent among panels"
  },
  {
    "objectID": "slides/compound-figures.html#y-axis-ranges-should-be-consistent-among-panels-1",
    "href": "slides/compound-figures.html#y-axis-ranges-should-be-consistent-among-panels-1",
    "title": "Compound Figures",
    "section": "y-axis ranges should be consistent among panels",
    "text": "y-axis ranges should be consistent among panels"
  },
  {
    "objectID": "slides/compound-figures.html#combining-disparate-figures-into-one-display",
    "href": "slides/compound-figures.html#combining-disparate-figures-into-one-display",
    "title": "Compound Figures",
    "section": "Combining disparate figures into one display",
    "text": "Combining disparate figures into one display"
  },
  {
    "objectID": "slides/compound-figures.html#dont-use-overly-large-or-otherwise-prominent-labels",
    "href": "slides/compound-figures.html#dont-use-overly-large-or-otherwise-prominent-labels",
    "title": "Compound Figures",
    "section": "Don’t use overly large or otherwise prominent labels",
    "text": "Don’t use overly large or otherwise prominent labels\n\n\n\n\n\n\n\nNote: Also don’t use serif fonts (such as Times) for labels"
  },
  {
    "objectID": "slides/compound-figures.html#use-a-consistent-color-language-among-sub-plots",
    "href": "slides/compound-figures.html#use-a-consistent-color-language-among-sub-plots",
    "title": "Compound Figures",
    "section": "Use a consistent color language among sub-plots",
    "text": "Use a consistent color language among sub-plots"
  },
  {
    "objectID": "slides/compound-figures.html#use-a-consistent-color-language-among-sub-plots-1",
    "href": "slides/compound-figures.html#use-a-consistent-color-language-among-sub-plots-1",
    "title": "Compound Figures",
    "section": "Use a consistent color language among sub-plots",
    "text": "Use a consistent color language among sub-plots"
  },
  {
    "objectID": "slides/compound-figures.html#pay-attention-to-sub-plot-alignment",
    "href": "slides/compound-figures.html#pay-attention-to-sub-plot-alignment",
    "title": "Compound Figures",
    "section": "Pay attention to sub-plot alignment",
    "text": "Pay attention to sub-plot alignment"
  },
  {
    "objectID": "slides/compound-figures.html#pay-attention-to-sub-plot-alignment-1",
    "href": "slides/compound-figures.html#pay-attention-to-sub-plot-alignment-1",
    "title": "Compound Figures",
    "section": "Pay attention to sub-plot alignment",
    "text": "Pay attention to sub-plot alignment"
  },
  {
    "objectID": "slides/compound-figures.html#combine-plots-of-different-types",
    "href": "slides/compound-figures.html#combine-plots-of-different-types",
    "title": "Compound Figures",
    "section": "Combine plots of different types",
    "text": "Combine plots of different types\n\n\n\n\n\n\nThis helps your readers to distinguish different parts of the analysis"
  },
  {
    "objectID": "slides/compound-figures.html#combine-plots-of-different-types-1",
    "href": "slides/compound-figures.html#combine-plots-of-different-types-1",
    "title": "Compound Figures",
    "section": "Combine plots of different types",
    "text": "Combine plots of different types\n\n\n\n\n\n\nThis helps your readers to distinguish different parts of the analysis"
  },
  {
    "objectID": "slides/compound-figures.html#distinguish-infographics-from-figures-in-articlebook-1",
    "href": "slides/compound-figures.html#distinguish-infographics-from-figures-in-articlebook-1",
    "title": "Compound Figures",
    "section": "Distinguish infographics from figures in article/book",
    "text": "Distinguish infographics from figures in article/book\n There are two distinct use cases:\n\nInfographic: Standalone, has title/subtitle/caption\n\n\nFigure in article/book: Caption contains title, not part of figure"
  },
  {
    "objectID": "slides/compound-figures.html#corruption-development-figure",
    "href": "slides/compound-figures.html#corruption-development-figure",
    "title": "Compound Figures",
    "section": "",
    "text": "Figure 1. Corruption and human development. The most developed countries experience the least corruption. Inspired by a posting in The Economist online (2011). Data sources: Transparency International & UN Human Development Report.\n\nExample of figure in article or book"
  },
  {
    "objectID": "slides/compound-figures.html#the-patchwork-package",
    "href": "slides/compound-figures.html#the-patchwork-package",
    "title": "Compound Figures",
    "section": "The patchwork package",
    "text": "The patchwork package\n\n\n\nlibrary(patchwork)\n\n# make first plot\np1 &lt;- ggplot(mtcars) + \n  geom_point(aes(mpg, disp))\n\np1"
  },
  {
    "objectID": "slides/compound-figures.html#the-patchwork-package-1",
    "href": "slides/compound-figures.html#the-patchwork-package-1",
    "title": "Compound Figures",
    "section": "The patchwork package",
    "text": "The patchwork package\n\n\n\nlibrary(patchwork)\n\n# make first plot\np1 &lt;- ggplot(mtcars) + \n  geom_point(aes(mpg, disp))\n\n# make second plot\np2 &lt;- ggplot(mtcars) + \n  aes(gear, disp, group = gear) +\n  geom_boxplot()\n\np2"
  },
  {
    "objectID": "slides/compound-figures.html#the-patchwork-package-2",
    "href": "slides/compound-figures.html#the-patchwork-package-2",
    "title": "Compound Figures",
    "section": "The patchwork package",
    "text": "The patchwork package\n\n\n\nlibrary(patchwork)\n\n# make first plot\np1 &lt;- ggplot(mtcars) + \n  geom_point(aes(mpg, disp))\n\n# make second plot\np2 &lt;- ggplot(mtcars) + \n  aes(gear, disp, group = gear) +\n  geom_boxplot()\n\n# place plots side-by-side\np1 | p2"
  },
  {
    "objectID": "slides/compound-figures.html#the-patchwork-package-3",
    "href": "slides/compound-figures.html#the-patchwork-package-3",
    "title": "Compound Figures",
    "section": "The patchwork package",
    "text": "The patchwork package\n\n\n\nlibrary(patchwork)\n\n# make first plot\np1 &lt;- ggplot(mtcars) + \n  geom_point(aes(mpg, disp))\n\n# make second plot\np2 &lt;- ggplot(mtcars) + \n  aes(gear, disp, group = gear) +\n  geom_boxplot()\n\n# place plots on top of one-another\np1 / p2"
  },
  {
    "objectID": "slides/compound-figures.html#the-patchwork-package-4",
    "href": "slides/compound-figures.html#the-patchwork-package-4",
    "title": "Compound Figures",
    "section": "The patchwork package",
    "text": "The patchwork package\n\n\n\n# add a few more plots\np3 &lt;- ggplot(mtcars) + \n  geom_smooth(aes(disp, qsec))\n\np4 &lt;- ggplot(mtcars) + \n  geom_bar(aes(carb))\n\n# make complex arrangement\n(p1 | p2 | p3) / p4"
  },
  {
    "objectID": "slides/compound-figures.html#plot-annotations-and-themes",
    "href": "slides/compound-figures.html#plot-annotations-and-themes",
    "title": "Compound Figures",
    "section": "Plot annotations and themes",
    "text": "Plot annotations and themes\n\n\n\n(p1 | p2 | p3) / p4 +\n   plot_annotation(\n     tag_levels = \"A\"\n   )\n\n\n\n\n\n \n\n\n\n\n\n\nAutomatic labeling of plots"
  },
  {
    "objectID": "slides/compound-figures.html#plot-annotations-and-themes-1",
    "href": "slides/compound-figures.html#plot-annotations-and-themes-1",
    "title": "Compound Figures",
    "section": "Plot annotations and themes",
    "text": "Plot annotations and themes\n\n\n\n(p1 | p2 | p3) / p4 +\n   plot_annotation(\n     tag_levels = \"a\"\n   )\n\n\n\n\n\n \n\n\n\n\n\n\nAutomatic labeling of plots"
  },
  {
    "objectID": "slides/compound-figures.html#plot-annotations-and-themes-2",
    "href": "slides/compound-figures.html#plot-annotations-and-themes-2",
    "title": "Compound Figures",
    "section": "Plot annotations and themes",
    "text": "Plot annotations and themes\n\n\n\n(p1 | p2 | p3) / p4 +\n  plot_annotation(\n   tag_levels = \"a\"\n  ) &\n  theme_minimal_grid()\n\n\n\n\n\n \n\n\n\n\n\n\nApplying one theme to all plots"
  },
  {
    "objectID": "slides/compound-figures.html#plot-annotations-and-themes-3",
    "href": "slides/compound-figures.html#plot-annotations-and-themes-3",
    "title": "Compound Figures",
    "section": "Plot annotations and themes",
    "text": "Plot annotations and themes\n\n\n\n(p1 | p2 | p3) / p4 +\n  plot_annotation(\n   tag_levels = \"a\",\n   title = \"A plot about mtcars\",\n   subtitle = \"With subtitle...\",\n   caption = \"...and caption\"\n  ) &\n  theme_minimal_grid()\n\n\n\n\n\n \n\n\n\n\n\n\nTitles and captions"
  },
  {
    "objectID": "slides/compound-figures.html#further-reading",
    "href": "slides/compound-figures.html#further-reading",
    "title": "Compound Figures",
    "section": "Further reading",
    "text": "Further reading\n\nFundamentals of Data Visualization: Chapter 21: Multi-panel figures\npatchwork documentation: Getting started\npatchwork documentation: Plot assembly\npatchwork documentation: Adding annotation and style"
  },
  {
    "objectID": "slides/color-scales.html#uses-of-color-in-data-visualization",
    "href": "slides/color-scales.html#uses-of-color-in-data-visualization",
    "title": "Color scales",
    "section": "Uses of color in data visualization",
    "text": "Uses of color in data visualization\n\n\n\n1. Distinguish categories (qualitative)"
  },
  {
    "objectID": "slides/color-scales.html#qualitative-scale-example",
    "href": "slides/color-scales.html#qualitative-scale-example",
    "title": "Color scales",
    "section": "Qualitative scale example",
    "text": "Qualitative scale example\n\n\n\n\n\n \n\n\n\n\n\nPalette name: Okabe-Ito"
  },
  {
    "objectID": "slides/color-scales.html#qualitative-scale-example-1",
    "href": "slides/color-scales.html#qualitative-scale-example-1",
    "title": "Color scales",
    "section": "Qualitative scale example",
    "text": "Qualitative scale example\n\n\n\n\n\n \n\n\n\n\n\nPalette name: ColorBrewer Set1"
  },
  {
    "objectID": "slides/color-scales.html#qualitative-scale-example-2",
    "href": "slides/color-scales.html#qualitative-scale-example-2",
    "title": "Color scales",
    "section": "Qualitative scale example",
    "text": "Qualitative scale example\n\n\n\n\n\n \n\n\n\n\n\nPalette name: ColorBrewer Set3"
  },
  {
    "objectID": "slides/color-scales.html#uses-of-color-in-data-visualization-1",
    "href": "slides/color-scales.html#uses-of-color-in-data-visualization-1",
    "title": "Color scales",
    "section": "Uses of color in data visualization",
    "text": "Uses of color in data visualization\n\n\n\n1. Distinguish categories (qualitative)\n\n\n\n\n\n\n\n2. Represent numeric values (sequential)"
  },
  {
    "objectID": "slides/color-scales.html#sequential-scale-example",
    "href": "slides/color-scales.html#sequential-scale-example",
    "title": "Color scales",
    "section": "Sequential scale example",
    "text": "Sequential scale example\n\n\n\n\n\n\n \n\n\n\n\n\n\nPalette name: Viridis"
  },
  {
    "objectID": "slides/color-scales.html#sequential-scale-example-1",
    "href": "slides/color-scales.html#sequential-scale-example-1",
    "title": "Color scales",
    "section": "Sequential scale example",
    "text": "Sequential scale example\n\n\n\n\n\n\n \n\n\n\n\n\n\nPalette name: Inferno"
  },
  {
    "objectID": "slides/color-scales.html#sequential-scale-example-2",
    "href": "slides/color-scales.html#sequential-scale-example-2",
    "title": "Color scales",
    "section": "Sequential scale example",
    "text": "Sequential scale example\n\n\n\n\n\n\n \n\n\n\n\n\n\nPalette name: Cividis"
  },
  {
    "objectID": "slides/color-scales.html#uses-of-color-in-data-visualization-2",
    "href": "slides/color-scales.html#uses-of-color-in-data-visualization-2",
    "title": "Color scales",
    "section": "Uses of color in data visualization",
    "text": "Uses of color in data visualization\n\n\n\n1. Distinguish categories (qualitative)\n\n\n\n\n\n\n\n2. Represent numeric values (sequential)\n\n\n\n\n\n\n\n3. Represent numeric values (diverging)"
  },
  {
    "objectID": "slides/color-scales.html#diverging-scale-example",
    "href": "slides/color-scales.html#diverging-scale-example",
    "title": "Color scales",
    "section": "Diverging scale example",
    "text": "Diverging scale example\n\n\n\n\n\n \n\n\n\n\n\nPalette name: ColorBrewer PiYG"
  },
  {
    "objectID": "slides/color-scales.html#diverging-scale-example-1",
    "href": "slides/color-scales.html#diverging-scale-example-1",
    "title": "Color scales",
    "section": "Diverging scale example",
    "text": "Diverging scale example\n\n\n\n\n\n \n\n\n\n\n\nPalette name: Carto Earth"
  },
  {
    "objectID": "slides/color-scales.html#diverging-scale-example-2",
    "href": "slides/color-scales.html#diverging-scale-example-2",
    "title": "Color scales",
    "section": "Diverging scale example",
    "text": "Diverging scale example\n\n\n\n\n\n \n\n\n\n\n\nPalette name: Blue-Red"
  },
  {
    "objectID": "slides/color-scales.html#uses-of-color-in-data-visualization-3",
    "href": "slides/color-scales.html#uses-of-color-in-data-visualization-3",
    "title": "Color scales",
    "section": "Uses of color in data visualization",
    "text": "Uses of color in data visualization\n\n\n\n1. Distinguish categories (qualitative)\n\n\n\n\n\n\n\n2. Represent numeric values (sequential)\n\n\n\n\n\n\n\n3. Represent numeric values (diverging)\n\n\n\n\n\n\n\n4. Highlight"
  },
  {
    "objectID": "slides/color-scales.html#highlight-example",
    "href": "slides/color-scales.html#highlight-example",
    "title": "Color scales",
    "section": "Highlight example",
    "text": "Highlight example\n\n\n\n\n\n \n\n\n\n\n\nPalette name: Grays with accents"
  },
  {
    "objectID": "slides/color-scales.html#highlight-example-1",
    "href": "slides/color-scales.html#highlight-example-1",
    "title": "Color scales",
    "section": "Highlight example",
    "text": "Highlight example\n\n\n\n\n\n \n\n\n\n\n\nPalette name: Okabe Ito accent"
  },
  {
    "objectID": "slides/color-scales.html#highlight-example-2",
    "href": "slides/color-scales.html#highlight-example-2",
    "title": "Color scales",
    "section": "Highlight example",
    "text": "Highlight example\n\n\n\n\n\n \n\n\n\n\n\nPalette name: ColorBrewer accent"
  },
  {
    "objectID": "slides/color-scales.html#getting-the-data",
    "href": "slides/color-scales.html#getting-the-data",
    "title": "Color scales",
    "section": "Getting the data",
    "text": "Getting the data\n\nThe temps_months dataset:\n\ntemps_months &lt;- read_csv(\"https://wilkelab.org/DSC385/datasets/tempnormals.csv\") |&gt;\n  group_by(location, month_name) |&gt;\n  summarize(mean = mean(temperature)) |&gt;\n  mutate(\n    month = factor(\n      month_name,\n      levels = c(\"Jan\", \"Feb\", \"Mar\", \"Apr\", \"May\", \"Jun\", \"Jul\", \"Aug\", \"Sep\", \"Oct\", \"Nov\", \"Dec\")\n    ),\n    location = factor(location, levels = c(\"Death Valley\", \"Houston\", \"San Diego\", \"Chicago\"))\n  ) |&gt;\n  select(-month_name)\n\ntemps_months\n\n# A tibble: 48 × 3\n# Groups:   location [4]\n   location  mean month\n   &lt;fct&gt;    &lt;dbl&gt; &lt;fct&gt;\n 1 Chicago   50.4 Apr  \n 2 Chicago   74.1 Aug  \n 3 Chicago   29   Dec  \n 4 Chicago   28.9 Feb  \n 5 Chicago   24.8 Jan  \n 6 Chicago   75.8 Jul  \n 7 Chicago   71.0 Jun  \n 8 Chicago   38.8 Mar  \n 9 Chicago   60.9 May  \n10 Chicago   41.6 Nov  \n# ℹ 38 more rows"
  },
  {
    "objectID": "slides/color-scales.html#getting-the-data-1",
    "href": "slides/color-scales.html#getting-the-data-1",
    "title": "Color scales",
    "section": "Getting the data",
    "text": "Getting the data\n\nThe popgrowth dataset:\n\nUS_census &lt;- read_csv(\"https://wilkelab.org/DSC385/datasets/US_census.csv\")\nUS_regions &lt;- read_csv(\"https://wilkelab.org/DSC385/datasets/US_regions.csv\")\n\npopgrowth &lt;- left_join(US_census, US_regions) |&gt;\n    group_by(region, division, state) |&gt;\n    summarize(\n      pop2000 = sum(pop2000, na.rm = TRUE),\n      pop2010 = sum(pop2010, na.rm = TRUE),\n      popgrowth = (pop2010-pop2000)/pop2000,\n      .groups = \"drop\"\n    ) |&gt;\n    mutate(region = factor(region, levels = c(\"West\", \"South\", \"Midwest\", \"Northeast\")))\n\npopgrowth\n\n# A tibble: 51 × 6\n   region  division           state      pop2000  pop2010 popgrowth\n   &lt;fct&gt;   &lt;chr&gt;              &lt;chr&gt;        &lt;dbl&gt;    &lt;dbl&gt;     &lt;dbl&gt;\n 1 Midwest East North Central Illinois  12419293 12830632   0.0331 \n 2 Midwest East North Central Indiana    6080485  6483802   0.0663 \n 3 Midwest East North Central Michigan   9938444  9883640  -0.00551\n 4 Midwest East North Central Ohio      11353140 11536504   0.0162 \n 5 Midwest East North Central Wisconsin  5363675  5686986   0.0603 \n 6 Midwest West North Central Iowa       2926324  3046355   0.0410 \n 7 Midwest West North Central Kansas     2688418  2853118   0.0613 \n 8 Midwest West North Central Minnesota  4919479  5303925   0.0781 \n 9 Midwest West North Central Missouri   5595211  5988927   0.0704 \n10 Midwest West North Central Nebraska   1711263  1826341   0.0672 \n# ℹ 41 more rows"
  },
  {
    "objectID": "slides/color-scales.html#ggplot2-color-scale-functions-are-a-bit-of-a-mess",
    "href": "slides/color-scales.html#ggplot2-color-scale-functions-are-a-bit-of-a-mess",
    "title": "Color scales",
    "section": "ggplot2 color scale functions are a bit of a mess",
    "text": "ggplot2 color scale functions are a bit of a mess\n\n\n\n\n\n\n\n\n\n\nScale function                                   \nAesthetic   \nData type    \nPalette type\n\n\n\n\nscale_color_hue()\ncolor\ndiscrete\nqualitative"
  },
  {
    "objectID": "slides/color-scales.html#ggplot2-color-scale-functions-are-a-bit-of-a-mess-1",
    "href": "slides/color-scales.html#ggplot2-color-scale-functions-are-a-bit-of-a-mess-1",
    "title": "Color scales",
    "section": "ggplot2 color scale functions are a bit of a mess",
    "text": "ggplot2 color scale functions are a bit of a mess\n\n\n\n\n\n\n\n\n\n\nScale function                                   \nAesthetic   \nData type    \nPalette type\n\n\n\n\nscale_color_hue()\ncolor\ndiscrete\nqualitative\n\n\nscale_fill_hue()\nfill\ndiscrete\nqualitative"
  },
  {
    "objectID": "slides/color-scales.html#ggplot2-color-scale-functions-are-a-bit-of-a-mess-2",
    "href": "slides/color-scales.html#ggplot2-color-scale-functions-are-a-bit-of-a-mess-2",
    "title": "Color scales",
    "section": "ggplot2 color scale functions are a bit of a mess",
    "text": "ggplot2 color scale functions are a bit of a mess\n\n\n\n\n\n\n\n\n\n\nScale function                                   \nAesthetic   \nData type    \nPalette type\n\n\n\n\nscale_color_hue()\ncolor\ndiscrete\nqualitative\n\n\nscale_fill_hue()\nfill\ndiscrete\nqualitative\n\n\nscale_color_gradient()\ncolor\ncontinuous\nsequential"
  },
  {
    "objectID": "slides/color-scales.html#ggplot2-color-scale-functions-are-a-bit-of-a-mess-3",
    "href": "slides/color-scales.html#ggplot2-color-scale-functions-are-a-bit-of-a-mess-3",
    "title": "Color scales",
    "section": "ggplot2 color scale functions are a bit of a mess",
    "text": "ggplot2 color scale functions are a bit of a mess\n\n\n\n\n\n\n\n\n\n\nScale function                                   \nAesthetic   \nData type    \nPalette type\n\n\n\n\nscale_color_hue()\ncolor\ndiscrete\nqualitative\n\n\nscale_fill_hue()\nfill\ndiscrete\nqualitative\n\n\nscale_color_gradient()\ncolor\ncontinuous\nsequential\n\n\nscale_color_gradient2()\ncolor\ncontinuous\ndiverging"
  },
  {
    "objectID": "slides/color-scales.html#ggplot2-color-scale-functions-are-a-bit-of-a-mess-4",
    "href": "slides/color-scales.html#ggplot2-color-scale-functions-are-a-bit-of-a-mess-4",
    "title": "Color scales",
    "section": "ggplot2 color scale functions are a bit of a mess",
    "text": "ggplot2 color scale functions are a bit of a mess\n\n\n\n\n\n\n\n\n\n\nScale function                                   \nAesthetic   \nData type    \nPalette type\n\n\n\n\nscale_color_hue()\ncolor\ndiscrete\nqualitative\n\n\nscale_fill_hue()\nfill\ndiscrete\nqualitative\n\n\nscale_color_gradient()\ncolor\ncontinuous\nsequential\n\n\nscale_color_gradient2()\ncolor\ncontinuous\ndiverging\n\n\nscale_fill_viridis_c()\ncolor\ncontinuous\nsequential\n\n\nscale_fill_viridis_d()\nfill\ndiscrete\nsequential\n\n\nscale_color_brewer()\ncolor\ndiscrete\nqualitative, diverging, sequential\n\n\nscale_fill_brewer()\nfill\ndiscrete\nqualitative, diverging, sequential\n\n\nscale_color_distiller()\ncolor\ncontinuous\nqualitative, diverging, sequential\n\n\n\n\n… and there are many many more"
  },
  {
    "objectID": "slides/color-scales.html#examples",
    "href": "slides/color-scales.html#examples",
    "title": "Color scales",
    "section": "Examples",
    "text": "Examples\n\nggplot(temps_months, aes(x = month, y = location, fill = mean)) + \n  geom_tile(width = 0.95, height = 0.95) + \n  coord_fixed(expand = FALSE) +\n  theme_classic()\n  # no fill scale defined, default is scale_fill_gradient()"
  },
  {
    "objectID": "slides/color-scales.html#examples-1",
    "href": "slides/color-scales.html#examples-1",
    "title": "Color scales",
    "section": "Examples",
    "text": "Examples\n\nggplot(temps_months, aes(x = month, y = location, fill = mean)) + \n  geom_tile(width = 0.95, height = 0.95) + \n  coord_fixed(expand = FALSE) +\n  theme_classic() +\n  scale_fill_gradient()"
  },
  {
    "objectID": "slides/color-scales.html#examples-2",
    "href": "slides/color-scales.html#examples-2",
    "title": "Color scales",
    "section": "Examples",
    "text": "Examples\n\nggplot(temps_months, aes(x = month, y = location, fill = mean)) + \n  geom_tile(width = 0.95, height = 0.95) + \n  coord_fixed(expand = FALSE) +\n  theme_classic() +\n  scale_fill_viridis_c() # the _c stands for continuous"
  },
  {
    "objectID": "slides/color-scales.html#examples-3",
    "href": "slides/color-scales.html#examples-3",
    "title": "Color scales",
    "section": "Examples",
    "text": "Examples\n\nggplot(temps_months, aes(x = month, y = location, fill = mean)) + \n  geom_tile(width = 0.95, height = 0.95) + \n  coord_fixed(expand = FALSE) +\n  theme_classic() +\n  scale_fill_viridis_c(option = \"B\", begin = 0.15)"
  },
  {
    "objectID": "slides/color-scales.html#examples-4",
    "href": "slides/color-scales.html#examples-4",
    "title": "Color scales",
    "section": "Examples",
    "text": "Examples\n\nggplot(temps_months, aes(x = month, y = location, fill = mean)) + \n  geom_tile(width = 0.95, height = 0.95) + \n  coord_fixed(expand = FALSE) +\n  theme_classic() +\n  scale_fill_distiller(palette = \"YlGnBu\")"
  },
  {
    "objectID": "slides/color-scales.html#the-colorspace-package-creates-some-order",
    "href": "slides/color-scales.html#the-colorspace-package-creates-some-order",
    "title": "Color scales",
    "section": "The colorspace package creates some order",
    "text": "The colorspace package creates some order\nScale name: scale_&lt;aesthetic&gt;_&lt;datatype&gt;_&lt;colorscale&gt;()\n\n&lt;aesthetic&gt;: name of the aesthetic (fill, color, colour)\n\n\n&lt;datatype&gt;: type of variable plotted (discrete, continuous, binned)\n\n\n&lt;colorscale&gt;: type of the color scale (qualitative, sequential, diverging, divergingx)\n\n\n\n\n\n\n\n\n\n\n\nScale function\nAesthetic\nData type\nPalette type\n\n\n\n\nscale_color_discrete_qualitative()\ncolor\ndiscrete\nqualitative\n\n\nscale_fill_continuous_sequential()\nfill\ncontinuous\nsequential\n\n\nscale_colour_continous_divergingx()\ncolour\ncontinuous\ndiverging"
  },
  {
    "objectID": "slides/color-scales.html#examples-5",
    "href": "slides/color-scales.html#examples-5",
    "title": "Color scales",
    "section": "Examples",
    "text": "Examples\n\nggplot(temps_months, aes(x = month, y = location, fill = mean)) + \n  geom_tile(width = 0.95, height = 0.95) + \n  coord_fixed(expand = FALSE) +\n  theme_classic() +\n  scale_fill_continuous_sequential(palette = \"YlGnBu\", rev = FALSE)"
  },
  {
    "objectID": "slides/color-scales.html#examples-6",
    "href": "slides/color-scales.html#examples-6",
    "title": "Color scales",
    "section": "Examples",
    "text": "Examples\n\nggplot(temps_months, aes(x = month, y = location, fill = mean)) + \n  geom_tile(width = 0.95, height = 0.95) + \n  coord_fixed(expand = FALSE) +\n  theme_classic() +\n  scale_fill_continuous_sequential(palette = \"Viridis\", rev = FALSE)"
  },
  {
    "objectID": "slides/color-scales.html#examples-7",
    "href": "slides/color-scales.html#examples-7",
    "title": "Color scales",
    "section": "Examples",
    "text": "Examples\n\nggplot(temps_months, aes(x = month, y = location, fill = mean)) + \n  geom_tile(width = 0.95, height = 0.95) + \n  coord_fixed(expand = FALSE) +\n  theme_classic() +\n  scale_fill_continuous_sequential(\n    palette = \"Inferno\", begin = 0.15, rev = FALSE\n  )"
  },
  {
    "objectID": "slides/color-scales.html#all-sequential-palettes",
    "href": "slides/color-scales.html#all-sequential-palettes",
    "title": "Color scales",
    "section": "",
    "text": "# all sequential palettes provided by the colorspace package\ncolorspace::hcl_palettes(type = \"sequential\", plot = TRUE)"
  },
  {
    "objectID": "slides/color-scales.html#all-diverging-palettes",
    "href": "slides/color-scales.html#all-diverging-palettes",
    "title": "Color scales",
    "section": "",
    "text": "# all diverging palettes provided by the colorspace package\ncolorspace::hcl_palettes(type = \"diverging\", plot = TRUE, n = 9)"
  },
  {
    "objectID": "slides/color-scales.html#all-divergingx-palettes",
    "href": "slides/color-scales.html#all-divergingx-palettes",
    "title": "Color scales",
    "section": "",
    "text": "# all divergingx palettes provided by the colorspace package\ncolorspace::divergingx_palettes(plot = TRUE, n = 9)"
  },
  {
    "objectID": "slides/color-scales.html#all-scale-functions-use-breaks-labels-etc.",
    "href": "slides/color-scales.html#all-scale-functions-use-breaks-labels-etc.",
    "title": "Color scales",
    "section": "All scale functions use breaks, labels, etc.",
    "text": "All scale functions use breaks, labels, etc.\n\nggplot(temps_months, aes(x = month, y = location, fill = mean)) + \n  geom_tile(width = 0.95, height = 0.95) + \n  coord_fixed(expand = FALSE) +\n  theme_classic() +\n  scale_fill_viridis_c(\n    name = \"temperature\",\n    breaks = c(25, 50, 75, 100),\n    labels = c(\"25°F\", \"50°F\", \"75°F\", \"100°F\")\n  )"
  },
  {
    "objectID": "slides/color-scales.html#discrete-qualitative-scales-are-best-set-manually",
    "href": "slides/color-scales.html#discrete-qualitative-scales-are-best-set-manually",
    "title": "Color scales",
    "section": "Discrete, qualitative scales are best set manually",
    "text": "Discrete, qualitative scales are best set manually\n\nggplot(popgrowth, aes(x = pop2000, y = popgrowth, color = region)) +\n  geom_point() +\n  scale_x_log10()\n  # no color scale defined, default is scale_color_hue()"
  },
  {
    "objectID": "slides/color-scales.html#discrete-qualitative-scales-are-best-set-manually-1",
    "href": "slides/color-scales.html#discrete-qualitative-scales-are-best-set-manually-1",
    "title": "Color scales",
    "section": "Discrete, qualitative scales are best set manually",
    "text": "Discrete, qualitative scales are best set manually\n\nggplot(popgrowth, aes(x = pop2000, y = popgrowth, color = region)) +\n  geom_point() +\n  scale_x_log10() +\n  scale_color_hue()"
  },
  {
    "objectID": "slides/color-scales.html#discrete-qualitative-scales-are-best-set-manually-2",
    "href": "slides/color-scales.html#discrete-qualitative-scales-are-best-set-manually-2",
    "title": "Color scales",
    "section": "Discrete, qualitative scales are best set manually",
    "text": "Discrete, qualitative scales are best set manually\n\nlibrary(ggthemes)  # for scale_color_colorblind()\n\nggplot(popgrowth, aes(x = pop2000, y = popgrowth, color = region)) +\n  geom_point() +\n  scale_x_log10() +\n  scale_color_colorblind()  # uses Okabe-Ito colors"
  },
  {
    "objectID": "slides/color-scales.html#discrete-qualitative-scales-are-best-set-manually-3",
    "href": "slides/color-scales.html#discrete-qualitative-scales-are-best-set-manually-3",
    "title": "Color scales",
    "section": "Discrete, qualitative scales are best set manually",
    "text": "Discrete, qualitative scales are best set manually\n\nggplot(popgrowth, aes(x = pop2000, y = popgrowth, color = region)) +\n  geom_point() +\n  scale_x_log10() +\n  scale_color_manual(\n    values = c(West = \"#E69F00\", South = \"#56B4E9\",\n               Midwest = \"#009E73\", Northeast = \"#F0E442\")\n  )"
  },
  {
    "objectID": "slides/color-scales.html#okabe-ito-rgb-codes",
    "href": "slides/color-scales.html#okabe-ito-rgb-codes",
    "title": "Color scales",
    "section": "Okabe-Ito RGB codes",
    "text": "Okabe-Ito RGB codes\n\n\n\n\n\nName\nHex code   \nR, G, B (0-255)\n\n\n\n\norange\n#E69F00\n230, 159, 0\n\n\nsky blue\n#56B4E9\n86, 180, 233\n\n\nbluish green\n#009E73\n0, 158, 115\n\n\nyellow\n#F0E442\n240, 228, 66\n\n\nblue\n#0072B2\n0, 114, 178\n\n\nvermilion\n#D55E00\n213, 94, 0\n\n\nreddish purple\n#CC79A7\n204, 121, 167\n\n\nblack\n#000000\n0, 0, 0"
  },
  {
    "objectID": "slides/color-scales.html#further-reading",
    "href": "slides/color-scales.html#further-reading",
    "title": "Color scales",
    "section": "Further reading",
    "text": "Further reading\n\nFundamentals of Data Visualization: Chapter 4: Color scales\nFundamentals of Data Visualization: Figure 19.10: Okabe-Ito color palette\nggplot2 book: Colour scales and legends\nggplot2 reference documentation: Scales\ncolorspace package: HCL-Based Color Scales for ggplot2"
  },
  {
    "objectID": "slides/animations.html#animations-can-create-more-engaging-displays",
    "href": "slides/animations.html#animations-can-create-more-engaging-displays",
    "title": "Animations",
    "section": "Animations can create more engaging displays",
    "text": "Animations can create more engaging displays\n\n\n\n\n\n \n\n\n\n\n\nData source: World Bank"
  },
  {
    "objectID": "slides/animations.html#animations-can-create-more-engaging-displays-1",
    "href": "slides/animations.html#animations-can-create-more-engaging-displays-1",
    "title": "Animations",
    "section": "Animations can create more engaging displays",
    "text": "Animations can create more engaging displays\n\n\n\n\n\n \n\n\n\n\n\nData source: World Bank"
  },
  {
    "objectID": "slides/animations.html#we-make-animations-in-r-with-gganimate",
    "href": "slides/animations.html#we-make-animations-in-r-with-gganimate",
    "title": "Animations",
    "section": "We make animations in R with gganimate",
    "text": "We make animations in R with gganimate\n\n\nlibrary(tidyverse)\nlibrary(gganimate)\n\n# make fun animations\n...\n\n\n\nThe gganimate package adds powerful animation tools to ggplot2"
  },
  {
    "objectID": "slides/animations.html#getting-the-data",
    "href": "slides/animations.html#getting-the-data",
    "title": "Animations",
    "section": "Getting the data",
    "text": "Getting the data\n\nWe’ll be working with the gdp_ranked dataset:\n\ngdp_ranked &lt;- read_csv(\"https://wilkelab.org/DSC385/datasets/gdp_ranked.csv\") |&gt;\n  mutate(rank = fct_rev(factor(rank)))\n\ngdp_ranked\n\n# A tibble: 500 × 6\n   country country_code  year   gdp rank  gdp_rel\n   &lt;chr&gt;   &lt;chr&gt;        &lt;dbl&gt; &lt;dbl&gt; &lt;fct&gt;   &lt;dbl&gt;\n 1 Brazil  BRA           1970  42.3 10     0.0395\n 2 Brazil  BRA           1971  49.2 10     0.0424\n 3 Brazil  BRA           1972  58.5 10     0.0457\n 4 Brazil  BRA           1973  79.3 10     0.0555\n 5 Brazil  BRA           1974 105   9      0.0677\n 6 Brazil  BRA           1975 124   9      0.0738\n 7 Brazil  BRA           1976 153   9      0.0818\n 8 Brazil  BRA           1977 176   8      0.0846\n 9 Brazil  BRA           1978 201   8      0.0855\n10 Brazil  BRA           1979 225   8      0.0856\n# ℹ 490 more rows"
  },
  {
    "objectID": "slides/animations.html#think-of-an-animation-as-faceting-by-time",
    "href": "slides/animations.html#think-of-an-animation-as-faceting-by-time",
    "title": "Animations",
    "section": "Think of an animation as faceting by time",
    "text": "Think of an animation as faceting by time"
  },
  {
    "objectID": "slides/animations.html#we-know-how-to-make-a-faceted-plot",
    "href": "slides/animations.html#we-know-how-to-make-a-faceted-plot",
    "title": "Animations",
    "section": "We know how to make a faceted plot",
    "text": "We know how to make a faceted plot\n\n\ngdp_ranked |&gt;\n  filter(year &gt; 1985 & year %% 5 == 0) |&gt;\n  ggplot(aes(gdp, rank)) +\n  geom_col(aes(fill = country)) +\n  facet_wrap(~year)"
  },
  {
    "objectID": "slides/animations.html#making-an-animation-is-about-as-complicated",
    "href": "slides/animations.html#making-an-animation-is-about-as-complicated",
    "title": "Animations",
    "section": "Making an animation is about as complicated",
    "text": "Making an animation is about as complicated\n\ngdp_ranked |&gt;\n  # gganimate uses the `group` aesthetic to track objects across frames\n  ggplot(aes(gdp, rank, group = country)) + \n  geom_col(aes(fill = country)) +\n  transition_states(year, transition_length = 5)"
  },
  {
    "objectID": "slides/animations.html#adding-country-names-and-plot-title",
    "href": "slides/animations.html#adding-country-names-and-plot-title",
    "title": "Animations",
    "section": "Adding country names and plot title",
    "text": "Adding country names and plot title\n\n\ngdp_ranked |&gt;\n  ggplot(aes(gdp, rank, group = country)) +\n  geom_col(aes(fill = country)) +\n  geom_text(\n    aes(x = -200, label = country),\n    hjust = 1, size = 14/.pt\n  ) +\n  xlim(-7000, 23000) +\n  labs(title = \"year: {closest_state}\") +\n  theme_minimal_vgrid(14, rel_small = 1) +\n  theme(\n    axis.text.y = element_blank(),\n    axis.title.y = element_blank(),\n    axis.ticks.y = element_blank(),\n    axis.line.y = element_blank()\n  ) + \n  guides(fill = \"none\") +\n  transition_states(year, transition_length = 5)"
  },
  {
    "objectID": "slides/animations.html#we-make-time-series-with-transition_reveal",
    "href": "slides/animations.html#we-make-time-series-with-transition_reveal",
    "title": "Animations",
    "section": "We make time series with transition_reveal()",
    "text": "We make time series with transition_reveal()\n\n\nselected &lt;- c(\"China\", \"Japan\",\n  \"United States\", \"Germany\", \"Brazil\")\n\ngdp_ranked |&gt;\n  filter(country %in% selected) |&gt;\n  ggplot(aes(year, gdp, color = country)) +\n  geom_line() +\n  geom_point(size = 3) +\n  scale_y_log10() +\n  transition_reveal(year)"
  },
  {
    "objectID": "slides/animations.html#this-works-also-with-ggrepel-for-labeling",
    "href": "slides/animations.html#this-works-also-with-ggrepel-for-labeling",
    "title": "Animations",
    "section": "This works also with ggrepel for labeling",
    "text": "This works also with ggrepel for labeling\n\n\ngdp_ranked |&gt;\n  filter(country %in% selected) |&gt;\n  ggplot(aes(year, gdp, color = country)) +\n  geom_line() +\n  geom_point(size = 3) +\n  geom_text_repel(\n    aes(label = country),\n    hjust = 0,\n    nudge_x = 2,\n    direction = \"y\",\n    xlim = c(NA, Inf),\n    segment.color = NA\n  ) +\n  scale_y_log10() +\n  guides(color = \"none\") +\n  coord_cartesian(clip = \"off\") +\n  theme(plot.margin = margin(7, 100, 7, 7)) +\n  transition_reveal(year)"
  },
  {
    "objectID": "slides/animations.html#reproducing-the-famous-gapminder-animation",
    "href": "slides/animations.html#reproducing-the-famous-gapminder-animation",
    "title": "Animations",
    "section": "Reproducing the famous gapminder animation",
    "text": "Reproducing the famous gapminder animation\n\n\nlibrary(gapminder)\n\ngapminder %&gt;% filter(continent != \"Oceania\") |&gt;\n  ggplot() +\n  aes(gdpPercap, lifeExp, size = pop) +\n  geom_point(alpha = 0.7, color = \"#0072B2\") +\n  scale_size(range = c(2, 12), guide = \"none\") +\n  scale_x_log10(name = \"GDP per capita\") +\n  facet_wrap(~continent, nrow = 2) +\n  labs(\n    title = \"Year: {frame_time}\",\n    y = \"life expectancy\"\n  ) +\n  transition_time(year) +\n  ease_aes(\"linear\")\n\n\n\n\n\n\n\n\n\n\n\n\nSee Hans Rosling video here"
  },
  {
    "objectID": "slides/animations.html#further-reading",
    "href": "slides/animations.html#further-reading",
    "title": "Animations",
    "section": "Further reading",
    "text": "Further reading\n\ngganimate documentation: Getting started\ngganimate reference documentation: transition_states()\ngganimate reference documentation: transition_reveal()"
  },
  {
    "objectID": "schedule.html",
    "href": "schedule.html",
    "title": "DSC 385 Schedule",
    "section": "",
    "text": "Materials:\n\n\nSlides\n\nWorksheet 1: Introduction to Quarto\nWorksheet 2: Introduction to R\n\n\n\n\n\nMaterials:\n\n\nSlides\n\nWorksheet\n\n\n\n\n\nMaterials:\n\n\nSlides Part I (visualizing amounts)\nWorksheet Part I\nSlides Part II (telling a story)\n\n\n\n\n\nMaterials:\n\n\nSlides\n\nWorksheet\n\n\n\n\n\nMaterials:\n\n\nSlides\n\nWorksheet\n\n\n\n\n\nMaterials:\n\n\nSlides\n\nWorksheet\n\n\n\n\n\nMaterials:\n\n\nSlides\n\nWorksheet\n\n\n\n\n\nMaterials:\n\n\nSlides\n\nWorksheet\n\n\n\n\n\nMaterials:\n\n\nSlides Part I (pipe, sorting, filtering, mutating)\nWorksheet Part I\nSlides Part II (summarizing, pivoting, joining)\nWorksheet Part II\n\n\n\n\n\nMaterials:\n\n\nSlides\n\nWorksheet\n\n\n\n\n\nMaterials:\n\n\nSlides\nWorksheet Part I (data cleaning)\nWorksheet Part II (missing data)\n\n\n\n\n\nMaterials:\n\n\nSlides\nWorksheet\n\n\n\n\n\nMaterials:\n\n\nSlides\nWorksheet\n\n\n\n\n\nMaterials:\n\n\nSlides\n\nWorksheet\n\n\n\n\n\nMaterials:\n\n\nSlides\n\nWorksheet\n\n\n\n\n\nMaterials:\n\n\nSlides\n\nWorksheet\n\n\n\n\n\nMaterials:\n\n\nSlides\n\nWorksheet\n\n\n\n\n\nMaterials:\n\n\nSlides\n\nWorksheet\n\n\n\n\n\nMaterials:\n\n\nSlides\n\nWorksheet\n\n\n\n\n\nMaterials:\n\n\nSlides\n\nWorksheet\n\n\n\n\n\nMaterials:\n\n\nSlides\n\nWorksheet\n\n\n\n\n\nMaterials:\n\n\nSlides\n\nWorksheet\n\n\n\n\n\nMaterials:\n\n\nSlides\n\nWorksheet\n\n\n\n\n\nMaterials:\n\n\nSlides\n\nWorksheet\n\n\n\n\n\nMaterials:\n\n\nSlides\n\nWorksheet\n\n\n\n\n\nMaterials:\n\n\nSlides: Interactive plots\n\nWorksheet: Interactive plots\nSlides: Animations\n\n\n\n\n\nMaterials:\n\n\nSlides\n\nWorksheet"
  },
  {
    "objectID": "schedule.html#lectures",
    "href": "schedule.html#lectures",
    "title": "DSC 385 Schedule",
    "section": "",
    "text": "Materials:\n\n\nSlides\n\nWorksheet 1: Introduction to Quarto\nWorksheet 2: Introduction to R\n\n\n\n\n\nMaterials:\n\n\nSlides\n\nWorksheet\n\n\n\n\n\nMaterials:\n\n\nSlides Part I (visualizing amounts)\nWorksheet Part I\nSlides Part II (telling a story)\n\n\n\n\n\nMaterials:\n\n\nSlides\n\nWorksheet\n\n\n\n\n\nMaterials:\n\n\nSlides\n\nWorksheet\n\n\n\n\n\nMaterials:\n\n\nSlides\n\nWorksheet\n\n\n\n\n\nMaterials:\n\n\nSlides\n\nWorksheet\n\n\n\n\n\nMaterials:\n\n\nSlides\n\nWorksheet\n\n\n\n\n\nMaterials:\n\n\nSlides Part I (pipe, sorting, filtering, mutating)\nWorksheet Part I\nSlides Part II (summarizing, pivoting, joining)\nWorksheet Part II\n\n\n\n\n\nMaterials:\n\n\nSlides\n\nWorksheet\n\n\n\n\n\nMaterials:\n\n\nSlides\nWorksheet Part I (data cleaning)\nWorksheet Part II (missing data)\n\n\n\n\n\nMaterials:\n\n\nSlides\nWorksheet\n\n\n\n\n\nMaterials:\n\n\nSlides\nWorksheet\n\n\n\n\n\nMaterials:\n\n\nSlides\n\nWorksheet\n\n\n\n\n\nMaterials:\n\n\nSlides\n\nWorksheet\n\n\n\n\n\nMaterials:\n\n\nSlides\n\nWorksheet\n\n\n\n\n\nMaterials:\n\n\nSlides\n\nWorksheet\n\n\n\n\n\nMaterials:\n\n\nSlides\n\nWorksheet\n\n\n\n\n\nMaterials:\n\n\nSlides\n\nWorksheet\n\n\n\n\n\nMaterials:\n\n\nSlides\n\nWorksheet\n\n\n\n\n\nMaterials:\n\n\nSlides\n\nWorksheet\n\n\n\n\n\nMaterials:\n\n\nSlides\n\nWorksheet\n\n\n\n\n\nMaterials:\n\n\nSlides\n\nWorksheet\n\n\n\n\n\nMaterials:\n\n\nSlides\n\nWorksheet\n\n\n\n\n\nMaterials:\n\n\nSlides\n\nWorksheet\n\n\n\n\n\nMaterials:\n\n\nSlides: Interactive plots\n\nWorksheet: Interactive plots\nSlides: Animations\n\n\n\n\n\nMaterials:\n\n\nSlides\n\nWorksheet"
  },
  {
    "objectID": "index.html",
    "href": "index.html",
    "title": "DSC 385",
    "section": "",
    "text": "This is the home page for DSC 385, Data Exploration, Visualization, and Foundations of Unsupervised Learning."
  },
  {
    "objectID": "index.html#computing-requirements",
    "href": "index.html#computing-requirements",
    "title": "DSC 385",
    "section": "Computing requirements",
    "text": "Computing requirements\nTo complete assignments in this class, you will need the following:\n\nA recent version of R, download from here.\nA recent version of RStudio, download from here, OR a recent version of Positron, download from here.\nThe following R packages:\nbroom, cluster, colorspace, cowplot, gapminder, GGally, gganimate, ggiraph, ggdendro, ggdist, ggforce, ggplot2movies, ggrepel, ggridges, ggthemes, gifski, glue, knitr, learnr, naniar, margins, MASS, Matrix, nycflights13, palmerpenguins, patchwork, quarto, rmarkdown, rnaturalearth, rnaturalearthhires, Rtsne, scales, sf, sp, tidyverse, transformr, umap\n\nYou can install all required R packages at once by running the following code in the R command line:\n# first run this command:\ninstall.packages(\n  c(\n    \"broom\", \"cluster\", \"colorspace\", \"cowplot\", \"gapminder\", \n    \"GGally\", \"gganimate\", \"ggiraph\", \"ggdendro\", \"ggdist\", \"ggforce\",\n    \"ggplot2movies\", \"ggrepel\", \"ggridges\", \"ggthemes\", \"gifski\", \"glue\",\n    \"knitr\", \"learnr\", \"naniar\", \"margins\", \"MASS\", \"Matrix\",\n    \"nycflights13\", \"palmerpenguins\", \"patchwork\", \"quarto\", \"rmarkdown\",\n    \"rnaturalearth\", \"Rtsne\", \"scales\", \"sf\", \"sp\", \"tidyverse\",\n    \"transformr\", \"umap\"\n  )\n)\n\n# then run this command:\ninstall.packages(\n  \"rnaturalearthhires\", repos = \"https://packages.ropensci.org\", type = \"source\"\n)"
  },
  {
    "objectID": "slides/aesthetic-mappings.html#dataset-daily-average-temperatures-for-various-locations",
    "href": "slides/aesthetic-mappings.html#dataset-daily-average-temperatures-for-various-locations",
    "title": "Aesthetic mappings",
    "section": "Dataset:Daily average temperatures for various locations",
    "text": "Dataset:Daily average temperatures for various locations\n\n\n\n\n\n\nlocation\nday_of_year\nmonth\ntemperature\n\n\n\n\nDeath Valley\n1\n01\n51.0\n\n\nDeath Valley\n2\n01\n51.2\n\n\nDeath Valley\n3\n01\n51.3\n\n\nDeath Valley\n4\n01\n51.4\n\n\nDeath Valley\n5\n01\n51.6\n\n\nDeath Valley\n6\n01\n51.7\n\n\nDeath Valley\n7\n01\n51.9\n\n\nDeath Valley\n8\n01\n52.0\n\n\nDeath Valley\n9\n01\n52.2\n\n\nDeath Valley\n10\n01\n52.3\n\n\nDeath Valley\n11\n01\n52.5\n\n\nDeath Valley\n12\n01\n52.7\n\n\nDeath Valley\n13\n01\n52.9"
  },
  {
    "objectID": "slides/aesthetic-mappings.html#temperatures-mapped-onto-y-position",
    "href": "slides/aesthetic-mappings.html#temperatures-mapped-onto-y-position",
    "title": "Aesthetic mappings",
    "section": "Temperatures mapped onto y position",
    "text": "Temperatures mapped onto y position"
  },
  {
    "objectID": "slides/aesthetic-mappings.html#temperatures-mapped-onto-color",
    "href": "slides/aesthetic-mappings.html#temperatures-mapped-onto-color",
    "title": "Aesthetic mappings",
    "section": "Temperatures mapped onto color",
    "text": "Temperatures mapped onto color"
  },
  {
    "objectID": "slides/aesthetic-mappings.html#commonly-used-aesthetics",
    "href": "slides/aesthetic-mappings.html#commonly-used-aesthetics",
    "title": "Aesthetic mappings",
    "section": "Commonly used aesthetics",
    "text": "Commonly used aesthetics"
  },
  {
    "objectID": "slides/aesthetic-mappings.html#the-same-data-values-can-be-mapped-to-different-aesthetics",
    "href": "slides/aesthetic-mappings.html#the-same-data-values-can-be-mapped-to-different-aesthetics",
    "title": "Aesthetic mappings",
    "section": "The same data values can be mapped to different aesthetics",
    "text": "The same data values can be mapped to different aesthetics"
  },
  {
    "objectID": "slides/aesthetic-mappings.html#we-can-use-many-different-aesthetics-at-once",
    "href": "slides/aesthetic-mappings.html#we-can-use-many-different-aesthetics-at-once",
    "title": "Aesthetic mappings",
    "section": "We can use many different aesthetics at once",
    "text": "We can use many different aesthetics at once"
  },
  {
    "objectID": "slides/aesthetic-mappings.html#getting-the-data",
    "href": "slides/aesthetic-mappings.html#getting-the-data",
    "title": "Aesthetic mappings",
    "section": "Getting the data",
    "text": "Getting the data\nAll examples will use the temperatures dataset:\n\n\ntemperatures &lt;- read_csv(\"https://wilkelab.org/DSC385/datasets/tempnormals.csv\") |&gt;\n  mutate(\n    location = factor(\n      location, levels = c(\"Death Valley\", \"Houston\", \"San Diego\", \"Chicago\")\n    )\n  ) |&gt;\n  select(location, station_id, day_of_year, month, temperature)"
  },
  {
    "objectID": "slides/aesthetic-mappings.html#we-define-the-mapping-with-aes",
    "href": "slides/aesthetic-mappings.html#we-define-the-mapping-with-aes",
    "title": "Aesthetic mappings",
    "section": "We define the mapping with aes()",
    "text": "We define the mapping with aes()\n\n\nggplot(\n  data = temperatures,\n  mapping = aes(x = day_of_year, y = temperature, color = location)\n) + \n  geom_line()"
  },
  {
    "objectID": "slides/aesthetic-mappings.html#we-define-the-mapping-with-aes-1",
    "href": "slides/aesthetic-mappings.html#we-define-the-mapping-with-aes-1",
    "title": "Aesthetic mappings",
    "section": "We define the mapping with aes()",
    "text": "We define the mapping with aes()\n\n\nggplot(\n  data = temperatures,\n  mapping = aes(x = day_of_year, y = location, color = temperature)\n) + \n  geom_point(size = 5)"
  },
  {
    "objectID": "slides/aesthetic-mappings.html#we-frequently-omit-argument-names",
    "href": "slides/aesthetic-mappings.html#we-frequently-omit-argument-names",
    "title": "Aesthetic mappings",
    "section": "We frequently omit argument names",
    "text": "We frequently omit argument names\nLong form, all arguments are named:\n\nggplot(\n  data = temperatures,\n  mapping = aes(x = day_of_year, y = location, color = temperature)\n) + geom_point(size = 5)\n\n\nAbbreviated form, common arguments remain unnamed:\n\nggplot(temperatures, aes(day_of_year, location, color = temperature)) + \n  geom_point(size = 5)"
  },
  {
    "objectID": "slides/aesthetic-mappings.html#the-geom-determines-how-the-data-is-shown",
    "href": "slides/aesthetic-mappings.html#the-geom-determines-how-the-data-is-shown",
    "title": "Aesthetic mappings",
    "section": "The geom determines how the data is shown",
    "text": "The geom determines how the data is shown\n\n\nggplot(temperatures, aes(day_of_year, temperature, color = location)) + \n  geom_line()"
  },
  {
    "objectID": "slides/aesthetic-mappings.html#the-geom-determines-how-the-data-is-shown-1",
    "href": "slides/aesthetic-mappings.html#the-geom-determines-how-the-data-is-shown-1",
    "title": "Aesthetic mappings",
    "section": "The geom determines how the data is shown",
    "text": "The geom determines how the data is shown\n\n\nggplot(temperatures, aes(day_of_year, location, color = temperature)) + \n  geom_point(size = 5)"
  },
  {
    "objectID": "slides/aesthetic-mappings.html#the-geom-determines-how-the-data-is-shown-2",
    "href": "slides/aesthetic-mappings.html#the-geom-determines-how-the-data-is-shown-2",
    "title": "Aesthetic mappings",
    "section": "The geom determines how the data is shown",
    "text": "The geom determines how the data is shown\n\n\nggplot(temperatures, aes(month, temperature, color = location)) + \n  geom_boxplot()"
  },
  {
    "objectID": "slides/aesthetic-mappings.html#the-geom-determines-how-the-data-is-shown-3",
    "href": "slides/aesthetic-mappings.html#the-geom-determines-how-the-data-is-shown-3",
    "title": "Aesthetic mappings",
    "section": "The geom determines how the data is shown",
    "text": "The geom determines how the data is shown\n\n\nggplot(temperatures, aes(month, temperature, fill = location)) + \n  geom_violin() + \n  facet_wrap(~location) # make separate panel per location"
  },
  {
    "objectID": "slides/aesthetic-mappings.html#distinguish-between-color-and-fill",
    "href": "slides/aesthetic-mappings.html#distinguish-between-color-and-fill",
    "title": "Aesthetic mappings",
    "section": "Distinguish between color and fill",
    "text": "Distinguish between color and fill\n\ncolor Applies color to points, lines, text, borders\n\n\nfill Applies color to any filled areas"
  },
  {
    "objectID": "slides/aesthetic-mappings.html#many-geoms-use-both-color-and-fill",
    "href": "slides/aesthetic-mappings.html#many-geoms-use-both-color-and-fill",
    "title": "Aesthetic mappings",
    "section": "Many geoms use both color and fill",
    "text": "Many geoms use both color and fill\n\n\nggplot(temperatures, aes(month, temperature, color = location)) + \n  geom_boxplot()"
  },
  {
    "objectID": "slides/aesthetic-mappings.html#many-geoms-use-both-color-and-fill-1",
    "href": "slides/aesthetic-mappings.html#many-geoms-use-both-color-and-fill-1",
    "title": "Aesthetic mappings",
    "section": "Many geoms use both color and fill",
    "text": "Many geoms use both color and fill\n\n\nggplot(temperatures, aes(month, temperature, fill = location)) + \n  geom_boxplot()"
  },
  {
    "objectID": "slides/aesthetic-mappings.html#many-geoms-use-both-color-and-fill-2",
    "href": "slides/aesthetic-mappings.html#many-geoms-use-both-color-and-fill-2",
    "title": "Aesthetic mappings",
    "section": "Many geoms use both color and fill",
    "text": "Many geoms use both color and fill\n\n\nggplot(temperatures, aes(month, temperature, color = location, fill = location)) + \n  geom_boxplot()"
  },
  {
    "objectID": "slides/aesthetic-mappings.html#aesthetics-can-also-be-used-as-parameters",
    "href": "slides/aesthetic-mappings.html#aesthetics-can-also-be-used-as-parameters",
    "title": "Aesthetic mappings",
    "section": "Aesthetics can also be used as parameters",
    "text": "Aesthetics can also be used as parameters\n\n\nggplot(temperatures, aes(month, temperature, fill = location)) + \n  geom_boxplot(color = \"steelblue\")"
  },
  {
    "objectID": "slides/aesthetic-mappings.html#aesthetics-can-also-be-used-as-parameters-1",
    "href": "slides/aesthetic-mappings.html#aesthetics-can-also-be-used-as-parameters-1",
    "title": "Aesthetic mappings",
    "section": "Aesthetics can also be used as parameters",
    "text": "Aesthetics can also be used as parameters\n\n\nggplot(temperatures, aes(month, temperature, color = location)) + \n  geom_boxplot(fill = \"steelblue\")"
  },
  {
    "objectID": "slides/aesthetic-mappings.html#further-reading",
    "href": "slides/aesthetic-mappings.html#further-reading",
    "title": "Aesthetic mappings",
    "section": "Further reading",
    "text": "Further reading\n\nFundamentals of Data Visualization: Chapter 2: Visualizing data\nData Visualization—A Practical Introduction: Chapter 3: Make a plot\nggplot2 reference documentation\nggplot2 book\nggplot2 cheatsheet"
  },
  {
    "objectID": "slides/clustering.html#kmeans-motivation",
    "href": "slides/clustering.html#kmeans-motivation",
    "title": "Clustering",
    "section": "",
    "text": "These points correspond to three clusters. Can a computer find them automatically?"
  },
  {
    "objectID": "slides/clustering.html#kmeans-motivation-color",
    "href": "slides/clustering.html#kmeans-motivation-color",
    "title": "Clustering",
    "section": "",
    "text": "These points correspond to three clusters. Can a computer find them automatically?"
  },
  {
    "objectID": "slides/clustering.html#k-means-clustering",
    "href": "slides/clustering.html#k-means-clustering",
    "title": "Clustering",
    "section": "k-means clustering",
    "text": "k-means clustering\n\n1. Start with k randomly chosen means\n\n\n2. Color data points by the shortest distance to any mean\n\n\n3. Move means to centroid position of each group of points\n\n\n4. Repeat from step 2 until convergence"
  },
  {
    "objectID": "slides/clustering.html#kmeans-animation-2",
    "href": "slides/clustering.html#kmeans-animation-2",
    "title": "Clustering",
    "section": "",
    "text": "Add means at arbitrary locations"
  },
  {
    "objectID": "slides/clustering.html#kmeans-animation-3",
    "href": "slides/clustering.html#kmeans-animation-3",
    "title": "Clustering",
    "section": "",
    "text": "Color data points by the shortest distance to any mean"
  },
  {
    "objectID": "slides/clustering.html#kmeans-animation-4",
    "href": "slides/clustering.html#kmeans-animation-4",
    "title": "Clustering",
    "section": "",
    "text": "Color data points by the shortest distance to any mean"
  },
  {
    "objectID": "slides/clustering.html#kmeans-animation-5",
    "href": "slides/clustering.html#kmeans-animation-5",
    "title": "Clustering",
    "section": "",
    "text": "Move means to centroid position of each group of points"
  },
  {
    "objectID": "slides/clustering.html#kmeans-animation-6",
    "href": "slides/clustering.html#kmeans-animation-6",
    "title": "Clustering",
    "section": "",
    "text": "Color data points by the shortest distance to any mean"
  },
  {
    "objectID": "slides/clustering.html#kmeans-animation-7",
    "href": "slides/clustering.html#kmeans-animation-7",
    "title": "Clustering",
    "section": "",
    "text": "Color data points by the shortest distance to any mean"
  },
  {
    "objectID": "slides/clustering.html#kmeans-animation-8",
    "href": "slides/clustering.html#kmeans-animation-8",
    "title": "Clustering",
    "section": "",
    "text": "Move means to centroid position of each group of points"
  },
  {
    "objectID": "slides/clustering.html#kmeans-animation-9",
    "href": "slides/clustering.html#kmeans-animation-9",
    "title": "Clustering",
    "section": "",
    "text": "Color data points by the shortest distance to any mean"
  },
  {
    "objectID": "slides/clustering.html#kmeans-animation-10",
    "href": "slides/clustering.html#kmeans-animation-10",
    "title": "Clustering",
    "section": "",
    "text": "Color data points by the shortest distance to any mean"
  },
  {
    "objectID": "slides/clustering.html#kmeans-animation-11",
    "href": "slides/clustering.html#kmeans-animation-11",
    "title": "Clustering",
    "section": "",
    "text": "Move means to centroid position of each group of points"
  },
  {
    "objectID": "slides/clustering.html#kmeans-animation-12",
    "href": "slides/clustering.html#kmeans-animation-12",
    "title": "Clustering",
    "section": "",
    "text": "Color data points by the shortest distance to any mean"
  },
  {
    "objectID": "slides/clustering.html#kmeans-animation-13",
    "href": "slides/clustering.html#kmeans-animation-13",
    "title": "Clustering",
    "section": "",
    "text": "Color data points by the shortest distance to any mean"
  },
  {
    "objectID": "slides/clustering.html#kmeans-animation-14",
    "href": "slides/clustering.html#kmeans-animation-14",
    "title": "Clustering",
    "section": "",
    "text": "Move means to centroid position of each group of points"
  },
  {
    "objectID": "slides/clustering.html#kmeans-animation-15",
    "href": "slides/clustering.html#kmeans-animation-15",
    "title": "Clustering",
    "section": "",
    "text": "Color data points by the shortest distance to any mean"
  },
  {
    "objectID": "slides/clustering.html#kmeans-animation-16",
    "href": "slides/clustering.html#kmeans-animation-16",
    "title": "Clustering",
    "section": "",
    "text": "Color data points by the shortest distance to any mean"
  },
  {
    "objectID": "slides/clustering.html#kmeans-animation-17",
    "href": "slides/clustering.html#kmeans-animation-17",
    "title": "Clustering",
    "section": "",
    "text": "Move means to centroid position of each group of points"
  },
  {
    "objectID": "slides/clustering.html#kmeans-animation-18",
    "href": "slides/clustering.html#kmeans-animation-18",
    "title": "Clustering",
    "section": "",
    "text": "Color data points by the shortest distance to any mean"
  },
  {
    "objectID": "slides/clustering.html#kmeans-animation-19",
    "href": "slides/clustering.html#kmeans-animation-19",
    "title": "Clustering",
    "section": "",
    "text": "Color data points by the shortest distance to any mean"
  },
  {
    "objectID": "slides/clustering.html#kmeans-animation-20",
    "href": "slides/clustering.html#kmeans-animation-20",
    "title": "Clustering",
    "section": "",
    "text": "Final result"
  },
  {
    "objectID": "slides/clustering.html#kmeans-five-clusters-2",
    "href": "slides/clustering.html#kmeans-five-clusters-2",
    "title": "Clustering",
    "section": "",
    "text": "Add means at arbitrary locations"
  },
  {
    "objectID": "slides/clustering.html#kmeans-five-clusters-3",
    "href": "slides/clustering.html#kmeans-five-clusters-3",
    "title": "Clustering",
    "section": "",
    "text": "Color data points by the shortest distance to any mean"
  },
  {
    "objectID": "slides/clustering.html#kmeans-five-clusters-4",
    "href": "slides/clustering.html#kmeans-five-clusters-4",
    "title": "Clustering",
    "section": "",
    "text": "Color data points by the shortest distance to any mean"
  },
  {
    "objectID": "slides/clustering.html#kmeans-five-clusters-5",
    "href": "slides/clustering.html#kmeans-five-clusters-5",
    "title": "Clustering",
    "section": "",
    "text": "Move means to centroid position of each group of points"
  },
  {
    "objectID": "slides/clustering.html#kmeans-five-clusters-6",
    "href": "slides/clustering.html#kmeans-five-clusters-6",
    "title": "Clustering",
    "section": "",
    "text": "Color data points by the shortest distance to any mean"
  },
  {
    "objectID": "slides/clustering.html#kmeans-five-clusters-7",
    "href": "slides/clustering.html#kmeans-five-clusters-7",
    "title": "Clustering",
    "section": "",
    "text": "Color data points by the shortest distance to any mean"
  },
  {
    "objectID": "slides/clustering.html#kmeans-five-clusters-8",
    "href": "slides/clustering.html#kmeans-five-clusters-8",
    "title": "Clustering",
    "section": "",
    "text": "Move means to centroid position of each group of points"
  },
  {
    "objectID": "slides/clustering.html#kmeans-five-clusters-9",
    "href": "slides/clustering.html#kmeans-five-clusters-9",
    "title": "Clustering",
    "section": "",
    "text": "Color data points by the shortest distance to any mean"
  },
  {
    "objectID": "slides/clustering.html#kmeans-five-clusters-10",
    "href": "slides/clustering.html#kmeans-five-clusters-10",
    "title": "Clustering",
    "section": "",
    "text": "Color data points by the shortest distance to any mean"
  },
  {
    "objectID": "slides/clustering.html#kmeans-five-clusters-11",
    "href": "slides/clustering.html#kmeans-five-clusters-11",
    "title": "Clustering",
    "section": "",
    "text": "Move means to centroid position of each group of points"
  },
  {
    "objectID": "slides/clustering.html#kmeans-five-clusters-12",
    "href": "slides/clustering.html#kmeans-five-clusters-12",
    "title": "Clustering",
    "section": "",
    "text": "Color data points by the shortest distance to any mean"
  },
  {
    "objectID": "slides/clustering.html#kmeans-five-clusters-13",
    "href": "slides/clustering.html#kmeans-five-clusters-13",
    "title": "Clustering",
    "section": "",
    "text": "Color data points by the shortest distance to any mean"
  },
  {
    "objectID": "slides/clustering.html#kmeans-five-clusters-14",
    "href": "slides/clustering.html#kmeans-five-clusters-14",
    "title": "Clustering",
    "section": "",
    "text": "Move means to centroid position of each group of points"
  },
  {
    "objectID": "slides/clustering.html#kmeans-five-clusters-15",
    "href": "slides/clustering.html#kmeans-five-clusters-15",
    "title": "Clustering",
    "section": "",
    "text": "Color data points by the shortest distance to any mean"
  },
  {
    "objectID": "slides/clustering.html#kmeans-five-clusters-16",
    "href": "slides/clustering.html#kmeans-five-clusters-16",
    "title": "Clustering",
    "section": "",
    "text": "Color data points by the shortest distance to any mean"
  },
  {
    "objectID": "slides/clustering.html#kmeans-five-clusters-17",
    "href": "slides/clustering.html#kmeans-five-clusters-17",
    "title": "Clustering",
    "section": "",
    "text": "Move means to centroid position of each group of points"
  },
  {
    "objectID": "slides/clustering.html#kmeans-five-clusters-18",
    "href": "slides/clustering.html#kmeans-five-clusters-18",
    "title": "Clustering",
    "section": "",
    "text": "Final result"
  },
  {
    "objectID": "slides/clustering.html#kmeans-spirals-2",
    "href": "slides/clustering.html#kmeans-spirals-2",
    "title": "Clustering",
    "section": "",
    "text": "Add means at arbitrary locations"
  },
  {
    "objectID": "slides/clustering.html#kmeans-spirals-3",
    "href": "slides/clustering.html#kmeans-spirals-3",
    "title": "Clustering",
    "section": "",
    "text": "Color data points by the shortest distance to any mean"
  },
  {
    "objectID": "slides/clustering.html#kmeans-spirals-4",
    "href": "slides/clustering.html#kmeans-spirals-4",
    "title": "Clustering",
    "section": "",
    "text": "Color data points by the shortest distance to any mean"
  },
  {
    "objectID": "slides/clustering.html#kmeans-spirals-5",
    "href": "slides/clustering.html#kmeans-spirals-5",
    "title": "Clustering",
    "section": "",
    "text": "Move means to centroid position of each group of points"
  },
  {
    "objectID": "slides/clustering.html#kmeans-spirals-6",
    "href": "slides/clustering.html#kmeans-spirals-6",
    "title": "Clustering",
    "section": "",
    "text": "Color data points by the shortest distance to any mean"
  },
  {
    "objectID": "slides/clustering.html#kmeans-spirals-7",
    "href": "slides/clustering.html#kmeans-spirals-7",
    "title": "Clustering",
    "section": "",
    "text": "Color data points by the shortest distance to any mean"
  },
  {
    "objectID": "slides/clustering.html#kmeans-spirals-8",
    "href": "slides/clustering.html#kmeans-spirals-8",
    "title": "Clustering",
    "section": "",
    "text": "Move means to centroid position of each group of points"
  },
  {
    "objectID": "slides/clustering.html#kmeans-spirals-9",
    "href": "slides/clustering.html#kmeans-spirals-9",
    "title": "Clustering",
    "section": "",
    "text": "Color data points by the shortest distance to any mean"
  },
  {
    "objectID": "slides/clustering.html#kmeans-spirals-10",
    "href": "slides/clustering.html#kmeans-spirals-10",
    "title": "Clustering",
    "section": "",
    "text": "Color data points by the shortest distance to any mean"
  },
  {
    "objectID": "slides/clustering.html#kmeans-spirals-11",
    "href": "slides/clustering.html#kmeans-spirals-11",
    "title": "Clustering",
    "section": "",
    "text": "Move means to centroid position of each group of points"
  },
  {
    "objectID": "slides/clustering.html#kmeans-spirals-12",
    "href": "slides/clustering.html#kmeans-spirals-12",
    "title": "Clustering",
    "section": "",
    "text": "Color data points by the shortest distance to any mean"
  },
  {
    "objectID": "slides/clustering.html#kmeans-spirals-13",
    "href": "slides/clustering.html#kmeans-spirals-13",
    "title": "Clustering",
    "section": "",
    "text": "Color data points by the shortest distance to any mean"
  },
  {
    "objectID": "slides/clustering.html#kmeans-spirals-14",
    "href": "slides/clustering.html#kmeans-spirals-14",
    "title": "Clustering",
    "section": "",
    "text": "Move means to centroid position of each group of points"
  },
  {
    "objectID": "slides/clustering.html#kmeans-spirals-15",
    "href": "slides/clustering.html#kmeans-spirals-15",
    "title": "Clustering",
    "section": "",
    "text": "Color data points by the shortest distance to any mean"
  },
  {
    "objectID": "slides/clustering.html#kmeans-spirals-16",
    "href": "slides/clustering.html#kmeans-spirals-16",
    "title": "Clustering",
    "section": "",
    "text": "Color data points by the shortest distance to any mean"
  },
  {
    "objectID": "slides/clustering.html#kmeans-spirals-17",
    "href": "slides/clustering.html#kmeans-spirals-17",
    "title": "Clustering",
    "section": "",
    "text": "Move means to centroid position of each group of points"
  },
  {
    "objectID": "slides/clustering.html#kmeans-spirals-18",
    "href": "slides/clustering.html#kmeans-spirals-18",
    "title": "Clustering",
    "section": "",
    "text": "Final result"
  },
  {
    "objectID": "slides/clustering.html#other-clustering-algorithms",
    "href": "slides/clustering.html#other-clustering-algorithms",
    "title": "Clustering",
    "section": "Other clustering algorithms",
    "text": "Other clustering algorithms\n\n\n\n\n\n\n\n\nFrom George Seif (2018) The 5 Clustering Algorithms Data Scientists Need to Know"
  },
  {
    "objectID": "slides/clustering.html#example-dataset-iris",
    "href": "slides/clustering.html#example-dataset-iris",
    "title": "Clustering",
    "section": "Example dataset: iris",
    "text": "Example dataset: iris\n\nMeasurements on the sepals and petals of three iris species\n\niris\n\n    Sepal.Length Sepal.Width Petal.Length Petal.Width    Species\n1            5.1         3.5          1.4         0.2     setosa\n2            4.9         3.0          1.4         0.2     setosa\n3            4.7         3.2          1.3         0.2     setosa\n4            4.6         3.1          1.5         0.2     setosa\n5            5.0         3.6          1.4         0.2     setosa\n6            5.4         3.9          1.7         0.4     setosa\n7            4.6         3.4          1.4         0.3     setosa\n8            5.0         3.4          1.5         0.2     setosa\n9            4.4         2.9          1.4         0.2     setosa\n10           4.9         3.1          1.5         0.1     setosa\n11           5.4         3.7          1.5         0.2     setosa\n12           4.8         3.4          1.6         0.2     setosa\n13           4.8         3.0          1.4         0.1     setosa\n14           4.3         3.0          1.1         0.1     setosa\n15           5.8         4.0          1.2         0.2     setosa\n16           5.7         4.4          1.5         0.4     setosa\n17           5.4         3.9          1.3         0.4     setosa\n18           5.1         3.5          1.4         0.3     setosa\n19           5.7         3.8          1.7         0.3     setosa\n20           5.1         3.8          1.5         0.3     setosa\n21           5.4         3.4          1.7         0.2     setosa\n22           5.1         3.7          1.5         0.4     setosa\n23           4.6         3.6          1.0         0.2     setosa\n24           5.1         3.3          1.7         0.5     setosa\n25           4.8         3.4          1.9         0.2     setosa\n26           5.0         3.0          1.6         0.2     setosa\n27           5.0         3.4          1.6         0.4     setosa\n28           5.2         3.5          1.5         0.2     setosa\n29           5.2         3.4          1.4         0.2     setosa\n30           4.7         3.2          1.6         0.2     setosa\n31           4.8         3.1          1.6         0.2     setosa\n32           5.4         3.4          1.5         0.4     setosa\n33           5.2         4.1          1.5         0.1     setosa\n34           5.5         4.2          1.4         0.2     setosa\n35           4.9         3.1          1.5         0.2     setosa\n36           5.0         3.2          1.2         0.2     setosa\n37           5.5         3.5          1.3         0.2     setosa\n38           4.9         3.6          1.4         0.1     setosa\n39           4.4         3.0          1.3         0.2     setosa\n40           5.1         3.4          1.5         0.2     setosa\n41           5.0         3.5          1.3         0.3     setosa\n42           4.5         2.3          1.3         0.3     setosa\n43           4.4         3.2          1.3         0.2     setosa\n44           5.0         3.5          1.6         0.6     setosa\n45           5.1         3.8          1.9         0.4     setosa\n46           4.8         3.0          1.4         0.3     setosa\n47           5.1         3.8          1.6         0.2     setosa\n48           4.6         3.2          1.4         0.2     setosa\n49           5.3         3.7          1.5         0.2     setosa\n50           5.0         3.3          1.4         0.2     setosa\n51           7.0         3.2          4.7         1.4 versicolor\n52           6.4         3.2          4.5         1.5 versicolor\n53           6.9         3.1          4.9         1.5 versicolor\n54           5.5         2.3          4.0         1.3 versicolor\n55           6.5         2.8          4.6         1.5 versicolor\n56           5.7         2.8          4.5         1.3 versicolor\n57           6.3         3.3          4.7         1.6 versicolor\n58           4.9         2.4          3.3         1.0 versicolor\n59           6.6         2.9          4.6         1.3 versicolor\n60           5.2         2.7          3.9         1.4 versicolor\n61           5.0         2.0          3.5         1.0 versicolor\n62           5.9         3.0          4.2         1.5 versicolor\n63           6.0         2.2          4.0         1.0 versicolor\n64           6.1         2.9          4.7         1.4 versicolor\n65           5.6         2.9          3.6         1.3 versicolor\n66           6.7         3.1          4.4         1.4 versicolor\n67           5.6         3.0          4.5         1.5 versicolor\n68           5.8         2.7          4.1         1.0 versicolor\n69           6.2         2.2          4.5         1.5 versicolor\n70           5.6         2.5          3.9         1.1 versicolor\n71           5.9         3.2          4.8         1.8 versicolor\n72           6.1         2.8          4.0         1.3 versicolor\n73           6.3         2.5          4.9         1.5 versicolor\n74           6.1         2.8          4.7         1.2 versicolor\n75           6.4         2.9          4.3         1.3 versicolor\n76           6.6         3.0          4.4         1.4 versicolor\n77           6.8         2.8          4.8         1.4 versicolor\n78           6.7         3.0          5.0         1.7 versicolor\n79           6.0         2.9          4.5         1.5 versicolor\n80           5.7         2.6          3.5         1.0 versicolor\n81           5.5         2.4          3.8         1.1 versicolor\n82           5.5         2.4          3.7         1.0 versicolor\n83           5.8         2.7          3.9         1.2 versicolor\n84           6.0         2.7          5.1         1.6 versicolor\n85           5.4         3.0          4.5         1.5 versicolor\n86           6.0         3.4          4.5         1.6 versicolor\n87           6.7         3.1          4.7         1.5 versicolor\n88           6.3         2.3          4.4         1.3 versicolor\n89           5.6         3.0          4.1         1.3 versicolor\n90           5.5         2.5          4.0         1.3 versicolor\n91           5.5         2.6          4.4         1.2 versicolor\n92           6.1         3.0          4.6         1.4 versicolor\n93           5.8         2.6          4.0         1.2 versicolor\n94           5.0         2.3          3.3         1.0 versicolor\n95           5.6         2.7          4.2         1.3 versicolor\n96           5.7         3.0          4.2         1.2 versicolor\n97           5.7         2.9          4.2         1.3 versicolor\n98           6.2         2.9          4.3         1.3 versicolor\n99           5.1         2.5          3.0         1.1 versicolor\n100          5.7         2.8          4.1         1.3 versicolor\n101          6.3         3.3          6.0         2.5  virginica\n102          5.8         2.7          5.1         1.9  virginica\n103          7.1         3.0          5.9         2.1  virginica\n104          6.3         2.9          5.6         1.8  virginica\n105          6.5         3.0          5.8         2.2  virginica\n106          7.6         3.0          6.6         2.1  virginica\n107          4.9         2.5          4.5         1.7  virginica\n108          7.3         2.9          6.3         1.8  virginica\n109          6.7         2.5          5.8         1.8  virginica\n110          7.2         3.6          6.1         2.5  virginica\n111          6.5         3.2          5.1         2.0  virginica\n112          6.4         2.7          5.3         1.9  virginica\n113          6.8         3.0          5.5         2.1  virginica\n114          5.7         2.5          5.0         2.0  virginica\n115          5.8         2.8          5.1         2.4  virginica\n116          6.4         3.2          5.3         2.3  virginica\n117          6.5         3.0          5.5         1.8  virginica\n118          7.7         3.8          6.7         2.2  virginica\n119          7.7         2.6          6.9         2.3  virginica\n120          6.0         2.2          5.0         1.5  virginica\n121          6.9         3.2          5.7         2.3  virginica\n122          5.6         2.8          4.9         2.0  virginica\n123          7.7         2.8          6.7         2.0  virginica\n124          6.3         2.7          4.9         1.8  virginica\n125          6.7         3.3          5.7         2.1  virginica\n126          7.2         3.2          6.0         1.8  virginica\n127          6.2         2.8          4.8         1.8  virginica\n128          6.1         3.0          4.9         1.8  virginica\n129          6.4         2.8          5.6         2.1  virginica\n130          7.2         3.0          5.8         1.6  virginica\n131          7.4         2.8          6.1         1.9  virginica\n132          7.9         3.8          6.4         2.0  virginica\n133          6.4         2.8          5.6         2.2  virginica\n134          6.3         2.8          5.1         1.5  virginica\n135          6.1         2.6          5.6         1.4  virginica\n136          7.7         3.0          6.1         2.3  virginica\n137          6.3         3.4          5.6         2.4  virginica\n138          6.4         3.1          5.5         1.8  virginica\n139          6.0         3.0          4.8         1.8  virginica\n140          6.9         3.1          5.4         2.1  virginica\n141          6.7         3.1          5.6         2.4  virginica\n142          6.9         3.1          5.1         2.3  virginica\n143          5.8         2.7          5.1         1.9  virginica\n144          6.8         3.2          5.9         2.3  virginica\n145          6.7         3.3          5.7         2.5  virginica\n146          6.7         3.0          5.2         2.3  virginica\n147          6.3         2.5          5.0         1.9  virginica\n148          6.5         3.0          5.2         2.0  virginica\n149          6.2         3.4          5.4         2.3  virginica\n150          5.9         3.0          5.1         1.8  virginica"
  },
  {
    "objectID": "slides/clustering.html#example-dataset-iris-1",
    "href": "slides/clustering.html#example-dataset-iris-1",
    "title": "Clustering",
    "section": "Example dataset: iris",
    "text": "Example dataset: iris\n\nMeasurements on the sepals and petals of three iris species\n\nggplot(iris, aes(Petal.Length, Petal.Width, color = Species)) +\n  geom_point()"
  },
  {
    "objectID": "slides/clustering.html#we-perform-k-means-clustering-with-kmeans",
    "href": "slides/clustering.html#we-perform-k-means-clustering-with-kmeans",
    "title": "Clustering",
    "section": "We perform k-means clustering with kmeans()",
    "text": "We perform k-means clustering with kmeans()\n\n\nkm_fit &lt;- iris |&gt; \n  select(where(is.numeric)) |&gt;\n  kmeans(\n    centers = 3,  # number of cluster centers\n    nstart = 10   # number of independent restarts of the algorithm\n  )\n\nkm_fit\n\nK-means clustering with 3 clusters of sizes 50, 38, 62\n\nCluster means:\n  Sepal.Length Sepal.Width Petal.Length Petal.Width\n1     5.006000    3.428000     1.462000    0.246000\n2     6.850000    3.073684     5.742105    2.071053\n3     5.901613    2.748387     4.393548    1.433871\n\nClustering vector:\n  [1] 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1\n [38] 1 1 1 1 1 1 1 1 1 1 1 1 1 3 3 2 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3\n [75] 3 3 3 2 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 2 3 2 2 2 2 3 2 2 2 2\n[112] 2 2 3 3 2 2 2 2 3 2 3 2 3 2 2 3 3 2 2 2 2 2 3 2 2 2 2 3 2 2 2 3 2 2 2 3 2\n[149] 2 3\n\nWithin cluster sum of squares by cluster:\n[1] 15.15100 23.87947 39.82097\n (between_SS / total_SS =  88.4 %)\n\nAvailable components:\n\n[1] \"cluster\"      \"centers\"      \"totss\"        \"withinss\"     \"tot.withinss\"\n[6] \"betweenss\"    \"size\"         \"iter\"         \"ifault\""
  },
  {
    "objectID": "slides/clustering.html#we-perform-k-means-clustering-with-kmeans-1",
    "href": "slides/clustering.html#we-perform-k-means-clustering-with-kmeans-1",
    "title": "Clustering",
    "section": "We perform k-means clustering with kmeans()",
    "text": "We perform k-means clustering with kmeans()\n\n\n\n# run kmeans clustering\nkm_fit &lt;- iris |&gt; \n  select(where(is.numeric)) |&gt;\n  kmeans(centers = 3, nstart = 10)\n\n# plot\nkm_fit |&gt;\n  # combine with original data\n  augment(iris) |&gt;\n  ggplot() +\n  aes(x = Petal.Length, Petal.Width) +\n  geom_point( # points representing original data\n    aes(color = .cluster, shape = Species)\n  ) +\n  geom_point( # points representing centroids\n    data = tidy(km_fit),\n    aes(fill = cluster),\n    shape = 21, color = \"black\", size = 4\n  ) +\n  guides(color = \"none\")\n\n\n\n\n\n \n\n\n\n\n\n\nHow do we choose the number of clusters?"
  },
  {
    "objectID": "slides/clustering.html#we-perform-k-means-clustering-with-kmeans-2",
    "href": "slides/clustering.html#we-perform-k-means-clustering-with-kmeans-2",
    "title": "Clustering",
    "section": "We perform k-means clustering with kmeans()",
    "text": "We perform k-means clustering with kmeans()\n\n\n\n# run kmeans clustering\nkm_fit &lt;- iris |&gt; \n  select(where(is.numeric)) |&gt;\n  kmeans(centers = 2, nstart = 10)\n\n# plot\nkm_fit |&gt;\n  # combine with original data\n  augment(iris) |&gt;\n  ggplot() +\n  aes(x = Petal.Length, Petal.Width) +\n  geom_point( # points representing original data\n    aes(color = .cluster, shape = Species)\n  ) +\n  geom_point( # points representing centroids\n    data = tidy(km_fit),\n    aes(fill = cluster),\n    shape = 21, color = \"black\", size = 4\n  ) +\n  guides(color = \"none\")\n\n\n\n\n\n \n\n\n\n\n\n\nHow do we choose the number of clusters?"
  },
  {
    "objectID": "slides/clustering.html#we-perform-k-means-clustering-with-kmeans-3",
    "href": "slides/clustering.html#we-perform-k-means-clustering-with-kmeans-3",
    "title": "Clustering",
    "section": "We perform k-means clustering with kmeans()",
    "text": "We perform k-means clustering with kmeans()\n\n\n\n# run kmeans clustering\nkm_fit &lt;- iris |&gt; \n  select(where(is.numeric)) |&gt;\n  kmeans(centers = 5, nstart = 10)\n\n# plot\nkm_fit |&gt;\n  # combine with original data\n  augment(iris) |&gt;\n  ggplot() +\n  aes(x = Petal.Length, Petal.Width) +\n  geom_point( # points representing original data\n    aes(color = .cluster, shape = Species)\n  ) +\n  geom_point( # points representing centroids\n    data = tidy(km_fit),\n    aes(fill = cluster),\n    shape = 21, color = \"black\", size = 4\n  ) +\n  guides(color = \"none\")\n\n\n\n\n\n \n\n\n\n\n\n\nHow do we choose the number of clusters?"
  },
  {
    "objectID": "slides/clustering.html#look-for-elbow-in-scree-plot",
    "href": "slides/clustering.html#look-for-elbow-in-scree-plot",
    "title": "Clustering",
    "section": "Look for elbow in scree plot",
    "text": "Look for elbow in scree plot\n\n\n\n# function to calculate within sum squares\ncalc_withinss &lt;- function(data, centers) {\n  km_fit &lt;- select(data, where(is.numeric)) |&gt;\n    kmeans(centers = centers, nstart = 10)\n  km_fit$tot.withinss\n}\n\ntibble(centers = 1:15) |&gt;\n  mutate(\n    within_sum_squares = map_dbl(\n      centers, ~calc_withinss(iris, .x)\n    )\n  ) |&gt;\n  ggplot() +\n  aes(centers, within_sum_squares) +\n  geom_point() +\n  geom_line()\n\n\n\n\n\n \n\n\n\n\n\n\nPlot suggests that around 3 clusters is the right choice"
  },
  {
    "objectID": "slides/clustering.html#further-reading",
    "href": "slides/clustering.html#further-reading",
    "title": "Clustering",
    "section": "Further reading",
    "text": "Further reading\n\nWikipedia: k-means clustering\nNaftali Harris blog post: Interactive k-means demonstration\nStackoverflow post: Determining the appropriate number of clusters in k-means\nGeorge Seif: The 5 Clustering Algorithms Data Scientists Need to Know"
  },
  {
    "objectID": "slides/color-spaces.html#the-rgb-color-space",
    "href": "slides/color-spaces.html#the-rgb-color-space",
    "title": "Color spaces and color-vision deficiency",
    "section": "The RGB color space",
    "text": "The RGB color space\n\n\n\nred R (0-255):  amount of red light\ngreen G (0-255):  amount of green light\nblue B (0-255):  amount of blue light\n\n\n\n\n\nR\n\n\nG\n\n\nB\n\n\nhex code\n\n\n     color     \n\n\n\n\n\n\n0\n\n\n0\n\n\n0\n\n\n#000000\n\n\n\n\n\n\n255\n\n\n255\n\n\n255\n\n\n#FFFFFF\n\n\n\n\n\n\n255\n\n\n0\n\n\n0\n\n\n#FF0000\n\n\n\n\n\n\n0\n\n\n255\n\n\n255\n\n\n#00FFFF\n\n\n\n\n\n\n128\n\n\n128\n\n\n128\n\n\n#808080\n\n\n\n\n\n\n0\n\n\n158\n\n\n115\n\n\n#009E73"
  },
  {
    "objectID": "slides/color-spaces.html#the-rgb-color-space-1",
    "href": "slides/color-spaces.html#the-rgb-color-space-1",
    "title": "Color spaces and color-vision deficiency",
    "section": "The RGB color space",
    "text": "The RGB color space\n\n\n\n\n\n\n \n\n\n\n\n\n\nMost people cannot reason well about the RGB color space"
  },
  {
    "objectID": "slides/color-spaces.html#the-hsv-color-space",
    "href": "slides/color-spaces.html#the-hsv-color-space",
    "title": "Color spaces and color-vision deficiency",
    "section": "The HSV color space",
    "text": "The HSV color space\n\n\nhue H (0-360):  hue of the color\nsaturation S (0-1):  colorfulness relative to the brightness  of the color\nvalue V (0-1):  subjective perception of amount  of light emitted"
  },
  {
    "objectID": "slides/color-spaces.html#the-hsv-color-space-1",
    "href": "slides/color-spaces.html#the-hsv-color-space-1",
    "title": "Color spaces and color-vision deficiency",
    "section": "The HSV color space",
    "text": "The HSV color space\n\n\n\n\n\n\n \n\n\n\n\n\n\nProblem: Color changes in non-intuitive ways with saturation and value"
  },
  {
    "objectID": "slides/color-spaces.html#the-hls-color-space",
    "href": "slides/color-spaces.html#the-hls-color-space",
    "title": "Color spaces and color-vision deficiency",
    "section": "The HLS color space",
    "text": "The HLS color space\n\n\nhue H (0-360):  hue of the color\nlightness L (0-1):  brightness relative to the brightness  of a similarly illuminated white\nsaturation S (0-1):  colorfulness relative to the brightness  of the color"
  },
  {
    "objectID": "slides/color-spaces.html#the-hls-color-space-1",
    "href": "slides/color-spaces.html#the-hls-color-space-1",
    "title": "Color spaces and color-vision deficiency",
    "section": "The HLS color space",
    "text": "The HLS color space\n\n\n\n\n\n\n \n\n\n\n\n\n\nProblem: For high saturation, perceived lightness changes with hue"
  },
  {
    "objectID": "slides/color-spaces.html#the-luv-color-space",
    "href": "slides/color-spaces.html#the-luv-color-space",
    "title": "Color spaces and color-vision deficiency",
    "section": "The Luv color space",
    "text": "The Luv color space\n\n\nluminance L (0-100):  amount of light emitted\ngreen/red axis u (approx. -100 to 100):  amount of green vs. red\nblue/yellow axis v (approx. -100 to 100):  amount of blue vs. yellow"
  },
  {
    "objectID": "slides/color-spaces.html#the-luv-space-in-polar-coordinates-hcl",
    "href": "slides/color-spaces.html#the-luv-space-in-polar-coordinates-hcl",
    "title": "Color spaces and color-vision deficiency",
    "section": "The Luv space in polar coordinates: HCL",
    "text": "The Luv space in polar coordinates: HCL\n\n\nhue H (0-360):  hue of the color\nluminance L (0-100):  amount of light emitted\nchroma C ():  colorfulness of the color"
  },
  {
    "objectID": "slides/color-spaces.html#the-hcl-color-space-hue-chroma-plane",
    "href": "slides/color-spaces.html#the-hcl-color-space-hue-chroma-plane",
    "title": "Color spaces and color-vision deficiency",
    "section": "The HCL color space: Hue-Chroma plane",
    "text": "The HCL color space: Hue-Chroma plane"
  },
  {
    "objectID": "slides/color-spaces.html#the-hcl-color-space-luminance-chroma-plane",
    "href": "slides/color-spaces.html#the-hcl-color-space-luminance-chroma-plane",
    "title": "Color spaces and color-vision deficiency",
    "section": "The HCL color space: Luminance-Chroma plane",
    "text": "The HCL color space: Luminance-Chroma plane"
  },
  {
    "objectID": "slides/color-spaces.html#we-can-explore-hcl-colors-from-r",
    "href": "slides/color-spaces.html#we-can-explore-hcl-colors-from-r",
    "title": "Color spaces and color-vision deficiency",
    "section": "We can explore HCL colors from R",
    "text": "We can explore HCL colors from R\ncolorspace::choose_color()"
  },
  {
    "objectID": "slides/color-spaces.html#we-can-explore-hcl-colors-from-r-1",
    "href": "slides/color-spaces.html#we-can-explore-hcl-colors-from-r-1",
    "title": "Color spaces and color-vision deficiency",
    "section": "We can explore HCL colors from R",
    "text": "We can explore HCL colors from R\nThe app is also available on the class website\n\n\n\n\n\n\n\n\nOpen color chooser app"
  },
  {
    "objectID": "slides/color-spaces.html#avoid-high-chroma",
    "href": "slides/color-spaces.html#avoid-high-chroma",
    "title": "Color spaces and color-vision deficiency",
    "section": "1. Avoid high chroma",
    "text": "1. Avoid high chroma\n\n\nHigh chroma: Toys\n\n\nLow chroma: Elegance\n\n\n\nToys photo by Pixabay from Pexels\nHome interior photo by Saviesa Home from Pexels"
  },
  {
    "objectID": "slides/color-spaces.html#be-aware-of-color-vision-deficiency",
    "href": "slides/color-spaces.html#be-aware-of-color-vision-deficiency",
    "title": "Color spaces and color-vision deficiency",
    "section": "2. Be aware of color-vision deficiency",
    "text": "2. Be aware of color-vision deficiency\n\n5%–8% of men are color blind!\n\n\n\nRed-green color-vision deficiency is the most common"
  },
  {
    "objectID": "slides/color-spaces.html#be-aware-of-color-vision-deficiency-1",
    "href": "slides/color-spaces.html#be-aware-of-color-vision-deficiency-1",
    "title": "Color spaces and color-vision deficiency",
    "section": "2. Be aware of color-vision deficiency",
    "text": "2. Be aware of color-vision deficiency\n5%–8% of men are color blind!\n\nBlue-green color-vision deficiency is rare but does occur"
  },
  {
    "objectID": "slides/color-spaces.html#be-aware-of-color-vision-deficiency-2",
    "href": "slides/color-spaces.html#be-aware-of-color-vision-deficiency-2",
    "title": "Color spaces and color-vision deficiency",
    "section": "2. Be aware of color-vision deficiency",
    "text": "2. Be aware of color-vision deficiency\nChoose colors that can be distinguished with CVD"
  },
  {
    "objectID": "slides/color-spaces.html#consider-using-the-okabe-ito-scale",
    "href": "slides/color-spaces.html#consider-using-the-okabe-ito-scale",
    "title": "Color spaces and color-vision deficiency",
    "section": "Consider using the Okabe-Ito scale",
    "text": "Consider using the Okabe-Ito scale\n\n\n\n\n\nName\nHex code   \nR, G, B (0-255)\n\n\n\n\norange\n#E69F00\n230, 159, 0\n\n\nsky blue\n#56B4E9\n86, 180, 233\n\n\nbluish green\n#009E73\n0, 158, 115\n\n\nyellow\n#F0E442\n240, 228, 66\n\n\nblue\n#0072B2\n0, 114, 178\n\n\nvermilion\n#D55E00\n213, 94, 0\n\n\nreddish purple\n#CC79A7\n204, 121, 167\n\n\nblack\n#000000\n0, 0, 0"
  },
  {
    "objectID": "slides/color-spaces.html#cvd-is-worse-for-thin-lines-and-tiny-dots",
    "href": "slides/color-spaces.html#cvd-is-worse-for-thin-lines-and-tiny-dots",
    "title": "Color spaces and color-vision deficiency",
    "section": "CVD is worse for thin lines and tiny dots",
    "text": "CVD is worse for thin lines and tiny dots"
  },
  {
    "objectID": "slides/color-spaces.html#when-in-doubt-run-cvd-simulations",
    "href": "slides/color-spaces.html#when-in-doubt-run-cvd-simulations",
    "title": "Color spaces and color-vision deficiency",
    "section": "When in doubt, run CVD simulations",
    "text": "When in doubt, run CVD simulations\n\nOriginal"
  },
  {
    "objectID": "slides/color-spaces.html#further-reading",
    "href": "slides/color-spaces.html#further-reading",
    "title": "Color spaces and color-vision deficiency",
    "section": "Further reading",
    "text": "Further reading\n\nFundamentals of Data Visualization: Chapter 19: Common pitfalls of color use\nWikipedia: HSL and HSV\ncolorspace package documentation: Color Spaces\ncolorspace package documentation: Apps for Choosing Colors and Palettes Interactively"
  },
  {
    "objectID": "slides/coordinate-systems-axes.html#the-grammar-of-graphics-pipeline-coordinate-systems",
    "href": "slides/coordinate-systems-axes.html#the-grammar-of-graphics-pipeline-coordinate-systems",
    "title": "Coordinate systems and axes",
    "section": "The Grammar-of-Graphics pipeline: Coordinate systems",
    "text": "The Grammar-of-Graphics pipeline: Coordinate systems"
  },
  {
    "objectID": "slides/coordinate-systems-axes.html#most-data-visualizations-use-cartesian-coordinates",
    "href": "slides/coordinate-systems-axes.html#most-data-visualizations-use-cartesian-coordinates",
    "title": "Coordinate systems and axes",
    "section": "Most data visualizations use Cartesian coordinates",
    "text": "Most data visualizations use Cartesian coordinates"
  },
  {
    "objectID": "slides/coordinate-systems-axes.html#changing-units-does-not-change-the-plot",
    "href": "slides/coordinate-systems-axes.html#changing-units-does-not-change-the-plot",
    "title": "Coordinate systems and axes",
    "section": "Changing units does not change the plot",
    "text": "Changing units does not change the plot"
  },
  {
    "objectID": "slides/coordinate-systems-axes.html#if-scale-units-are-unrelated-aspect-ratio-is-arbitrary",
    "href": "slides/coordinate-systems-axes.html#if-scale-units-are-unrelated-aspect-ratio-is-arbitrary",
    "title": "Coordinate systems and axes",
    "section": "If scale units are unrelated, aspect ratio is arbitrary",
    "text": "If scale units are unrelated, aspect ratio is arbitrary"
  },
  {
    "objectID": "slides/coordinate-systems-axes.html#logarithmic-scales-log-scales",
    "href": "slides/coordinate-systems-axes.html#logarithmic-scales-log-scales",
    "title": "Coordinate systems and axes",
    "section": "Logarithmic scales (log scales)",
    "text": "Logarithmic scales (log scales)\n\nVisualize these five values: 1,   3.16,   10,   31.6,   100"
  },
  {
    "objectID": "slides/coordinate-systems-axes.html#example-population-number-of-texas-counties",
    "href": "slides/coordinate-systems-axes.html#example-population-number-of-texas-counties",
    "title": "Coordinate systems and axes",
    "section": "Example: Population number of Texas counties",
    "text": "Example: Population number of Texas counties\nA linear scale emphasizes large counties"
  },
  {
    "objectID": "slides/coordinate-systems-axes.html#example-population-number-of-texas-counties-1",
    "href": "slides/coordinate-systems-axes.html#example-population-number-of-texas-counties-1",
    "title": "Coordinate systems and axes",
    "section": "Example: Population number of Texas counties",
    "text": "Example: Population number of Texas counties\nA log scale shows symmetry around the median"
  },
  {
    "objectID": "slides/coordinate-systems-axes.html#nonlinear-coordinate-systems-polar-coordinates",
    "href": "slides/coordinate-systems-axes.html#nonlinear-coordinate-systems-polar-coordinates",
    "title": "Coordinate systems and axes",
    "section": "Nonlinear coordinate systems: Polar coordinates",
    "text": "Nonlinear coordinate systems: Polar coordinates"
  },
  {
    "objectID": "slides/coordinate-systems-axes.html#cartesian-vs-polar-example",
    "href": "slides/coordinate-systems-axes.html#cartesian-vs-polar-example",
    "title": "Coordinate systems and axes",
    "section": "Cartesian vs polar example",
    "text": "Cartesian vs polar example"
  },
  {
    "objectID": "slides/coordinate-systems-axes.html#getting-the-data",
    "href": "slides/coordinate-systems-axes.html#getting-the-data",
    "title": "Coordinate systems and axes",
    "section": "Getting the data",
    "text": "Getting the data\n\nThe boxoffice dataset:\n\n\n\nboxoffice &lt;- tibble(\n  rank = 1:5,\n  title = c(\"Star Wars\", \"Jumanji\", \"Pitch Perfect 3\", \"Greatest Showman\", \"Ferdinand\"),\n  amount = c(71.57, 36.17, 19.93, 8.81, 7.32) # million USD\n)\n\n\n\n\nThe tx_counties dataset:\n\n\n\ntx_counties &lt;- read_csv(\"https://wilkelab.org/DSC385/datasets/US_census.csv\") |&gt; \n  filter(state == \"Texas\") |&gt;\n  mutate(popratio = pop2010/median(pop2010)) |&gt;\n  arrange(desc(popratio)) |&gt;\n  mutate(index = 1:n())"
  },
  {
    "objectID": "slides/coordinate-systems-axes.html#getting-the-data-1",
    "href": "slides/coordinate-systems-axes.html#getting-the-data-1",
    "title": "Coordinate systems and axes",
    "section": "Getting the data",
    "text": "Getting the data\n\nThe temperatures and temps_wide datasets (long and wide format of the same data):\n\n\n\n# long format\ntemperatures &lt;- read_csv(\"https://wilkelab.org/DSC385/datasets/tempnormals.csv\") |&gt;\n  mutate(\n    location = factor(\n      location, levels = c(\"Death Valley\", \"Houston\", \"San Diego\", \"Chicago\")\n    )\n  ) |&gt;\n  select(location, station_id, day_of_year, month, temperature)\n\n# wide format\ntemps_wide &lt;- temperatures |&gt;\n  pivot_wider(\n    id_cols = c(\"month\", \"day_of_year\"),\n    names_from = \"location\", values_from = \"temperature\"\n  )"
  },
  {
    "objectID": "slides/coordinate-systems-axes.html#scale-functions-customize-the-x-and-y-axes",
    "href": "slides/coordinate-systems-axes.html#scale-functions-customize-the-x-and-y-axes",
    "title": "Coordinate systems and axes",
    "section": "Scale functions customize the x and y axes",
    "text": "Scale functions customize the x and y axes\nRecall the box-office example from a prior lecture:\n\n\n\nggplot(boxoffice) +\n  aes(amount, fct_reorder(title, amount)) +\n  geom_col()"
  },
  {
    "objectID": "slides/coordinate-systems-axes.html#scale-functions-customize-the-x-and-y-axes-1",
    "href": "slides/coordinate-systems-axes.html#scale-functions-customize-the-x-and-y-axes-1",
    "title": "Coordinate systems and axes",
    "section": "Scale functions customize the x and y axes",
    "text": "Scale functions customize the x and y axes\nAdd scale functions (no change in figure so far):\n\n\n\nggplot(boxoffice) +\n  aes(amount, fct_reorder(title, amount)) +\n  geom_col() +\n  scale_x_continuous() +\n  scale_y_discrete()"
  },
  {
    "objectID": "slides/coordinate-systems-axes.html#scale-functions-customize-the-x-and-y-axes-2",
    "href": "slides/coordinate-systems-axes.html#scale-functions-customize-the-x-and-y-axes-2",
    "title": "Coordinate systems and axes",
    "section": "Scale functions customize the x and y axes",
    "text": "Scale functions customize the x and y axes\nThe parameter name sets the axis title:\n\n\n\nggplot(boxoffice) +\n  aes(amount, fct_reorder(title, amount)) +\n  geom_col() +\n  scale_x_continuous(\n    name = \"weekend gross (million USD)\"\n  ) +\n  scale_y_discrete(\n    name = NULL  # no axis title\n  )\n\n\n\n\n\n\n\n\n\n\n\nNote: We could do the same with xlab() and ylab()"
  },
  {
    "objectID": "slides/coordinate-systems-axes.html#scale-functions-customize-the-x-and-y-axes-3",
    "href": "slides/coordinate-systems-axes.html#scale-functions-customize-the-x-and-y-axes-3",
    "title": "Coordinate systems and axes",
    "section": "Scale functions customize the x and y axes",
    "text": "Scale functions customize the x and y axes\nThe parameter limits sets the scale limits:\n\n\n\nggplot(boxoffice) +\n  aes(amount, fct_reorder(title, amount)) +\n  geom_col() +\n  scale_x_continuous(\n    name = \"weekend gross (million USD)\",\n    limits = c(0, 80)\n  ) +\n  scale_y_discrete(\n    name = NULL\n  )\n\n\n\n\n\n\n\n\n\n\n\nNote: We could do the same with xlim() and ylim() but I advise against it, as these functions can have unexpected side-effects"
  },
  {
    "objectID": "slides/coordinate-systems-axes.html#scale-functions-customize-the-x-and-y-axes-4",
    "href": "slides/coordinate-systems-axes.html#scale-functions-customize-the-x-and-y-axes-4",
    "title": "Coordinate systems and axes",
    "section": "Scale functions customize the x and y axes",
    "text": "Scale functions customize the x and y axes\nThe parameter breaks sets the axis tick positions:\n\n\n\nggplot(boxoffice) +\n  aes(amount, fct_reorder(title, amount)) +\n  geom_col() +\n  scale_x_continuous(\n    name = \"weekend gross (million USD)\",\n    limits = c(0, 80),\n    breaks = c(0, 25, 50, 75)\n  ) +\n  scale_y_discrete(\n    name = NULL\n  )"
  },
  {
    "objectID": "slides/coordinate-systems-axes.html#scale-functions-customize-the-x-and-y-axes-5",
    "href": "slides/coordinate-systems-axes.html#scale-functions-customize-the-x-and-y-axes-5",
    "title": "Coordinate systems and axes",
    "section": "Scale functions customize the x and y axes",
    "text": "Scale functions customize the x and y axes\nThe parameter labels sets the axis tick labels:\n\n\n\nggplot(boxoffice) +\n  aes(amount, fct_reorder(title, amount)) +\n  geom_col() +\n  scale_x_continuous(\n    name = \"weekend gross (million USD)\",\n    limits = c(0, 80),\n    breaks = c(0, 25, 50, 75),\n    labels = c(\"0\", \"$25M\", \"$50M\", \"$75M\")\n  ) +\n  scale_y_discrete(\n    name = NULL\n  )"
  },
  {
    "objectID": "slides/coordinate-systems-axes.html#scale-functions-customize-the-x-and-y-axes-6",
    "href": "slides/coordinate-systems-axes.html#scale-functions-customize-the-x-and-y-axes-6",
    "title": "Coordinate systems and axes",
    "section": "Scale functions customize the x and y axes",
    "text": "Scale functions customize the x and y axes\nThe parameter expand sets the axis expansion:\n\n\n\nggplot(boxoffice) +\n  aes(amount, fct_reorder(title, amount)) +\n  geom_col() +\n  scale_x_continuous(\n    name = \"weekend gross (million USD)\",\n    limits = c(0, 80),\n    breaks = c(0, 25, 50, 75),\n    labels = c(\"0\", \"$25M\", \"$50M\", \"$75M\"),\n    expand = expansion(mult = c(0, 0.06))\n  ) +\n  scale_y_discrete(\n    name = NULL\n  )"
  },
  {
    "objectID": "slides/coordinate-systems-axes.html#scale-functions-define-transformations",
    "href": "slides/coordinate-systems-axes.html#scale-functions-define-transformations",
    "title": "Coordinate systems and axes",
    "section": "Scale functions define transformations",
    "text": "Scale functions define transformations\n\n\nLinear y scale:\n\n\nggplot(tx_counties) +\n  aes(x = index, y = popratio) +\n  geom_point() +\n  scale_y_continuous() \n\n\n\n\n \n\n\n\n\n\n\nLog y scale:\n\n\nggplot(tx_counties) +\n  aes(x = index, y = popratio) +\n  geom_point() +\n  scale_y_log10()"
  },
  {
    "objectID": "slides/coordinate-systems-axes.html#parameters-work-the-same-for-all-scale-functions",
    "href": "slides/coordinate-systems-axes.html#parameters-work-the-same-for-all-scale-functions",
    "title": "Coordinate systems and axes",
    "section": "Parameters work the same for all scale functions",
    "text": "Parameters work the same for all scale functions\n\n\nLinear y scale:\n\n\nggplot(tx_counties) +\n  aes(x = index, y = popratio) +\n  geom_point() +\n  scale_y_continuous(\n    name = \"population number / median\",\n    breaks = c(0, 100, 200),\n    labels = c(\"0\", \"100\", \"200\")\n  )\n\n\n\n\n \n\n\n\n\n\n\nLog y scale:\n\n\nggplot(tx_counties) +\n  aes(x = index, y = popratio) +\n  geom_point() +\n  scale_y_log10(\n    name = \"population number / median\",\n    breaks = c(0.01, 1, 100),\n    labels = c(\"0.01\", \"1\", \"100\")\n  )"
  },
  {
    "objectID": "slides/coordinate-systems-axes.html#coords-define-the-coordinate-system",
    "href": "slides/coordinate-systems-axes.html#coords-define-the-coordinate-system",
    "title": "Coordinate systems and axes",
    "section": "Coords define the coordinate system",
    "text": "Coords define the coordinate system\n\n\nggplot(temperatures, aes(day_of_year, temperature, color = location)) +\n  geom_line() +\n  coord_cartesian()  # cartesian coords are the default"
  },
  {
    "objectID": "slides/coordinate-systems-axes.html#coords-define-the-coordinate-system-1",
    "href": "slides/coordinate-systems-axes.html#coords-define-the-coordinate-system-1",
    "title": "Coordinate systems and axes",
    "section": "Coords define the coordinate system",
    "text": "Coords define the coordinate system\n\n\nggplot(temperatures, aes(day_of_year, temperature, color = location)) +\n  geom_line() +\n  coord_polar()   # polar coords"
  },
  {
    "objectID": "slides/coordinate-systems-axes.html#coords-define-the-coordinate-system-2",
    "href": "slides/coordinate-systems-axes.html#coords-define-the-coordinate-system-2",
    "title": "Coordinate systems and axes",
    "section": "Coords define the coordinate system",
    "text": "Coords define the coordinate system\n\n\nggplot(temperatures, aes(day_of_year, temperature, color = location)) +\n  geom_line() +\n  coord_polar() +\n  scale_y_continuous(limits = c(0, 105))  # fix up temperature limits"
  },
  {
    "objectID": "slides/coordinate-systems-axes.html#use-coord_fixed-for-fixed-aspect-ratio",
    "href": "slides/coordinate-systems-axes.html#use-coord_fixed-for-fixed-aspect-ratio",
    "title": "Coordinate systems and axes",
    "section": "Use coord_fixed() for fixed aspect ratio",
    "text": "Use coord_fixed() for fixed aspect ratio\n\n\nggplot(temps_wide, aes(`San Diego`, Houston)) +\n  geom_path()\n\n\n\n\n \n\n\n\n\n\n\n(Bad, x and y axis show the same values scaled differently)"
  },
  {
    "objectID": "slides/coordinate-systems-axes.html#use-coord_fixed-for-fixed-aspect-ratio-1",
    "href": "slides/coordinate-systems-axes.html#use-coord_fixed-for-fixed-aspect-ratio-1",
    "title": "Coordinate systems and axes",
    "section": "Use coord_fixed() for fixed aspect ratio",
    "text": "Use coord_fixed() for fixed aspect ratio\n\n\nggplot(temps_wide, aes(`San Diego`, Houston)) +\n  geom_path() +\n  coord_fixed()\n\n\n\n\n \n\n\n\n\n\n\n(Better, x and y axis are now scaled the same)"
  },
  {
    "objectID": "slides/coordinate-systems-axes.html#use-coord_fixed-for-fixed-aspect-ratio-2",
    "href": "slides/coordinate-systems-axes.html#use-coord_fixed-for-fixed-aspect-ratio-2",
    "title": "Coordinate systems and axes",
    "section": "Use coord_fixed() for fixed aspect ratio",
    "text": "Use coord_fixed() for fixed aspect ratio\n\n\nggplot(temps_wide, aes(`San Diego`, Houston)) +\n  geom_path() +\n  coord_fixed() +\n  scale_x_continuous(breaks = c(50, 60, 70), limits = c(50, 75))\n\n\n\n\n \n\n\n\n\n\n\n(Even better, similar axis ticks along both axes)"
  },
  {
    "objectID": "slides/coordinate-systems-axes.html#further-reading",
    "href": "slides/coordinate-systems-axes.html#further-reading",
    "title": "Coordinate systems and axes",
    "section": "Further reading",
    "text": "Further reading\n\nFundamentals of Data Visualization: Chapter 3: Coordinate systems and axes\nggplot2 reference documentation: Scales\nggplot2 reference documentation: Coordinate systems\nggplot2 book: Position scales\nggplot2 book: Coordinate systems"
  },
  {
    "objectID": "slides/data-wrangling-2.html#elementary-data-manipulations",
    "href": "slides/data-wrangling-2.html#elementary-data-manipulations",
    "title": "Data wrangling 2",
    "section": "Elementary data manipulations",
    "text": "Elementary data manipulations\n\n\nPrevious class:\n\nPick rows: filter()\nPick columns: select()\nSort rows: arrange()\nCount things: count()\nMake new columns: mutate()\n\n\nThis class:\n\n\nAnalyze subsets:group_by() and summarize()\nReshape:pivot_wider(), pivot_longer()\nCombine datasets:left_join(), inner_join(), ..."
  },
  {
    "objectID": "slides/data-wrangling-2.html#analyze-subsets-group_by-and-summarize",
    "href": "slides/data-wrangling-2.html#analyze-subsets-group_by-and-summarize",
    "title": "Data wrangling 2",
    "section": "Analyze subsets: group_by() and summarize()",
    "text": "Analyze subsets: group_by() and summarize()"
  },
  {
    "objectID": "slides/data-wrangling-2.html#example-application-of-grouping-counting",
    "href": "slides/data-wrangling-2.html#example-application-of-grouping-counting",
    "title": "Data wrangling 2",
    "section": "Example application of grouping: Counting",
    "text": "Example application of grouping: Counting\nPreviously, we counted like so:\n\n\nlibrary(palmerpenguins) # loads the `penguins` dataset\n\npenguins |&gt;\n  count(species)\n\n# A tibble: 3 × 2\n  species       n\n  &lt;fct&gt;     &lt;int&gt;\n1 Adelie      152\n2 Chinstrap    68\n3 Gentoo      124\n\n\n\n\nNow let’s do it the hard way . . ."
  },
  {
    "objectID": "slides/data-wrangling-2.html#example-application-of-grouping-counting-1",
    "href": "slides/data-wrangling-2.html#example-application-of-grouping-counting-1",
    "title": "Data wrangling 2",
    "section": "Example application of grouping: Counting",
    "text": "Example application of grouping: Counting\nLet’s go back to the raw data:\n\n\npenguins\n\n# A tibble: 344 × 8\n   species island    bill_length_mm bill_depth_mm flipper_length_mm body_mass_g\n   &lt;fct&gt;   &lt;fct&gt;              &lt;dbl&gt;         &lt;dbl&gt;             &lt;int&gt;       &lt;int&gt;\n 1 Adelie  Torgersen           39.1          18.7               181        3750\n 2 Adelie  Torgersen           39.5          17.4               186        3800\n 3 Adelie  Torgersen           40.3          18                 195        3250\n 4 Adelie  Torgersen           NA            NA                  NA          NA\n 5 Adelie  Torgersen           36.7          19.3               193        3450\n 6 Adelie  Torgersen           39.3          20.6               190        3650\n 7 Adelie  Torgersen           38.9          17.8               181        3625\n 8 Adelie  Torgersen           39.2          19.6               195        4675\n 9 Adelie  Torgersen           34.1          18.1               193        3475\n10 Adelie  Torgersen           42            20.2               190        4250\n# ℹ 334 more rows\n# ℹ 2 more variables: sex &lt;fct&gt;, year &lt;int&gt;"
  },
  {
    "objectID": "slides/data-wrangling-2.html#example-application-of-grouping-counting-2",
    "href": "slides/data-wrangling-2.html#example-application-of-grouping-counting-2",
    "title": "Data wrangling 2",
    "section": "Example application of grouping: Counting",
    "text": "Example application of grouping: Counting\nLet’s group it:\n\n\npenguins |&gt;\n  group_by(species)\n\n# A tibble: 344 × 8\n# Groups:   species [3]\n   species island    bill_length_mm bill_depth_mm flipper_length_mm body_mass_g\n   &lt;fct&gt;   &lt;fct&gt;              &lt;dbl&gt;         &lt;dbl&gt;             &lt;int&gt;       &lt;int&gt;\n 1 Adelie  Torgersen           39.1          18.7               181        3750\n 2 Adelie  Torgersen           39.5          17.4               186        3800\n 3 Adelie  Torgersen           40.3          18                 195        3250\n 4 Adelie  Torgersen           NA            NA                  NA          NA\n 5 Adelie  Torgersen           36.7          19.3               193        3450\n 6 Adelie  Torgersen           39.3          20.6               190        3650\n 7 Adelie  Torgersen           38.9          17.8               181        3625\n 8 Adelie  Torgersen           39.2          19.6               195        4675\n 9 Adelie  Torgersen           34.1          18.1               193        3475\n10 Adelie  Torgersen           42            20.2               190        4250\n# ℹ 334 more rows\n# ℹ 2 more variables: sex &lt;fct&gt;, year &lt;int&gt;"
  },
  {
    "objectID": "slides/data-wrangling-2.html#example-application-of-grouping-counting-3",
    "href": "slides/data-wrangling-2.html#example-application-of-grouping-counting-3",
    "title": "Data wrangling 2",
    "section": "Example application of grouping: Counting",
    "text": "Example application of grouping: Counting\nAnd summarize:\n\n\npenguins |&gt;\n  group_by(species) |&gt;\n  summarize(\n    n = n()  # n() returns the number of observations per group\n  )\n\n# A tibble: 3 × 2\n  species       n\n  &lt;fct&gt;     &lt;int&gt;\n1 Adelie      152\n2 Chinstrap    68\n3 Gentoo      124"
  },
  {
    "objectID": "slides/data-wrangling-2.html#example-application-of-grouping-counting-4",
    "href": "slides/data-wrangling-2.html#example-application-of-grouping-counting-4",
    "title": "Data wrangling 2",
    "section": "Example application of grouping: Counting",
    "text": "Example application of grouping: Counting\nNow let’s group by multiple variables:\n\n\npenguins |&gt;\n  group_by(species, island)\n\n# A tibble: 344 × 8\n# Groups:   species, island [5]\n   species island    bill_length_mm bill_depth_mm flipper_length_mm body_mass_g\n   &lt;fct&gt;   &lt;fct&gt;              &lt;dbl&gt;         &lt;dbl&gt;             &lt;int&gt;       &lt;int&gt;\n 1 Adelie  Torgersen           39.1          18.7               181        3750\n 2 Adelie  Torgersen           39.5          17.4               186        3800\n 3 Adelie  Torgersen           40.3          18                 195        3250\n 4 Adelie  Torgersen           NA            NA                  NA          NA\n 5 Adelie  Torgersen           36.7          19.3               193        3450\n 6 Adelie  Torgersen           39.3          20.6               190        3650\n 7 Adelie  Torgersen           38.9          17.8               181        3625\n 8 Adelie  Torgersen           39.2          19.6               195        4675\n 9 Adelie  Torgersen           34.1          18.1               193        3475\n10 Adelie  Torgersen           42            20.2               190        4250\n# ℹ 334 more rows\n# ℹ 2 more variables: sex &lt;fct&gt;, year &lt;int&gt;"
  },
  {
    "objectID": "slides/data-wrangling-2.html#example-application-of-grouping-counting-5",
    "href": "slides/data-wrangling-2.html#example-application-of-grouping-counting-5",
    "title": "Data wrangling 2",
    "section": "Example application of grouping: Counting",
    "text": "Example application of grouping: Counting\nAnd summarize:\n\n\npenguins |&gt;\n  group_by(species, island) |&gt;\n  summarize(\n    n = n()  # n() returns the number of observations per group\n  )\n\n# A tibble: 5 × 3\n# Groups:   species [3]\n  species   island        n\n  &lt;fct&gt;     &lt;fct&gt;     &lt;int&gt;\n1 Adelie    Biscoe       44\n2 Adelie    Dream        56\n3 Adelie    Torgersen    52\n4 Chinstrap Dream        68\n5 Gentoo    Biscoe      124"
  },
  {
    "objectID": "slides/data-wrangling-2.html#example-application-of-grouping-counting-6",
    "href": "slides/data-wrangling-2.html#example-application-of-grouping-counting-6",
    "title": "Data wrangling 2",
    "section": "Example application of grouping: Counting",
    "text": "Example application of grouping: Counting\ncount(...) is a short-cut for:group_by(...) |&gt; summarize(n = n())\n\n\n\n#\npenguins |&gt;\n  count(species)\n\n# A tibble: 3 × 2\n  species       n\n  &lt;fct&gt;     &lt;int&gt;\n1 Adelie      152\n2 Chinstrap    68\n3 Gentoo      124\n\n\n\n\npenguins |&gt;\n  group_by(species) |&gt;\n  summarize(n = n())\n\n# A tibble: 3 × 2\n  species       n\n  &lt;fct&gt;     &lt;int&gt;\n1 Adelie      152\n2 Chinstrap    68\n3 Gentoo      124\n\n\n\n\nThe output is exactly the same"
  },
  {
    "objectID": "slides/data-wrangling-2.html#performing-multiple-summaries-at-once",
    "href": "slides/data-wrangling-2.html#performing-multiple-summaries-at-once",
    "title": "Data wrangling 2",
    "section": "Performing multiple summaries at once",
    "text": "Performing multiple summaries at once\n\n\npenguins |&gt;\n  group_by(species) |&gt;\n  summarize(\n    n = n(),                                      # number of penguins\n    mean_mass = mean(body_mass_g),                # mean body mass\n    max_flipper_length = max(flipper_length_mm),  # max flipper length\n    percent_female = sum(sex == \"female\")/n()     # percent of female penguins\n  )\n\n\n\n# A tibble: 3 × 5\n  species       n mean_mass max_flipper_length percent_female\n  &lt;fct&gt;     &lt;int&gt;     &lt;dbl&gt;              &lt;int&gt;          &lt;dbl&gt;\n1 Adelie      152       NA                  NA           NA  \n2 Chinstrap    68     3733.                212            0.5\n3 Gentoo      124       NA                  NA           NA  \n\n\n\n\nEach statement in summarize() creates one new column\n\n\nBut why all the NAs?"
  },
  {
    "objectID": "slides/data-wrangling-2.html#performing-multiple-summaries-at-once-1",
    "href": "slides/data-wrangling-2.html#performing-multiple-summaries-at-once-1",
    "title": "Data wrangling 2",
    "section": "Performing multiple summaries at once",
    "text": "Performing multiple summaries at once\n\n\npenguins |&gt;\n  group_by(species) |&gt;\n  summarize(\n    n = n(),\n    mean_mass = mean(body_mass_g, na.rm = TRUE),\n    max_flipper_length = max(flipper_length_mm, na.rm = TRUE),\n    percent_female = sum(sex == \"female\", na.rm = TRUE)/sum(!is.na(sex))\n  )\n\n# A tibble: 3 × 5\n  species       n mean_mass max_flipper_length percent_female\n  &lt;fct&gt;     &lt;int&gt;     &lt;dbl&gt;              &lt;int&gt;          &lt;dbl&gt;\n1 Adelie      152     3701.                210          0.5  \n2 Chinstrap    68     3733.                212          0.5  \n3 Gentoo      124     5076.                231          0.487\n\n\n\n\nWe typically need to tell R how exactly NAs should be handled"
  },
  {
    "objectID": "slides/data-wrangling-2.html#reshape-pivot_wider-and-pivot_longer",
    "href": "slides/data-wrangling-2.html#reshape-pivot_wider-and-pivot_longer",
    "title": "Data wrangling 2",
    "section": "Reshape: pivot_wider() and pivot_longer()",
    "text": "Reshape: pivot_wider() and pivot_longer()"
  },
  {
    "objectID": "slides/data-wrangling-2.html#reshaping-example-making-a-wide-summary-table",
    "href": "slides/data-wrangling-2.html#reshaping-example-making-a-wide-summary-table",
    "title": "Data wrangling 2",
    "section": "Reshaping example: Making a wide summary table",
    "text": "Reshaping example: Making a wide summary table\n\n\npenguins |&gt;\n  count(species, island)\n\n# A tibble: 5 × 3\n  species   island        n\n  &lt;fct&gt;     &lt;fct&gt;     &lt;int&gt;\n1 Adelie    Biscoe       44\n2 Adelie    Dream        56\n3 Adelie    Torgersen    52\n4 Chinstrap Dream        68\n5 Gentoo    Biscoe      124"
  },
  {
    "objectID": "slides/data-wrangling-2.html#reshaping-example-making-a-wide-summary-table-1",
    "href": "slides/data-wrangling-2.html#reshaping-example-making-a-wide-summary-table-1",
    "title": "Data wrangling 2",
    "section": "Reshaping example: Making a wide summary table",
    "text": "Reshaping example: Making a wide summary table\n\n\npenguins |&gt;\n  count(species, island) |&gt;\n  pivot_wider(names_from = \"island\", values_from = \"n\")\n\n# A tibble: 3 × 4\n  species   Biscoe Dream Torgersen\n  &lt;fct&gt;      &lt;int&gt; &lt;int&gt;     &lt;int&gt;\n1 Adelie        44    56        52\n2 Chinstrap     NA    68        NA\n3 Gentoo       124    NA        NA\n\n\n\n\nThe NAs indicate cases that don’t exist"
  },
  {
    "objectID": "slides/data-wrangling-2.html#and-going-back-to-long-format",
    "href": "slides/data-wrangling-2.html#and-going-back-to-long-format",
    "title": "Data wrangling 2",
    "section": "And going back to long format",
    "text": "And going back to long format\n\n\npenguins_wide &lt;- penguins |&gt;\n  count(species, island) |&gt;\n  pivot_wider(names_from = \"island\", values_from = \"n\")\n\npenguins_wide |&gt; \n  pivot_longer(cols = -species, names_to = \"island\", values_to = \"n\")\n\n# A tibble: 9 × 3\n  species   island        n\n  &lt;fct&gt;     &lt;chr&gt;     &lt;int&gt;\n1 Adelie    Biscoe       44\n2 Adelie    Dream        56\n3 Adelie    Torgersen    52\n4 Chinstrap Biscoe       NA\n5 Chinstrap Dream        68\n6 Chinstrap Torgersen    NA\n7 Gentoo    Biscoe      124\n8 Gentoo    Dream        NA\n9 Gentoo    Torgersen    NA"
  },
  {
    "objectID": "slides/data-wrangling-2.html#and-going-back-to-long-format-1",
    "href": "slides/data-wrangling-2.html#and-going-back-to-long-format-1",
    "title": "Data wrangling 2",
    "section": "And going back to long format",
    "text": "And going back to long format\nColumn specifications work just like in select():\n\n\n# specify columns by subtraction\npenguins_wide |&gt; \n  pivot_longer(cols = -species, names_to = \"island\", values_to = \"n\")\n\n# A tibble: 9 × 3\n  species   island        n\n  &lt;fct&gt;     &lt;chr&gt;     &lt;int&gt;\n1 Adelie    Biscoe       44\n2 Adelie    Dream        56\n3 Adelie    Torgersen    52\n4 Chinstrap Biscoe       NA\n5 Chinstrap Dream        68\n6 Chinstrap Torgersen    NA\n7 Gentoo    Biscoe      124\n8 Gentoo    Dream        NA\n9 Gentoo    Torgersen    NA"
  },
  {
    "objectID": "slides/data-wrangling-2.html#and-going-back-to-long-format-2",
    "href": "slides/data-wrangling-2.html#and-going-back-to-long-format-2",
    "title": "Data wrangling 2",
    "section": "And going back to long format",
    "text": "And going back to long format\nColumn specifications work just like in select():\n\n\n# specify columns by explicit listing\npenguins_wide |&gt; \n  pivot_longer(cols = c(Biscoe, Dream, Torgersen), names_to = \"island\", values_to = \"n\")\n\n# A tibble: 9 × 3\n  species   island        n\n  &lt;fct&gt;     &lt;chr&gt;     &lt;int&gt;\n1 Adelie    Biscoe       44\n2 Adelie    Dream        56\n3 Adelie    Torgersen    52\n4 Chinstrap Biscoe       NA\n5 Chinstrap Dream        68\n6 Chinstrap Torgersen    NA\n7 Gentoo    Biscoe      124\n8 Gentoo    Dream        NA\n9 Gentoo    Torgersen    NA"
  },
  {
    "objectID": "slides/data-wrangling-2.html#and-going-back-to-long-format-3",
    "href": "slides/data-wrangling-2.html#and-going-back-to-long-format-3",
    "title": "Data wrangling 2",
    "section": "And going back to long format",
    "text": "And going back to long format\nColumn specifications work just like in select():\n\n\n# specify columns by range\npenguins_wide |&gt; \n  pivot_longer(cols = Biscoe:Torgersen, names_to = \"island\", values_to = \"n\")\n\n# A tibble: 9 × 3\n  species   island        n\n  &lt;fct&gt;     &lt;chr&gt;     &lt;int&gt;\n1 Adelie    Biscoe       44\n2 Adelie    Dream        56\n3 Adelie    Torgersen    52\n4 Chinstrap Biscoe       NA\n5 Chinstrap Dream        68\n6 Chinstrap Torgersen    NA\n7 Gentoo    Biscoe      124\n8 Gentoo    Dream        NA\n9 Gentoo    Torgersen    NA"
  },
  {
    "objectID": "slides/data-wrangling-2.html#we-use-joins-to-add-columns-from-one-table-into-another",
    "href": "slides/data-wrangling-2.html#we-use-joins-to-add-columns-from-one-table-into-another",
    "title": "Data wrangling 2",
    "section": "We use joins to add columns from one table into another",
    "text": "We use joins to add columns from one table into another"
  },
  {
    "objectID": "slides/data-wrangling-2.html#example-band-members-and-their-instruments",
    "href": "slides/data-wrangling-2.html#example-band-members-and-their-instruments",
    "title": "Data wrangling 2",
    "section": "Example: band members and their instruments",
    "text": "Example: band members and their instruments\n\n\n\n# some members of famous bands\nband_members\n\n# A tibble: 3 × 2\n  name  band   \n  &lt;chr&gt; &lt;chr&gt;  \n1 Mick  Stones \n2 John  Beatles\n3 Paul  Beatles\n\n\n\n\n# instruments played\nband_instruments\n\n# A tibble: 3 × 2\n  name  plays \n  &lt;chr&gt; &lt;chr&gt; \n1 John  guitar\n2 Paul  bass  \n3 Keith guitar\n\n\n\n\n\n\n# add right table to left\nleft_join(band_members, band_instruments)\n\n# A tibble: 3 × 3\n  name  band    plays \n  &lt;chr&gt; &lt;chr&gt;   &lt;chr&gt; \n1 Mick  Stones  &lt;NA&gt;  \n2 John  Beatles guitar\n3 Paul  Beatles bass"
  },
  {
    "objectID": "slides/data-wrangling-2.html#example-band-members-and-their-instruments-1",
    "href": "slides/data-wrangling-2.html#example-band-members-and-their-instruments-1",
    "title": "Data wrangling 2",
    "section": "Example: band members and their instruments",
    "text": "Example: band members and their instruments\n\n\n\n# some members of famous bands\nband_members\n\n# A tibble: 3 × 2\n  name  band   \n  &lt;chr&gt; &lt;chr&gt;  \n1 Mick  Stones \n2 John  Beatles\n3 Paul  Beatles\n\n\n\n\n# instruments played\nband_instruments\n\n# A tibble: 3 × 2\n  name  plays \n  &lt;chr&gt; &lt;chr&gt; \n1 John  guitar\n2 Paul  bass  \n3 Keith guitar\n\n\n\n\n\n\n# add left table to right\nright_join(band_members, band_instruments)\n\n# A tibble: 3 × 3\n  name  band    plays \n  &lt;chr&gt; &lt;chr&gt;   &lt;chr&gt; \n1 John  Beatles guitar\n2 Paul  Beatles bass  \n3 Keith &lt;NA&gt;    guitar"
  },
  {
    "objectID": "slides/data-wrangling-2.html#example-band-members-and-their-instruments-2",
    "href": "slides/data-wrangling-2.html#example-band-members-and-their-instruments-2",
    "title": "Data wrangling 2",
    "section": "Example: band members and their instruments",
    "text": "Example: band members and their instruments\n\n\n\n# some members of famous bands\nband_members\n\n# A tibble: 3 × 2\n  name  band   \n  &lt;chr&gt; &lt;chr&gt;  \n1 Mick  Stones \n2 John  Beatles\n3 Paul  Beatles\n\n\n\n\n# instruments played\nband_instruments\n\n# A tibble: 3 × 2\n  name  plays \n  &lt;chr&gt; &lt;chr&gt; \n1 John  guitar\n2 Paul  bass  \n3 Keith guitar\n\n\n\n\n\n\n# keep intersection only\ninner_join(band_members, band_instruments)\n\n# A tibble: 2 × 3\n  name  band    plays \n  &lt;chr&gt; &lt;chr&gt;   &lt;chr&gt; \n1 John  Beatles guitar\n2 Paul  Beatles bass"
  },
  {
    "objectID": "slides/data-wrangling-2.html#example-band-members-and-their-instruments-3",
    "href": "slides/data-wrangling-2.html#example-band-members-and-their-instruments-3",
    "title": "Data wrangling 2",
    "section": "Example: band members and their instruments",
    "text": "Example: band members and their instruments\n\n\n\n# some members of famous bands\nband_members\n\n# A tibble: 3 × 2\n  name  band   \n  &lt;chr&gt; &lt;chr&gt;  \n1 Mick  Stones \n2 John  Beatles\n3 Paul  Beatles\n\n\n\n\n# instruments played\nband_instruments\n\n# A tibble: 3 × 2\n  name  plays \n  &lt;chr&gt; &lt;chr&gt; \n1 John  guitar\n2 Paul  bass  \n3 Keith guitar\n\n\n\n\n\n\n# merge all cases\nfull_join(band_members, band_instruments)\n\n# A tibble: 4 × 3\n  name  band    plays \n  &lt;chr&gt; &lt;chr&gt;   &lt;chr&gt; \n1 Mick  Stones  &lt;NA&gt;  \n2 John  Beatles guitar\n3 Paul  Beatles bass  \n4 Keith &lt;NA&gt;    guitar"
  },
  {
    "objectID": "slides/data-wrangling-2.html#the-different-joins-at-a-glance",
    "href": "slides/data-wrangling-2.html#the-different-joins-at-a-glance",
    "title": "Data wrangling 2",
    "section": "The different joins at a glance",
    "text": "The different joins at a glance"
  },
  {
    "objectID": "slides/data-wrangling-2.html#the-different-joins-at-a-glance-1",
    "href": "slides/data-wrangling-2.html#the-different-joins-at-a-glance-1",
    "title": "Data wrangling 2",
    "section": "The different joins at a glance",
    "text": "The different joins at a glance\n\n\n\n\nTip: In case of doubt, use left_join()\n\nIn my experience, left_join() is the right choice 70–80% of the time"
  },
  {
    "objectID": "slides/data-wrangling-2.html#further-reading",
    "href": "slides/data-wrangling-2.html#further-reading",
    "title": "Data wrangling 2",
    "section": "Further reading",
    "text": "Further reading\n\nR for Data Science: Chapter 5.6: Grouped summaries with summarise()\nR for Data Science: Chapter 12.3: Pivoting\nR for Data Science: Chapter 13: Relational data\ndplyr documentation: Grouped data\ntidyr documentation: Pivoting\ndplyr documentation: Mutating joins"
  },
  {
    "objectID": "slides/dimension-reduction-2.html#what-if-a-rotation-cannot-disentangle-the-data",
    "href": "slides/dimension-reduction-2.html#what-if-a-rotation-cannot-disentangle-the-data",
    "title": "Dimension reduction 2",
    "section": "What if a rotation cannot disentangle the data?",
    "text": "What if a rotation cannot disentangle the data?"
  },
  {
    "objectID": "slides/dimension-reduction-2.html#pca-analysis-of-intertwined-spirals-is-not-useful",
    "href": "slides/dimension-reduction-2.html#pca-analysis-of-intertwined-spirals-is-not-useful",
    "title": "Dimension reduction 2",
    "section": "PCA analysis of intertwined spirals is not useful",
    "text": "PCA analysis of intertwined spirals is not useful"
  },
  {
    "objectID": "slides/dimension-reduction-2.html#one-possible-approach-kernel-pca",
    "href": "slides/dimension-reduction-2.html#one-possible-approach-kernel-pca",
    "title": "Dimension reduction 2",
    "section": "One possible approach: Kernel PCA",
    "text": "One possible approach: Kernel PCA\n\n\nKernel PCA performs PCA in a hypothetical, higher-dimensional space\nWith more dimensions, data points become more separable\nImportantly, the space is never explicitly constructed (kernel trick)\nResults from kernel PCA depend on choice of kernel"
  },
  {
    "objectID": "slides/dimension-reduction-2.html#kernel-pca-can-separate-the-spirals",
    "href": "slides/dimension-reduction-2.html#kernel-pca-can-separate-the-spirals",
    "title": "Dimension reduction 2",
    "section": "Kernel PCA can separate the spirals",
    "text": "Kernel PCA can separate the spirals\n\n\n\n\n\n\n \n\n\n\n\n\n\nGaussian kernel, sigma = 64"
  },
  {
    "objectID": "slides/dimension-reduction-2.html#but-we-need-to-choose-the-right-sigma-value",
    "href": "slides/dimension-reduction-2.html#but-we-need-to-choose-the-right-sigma-value",
    "title": "Dimension reduction 2",
    "section": "But we need to choose the right sigma value",
    "text": "But we need to choose the right sigma value"
  },
  {
    "objectID": "slides/dimension-reduction-2.html#other-approaches",
    "href": "slides/dimension-reduction-2.html#other-approaches",
    "title": "Dimension reduction 2",
    "section": "Other approaches",
    "text": "Other approaches\n\n\nt-SNE: t-distributed stochastic neighbor embedding\nUMAP: Uniform manifold approximation and projection\n\n\n\nBoth algorithms look at the local distances between points in the original data space and try to reproduce them in the low-dimensional representation"
  },
  {
    "objectID": "slides/dimension-reduction-2.html#t-sne-can-separate-the-spirals",
    "href": "slides/dimension-reduction-2.html#t-sne-can-separate-the-spirals",
    "title": "Dimension reduction 2",
    "section": "t-SNE can separate the spirals",
    "text": "t-SNE can separate the spirals"
  },
  {
    "objectID": "slides/dimension-reduction-2.html#t-sne-results-depend-on-the-perplexity-value",
    "href": "slides/dimension-reduction-2.html#t-sne-results-depend-on-the-perplexity-value",
    "title": "Dimension reduction 2",
    "section": "t-SNE results depend on the perplexity value",
    "text": "t-SNE results depend on the perplexity value"
  },
  {
    "objectID": "slides/dimension-reduction-2.html#t-sne-results-depend-on-the-random-starting-point",
    "href": "slides/dimension-reduction-2.html#t-sne-results-depend-on-the-random-starting-point",
    "title": "Dimension reduction 2",
    "section": "t-SNE results depend on the random starting point",
    "text": "t-SNE results depend on the random starting point"
  },
  {
    "objectID": "slides/dimension-reduction-2.html#umap-can-separate-the-spirals",
    "href": "slides/dimension-reduction-2.html#umap-can-separate-the-spirals",
    "title": "Dimension reduction 2",
    "section": "UMAP can separate the spirals",
    "text": "UMAP can separate the spirals"
  },
  {
    "objectID": "slides/dimension-reduction-2.html#umap-results-depend-on-the-number-of-neighbors",
    "href": "slides/dimension-reduction-2.html#umap-results-depend-on-the-number-of-neighbors",
    "title": "Dimension reduction 2",
    "section": "UMAP results depend on the number of neighbors",
    "text": "UMAP results depend on the number of neighbors"
  },
  {
    "objectID": "slides/dimension-reduction-2.html#random-starting-point-has-some-impact-on-results",
    "href": "slides/dimension-reduction-2.html#random-starting-point-has-some-impact-on-results",
    "title": "Dimension reduction 2",
    "section": "Random starting point has some impact on results",
    "text": "Random starting point has some impact on results\n\n\n\n\n\n\n \n\n\n\n\n\n\n(UMAP uses a different initialization than t-SNE, Kobak & Linderman, Nature Biotech 2021)"
  },
  {
    "objectID": "slides/dimension-reduction-2.html#what-is-the-meaning-of-the-tuning-parameters",
    "href": "slides/dimension-reduction-2.html#what-is-the-meaning-of-the-tuning-parameters",
    "title": "Dimension reduction 2",
    "section": "What is the meaning of the tuning parameters?",
    "text": "What is the meaning of the tuning parameters?\n\nTuning parameters define when points are close in the original data space\n\n\nThis implicitly defines the number of clusters generated\n\n\nThese have comparable effects:\n\nsigma (Gaussian kernel PCA)\nperplexity (t-SNE)\nnumber of neighbors (UMAP)"
  },
  {
    "objectID": "slides/dimension-reduction-2.html#umap-of-blue-jays",
    "href": "slides/dimension-reduction-2.html#umap-of-blue-jays",
    "title": "Dimension reduction 2",
    "section": "UMAP of blue jays",
    "text": "UMAP of blue jays"
  },
  {
    "objectID": "slides/dimension-reduction-2.html#umap-of-blue-jays-1",
    "href": "slides/dimension-reduction-2.html#umap-of-blue-jays-1",
    "title": "Dimension reduction 2",
    "section": "UMAP of blue jays",
    "text": "UMAP of blue jays"
  },
  {
    "objectID": "slides/dimension-reduction-2.html#kernel-pca-of-blue-jays",
    "href": "slides/dimension-reduction-2.html#kernel-pca-of-blue-jays",
    "title": "Dimension reduction 2",
    "section": "Kernel PCA of blue jays",
    "text": "Kernel PCA of blue jays"
  },
  {
    "objectID": "slides/dimension-reduction-2.html#nonlinear-methods-have-important-downsides",
    "href": "slides/dimension-reduction-2.html#nonlinear-methods-have-important-downsides",
    "title": "Dimension reduction 2",
    "section": "Nonlinear methods have important downsides",
    "text": "Nonlinear methods have important downsides\n\n\nResults depend on parameter fine tuning\nLow-dimensional embedding cannot be interpreted (no rotation matrix plot)\n\n\n\nUse with caution, and only when linear methods clearly aren’t working"
  },
  {
    "objectID": "slides/dimension-reduction-2.html#getting-the-data",
    "href": "slides/dimension-reduction-2.html#getting-the-data",
    "title": "Dimension reduction 2",
    "section": "Getting the data",
    "text": "Getting the data\n\nWe’ll be working with the blue_jays dataset:\n\nblue_jays &lt;- read_csv(\"https://wilkelab.org/DSC385/datasets/blue_jays.csv\")\n\nblue_jays\n\n# A tibble: 123 × 8\n   bird_id    sex   bill_depth_mm bill_width_mm bill_length_mm head_length_mm\n   &lt;chr&gt;      &lt;chr&gt;         &lt;dbl&gt;         &lt;dbl&gt;          &lt;dbl&gt;          &lt;dbl&gt;\n 1 0000-00000 M              8.26          9.21           25.9           56.6\n 2 1142-05901 M              8.54          8.76           25.0           56.4\n 3 1142-05905 M              8.39          8.78           26.1           57.3\n 4 1142-05907 F              7.78          9.3            23.5           53.8\n 5 1142-05909 M              8.71          9.84           25.5           57.3\n 6 1142-05911 F              7.28          9.3            22.2           52.2\n 7 1142-05912 M              8.74          9.28           25.4           57.1\n 8 1142-05914 M              8.72          9.94           30             60.7\n 9 1142-05917 F              8.2           9.01           22.8           52.8\n10 1142-05920 F              7.67          9.31           24.6           54.9\n# ℹ 113 more rows\n# ℹ 2 more variables: body_mass_g &lt;dbl&gt;, skull_size_mm &lt;dbl&gt;"
  },
  {
    "objectID": "slides/dimension-reduction-2.html#doing-nonlinear-dimension-reduction-in-r-1",
    "href": "slides/dimension-reduction-2.html#doing-nonlinear-dimension-reduction-in-r-1",
    "title": "Dimension reduction 2",
    "section": "Doing nonlinear dimension reduction in R",
    "text": "Doing nonlinear dimension reduction in R\n\nAll these methods require special packages:\n\nkernlab (kernel PCA)\nRtsne (t-SNE)\numap (UMAP)\n\n\n\nCode examples are somewhat messy\n\n\nWill do t-SNE as an example"
  },
  {
    "objectID": "slides/dimension-reduction-2.html#doing-t-sne-in-r",
    "href": "slides/dimension-reduction-2.html#doing-t-sne-in-r",
    "title": "Dimension reduction 2",
    "section": "Doing t-SNE in R",
    "text": "Doing t-SNE in R\n\n\n# set random seed\nset.seed(3482)\n\n# run t-SNE\ntsne_fit &lt;- blue_jays |&gt;\n  select(where(is.numeric)) |&gt;\n  scale() |&gt;\n  Rtsne(perplexity = 8)\n\n# model fit object contains various pieces of information\nnames(tsne_fit)\n\n [1] \"N\"                   \"Y\"                   \"costs\"              \n [4] \"itercosts\"           \"origD\"               \"perplexity\"         \n [7] \"theta\"               \"max_iter\"            \"stop_lying_iter\"    \n[10] \"mom_switch_iter\"     \"momentum\"            \"final_momentum\"     \n[13] \"eta\"                 \"exaggeration_factor\""
  },
  {
    "objectID": "slides/dimension-reduction-2.html#doing-t-sne-in-r-1",
    "href": "slides/dimension-reduction-2.html#doing-t-sne-in-r-1",
    "title": "Dimension reduction 2",
    "section": "Doing t-SNE in R",
    "text": "Doing t-SNE in R\n\n\n# extract coordinates from the `tsne_fit` object and plot\ntsne_fit$Y\n\n               [,1]        [,2]\n  [1,]  -1.35151022  16.0171255\n  [2,]  -6.38003944  23.4335431\n  [3,]  -2.41436032  20.0405001\n  [4,]   6.28730425 -19.3916453\n  [5,] -10.65885788  10.5774719\n  [6,]   8.99818448 -20.4131218\n  [7,]  -9.31273644   5.3755674\n  [8,]  -7.25654988  15.7132010\n  [9,]   6.74481665 -23.7464307\n [10,]   1.27226454 -11.3933562\n [11,]  -8.10967967  23.7301219\n [12,]  11.37651563  -7.6423822\n [13,] -13.04595468   2.5194354\n [14,]  15.03025326  14.6148860\n [15,] -13.64450956  18.2103340\n [16,]   6.90810849 -26.5341776\n [17,]  11.26613343  -6.1024744\n [18,] -16.25809266  12.1275049\n [19,]  -8.74441862  21.8400261\n [20,]  -5.93137317  -0.9041384\n [21,] -11.28718538  13.0005938\n [22,]   8.51343609 -30.9750396\n [23,]  -9.92567365  13.8288257\n [24,]   8.72112609 -10.3065246\n [25,] -11.83830418   5.9233754\n [26,]  -2.06950719   4.2670455\n [27,] -11.07278221  -2.5710372\n [28,]   6.65586113 -10.8649903\n [29,] -15.82978852   5.9949983\n [30,]   0.32528353  15.5410251\n [31,]  12.04517467 -29.1169657\n [32,]   2.54808748  14.3788814\n [33,]  -0.40434713   9.8045764\n [34,]   1.31458713  -3.2200280\n [35,]  12.80511247  11.6905636\n [36,]  -3.45964136  11.6421591\n [37,]  -4.90492627  24.8945733\n [38,]  13.79168285  10.7468991\n [39,]   8.79449595 -16.6237071\n [40,] -17.63927800   2.3142518\n [41,]   5.02287576 -25.4805579\n [42,]   7.45160091 -14.2214890\n [43,]  -3.95527081   4.5930910\n [44,]  -7.99348678  20.3813197\n [45,]   1.55025679  12.3853486\n [46,]  -8.20228962  22.3799729\n [47,] -14.01509263   1.9623268\n [48,]   6.82478348 -17.9605903\n [49,]  -1.08848740  22.2611209\n [50,]   8.01368178 -26.0549148\n [51,]   0.54242080  -5.2853639\n [52,] -10.11680762   8.2921052\n [53,]  -4.61818190  14.1360227\n [54,]   3.83225563 -24.3249597\n [55,]  12.24683187  10.9430340\n [56,]   8.52416101  -1.1040490\n [57,]  -6.12706756  24.5883509\n [58,]  -2.85422340  18.9829203\n [59,] -14.36662966  17.4809729\n [60,]  12.16520613  -9.1434243\n [61,] -12.00223356  10.3148413\n [62,]  -7.55487764   5.6428510\n [63,]   7.46887021 -24.9469847\n [64,]  10.70726730  -4.9636965\n [65,]  -9.71080279  10.3400137\n [66,]  10.62927989 -29.2194811\n [67,] -16.57730949   5.4800433\n [68,] -16.50241893   2.9636419\n [69,]  -7.04207831  -1.3413458\n [70,]   9.20326368 -17.6407032\n [71,]  -5.35723549   1.3588363\n [72,]   5.85652190 -14.6636706\n [73,]   4.75628917  -6.0558216\n [74,] -15.65311924  12.7620499\n [75,]   9.75199542  -2.3909995\n [76,]   2.23275182  -1.9913967\n [77,]  -9.24320404   8.2860113\n [78,]   1.28023297  -4.7899444\n [79,]   7.32449916 -28.3930435\n [80,]  -7.91761922   8.7926482\n [81,]  -1.77976277  22.9138104\n [82,]   8.36118531   3.1669471\n [83,]  14.86350277  10.0337068\n [84,]  -6.58111775   9.6660722\n [85,]   1.33405097  15.2631282\n [86,]  -6.11980123   4.3992863\n [87,]   0.74890824 -10.6061564\n [88,]   0.04058745  -8.1189103\n [89,]   5.48671834  -3.9348831\n [90,]  13.57909092 -13.1058299\n [91,]   8.13840156   0.9707537\n [92,] -13.76195207  15.8693190\n [93,]  -1.35948973  -8.3169556\n [94,]   8.05159125   1.5796687\n [95,]   7.14118351  -9.8044605\n [96,]   7.70006228 -12.1358166\n [97,]  -5.34139444  14.9834510\n [98,]   1.22934439  11.5884466\n [99,]   7.49927889 -20.5528006\n[100,]  15.47860204  14.3535335\n[101,]   7.90802023 -31.4800496\n[102,]   9.47620964 -25.2594596\n[103,]  -4.11678166  -0.0170017\n[104,]   5.59160885 -13.7713633\n[105,]   9.13824090  -9.2522350\n[106,] -13.30911093  19.0631648\n[107,]   3.21307540 -20.8686920\n[108,]  -2.68502288  14.2210364\n[109,]   2.88147176 -23.6201737\n[110,]  -0.76330270  -4.5322009\n[111,]  12.22843830  -5.0294023\n[112,]  -5.77495633   2.6796119\n[113,]  12.39826074  12.9388409\n[114,]   1.97818731  -0.1584058\n[115,]  -2.11397889  16.4620832\n[116,] -12.03027253   5.1001295\n[117,]   5.59991662  -6.8646572\n[118,] -15.64803015   2.0676494\n[119,] -12.09196324   3.0020558\n[120,]  -0.82467518  -6.8039250\n[121,]   5.42527929 -19.6198276\n[122,]  13.18484484 -11.7534649\n[123,]   9.28002940 -27.4925770"
  },
  {
    "objectID": "slides/dimension-reduction-2.html#doing-t-sne-in-r-2",
    "href": "slides/dimension-reduction-2.html#doing-t-sne-in-r-2",
    "title": "Dimension reduction 2",
    "section": "Doing t-SNE in R",
    "text": "Doing t-SNE in R\n\n\n# extract coordinates from the `tsne_fit` object and plot\ntsne_fit$Y |&gt;\n  as.data.frame() |&gt;\n  # put non-numeric data columns back into the dataset\n  cbind(select(blue_jays, -where(is.numeric)))\n\n              V1          V2    bird_id sex\n1    -1.35151022  16.0171255 0000-00000   M\n2    -6.38003944  23.4335431 1142-05901   M\n3    -2.41436032  20.0405001 1142-05905   M\n4     6.28730425 -19.3916453 1142-05907   F\n5   -10.65885788  10.5774719 1142-05909   M\n6     8.99818448 -20.4131218 1142-05911   F\n7    -9.31273644   5.3755674 1142-05912   M\n8    -7.25654988  15.7132010 1142-05914   M\n9     6.74481665 -23.7464307 1142-05917   F\n10    1.27226454 -11.3933562 1142-05920   F\n11   -8.10967967  23.7301219 1142-05930   M\n12   11.37651563  -7.6423822 1142-05941   F\n13  -13.04595468   2.5194354 1142-05957   M\n14   15.03025326  14.6148860 1142-05971   F\n15  -13.64450956  18.2103340 1142-05981   M\n16    6.90810849 -26.5341776 1142-05986   F\n17   11.26613343  -6.1024744 1142-05990   F\n18  -16.25809266  12.1275049 1142-05991   M\n19   -8.74441862  21.8400261 1142-05995   M\n20   -5.93137317  -0.9041384 1142-05996   M\n21  -11.28718538  13.0005938 1142-05997   M\n22    8.51343609 -30.9750396 1142-05998   M\n23   -9.92567365  13.8288257 1142-05999   M\n24    8.72112609 -10.3065246  702-90556   F\n25  -11.83830418   5.9233754  702-90560   M\n26   -2.06950719   4.2670455  702-90567   F\n27  -11.07278221  -2.5710372  702-90576   F\n28    6.65586113 -10.8649903  702-90577   F\n29  -15.82978852   5.9949983  702-90578   M\n30    0.32528353  15.5410251  702-90583   F\n31   12.04517467 -29.1169657  872-94671   F\n32    2.54808748  14.3788814  872-94673   M\n33   -0.40434713   9.8045764  872-94684   F\n34    1.31458713  -3.2200280  872-94688   F\n35   12.80511247  11.6905636  872-94689   M\n36   -3.45964136  11.6421591  872-94692   M\n37   -4.90492627  24.8945733  872-94694   M\n38   13.79168285  10.7468991  872-94698   M\n39    8.79449595 -16.6237071  872-94709   F\n40  -17.63927800   2.3142518  872-94716   F\n41    5.02287576 -25.4805579  872-94731   M\n42    7.45160091 -14.2214890  872-94737   F\n43   -3.95527081   4.5930910  872-94757   M\n44   -7.99348678  20.3813197  872-94761   M\n45    1.55025679  12.3853486  872-94766   F\n46   -8.20228962  22.3799729  872-94769   M\n47  -14.01509263   1.9623268  872-94771   M\n48    6.82478348 -17.9605903  872-94776   F\n49   -1.08848740  22.2611209  872-94777   M\n50    8.01368178 -26.0549148  872-94779   F\n51    0.54242080  -5.2853639  872-94780   F\n52  -10.11680762   8.2921052  952-00002   F\n53   -4.61818190  14.1360227  952-00004   M\n54    3.83225563 -24.3249597  952-00006   F\n55   12.24683187  10.9430340  952-00007   F\n56    8.52416101  -1.1040490  952-00012   F\n57   -6.12706756  24.5883509  952-00013   M\n58   -2.85422340  18.9829203  952-00016   M\n59  -14.36662966  17.4809729  952-00020   M\n60   12.16520613  -9.1434243  952-00023   M\n61  -12.00223356  10.3148413  952-00026   M\n62   -7.55487764   5.6428510  952-00056   M\n63    7.46887021 -24.9469847  952-00057   F\n64   10.70726730  -4.9636965  952-00058   F\n65   -9.71080279  10.3400137  952-00059   M\n66   10.62927989 -29.2194811  952-00062   F\n67  -16.57730949   5.4800433  952-00063   M\n68  -16.50241893   2.9636419  952-00064   M\n69   -7.04207831  -1.3413458  952-00065   M\n70    9.20326368 -17.6407032  952-00066   F\n71   -5.35723549   1.3588363  952-00068   M\n72    5.85652190 -14.6636706  952-00069   F\n73    4.75628917  -6.0558216  952-00070   M\n74  -15.65311924  12.7620499  952-00071   M\n75    9.75199542  -2.3909995  952-00072   F\n76    2.23275182  -1.9913967  952-00073   F\n77   -9.24320404   8.2860113  952-00074   M\n78    1.28023297  -4.7899444  952-00076   M\n79    7.32449916 -28.3930435  952-00077   F\n80   -7.91761922   8.7926482  952-00078   M\n81   -1.77976277  22.9138104  952-00079   M\n82    8.36118531   3.1669471  952-00080   M\n83   14.86350277  10.0337068  952-00081   F\n84   -6.58111775   9.6660722  952-00084   F\n85    1.33405097  15.2631282  962-62003   M\n86   -6.11980123   4.3992863  962-62006   M\n87    0.74890824 -10.6061564  962-62007   F\n88    0.04058745  -8.1189103  962-62008   F\n89    5.48671834  -3.9348831  962-62019   M\n90   13.57909092 -13.1058299  962-62021   F\n91    8.13840156   0.9707537  962-62024   M\n92  -13.76195207  15.8693190  962-62025   M\n93   -1.35948973  -8.3169556  962-62026   F\n94    8.05159125   1.5796687  962-62027   M\n95    7.14118351  -9.8044605  962-62030   F\n96    7.70006228 -12.1358166  962-62031   F\n97   -5.34139444  14.9834510  962-62038   M\n98    1.22934439  11.5884466  962-62040   M\n99    7.49927889 -20.5528006  962-62041   F\n100  15.47860204  14.3535335  962-62043   F\n101   7.90802023 -31.4800496  962-62045   F\n102   9.47620964 -25.2594596  962-62046   F\n103  -4.11678166  -0.0170017  962-62063   M\n104   5.59160885 -13.7713633  962-62067   F\n105   9.13824090  -9.2522350  962-62068   F\n106 -13.30911093  19.0631648  962-62069   M\n107   3.21307540 -20.8686920  962-62070   F\n108  -2.68502288  14.2210364  962-62081   M\n109   2.88147176 -23.6201737  962-62088   F\n110  -0.76330270  -4.5322009  962-62089   F\n111  12.22843830  -5.0294023  962-62090   F\n112  -5.77495633   2.6796119  962-62099   F\n113  12.39826074  12.9388409  962-62104   F\n114   1.97818731  -0.1584058  962-62115   F\n115  -2.11397889  16.4620832  962-62117   M\n116 -12.03027253   5.1001295  962-62123   M\n117   5.59991662  -6.8646572  962-62127   M\n118 -15.64803015   2.0676494  962-62138   F\n119 -12.09196324   3.0020558  962-62176   M\n120  -0.82467518  -6.8039250  962-62181   M\n121   5.42527929 -19.6198276  962-62184   F\n122  13.18484484 -11.7534649  962-62185   F\n123   9.28002940 -27.4925770  962-62200   F"
  },
  {
    "objectID": "slides/dimension-reduction-2.html#doing-t-sne-in-r-3",
    "href": "slides/dimension-reduction-2.html#doing-t-sne-in-r-3",
    "title": "Dimension reduction 2",
    "section": "Doing t-SNE in R",
    "text": "Doing t-SNE in R\n\n\n# extract coordinates from the `tsne_fit` object and plot\ntsne_fit$Y |&gt;\n  as.data.frame() |&gt;\n  # put non-numeric data columns back into the dataset\n  cbind(select(blue_jays, -where(is.numeric))) |&gt;\n  # generate plot\n  ggplot(aes(V1, V2, color = sex)) +\n  geom_point()"
  },
  {
    "objectID": "slides/dimension-reduction-2.html#further-reading",
    "href": "slides/dimension-reduction-2.html#further-reading",
    "title": "Dimension reduction 2",
    "section": "Further reading",
    "text": "Further reading\n\nWikipedia: Nonlinear dimensionality reduction\nWikipedia: t-distributed stochastic neighbor embedding\nWikipedia: Kernel principal component analysis\nkernlab reference documentation (for kernel PCA): pdf document\nRtsne reference documentation: pdf document\numap vignette: Uniform Manifold Approximation and Projection in R"
  },
  {
    "objectID": "slides/functional-programming.html#we-often-have-to-run-similar-code-multiple-times",
    "href": "slides/functional-programming.html#we-often-have-to-run-similar-code-multiple-times",
    "title": "Functions and functional programming",
    "section": "We often have to run similar code multiple times",
    "text": "We often have to run similar code multiple times\n\n\n\npenguins |&gt;\n  filter(species == \"Adelie\") |&gt;\n  ggplot() +\n  aes(bill_length_mm, body_mass_g) +\n  geom_point() +\n  ggtitle(\"Species: Adelie\") +\n  xlab(\"bill length (mm)\") +\n  ylab(\"body mass (g)\") +\n  theme_minimal_grid() +\n  theme(plot.title.position = \"plot\")"
  },
  {
    "objectID": "slides/functional-programming.html#we-often-have-to-run-similar-code-multiple-times-1",
    "href": "slides/functional-programming.html#we-often-have-to-run-similar-code-multiple-times-1",
    "title": "Functions and functional programming",
    "section": "We often have to run similar code multiple times",
    "text": "We often have to run similar code multiple times\n\n\n\npenguins |&gt;\n  filter(species == \"Chinstrap\") |&gt;\n  ggplot() +\n  aes(bill_length_mm, body_mass_g) +\n  geom_point() +\n  ggtitle(\"Species: Chinstrap\") +\n  xlab(\"bill length (mm)\") +\n  ylab(\"body mass (g)\") +\n  theme_minimal_grid() +\n  theme(plot.title.position = \"plot\")"
  },
  {
    "objectID": "slides/functional-programming.html#we-often-have-to-run-similar-code-multiple-times-2",
    "href": "slides/functional-programming.html#we-often-have-to-run-similar-code-multiple-times-2",
    "title": "Functions and functional programming",
    "section": "We often have to run similar code multiple times",
    "text": "We often have to run similar code multiple times\n\n\n\npenguins |&gt;\n  filter(species == \"Gentoo\") |&gt;\n  ggplot() +\n  aes(bill_length_mm, body_mass_g) +\n  geom_point() +\n  ggtitle(\"Species: Gentoo\") +\n  xlab(\"bill length (mm)\") +\n  ylab(\"body mass (g)\") +\n  theme_minimal_grid() +\n  theme(plot.title.position = \"plot\")\n\n\n\n\n\n \n\n\n\n\n\n\nHow can we make our life simpler and avoid massive code duplication?"
  },
  {
    "objectID": "slides/functional-programming.html#step-1-avoid-hard-coding-specific-values",
    "href": "slides/functional-programming.html#step-1-avoid-hard-coding-specific-values",
    "title": "Functions and functional programming",
    "section": "Step 1: Avoid hard-coding specific values",
    "text": "Step 1: Avoid hard-coding specific values\n\n\n\nspecies &lt;- \"Adelie\"\n\npenguins |&gt;\n  filter(.data$species == .env$species) |&gt;\n  ggplot() +\n  aes(bill_length_mm, body_mass_g) +\n  geom_point() +\n  ggtitle(glue(\"Species: {species}\")) +\n  xlab(\"bill length (mm)\") +\n  ylab(\"body mass (g)\") +\n  theme_minimal_grid() +\n  theme(plot.title.position = \"plot\")"
  },
  {
    "objectID": "slides/functional-programming.html#a-quick-aside-the-pronouns-.data-and-.env",
    "href": "slides/functional-programming.html#a-quick-aside-the-pronouns-.data-and-.env",
    "title": "Functions and functional programming",
    "section": "A quick aside: the pronouns .data and .env",
    "text": "A quick aside: the pronouns .data and .env\n\nWe can use pronouns to distinguish data columns from variables:\nspecies &lt;- \"Adelie\"\n\npenguins |&gt;\n  filter(.data$species == .env$species)\n\n\n.data$species is a column in the data frame\n\n\n.env$species is a variable in the local environment\n\n\nAlternatively we would have to make sure the names don’t clash:\nspecies_choice &lt;- \"Adelie\"\n\npenguins |&gt;\n  filter(species == species_choice)"
  },
  {
    "objectID": "slides/functional-programming.html#step-1-avoid-hard-coding-specific-values-1",
    "href": "slides/functional-programming.html#step-1-avoid-hard-coding-specific-values-1",
    "title": "Functions and functional programming",
    "section": "Step 1: Avoid hard-coding specific values",
    "text": "Step 1: Avoid hard-coding specific values\n\n\n\nspecies &lt;- \"Adelie\"\n\npenguins |&gt;\n  filter(.data$species == .env$species) |&gt;\n  ggplot() +\n  aes(bill_length_mm, body_mass_g) +\n  geom_point() +\n  ggtitle(glue(\"Species: {species}\")) +\n  xlab(\"bill length (mm)\") +\n  ylab(\"body mass (g)\") +\n  theme_minimal_grid() +\n  theme(plot.title.position = \"plot\")"
  },
  {
    "objectID": "slides/functional-programming.html#step-1-avoid-hard-coding-specific-values-2",
    "href": "slides/functional-programming.html#step-1-avoid-hard-coding-specific-values-2",
    "title": "Functions and functional programming",
    "section": "Step 1: Avoid hard-coding specific values",
    "text": "Step 1: Avoid hard-coding specific values\n\n\n\nspecies &lt;- \"Chinstrap\"\n\npenguins |&gt;\n  filter(.data$species == .env$species) |&gt;\n  ggplot() +\n  aes(bill_length_mm, body_mass_g) +\n  geom_point() +\n  ggtitle(glue(\"Species: {species}\")) +\n  xlab(\"bill length (mm)\") +\n  ylab(\"body mass (g)\") +\n  theme_minimal_grid() +\n  theme(plot.title.position = \"plot\")"
  },
  {
    "objectID": "slides/functional-programming.html#step-1-avoid-hard-coding-specific-values-3",
    "href": "slides/functional-programming.html#step-1-avoid-hard-coding-specific-values-3",
    "title": "Functions and functional programming",
    "section": "Step 1: Avoid hard-coding specific values",
    "text": "Step 1: Avoid hard-coding specific values\n\n\n\nspecies &lt;- \"Gentoo\"\n\npenguins |&gt;\n  filter(.data$species == .env$species) |&gt;\n  ggplot() +\n  aes(bill_length_mm, body_mass_g) +\n  geom_point() +\n  ggtitle(glue(\"Species: {species}\")) +\n  xlab(\"bill length (mm)\") +\n  ylab(\"body mass (g)\") +\n  theme_minimal_grid() +\n  theme(plot.title.position = \"plot\")\n\n\n\n\n\n \n\n\n\n\n\n\nThis concept is also called: Avoiding magic numbers"
  },
  {
    "objectID": "slides/functional-programming.html#step-2-define-a-function",
    "href": "slides/functional-programming.html#step-2-define-a-function",
    "title": "Functions and functional programming",
    "section": "Step 2: Define a function",
    "text": "Step 2: Define a function\n\n\n\nmake_plot &lt;- function(species) {\n  penguins |&gt;\n    filter(.data$species == .env$species) |&gt;\n    ggplot() +\n    aes(bill_length_mm, body_mass_g) +\n    geom_point() +\n    ggtitle(glue(\"Species: {species}\")) +\n    xlab(\"bill length (mm)\") +\n    ylab(\"body mass (g)\") +\n    theme_minimal_grid() +\n    theme(plot.title.position = \"plot\")\n}"
  },
  {
    "objectID": "slides/functional-programming.html#step-2-define-a-function-1",
    "href": "slides/functional-programming.html#step-2-define-a-function-1",
    "title": "Functions and functional programming",
    "section": "Step 2: Define a function",
    "text": "Step 2: Define a function\n\n\n\nmake_plot &lt;- function(species) {\n  penguins |&gt;\n    filter(.data$species == .env$species) |&gt;\n    ggplot() +\n    aes(bill_length_mm, body_mass_g) +\n    geom_point() +\n    ggtitle(glue(\"Species: {species}\")) +\n    xlab(\"bill length (mm)\") +\n    ylab(\"body mass (g)\") +\n    theme_minimal_grid() +\n    theme(plot.title.position = \"plot\")\n}\n\nmake_plot(\"Adelie\")"
  },
  {
    "objectID": "slides/functional-programming.html#step-2-define-a-function-2",
    "href": "slides/functional-programming.html#step-2-define-a-function-2",
    "title": "Functions and functional programming",
    "section": "Step 2: Define a function",
    "text": "Step 2: Define a function\n\n\n\nmake_plot &lt;- function(species) {\n  penguins |&gt;\n    filter(.data$species == .env$species) |&gt;\n    ggplot() +\n    aes(bill_length_mm, body_mass_g) +\n    geom_point() +\n    ggtitle(glue(\"Species: {species}\")) +\n    xlab(\"bill length (mm)\") +\n    ylab(\"body mass (g)\") +\n    theme_minimal_grid() +\n    theme(plot.title.position = \"plot\")\n}\n\nmake_plot(\"Chinstrap\")"
  },
  {
    "objectID": "slides/functional-programming.html#step-2-define-a-function-3",
    "href": "slides/functional-programming.html#step-2-define-a-function-3",
    "title": "Functions and functional programming",
    "section": "Step 2: Define a function",
    "text": "Step 2: Define a function\n\n\n\nmake_plot &lt;- function(species) {\n  penguins |&gt;\n    filter(.data$species == .env$species) |&gt;\n    ggplot() +\n    aes(bill_length_mm, body_mass_g) +\n    geom_point() +\n    ggtitle(glue(\"Species: {species}\")) +\n    xlab(\"bill length (mm)\") +\n    ylab(\"body mass (g)\") +\n    theme_minimal_grid() +\n    theme(plot.title.position = \"plot\")\n}\n\nmake_plot(\"Gentoo\")"
  },
  {
    "objectID": "slides/functional-programming.html#rules-of-thumb-about-functions",
    "href": "slides/functional-programming.html#rules-of-thumb-about-functions",
    "title": "Functions and functional programming",
    "section": "Rules of thumb about functions",
    "text": "Rules of thumb about functions\n\n\nYou can never write too many functions\n\n\n\n\nWhen you find yourself writing the same code 2-3 times, put it into a function\n\n\n\n\nA function should be no longer than 20-40 lines\n\n\n\n\nIf a function is getting too long, break it into smaller functions"
  },
  {
    "objectID": "slides/functional-programming.html#step-3-automate-calling-the-function",
    "href": "slides/functional-programming.html#step-3-automate-calling-the-function",
    "title": "Functions and functional programming",
    "section": "Step 3: Automate calling the function",
    "text": "Step 3: Automate calling the function\n\nWe need a brief detour to talk about lists and the map() pattern"
  },
  {
    "objectID": "slides/functional-programming.html#lists",
    "href": "slides/functional-programming.html#lists",
    "title": "Functions and functional programming",
    "section": "Lists",
    "text": "Lists\n\nIn R, lists are a data structure that can store multiple elements of various types\n\n\nA list of words:\n\nlist(\"apple\", \"orange\", \"banana\")\n\n[[1]]\n[1] \"apple\"\n\n[[2]]\n[1] \"orange\"\n\n[[3]]\n[1] \"banana\""
  },
  {
    "objectID": "slides/functional-programming.html#lists-1",
    "href": "slides/functional-programming.html#lists-1",
    "title": "Functions and functional programming",
    "section": "Lists",
    "text": "Lists\n\nIn R, lists are a data structure that can store multiple elements of various types\n\n\nA list of numbers:\n\nlist(5, 7, 12)\n\n[[1]]\n[1] 5\n\n[[2]]\n[1] 7\n\n[[3]]\n[1] 12"
  },
  {
    "objectID": "slides/functional-programming.html#lists-2",
    "href": "slides/functional-programming.html#lists-2",
    "title": "Functions and functional programming",
    "section": "Lists",
    "text": "Lists\n\nIn R, lists are a data structure that can store multiple elements of various types\n\n\nA list of mixed data types:\n\nlist(5, \"apple\", TRUE)\n\n[[1]]\n[1] 5\n\n[[2]]\n[1] \"apple\"\n\n[[3]]\n[1] TRUE\n\n\n\n\nFor comparison, all elements of a vector are coerced into the same type:\n\nc(5, \"apple\", TRUE)\n\n[1] \"5\"     \"apple\" \"TRUE\""
  },
  {
    "objectID": "slides/functional-programming.html#lists-3",
    "href": "slides/functional-programming.html#lists-3",
    "title": "Functions and functional programming",
    "section": "Lists",
    "text": "Lists\n\nIn R, lists are a data structure that can store multiple elements of various types\n\n\nA list of vectors:\n\nlist(1:5, c(\"apple\", \"orange\", \"banana\"), c(TRUE, FALSE))\n\n[[1]]\n[1] 1 2 3 4 5\n\n[[2]]\n[1] \"apple\"  \"orange\" \"banana\"\n\n[[3]]\n[1]  TRUE FALSE"
  },
  {
    "objectID": "slides/functional-programming.html#lists-4",
    "href": "slides/functional-programming.html#lists-4",
    "title": "Functions and functional programming",
    "section": "Lists",
    "text": "Lists\n\nIn R, lists are a data structure that can store multiple elements of various types\n\n\nA list of lists:\n\nlist(list(1, 2), list(3, 4))\n\n[[1]]\n[[1]][[1]]\n[1] 1\n\n[[1]][[2]]\n[1] 2\n\n\n[[2]]\n[[2]][[1]]\n[1] 3\n\n[[2]][[2]]\n[1] 4"
  },
  {
    "objectID": "slides/functional-programming.html#lists-5",
    "href": "slides/functional-programming.html#lists-5",
    "title": "Functions and functional programming",
    "section": "Lists",
    "text": "Lists\n\nYou can access individual elements of a list with the double brackets operator:\n\nfruit &lt;- list(\"apple\", \"orange\", \"banana\")\nfruit\n\n[[1]]\n[1] \"apple\"\n\n[[2]]\n[1] \"orange\"\n\n[[3]]\n[1] \"banana\""
  },
  {
    "objectID": "slides/functional-programming.html#lists-6",
    "href": "slides/functional-programming.html#lists-6",
    "title": "Functions and functional programming",
    "section": "Lists",
    "text": "Lists\n\nYou can access individual elements of a list with the double brackets operator:\n\nfruit &lt;- list(\"apple\", \"orange\", \"banana\")\nfruit[[1]]\n\n[1] \"apple\""
  },
  {
    "objectID": "slides/functional-programming.html#lists-7",
    "href": "slides/functional-programming.html#lists-7",
    "title": "Functions and functional programming",
    "section": "Lists",
    "text": "Lists\n\nYou can access individual elements of a list with the double brackets operator:\n\nfruit &lt;- list(\"apple\", \"orange\", \"banana\")\nfruit[[3]]\n\n[1] \"banana\""
  },
  {
    "objectID": "slides/functional-programming.html#the-map-pattern",
    "href": "slides/functional-programming.html#the-map-pattern",
    "title": "Functions and functional programming",
    "section": "The map() pattern",
    "text": "The map() pattern\n\nThe map() function applies a function to all elements of a vector or list and returns the result in a list\n\n\nThis pattern can be used instead of loops\n\n\nExample: Calculate the squares of the numbers 3, 4, 5:\n\n# define function that calculates square\nsquare &lt;- function(x) x^2\n\n# apply function to the numbers 3, 4, 5\nmap(3:5, square) \n\n[[1]]\n[1] 9\n\n[[2]]\n[1] 16\n\n[[3]]\n[1] 25"
  },
  {
    "objectID": "slides/functional-programming.html#the-map-pattern-1",
    "href": "slides/functional-programming.html#the-map-pattern-1",
    "title": "Functions and functional programming",
    "section": "The map() pattern",
    "text": "The map() pattern\n\nWe can define the function to be applied on the fly:\n\nmap(3:5, function(x) x^2) \n\n[[1]]\n[1] 9\n\n[[2]]\n[1] 16\n\n[[3]]\n[1] 25\n\n\n\n\nEven simpler:\n\nmap(3:5, \\(x) x^2) \n\n[[1]]\n[1] 9\n\n[[2]]\n[1] 16\n\n[[3]]\n[1] 25"
  },
  {
    "objectID": "slides/functional-programming.html#the-map-pattern-2",
    "href": "slides/functional-programming.html#the-map-pattern-2",
    "title": "Functions and functional programming",
    "section": "The map() pattern",
    "text": "The map() pattern\n\nAlso:\n\nmap(3:5, ~.x^2) \n\n[[1]]\n[1] 9\n\n[[2]]\n[1] 16\n\n[[3]]\n[1] 25\n\n\nNote: The formula definition is not part of the base R language and only works for certain tidyverse functions"
  },
  {
    "objectID": "slides/functional-programming.html#the-map-pattern-3",
    "href": "slides/functional-programming.html#the-map-pattern-3",
    "title": "Functions and functional programming",
    "section": "The map() pattern",
    "text": "The map() pattern\n\nSometimes it’s more convenient to get a vector as return value:\n\nmap_dbl(3:5, ~.x^2) \n\n[1]  9 16 25\n\n\n\n\nSimilarly:\n\nmap_chr() returns a vector of strings\nmap_int() returns a vector of integers\nmap_lgl() returns a vector of logicals"
  },
  {
    "objectID": "slides/functional-programming.html#now-lets-go-back-to-making-plots",
    "href": "slides/functional-programming.html#now-lets-go-back-to-making-plots",
    "title": "Functions and functional programming",
    "section": "Now let’s go back to making plots",
    "text": "Now let’s go back to making plots\n\n\nspecies &lt;- c(\"Adelie\", \"Chinstrap\", \"Gentoo\")\nplots &lt;- map(species, make_plot)\n\n\n\nmap takes each element of the vector species and uses it as input for make_plot()\n\n\nIt returns a list of created plots:\n\nplots[[1]]"
  },
  {
    "objectID": "slides/functional-programming.html#now-lets-go-back-to-making-plots-1",
    "href": "slides/functional-programming.html#now-lets-go-back-to-making-plots-1",
    "title": "Functions and functional programming",
    "section": "Now let’s go back to making plots",
    "text": "Now let’s go back to making plots\n\n\nspecies &lt;- c(\"Adelie\", \"Chinstrap\", \"Gentoo\")\nplots &lt;- map(species, make_plot)\n\n\n\nmap takes each element of the vector species and uses it as input for make_plot()\n\n\nIt returns a list of created plots:\n\nplots[[2]]"
  },
  {
    "objectID": "slides/functional-programming.html#now-lets-go-back-to-making-plots-2",
    "href": "slides/functional-programming.html#now-lets-go-back-to-making-plots-2",
    "title": "Functions and functional programming",
    "section": "Now let’s go back to making plots",
    "text": "Now let’s go back to making plots\n\n\nspecies &lt;- c(\"Adelie\", \"Chinstrap\", \"Gentoo\")\nplots &lt;- map(species, make_plot)\n\n\n\nmap takes each element of the vector species and uses it as input for make_plot()\n\n\nIt returns a list of created plots:\n\nplots[[3]]"
  },
  {
    "objectID": "slides/functional-programming.html#now-lets-go-back-to-making-plots-3",
    "href": "slides/functional-programming.html#now-lets-go-back-to-making-plots-3",
    "title": "Functions and functional programming",
    "section": "Now let’s go back to making plots",
    "text": "Now let’s go back to making plots\n\n\nspecies &lt;- c(\"Adelie\", \"Chinstrap\", \"Gentoo\")\nplots &lt;- map(species, make_plot)\n\n# put all plots side-by-side with patchwork\npatchwork::wrap_plots(plots)"
  },
  {
    "objectID": "slides/functional-programming.html#step-4-write-a-more-general-function",
    "href": "slides/functional-programming.html#step-4-write-a-more-general-function",
    "title": "Functions and functional programming",
    "section": "Step 4: Write a more general function",
    "text": "Step 4: Write a more general function\n\n\n\nmake_plot &lt;- function(species) {\n  penguins |&gt; # hard-coded dataset!\n    filter(.data$species == .env$species) |&gt;\n    ggplot() +\n    aes(bill_length_mm, body_mass_g) +\n    geom_point() +\n    ggtitle(glue(\"Species: {species}\")) +\n    xlab(\"bill length (mm)\") +\n    ylab(\"body mass (g)\") +\n    theme_minimal_grid() +\n    theme(plot.title.position = \"plot\")\n}"
  },
  {
    "objectID": "slides/functional-programming.html#step-4-write-a-more-general-function-1",
    "href": "slides/functional-programming.html#step-4-write-a-more-general-function-1",
    "title": "Functions and functional programming",
    "section": "Step 4: Write a more general function",
    "text": "Step 4: Write a more general function\n\n\n\nmake_plot2 &lt;- function(data, species) {\n  data |&gt;\n    # filter no longer needed\n    ggplot() +\n    aes(bill_length_mm, body_mass_g) +\n    geom_point() +\n    ggtitle(glue(\"Species: {species}\")) +\n    xlab(\"bill length (mm)\") +\n    ylab(\"body mass (g)\") +\n    theme_minimal_grid() +\n    theme(plot.title.position = \"plot\")\n}"
  },
  {
    "objectID": "slides/functional-programming.html#step-4-write-a-more-general-function-2",
    "href": "slides/functional-programming.html#step-4-write-a-more-general-function-2",
    "title": "Functions and functional programming",
    "section": "Step 4: Write a more general function",
    "text": "Step 4: Write a more general function\n\n\n\nmake_plot2 &lt;- function(data, species) {\n  data |&gt;\n    # filter no longer needed\n    ggplot() +\n    aes(bill_length_mm, body_mass_g) +\n    geom_point() +\n    ggtitle(glue(\"Species: {species}\")) +\n    xlab(\"bill length (mm)\") +\n    ylab(\"body mass (g)\") +\n    theme_minimal_grid() +\n    theme(plot.title.position = \"plot\")\n}\n\ndata_adelie &lt;- penguins |&gt;\n  filter(species == \"Adelie\")\n\nmake_plot2(data_adelie, species = \"Adelie\")"
  },
  {
    "objectID": "slides/functional-programming.html#step-5-use-these-concepts-in-a-tidy-pipeline",
    "href": "slides/functional-programming.html#step-5-use-these-concepts-in-a-tidy-pipeline",
    "title": "Functions and functional programming",
    "section": "Step 5: Use these concepts in a tidy pipeline",
    "text": "Step 5: Use these concepts in a tidy pipeline\n\n\npenguins |&gt;\n  nest(data = -species)\n\n# A tibble: 3 × 2\n  species   data              \n  &lt;fct&gt;     &lt;list&gt;            \n1 Adelie    &lt;tibble [152 × 7]&gt;\n2 Gentoo    &lt;tibble [124 × 7]&gt;\n3 Chinstrap &lt;tibble [68 × 7]&gt;"
  },
  {
    "objectID": "slides/functional-programming.html#step-5-use-these-concepts-in-a-tidy-pipeline-1",
    "href": "slides/functional-programming.html#step-5-use-these-concepts-in-a-tidy-pipeline-1",
    "title": "Functions and functional programming",
    "section": "Step 5: Use these concepts in a tidy pipeline",
    "text": "Step 5: Use these concepts in a tidy pipeline\n\n\npenguins |&gt;\n  nest(data = -species) |&gt;\n  mutate(plots = map(species, make_plot))\n\n# A tibble: 3 × 3\n  species   data               plots \n  &lt;fct&gt;     &lt;list&gt;             &lt;list&gt;\n1 Adelie    &lt;tibble [152 × 7]&gt; &lt;gg&gt;  \n2 Gentoo    &lt;tibble [124 × 7]&gt; &lt;gg&gt;  \n3 Chinstrap &lt;tibble [68 × 7]&gt;  &lt;gg&gt;"
  },
  {
    "objectID": "slides/functional-programming.html#step-5-use-these-concepts-in-a-tidy-pipeline-2",
    "href": "slides/functional-programming.html#step-5-use-these-concepts-in-a-tidy-pipeline-2",
    "title": "Functions and functional programming",
    "section": "Step 5: Use these concepts in a tidy pipeline",
    "text": "Step 5: Use these concepts in a tidy pipeline\n\n\npenguins |&gt;\n  nest(data = -species) |&gt;\n  mutate(plots = map(species, make_plot)) |&gt;\n  pull(plots) |&gt;\n  patchwork::wrap_plots()"
  },
  {
    "objectID": "slides/functional-programming.html#step-5-use-these-concepts-in-a-tidy-pipeline-3",
    "href": "slides/functional-programming.html#step-5-use-these-concepts-in-a-tidy-pipeline-3",
    "title": "Functions and functional programming",
    "section": "Step 5: Use these concepts in a tidy pipeline",
    "text": "Step 5: Use these concepts in a tidy pipeline\n\n\npenguins |&gt;\n  nest(data = -species) |&gt;\n  mutate(plots = map2(data, species, make_plot2)) |&gt;\n  pull(plots) |&gt;\n  patchwork::wrap_plots()\n\n\n\n\n \n\n\n\n\n\n\nmap2() is like map() but for functions with 2 arguments\n\n\nNote: This pipeline automatically processes all species in the dataset, whatever they are called"
  },
  {
    "objectID": "slides/functional-programming.html#why-no-for-loops",
    "href": "slides/functional-programming.html#why-no-for-loops",
    "title": "Functions and functional programming",
    "section": "Why no for loops?",
    "text": "Why no for loops?\n\n\nThey often require us to think about data logistics (indexing)\n\n\n\n\nThey encourage writing long, monolithic blocks of code\n\n\n\n\nThey encourage iterative thinking over conceptual thinking\n\n\n\n\nThey cannot easily be parallelized or otherwise optimized\n\n\n\n\nMost modern programming languages are moving away from for loops (examples: Python, Rust, JavaScript)"
  },
  {
    "objectID": "slides/functional-programming.html#further-reading",
    "href": "slides/functional-programming.html#further-reading",
    "title": "Functions and functional programming",
    "section": "Further reading",
    "text": "Further reading\n\nR for Data Science: Chapter 19: Functions\nR for Data Science: Chapter 21.5: The map functions\npurrr reference documentation: Apply a function to each element of a list or atomic vector"
  },
  {
    "objectID": "slides/getting-things-in-order.html#remember-from-visualizing-amounts",
    "href": "slides/getting-things-in-order.html#remember-from-visualizing-amounts",
    "title": "Getting things into the right order",
    "section": "Remember from “Visualizing amounts”",
    "text": "Remember from “Visualizing amounts”\n\nWe can use fct_relevel() to manually order the bars in a bar plot\n\nggplot(penguins) +\n  aes(y = fct_relevel(species, \"Chinstrap\", \"Gentoo\", \"Adelie\")) +\n  geom_bar() + ylab(NULL)"
  },
  {
    "objectID": "slides/getting-things-in-order.html#somewhat-cleaner-mutate-first-then-plot",
    "href": "slides/getting-things-in-order.html#somewhat-cleaner-mutate-first-then-plot",
    "title": "Getting things into the right order",
    "section": "Somewhat cleaner: mutate first, then plot",
    "text": "Somewhat cleaner: mutate first, then plot\n\n\npenguins |&gt;\n  mutate(species = fct_relevel(species, \"Chinstrap\", \"Gentoo\", \"Adelie\")) |&gt;\n  ggplot(aes(y = species)) +\n  geom_bar()"
  },
  {
    "objectID": "slides/getting-things-in-order.html#we-order-things-in-ggplot-with-factors",
    "href": "slides/getting-things-in-order.html#we-order-things-in-ggplot-with-factors",
    "title": "Getting things into the right order",
    "section": "We order things in ggplot with factors",
    "text": "We order things in ggplot with factors\n\n\npenguins |&gt;\n  mutate(species = fct_relevel(species, \"Chinstrap\", \"Gentoo\", \"Adelie\")) |&gt;\n  slice(1:30) |&gt;    # get first 30 rows\n  pull(species)     # pull out just the `species` column\n\n [1] Adelie Adelie Adelie Adelie Adelie Adelie Adelie Adelie Adelie Adelie\n[11] Adelie Adelie Adelie Adelie Adelie Adelie Adelie Adelie Adelie Adelie\n[21] Adelie Adelie Adelie Adelie Adelie Adelie Adelie Adelie Adelie Adelie\nLevels: Chinstrap Gentoo Adelie\n\n\n\n\n\nThe column species is a factor\nA factor is a categorical variable with defined categories called levels\nFor factors, ggplot generally places visual elements in the order defined by the levels"
  },
  {
    "objectID": "slides/getting-things-in-order.html#we-order-things-in-ggplot-with-factors-1",
    "href": "slides/getting-things-in-order.html#we-order-things-in-ggplot-with-factors-1",
    "title": "Getting things into the right order",
    "section": "We order things in ggplot with factors",
    "text": "We order things in ggplot with factors\n\n\npenguins |&gt;\n  mutate(species = fct_relevel(species, \"Chinstrap\", \"Gentoo\", \"Adelie\")) |&gt;\n  slice(1:30) |&gt;    # get first 30 rows\n  pull(species)     # pull out just the `species` column\n\n [1] Adelie Adelie Adelie Adelie Adelie Adelie Adelie Adelie Adelie Adelie\n[11] Adelie Adelie Adelie Adelie Adelie Adelie Adelie Adelie Adelie Adelie\n[21] Adelie Adelie Adelie Adelie Adelie Adelie Adelie Adelie Adelie Adelie\nLevels: Chinstrap Gentoo Adelie\n\n\n\n\nThe order of factor levels is independent of the order of values in the table:\n\npenguins |&gt;\n  mutate(species = fct_relevel(species, \"Gentoo\", \"Adelie\", \"Chinstrap\")) |&gt;\n  slice(1:30) |&gt; pull(species)  \n\n [1] Adelie Adelie Adelie Adelie Adelie Adelie Adelie Adelie Adelie Adelie\n[11] Adelie Adelie Adelie Adelie Adelie Adelie Adelie Adelie Adelie Adelie\n[21] Adelie Adelie Adelie Adelie Adelie Adelie Adelie Adelie Adelie Adelie\nLevels: Gentoo Adelie Chinstrap"
  },
  {
    "objectID": "slides/getting-things-in-order.html#manual-ordering-of-factor-levels-fct_relevel",
    "href": "slides/getting-things-in-order.html#manual-ordering-of-factor-levels-fct_relevel",
    "title": "Getting things into the right order",
    "section": "Manual ordering of factor levels: fct_relevel()",
    "text": "Manual ordering of factor levels: fct_relevel()\n\n\npenguins |&gt;\n  mutate(species = fct_relevel(species)) |&gt;\n  slice(1:30) |&gt; pull(species)\n\n [1] Adelie Adelie Adelie Adelie Adelie Adelie Adelie Adelie Adelie Adelie\n[11] Adelie Adelie Adelie Adelie Adelie Adelie Adelie Adelie Adelie Adelie\n[21] Adelie Adelie Adelie Adelie Adelie Adelie Adelie Adelie Adelie Adelie\nLevels: Adelie Chinstrap Gentoo\n\n\nDefault: alphabetic order"
  },
  {
    "objectID": "slides/getting-things-in-order.html#manual-ordering-of-factor-levels-fct_relevel-1",
    "href": "slides/getting-things-in-order.html#manual-ordering-of-factor-levels-fct_relevel-1",
    "title": "Getting things into the right order",
    "section": "Manual ordering of factor levels: fct_relevel()",
    "text": "Manual ordering of factor levels: fct_relevel()\n\n\npenguins |&gt;\n  mutate(species = fct_relevel(species, \"Gentoo\")) |&gt;\n  slice(1:30) |&gt; pull(species)\n\n [1] Adelie Adelie Adelie Adelie Adelie Adelie Adelie Adelie Adelie Adelie\n[11] Adelie Adelie Adelie Adelie Adelie Adelie Adelie Adelie Adelie Adelie\n[21] Adelie Adelie Adelie Adelie Adelie Adelie Adelie Adelie Adelie Adelie\nLevels: Gentoo Adelie Chinstrap\n\n\nMove \"Gentoo\" in front, rest alphabetic"
  },
  {
    "objectID": "slides/getting-things-in-order.html#manual-ordering-of-factor-levels-fct_relevel-2",
    "href": "slides/getting-things-in-order.html#manual-ordering-of-factor-levels-fct_relevel-2",
    "title": "Getting things into the right order",
    "section": "Manual ordering of factor levels: fct_relevel()",
    "text": "Manual ordering of factor levels: fct_relevel()\n\n\npenguins |&gt;\n  mutate(species = fct_relevel(species, \"Chinstrap\", \"Gentoo\")) |&gt;\n  slice(1:30) |&gt; pull(species)\n\n [1] Adelie Adelie Adelie Adelie Adelie Adelie Adelie Adelie Adelie Adelie\n[11] Adelie Adelie Adelie Adelie Adelie Adelie Adelie Adelie Adelie Adelie\n[21] Adelie Adelie Adelie Adelie Adelie Adelie Adelie Adelie Adelie Adelie\nLevels: Chinstrap Gentoo Adelie\n\n\nMove \"Chinstrap\" in front, then \"Gentoo\", rest alphabetic"
  },
  {
    "objectID": "slides/getting-things-in-order.html#manual-ordering-of-factor-levels-fct_relevel-3",
    "href": "slides/getting-things-in-order.html#manual-ordering-of-factor-levels-fct_relevel-3",
    "title": "Getting things into the right order",
    "section": "Manual ordering of factor levels: fct_relevel()",
    "text": "Manual ordering of factor levels: fct_relevel()\n\n\npenguins |&gt;\n  mutate(species = fct_relevel(species, \"Chinstrap\", \"Adelie\", \"Gentoo\")) |&gt;\n  slice(1:30) |&gt; pull(species)\n\n [1] Adelie Adelie Adelie Adelie Adelie Adelie Adelie Adelie Adelie Adelie\n[11] Adelie Adelie Adelie Adelie Adelie Adelie Adelie Adelie Adelie Adelie\n[21] Adelie Adelie Adelie Adelie Adelie Adelie Adelie Adelie Adelie Adelie\nLevels: Chinstrap Adelie Gentoo\n\n\nUse order \"Chinstrap\", \"Adelie\", \"Gentoo\""
  },
  {
    "objectID": "slides/getting-things-in-order.html#in-ggplot-the-order-of-the-y-axis-is-from-bottom-to-top",
    "href": "slides/getting-things-in-order.html#in-ggplot-the-order-of-the-y-axis-is-from-bottom-to-top",
    "title": "Getting things into the right order",
    "section": "In ggplot, the order of the y axis is from bottom to top",
    "text": "In ggplot, the order of the y axis is from bottom to top\n\n\npenguins |&gt;\n  mutate(species = fct_relevel(species, \"Chinstrap\", \"Gentoo\", \"Adelie\")) |&gt;\n  ggplot(aes(y = species)) +\n  geom_bar()"
  },
  {
    "objectID": "slides/getting-things-in-order.html#reorder-based-on-frequency-fct_infreq",
    "href": "slides/getting-things-in-order.html#reorder-based-on-frequency-fct_infreq",
    "title": "Getting things into the right order",
    "section": "Reorder based on frequency: fct_infreq()",
    "text": "Reorder based on frequency: fct_infreq()\n\n\npenguins |&gt;\n  mutate(species = fct_infreq(species)) |&gt;\n  slice(1:30) |&gt; pull(species)\n\n [1] Adelie Adelie Adelie Adelie Adelie Adelie Adelie Adelie Adelie Adelie\n[11] Adelie Adelie Adelie Adelie Adelie Adelie Adelie Adelie Adelie Adelie\n[21] Adelie Adelie Adelie Adelie Adelie Adelie Adelie Adelie Adelie Adelie\nLevels: Adelie Gentoo Chinstrap\n\n\n\n\n\nUse the order defined by the number of penguins of different species\nThe order is descending, from most frequent to least frequent"
  },
  {
    "objectID": "slides/getting-things-in-order.html#reorder-based-on-frequency-fct_infreq-1",
    "href": "slides/getting-things-in-order.html#reorder-based-on-frequency-fct_infreq-1",
    "title": "Getting things into the right order",
    "section": "Reorder based on frequency: fct_infreq()",
    "text": "Reorder based on frequency: fct_infreq()\n\n\npenguins |&gt;\n  mutate(species = fct_infreq(species)) |&gt;\n  ggplot(aes(y = species)) + \n  geom_bar()"
  },
  {
    "objectID": "slides/getting-things-in-order.html#reverse-order-fct_rev",
    "href": "slides/getting-things-in-order.html#reverse-order-fct_rev",
    "title": "Getting things into the right order",
    "section": "Reverse order: fct_rev()",
    "text": "Reverse order: fct_rev()\n\n\npenguins |&gt;\n  mutate(species = fct_rev(fct_infreq(species))) |&gt;\n  ggplot(aes(y = species)) + \n  geom_bar()"
  },
  {
    "objectID": "slides/getting-things-in-order.html#reorder-based-on-numeric-values-fct_reorder",
    "href": "slides/getting-things-in-order.html#reorder-based-on-numeric-values-fct_reorder",
    "title": "Getting things into the right order",
    "section": "Reorder based on numeric values: fct_reorder()",
    "text": "Reorder based on numeric values: fct_reorder()\n\n\npenguins |&gt;\n  count(species)\n\n# A tibble: 3 × 2\n  species       n\n  &lt;fct&gt;     &lt;int&gt;\n1 Adelie      152\n2 Chinstrap    68\n3 Gentoo      124\n\n\n\n\n\npenguins |&gt;\n  count(species) |&gt;\n  mutate(species = fct_reorder(species, n)) |&gt;\n  pull(species)\n\n[1] Adelie    Chinstrap Gentoo   \nLevels: Chinstrap Gentoo Adelie\n\n\n\n\nThe order is ascending, from smallest to largest value"
  },
  {
    "objectID": "slides/getting-things-in-order.html#reorder-based-on-numeric-values-fct_reorder-1",
    "href": "slides/getting-things-in-order.html#reorder-based-on-numeric-values-fct_reorder-1",
    "title": "Getting things into the right order",
    "section": "Reorder based on numeric values: fct_reorder()",
    "text": "Reorder based on numeric values: fct_reorder()\n\n\npenguins |&gt;\n  count(species) |&gt;\n  mutate(species = fct_reorder(species, n)) |&gt;\n  ggplot(aes(n, species)) + geom_col()"
  },
  {
    "objectID": "slides/getting-things-in-order.html#compare-to-see-the-difference",
    "href": "slides/getting-things-in-order.html#compare-to-see-the-difference",
    "title": "Getting things into the right order",
    "section": "Compare to see the difference",
    "text": "Compare to see the difference\n\n\n\npenguins |&gt;\n  count(species) |&gt; # summarize data\n  mutate(species = fct_reorder(species, n))\n\n# A tibble: 3 × 2\n  species       n\n  &lt;fct&gt;     &lt;int&gt;\n1 Adelie      152\n2 Chinstrap    68\n3 Gentoo      124\n\n\n\n\npenguins |&gt;\n  # modify the original dataset, no summary\n  mutate(species = fct_infreq(species))\n\n# A tibble: 344 × 8\n   species island    bill_length_mm bill_depth_mm flipper_length_mm body_mass_g\n   &lt;fct&gt;   &lt;fct&gt;              &lt;dbl&gt;         &lt;dbl&gt;             &lt;int&gt;       &lt;int&gt;\n 1 Adelie  Torgersen           39.1          18.7               181        3750\n 2 Adelie  Torgersen           39.5          17.4               186        3800\n 3 Adelie  Torgersen           40.3          18                 195        3250\n 4 Adelie  Torgersen           NA            NA                  NA          NA\n 5 Adelie  Torgersen           36.7          19.3               193        3450\n 6 Adelie  Torgersen           39.3          20.6               190        3650\n 7 Adelie  Torgersen           38.9          17.8               181        3625\n 8 Adelie  Torgersen           39.2          19.6               195        4675\n 9 Adelie  Torgersen           34.1          18.1               193        3475\n10 Adelie  Torgersen           42            20.2               190        4250\n# ℹ 334 more rows\n# ℹ 2 more variables: sex &lt;fct&gt;, year &lt;int&gt;"
  },
  {
    "objectID": "slides/getting-things-in-order.html#compare-to-see-the-difference-1",
    "href": "slides/getting-things-in-order.html#compare-to-see-the-difference-1",
    "title": "Getting things into the right order",
    "section": "Compare to see the difference",
    "text": "Compare to see the difference\n\n\n\npenguins |&gt;\n  count(species) |&gt; # summarize data\n  mutate(species = fct_reorder(species, n)) |&gt;\n  ggplot(aes(n, species)) + geom_col()\n\n\n\n\n \n\n\n\n\n\n\npenguins |&gt;\n  # modify the original dataset, no summary\n  mutate(species = fct_infreq(species)) |&gt;\n  ggplot(aes(y = species)) + geom_bar()"
  },
  {
    "objectID": "slides/getting-things-in-order.html#compare-to-see-the-difference-2",
    "href": "slides/getting-things-in-order.html#compare-to-see-the-difference-2",
    "title": "Getting things into the right order",
    "section": "Compare to see the difference",
    "text": "Compare to see the difference\n\n\n\npenguins |&gt;\n  count(species) |&gt; # summarize data\n  mutate(species = fct_reorder(species, n)) |&gt;\n  ggplot(aes(n, species)) + geom_col()\n\n\n\n\n \n\n\n\n\n\n\npenguins |&gt;\n  # modify the original dataset, no summary\n  mutate(species = fct_infreq(species)) |&gt;\n  ggplot(aes(y = fct_rev(species))) + geom_bar()"
  },
  {
    "objectID": "slides/getting-things-in-order.html#the-gapminder-dataset-life-expectancy-data",
    "href": "slides/getting-things-in-order.html#the-gapminder-dataset-life-expectancy-data",
    "title": "Getting things into the right order",
    "section": "The gapminder dataset: Life expectancy data",
    "text": "The gapminder dataset: Life expectancy data\n\n\nlibrary(gapminder)\n\ngapminder\n\n# A tibble: 1,704 × 6\n   country     continent  year lifeExp      pop gdpPercap\n   &lt;fct&gt;       &lt;fct&gt;     &lt;int&gt;   &lt;dbl&gt;    &lt;int&gt;     &lt;dbl&gt;\n 1 Afghanistan Asia       1952    28.8  8425333      779.\n 2 Afghanistan Asia       1957    30.3  9240934      821.\n 3 Afghanistan Asia       1962    32.0 10267083      853.\n 4 Afghanistan Asia       1967    34.0 11537966      836.\n 5 Afghanistan Asia       1972    36.1 13079460      740.\n 6 Afghanistan Asia       1977    38.4 14880372      786.\n 7 Afghanistan Asia       1982    39.9 12881816      978.\n 8 Afghanistan Asia       1987    40.8 13867957      852.\n 9 Afghanistan Asia       1992    41.7 16317921      649.\n10 Afghanistan Asia       1997    41.8 22227415      635.\n# ℹ 1,694 more rows"
  },
  {
    "objectID": "slides/getting-things-in-order.html#life-expectancy-in-the-americas-in-2007",
    "href": "slides/getting-things-in-order.html#life-expectancy-in-the-americas-in-2007",
    "title": "Getting things into the right order",
    "section": "Life expectancy in the Americas in 2007",
    "text": "Life expectancy in the Americas in 2007\n\n\n\ngapminder |&gt;\n  filter(\n    year == 2007,\n    continent == \"Americas\"\n  ) |&gt;\n  ggplot(aes(lifeExp, country)) + \n  geom_point()\n\n\n\n\n\n \n\n\n\n\n\n\nReminder: Default order is alphabetic, from bottom to top"
  },
  {
    "objectID": "slides/getting-things-in-order.html#life-expectancy-ordered-from-highest-to-lowest",
    "href": "slides/getting-things-in-order.html#life-expectancy-ordered-from-highest-to-lowest",
    "title": "Getting things into the right order",
    "section": "Life expectancy, ordered from highest to lowest",
    "text": "Life expectancy, ordered from highest to lowest\n\n\n\ngapminder |&gt;\n  filter(\n    year == 2007,\n    continent == \"Americas\"\n  ) |&gt;\n  mutate(\n    country = fct_reorder(country, lifeExp)\n  ) |&gt;\n  ggplot(aes(lifeExp, country)) + \n  geom_point()\n\n\n\n\n\n \n\n\n\n\n\n\nOrder is ascending from bottom to top"
  },
  {
    "objectID": "slides/getting-things-in-order.html#we-can-also-order-facets",
    "href": "slides/getting-things-in-order.html#we-can-also-order-facets",
    "title": "Getting things into the right order",
    "section": "We can also order facets",
    "text": "We can also order facets\n\n\ngapminder |&gt;\n  filter(country %in% c(\"Norway\", \"Portugal\", \"Spain\", \"Austria\")) |&gt;\n  ggplot(aes(year, lifeExp)) + geom_line() +\n  facet_wrap(vars(country), nrow = 1)\n\n\n\n\n \n\n\n\n\n\n\n\nDefault ordering is alphabetic; there’s no good reason for this ordering\nLet’s apply fct_reorder() and see what happens"
  },
  {
    "objectID": "slides/getting-things-in-order.html#we-can-also-order-facets-1",
    "href": "slides/getting-things-in-order.html#we-can-also-order-facets-1",
    "title": "Getting things into the right order",
    "section": "We can also order facets",
    "text": "We can also order facets\n\n\ngapminder |&gt;\n  filter(country %in% c(\"Norway\", \"Portugal\", \"Spain\", \"Austria\")) |&gt;\n  mutate(country = fct_reorder(country, lifeExp)) |&gt; # default: order by median\n  ggplot(aes(year, lifeExp)) + geom_line() +\n  facet_wrap(vars(country), nrow = 1)\n\n\n\n\n \n\n\n\n\n\n\n\nWhen the levels of a factor occur more than once, fct_reorder() applies a summary function\nThe default summary function is median()"
  },
  {
    "objectID": "slides/getting-things-in-order.html#we-can-also-order-facets-2",
    "href": "slides/getting-things-in-order.html#we-can-also-order-facets-2",
    "title": "Getting things into the right order",
    "section": "We can also order facets",
    "text": "We can also order facets\n\n\ngapminder |&gt;\n  filter(country %in% c(\"Norway\", \"Portugal\", \"Spain\", \"Austria\")) |&gt;\n  mutate(country = fct_reorder(country, lifeExp, median)) |&gt; # order by median\n  ggplot(aes(year, lifeExp)) + geom_line() +\n  facet_wrap(vars(country), nrow = 1)\n\n\n\n\n \n\n\n\n\n\n\n\nWhen the levels of a factor occur more than once, fct_reorder() applies a summary function\nThe default summary function is median()"
  },
  {
    "objectID": "slides/getting-things-in-order.html#alternative-orderings-by-smallest-value-per-facet",
    "href": "slides/getting-things-in-order.html#alternative-orderings-by-smallest-value-per-facet",
    "title": "Getting things into the right order",
    "section": "Alternative orderings: By smallest value per facet",
    "text": "Alternative orderings: By smallest value per facet\n\n\ngapminder |&gt;\n  filter(country %in% c(\"Norway\", \"Portugal\", \"Spain\", \"Austria\")) |&gt;\n  mutate(country = fct_reorder(country, lifeExp, min)) |&gt; # order by minimum\n  ggplot(aes(year, lifeExp)) + geom_line() +\n  facet_wrap(vars(country), nrow = 1)"
  },
  {
    "objectID": "slides/getting-things-in-order.html#alternative-orderings-by-largest-value-per-facet",
    "href": "slides/getting-things-in-order.html#alternative-orderings-by-largest-value-per-facet",
    "title": "Getting things into the right order",
    "section": "Alternative orderings: By largest value per facet",
    "text": "Alternative orderings: By largest value per facet\n\n\ngapminder |&gt;\n  filter(country %in% c(\"Norway\", \"Portugal\", \"Spain\", \"Austria\")) |&gt;\n  mutate(country = fct_reorder(country, lifeExp, max)) |&gt; # order by maximum\n  ggplot(aes(year, lifeExp)) + geom_line() +\n  facet_wrap(vars(country), nrow = 1)"
  },
  {
    "objectID": "slides/getting-things-in-order.html#alternative-orderings-by-smallest-difference",
    "href": "slides/getting-things-in-order.html#alternative-orderings-by-smallest-difference",
    "title": "Getting things into the right order",
    "section": "Alternative orderings: By smallest difference",
    "text": "Alternative orderings: By smallest difference\n\n\ngapminder |&gt;\n  filter(country %in% c(\"Norway\", \"Portugal\", \"Spain\", \"Austria\")) |&gt;\n  mutate(country = fct_reorder(country, lifeExp, \\(x) { max(x) - min(x) })) |&gt; \n  ggplot(aes(year, lifeExp)) + geom_line() +\n  facet_wrap(vars(country), nrow = 1)"
  },
  {
    "objectID": "slides/getting-things-in-order.html#alternative-orderings-by-largest-difference",
    "href": "slides/getting-things-in-order.html#alternative-orderings-by-largest-difference",
    "title": "Getting things into the right order",
    "section": "Alternative orderings: By largest difference",
    "text": "Alternative orderings: By largest difference\n\n\ngapminder |&gt;\n  filter(country %in% c(\"Norway\", \"Portugal\", \"Spain\", \"Austria\")) |&gt;\n  mutate(country = fct_reorder(country, lifeExp, \\(x) { min(x) - max(x) })) |&gt; \n  ggplot(aes(year, lifeExp)) + geom_line() +\n  facet_wrap(vars(country), nrow = 1)"
  },
  {
    "objectID": "slides/getting-things-in-order.html#final-example-lumping-factor-levels-together",
    "href": "slides/getting-things-in-order.html#final-example-lumping-factor-levels-together",
    "title": "Getting things into the right order",
    "section": "Final example: Lumping factor levels together",
    "text": "Final example: Lumping factor levels together\n\nDataset: Flights out of New York City in 2013\n\n\nlibrary(nycflights13)\n\nflight_data &lt;- flights |&gt; # take data on individual flights\n  left_join(airlines) |&gt;  # add in full-length airline names\n  select(name, carrier, flight, year, month, day, origin, dest) # pick columns of interest\n\nflight_data\n\n# A tibble: 336,776 × 8\n   name                     carrier flight  year month   day origin dest \n   &lt;chr&gt;                    &lt;chr&gt;    &lt;int&gt; &lt;int&gt; &lt;int&gt; &lt;int&gt; &lt;chr&gt;  &lt;chr&gt;\n 1 United Air Lines Inc.    UA        1545  2013     1     1 EWR    IAH  \n 2 United Air Lines Inc.    UA        1714  2013     1     1 LGA    IAH  \n 3 American Airlines Inc.   AA        1141  2013     1     1 JFK    MIA  \n 4 JetBlue Airways          B6         725  2013     1     1 JFK    BQN  \n 5 Delta Air Lines Inc.     DL         461  2013     1     1 LGA    ATL  \n 6 United Air Lines Inc.    UA        1696  2013     1     1 EWR    ORD  \n 7 JetBlue Airways          B6         507  2013     1     1 EWR    FLL  \n 8 ExpressJet Airlines Inc. EV        5708  2013     1     1 LGA    IAD  \n 9 JetBlue Airways          B6          79  2013     1     1 JFK    MCO  \n10 American Airlines Inc.   AA         301  2013     1     1 LGA    ORD  \n# ℹ 336,766 more rows"
  },
  {
    "objectID": "slides/getting-things-in-order.html#flights-out-of-new-york-city-in-2013",
    "href": "slides/getting-things-in-order.html#flights-out-of-new-york-city-in-2013",
    "title": "Getting things into the right order",
    "section": "Flights out of New York City in 2013",
    "text": "Flights out of New York City in 2013\n\n\n\nflight_data |&gt;\n  ggplot(aes(y = name)) + \n  geom_bar()\n\n\n\n\n\n \n\n\n\n\n\n\nAs (almost) always, the default alphabetic ordering is terrible"
  },
  {
    "objectID": "slides/getting-things-in-order.html#flights-out-of-new-york-city-in-2013-1",
    "href": "slides/getting-things-in-order.html#flights-out-of-new-york-city-in-2013-1",
    "title": "Getting things into the right order",
    "section": "Flights out of New York City in 2013",
    "text": "Flights out of New York City in 2013\n\n\n\nflight_data |&gt;\n  mutate(\n    name = fct_infreq(name)\n  ) |&gt;\n  ggplot(aes(y = fct_rev(name))) + \n  geom_bar()\n\n\n\n\n\n \n\n\n\n\n\n\nOrdering by frequency is better, but do we need to show all airlines?"
  },
  {
    "objectID": "slides/getting-things-in-order.html#flights-out-of-new-york-city-in-2013-with-lumping",
    "href": "slides/getting-things-in-order.html#flights-out-of-new-york-city-in-2013-with-lumping",
    "title": "Getting things into the right order",
    "section": "Flights out of New York City in 2013, with lumping",
    "text": "Flights out of New York City in 2013, with lumping\n\n\n\nflight_data |&gt;\n  mutate(\n    # keep only the 7 most common airlines\n    name = fct_lump_n(name, 7)\n  ) |&gt;\n  ggplot(aes(y = fct_rev(name))) + \n  geom_bar()\n\n\n\n\n\n \n\n\n\n\n\n\nNow the ordering is again alphabetic…"
  },
  {
    "objectID": "slides/getting-things-in-order.html#flights-out-of-new-york-city-in-2013-with-lumping-1",
    "href": "slides/getting-things-in-order.html#flights-out-of-new-york-city-in-2013-with-lumping-1",
    "title": "Getting things into the right order",
    "section": "Flights out of New York City in 2013, with lumping",
    "text": "Flights out of New York City in 2013, with lumping\n\n\n\nflight_data |&gt;\n  mutate(\n    # order after lumping\n    name = fct_infreq(fct_lump_n(name, 7))\n  ) |&gt;\n  ggplot(aes(y = fct_rev(name))) + \n  geom_bar()"
  },
  {
    "objectID": "slides/getting-things-in-order.html#flights-out-of-new-york-city-in-2013-with-lumping-2",
    "href": "slides/getting-things-in-order.html#flights-out-of-new-york-city-in-2013-with-lumping-2",
    "title": "Getting things into the right order",
    "section": "Flights out of New York City in 2013, with lumping",
    "text": "Flights out of New York City in 2013, with lumping\n\n\n\nflight_data |&gt;\n  mutate(\n    # order before lumping\n    name = fct_lump_n(fct_infreq(name), 7)\n  ) |&gt;\n  ggplot(aes(y = fct_rev(name))) + \n  geom_bar()\n\n\n\n\n\n \n\n\n\n\n\n\nIn most cases, you will want to order before lumping\n\n\nCan we visually separate the “Other” category?"
  },
  {
    "objectID": "slides/getting-things-in-order.html#flights-out-of-new-york-city-in-2013-with-lumping-3",
    "href": "slides/getting-things-in-order.html#flights-out-of-new-york-city-in-2013-with-lumping-3",
    "title": "Getting things into the right order",
    "section": "Flights out of New York City in 2013, with lumping",
    "text": "Flights out of New York City in 2013, with lumping\n\n\n\nflight_data |&gt;\n  mutate(\n    name = fct_lump_n(fct_infreq(name), 7),\n    # Use `fct_other()` to manually lump all\n    # levels not called \"Other\" into \"Named\"\n    highlight = fct_other(\n      name,\n      keep = \"Other\", other_level = \"Named\"\n    )\n  ) |&gt;\n  ggplot() +\n  aes(\n    y = fct_rev(name),\n    fill = highlight\n  ) + \n  geom_bar()\n\n\n\n\n\n \n\n\n\n\n\n\nOne annoying issue: The legend is in the wrong order"
  },
  {
    "objectID": "slides/getting-things-in-order.html#flights-out-of-new-york-city-in-2013-with-lumping-4",
    "href": "slides/getting-things-in-order.html#flights-out-of-new-york-city-in-2013-with-lumping-4",
    "title": "Getting things into the right order",
    "section": "Flights out of New York City in 2013, with lumping",
    "text": "Flights out of New York City in 2013, with lumping\n\n\n\nflight_data |&gt;\n  mutate(\n    name = fct_lump_n(fct_infreq(name), 7),\n    # Use `fct_other()` to manually lump all\n    # levels not called \"Other\" into \"Named\"\n    highlight = fct_other(\n      name,\n      keep = \"Other\", other_level = \"Named\"\n    )\n  ) |&gt;\n  ggplot() +\n  aes(\n    y = fct_rev(name),\n    # reverse fill aesthetic\n    fill = fct_rev(highlight)\n  ) + \n  geom_bar()"
  },
  {
    "objectID": "slides/getting-things-in-order.html#flights-out-of-new-york-city-in-2013-final-tweaks",
    "href": "slides/getting-things-in-order.html#flights-out-of-new-york-city-in-2013-final-tweaks",
    "title": "Getting things into the right order",
    "section": "Flights out of New York City in 2013, final tweaks",
    "text": "Flights out of New York City in 2013, final tweaks\n\n\n\nflight_data |&gt;\n  mutate(\n    name = fct_lump_n(fct_infreq(name), 7),\n    highlight = fct_other(\n      name, keep = \"Other\", other_level = \"Named\"\n    )\n  ) |&gt;\n  ggplot() +\n  aes(y = fct_rev(name), fill = highlight) + \n  geom_bar() +\n  scale_x_continuous(\n    name = \"Number of flights\",\n    expand = expansion(mult = c(0, 0.07))\n  ) +\n  scale_y_discrete(name = NULL) +\n  scale_fill_manual(\n    values = c(\n      Named = \"gray50\", Other = \"#98545F\"\n    ),\n    guide = \"none\"\n  ) +\n  theme_minimal_vgrid()"
  },
  {
    "objectID": "slides/getting-things-in-order.html#summary-of-key-factor-manipulation-functions",
    "href": "slides/getting-things-in-order.html#summary-of-key-factor-manipulation-functions",
    "title": "Getting things into the right order",
    "section": "Summary of key factor manipulation functions",
    "text": "Summary of key factor manipulation functions\n\n\n\n\nFunction\nUse case\nDocumentation\n\n\n\n\nfct_relevel()\nChange order of factor levels manually\nclick here\n\n\nfct_infreq()\nPut levels in descending order of how frequently each level occurs in the data\nclick here\n\n\nfct_rev()\nReverse the order of factor levels\nclick here\n\n\nfct_reorder()\nPut levels in ascending order determined by a numeric variable or summary function\nclick here\n\n\nfct_lump_n()\nRetain the n most frequent levels and lump all others into \"Other\"\nclick here\n\n\nfct_other()\nManually group some factor levels into \"Other\"\nclick here\n\n\n\n\n\nFor more options, check out the reference documentation of the forcats package"
  },
  {
    "objectID": "slides/getting-things-in-order.html#further-reading",
    "href": "slides/getting-things-in-order.html#further-reading",
    "title": "Getting things into the right order",
    "section": "Further reading",
    "text": "Further reading\n\nFundamentals of Data Visualization: Chapter 6: Visualizing amounts\nforcats documentation: Introduction to forcats\nforcats reference documentation: Change order of levels"
  },
  {
    "objectID": "slides/interactive-plots.html#interactivity-can-make-a-plot-more-informative",
    "href": "slides/interactive-plots.html#interactivity-can-make-a-plot-more-informative",
    "title": "Interactive plots",
    "section": "Interactivity can make a plot more informative",
    "text": "Interactivity can make a plot more informative\n\n\n\n\n\n\n\nHover over the data points"
  },
  {
    "objectID": "slides/interactive-plots.html#you-probably-want-to-highlight-the-selected-points",
    "href": "slides/interactive-plots.html#you-probably-want-to-highlight-the-selected-points",
    "title": "Interactive plots",
    "section": "You probably want to highlight the selected points …",
    "text": "You probably want to highlight the selected points …\n\n\n\n\n\n\n\nHover over the data points"
  },
  {
    "objectID": "slides/interactive-plots.html#andor-de-emphasize-all-others",
    "href": "slides/interactive-plots.html#andor-de-emphasize-all-others",
    "title": "Interactive plots",
    "section": "… and/or de-emphasize all others",
    "text": "… and/or de-emphasize all others\n\n\n\n\n\n\n\nHover over the data points"
  },
  {
    "objectID": "slides/interactive-plots.html#you-can-combine-interactivity-with-explicit-labels",
    "href": "slides/interactive-plots.html#you-can-combine-interactivity-with-explicit-labels",
    "title": "Interactive plots",
    "section": "You can combine interactivity with explicit labels",
    "text": "You can combine interactivity with explicit labels\n\n\n\n\n\n\n\nHover over the data points"
  },
  {
    "objectID": "slides/interactive-plots.html#also-consider-linking-to-further-info",
    "href": "slides/interactive-plots.html#also-consider-linking-to-further-info",
    "title": "Interactive plots",
    "section": "Also consider linking to further info",
    "text": "Also consider linking to further info\n\n\n\n\n\n\n\nClick on one of the states"
  },
  {
    "objectID": "slides/interactive-plots.html#highlight-across-two-plots-for-added-context",
    "href": "slides/interactive-plots.html#highlight-across-two-plots-for-added-context",
    "title": "Interactive plots",
    "section": "Highlight across two plots for added context",
    "text": "Highlight across two plots for added context"
  },
  {
    "objectID": "slides/interactive-plots.html#we-can-make-plots-interactive-with-the-ggiraph-package",
    "href": "slides/interactive-plots.html#we-can-make-plots-interactive-with-the-ggiraph-package",
    "title": "Interactive plots",
    "section": "We can make plots interactive with the ggiraph package",
    "text": "We can make plots interactive with the ggiraph package\n\n\n\n#\n\niris_scatter &lt;- ggplot(iris) + \n  aes(\n    Sepal.Length, Sepal.Width,\n    color = Species\n  ) +\n  geom_point()\n\niris_scatter\n\n\n\n\n\n \n\n\n\n\n\n\nRegular ggplot2 plot:\nhovering does nothing"
  },
  {
    "objectID": "slides/interactive-plots.html#we-can-make-plots-interactive-with-the-ggiraph-package-1",
    "href": "slides/interactive-plots.html#we-can-make-plots-interactive-with-the-ggiraph-package-1",
    "title": "Interactive plots",
    "section": "We can make plots interactive with the ggiraph package",
    "text": "We can make plots interactive with the ggiraph package\n\n\n\nlibrary(ggiraph)\n\niris_scatter &lt;- ggplot(iris) + \n  aes(\n    Sepal.Length, Sepal.Width,\n    color = Species\n  ) +\n  geom_point_interactive(\n    aes(tooltip = Species)\n  )\n\ngirafe(\n  ggobj = iris_scatter,\n  width_svg = 6,\n  height_svg = 6*0.618\n)            \n\n\n\n\n\n\n\n\nggiraph version:\nhovering displays species names"
  },
  {
    "objectID": "slides/interactive-plots.html#styling-happens-via-cascading-style-sheets-css",
    "href": "slides/interactive-plots.html#styling-happens-via-cascading-style-sheets-css",
    "title": "Interactive plots",
    "section": "Styling happens via Cascading Style Sheets (CSS)",
    "text": "Styling happens via Cascading Style Sheets (CSS)\n\n\n\nlibrary(ggiraph)\n\niris_scatter &lt;- ggplot(iris) + \n  aes(\n    Sepal.Length, Sepal.Width,\n    color = Species\n  ) +\n  geom_point_interactive(\n    aes(tooltip = Species)\n  )\n\ngirafe(\n  ggobj = iris_scatter,\n  width_svg = 6,\n  height_svg = 6*0.618,\n  options = list(\n    opts_tooltip(\n      css = \"background: #F5F5F5;\n             color: #191970;\n             font-family: sans-serif;\"\n    )\n  )\n)"
  },
  {
    "objectID": "slides/interactive-plots.html#select-multiple-points-at-once-with-data_id-aesthetic",
    "href": "slides/interactive-plots.html#select-multiple-points-at-once-with-data_id-aesthetic",
    "title": "Interactive plots",
    "section": "Select multiple points at once with data_id aesthetic",
    "text": "Select multiple points at once with data_id aesthetic\n\n\n\nlibrary(ggiraph)\n\niris_scatter &lt;- ggplot(iris) + \n  aes(\n    Sepal.Length, Sepal.Width,\n    color = Species\n  ) +\n  geom_point_interactive(\n    aes(data_id = Species),\n    size = 2\n  )\n\ngirafe(\n  ggobj = iris_scatter,\n  width_svg = 6,\n  height_svg = 6*0.618\n)"
  },
  {
    "objectID": "slides/interactive-plots.html#select-multiple-points-at-once-with-data_id-aesthetic-1",
    "href": "slides/interactive-plots.html#select-multiple-points-at-once-with-data_id-aesthetic-1",
    "title": "Interactive plots",
    "section": "Select multiple points at once with data_id aesthetic",
    "text": "Select multiple points at once with data_id aesthetic\n\n\n\nlibrary(ggiraph)\n\niris_scatter &lt;- ggplot(iris) + \n  aes(\n    Sepal.Length, Sepal.Width,\n    color = Species\n  ) +\n  geom_point_interactive(\n    aes(data_id = Species),\n    size = 2\n  )\n\ngirafe(\n  ggobj = iris_scatter,\n  width_svg = 6,\n  height_svg = 6*0.618,\n  options = list(\n    opts_hover(css = \"fill: #202020;\"),\n    opts_hover_inv(css = \"opacity: 0.2;\")\n  )\n) \n\n\n\n\n\n\n\n\nAgain, styling via CSS"
  },
  {
    "objectID": "slides/interactive-plots.html#interactive-map-example",
    "href": "slides/interactive-plots.html#interactive-map-example",
    "title": "Interactive plots",
    "section": "Interactive map example",
    "text": "Interactive map example\n\n\n# load data\nUS_states &lt;- readRDS(url(\"https://wilkelab.org/DSC385/datasets/US_states.rds\"))\n\nUS_states\n\nSimple feature collection with 51 features and 3 fields\nGeometry type: MULTIPOLYGON\nDimension:     XY\nBounding box:  xmin: -3683715 ymin: -2839538 xmax: 2258154 ymax: 1558935\nCRS:           NA\nFirst 10 features:\n   GEOID                 name state_code                       geometry\n1     01              Alabama         AL MULTIPOLYGON (((1032679 -63...\n2     04              Arizona         AZ MULTIPOLYGON (((-1216674 -4...\n3     05             Arkansas         AR MULTIPOLYGON (((462619.4 -3...\n4     06           California         CA MULTIPOLYGON (((-2077630 -2...\n5     08             Colorado         CO MULTIPOLYGON (((-527710.6 3...\n6     09          Connecticut         CT MULTIPOLYGON (((1841099 622...\n7     10             Delaware         DE MULTIPOLYGON (((1762798 354...\n8     11 District of Columbia         DC MULTIPOLYGON (((1610777 321...\n9     12              Florida         FL MULTIPOLYGON (((1431218 -13...\n10    13              Georgia         GA MULTIPOLYGON (((1339965 -64..."
  },
  {
    "objectID": "slides/interactive-plots.html#interactive-map-example-1",
    "href": "slides/interactive-plots.html#interactive-map-example-1",
    "title": "Interactive plots",
    "section": "Interactive map example",
    "text": "Interactive map example\n\n\n\nUS_map &lt;- US_states |&gt;\n  ggplot() +\n  geom_sf_interactive(\n    aes(data_id = name, tooltip = name)\n  ) +\n  theme_void()\n\ngirafe(\n  ggobj = US_map,\n  width_svg = 6,\n  height_svg = 6*0.618\n)\n\n\n\n\n\n\n\n\nHover over the states"
  },
  {
    "objectID": "slides/interactive-plots.html#interactive-map-example-2",
    "href": "slides/interactive-plots.html#interactive-map-example-2",
    "title": "Interactive plots",
    "section": "Interactive map example",
    "text": "Interactive map example\n\n\n\nUS_map &lt;- US_states |&gt;\n  mutate( # JavaScript call to open website \n    onclick = glue::glue(\n'window.open(\n\"https://en.wikipedia.org/wiki/{name}\")')\n  ) |&gt;\n  ggplot() +\n  geom_sf_interactive(\n    aes(\n      data_id = name, tooltip = name,\n      onclick = onclick\n    )\n  ) +\n  theme_void()\n\ngirafe(\n  ggobj = US_map,\n  width_svg = 6,\n  height_svg = 6*0.618\n)\n\n\n\n\n\n\n\n\nClick to open a state’s wikipedia page"
  },
  {
    "objectID": "slides/interactive-plots.html#a-very-brief-intro-to-css-1",
    "href": "slides/interactive-plots.html#a-very-brief-intro-to-css-1",
    "title": "Interactive plots",
    "section": "A (very) brief intro to CSS",
    "text": "A (very) brief intro to CSS\n\nCSS is the language used to style web pages\n\n\nMany online tutorials, e.g.: https://www.w3schools.com/css/default.asp\n\n\nInteractive websites for practicing, e.g.: https://jsfiddle.net/"
  },
  {
    "objectID": "slides/interactive-plots.html#further-reading",
    "href": "slides/interactive-plots.html#further-reading",
    "title": "Interactive plots",
    "section": "Further reading",
    "text": "Further reading\n\nggiraph documentation: ggiraph-book\nggiraph documentation: Function reference\nMDN Web Docs: Learn to style HTML using CSS\nw3schools.com: CSS Tutorial"
  },
  {
    "objectID": "slides/know-your-data.html#any-data-analysis-should-start-with-basic-quality-control",
    "href": "slides/know-your-data.html#any-data-analysis-should-start-with-basic-quality-control",
    "title": "Getting to know your data",
    "section": "Any data analysis should start with basic quality control",
    "text": "Any data analysis should start with basic quality control\n\n\nAssess data relevance\n(Can the data answer your question in principle?)\n\n\n\n\nAssess data provenance\n(Where does the data come from? Is it reliable?)\n\n\n\n\nClean data if required\n(In practice, this is 70-80% of data analysis work)\n\n\n\n\nPerform descriptive analysis and sanity checks\n(Inspect summary statistics, distributions, scatter plots, etc.)"
  },
  {
    "objectID": "slides/know-your-data.html#components-of-data-quality",
    "href": "slides/know-your-data.html#components-of-data-quality",
    "title": "Getting to know your data",
    "section": "Components of data quality",
    "text": "Components of data quality\n\n\n•  Accuracy\n•  Precision\n•  Usability\n•  Completeness\n•  Consistency\n•  Accessibility\n•  Relevance"
  },
  {
    "objectID": "slides/know-your-data.html#components-of-data-quality-1",
    "href": "slides/know-your-data.html#components-of-data-quality-1",
    "title": "Getting to know your data",
    "section": "Components of data quality",
    "text": "Components of data quality\n\n\n•  Accuracy\n•  Precision\n•  Usability\n•  Completeness\n•  Consistency\n•  Accessibility\n•  Relevance\n\nDoes the data contain any systematic errors or biases?"
  },
  {
    "objectID": "slides/know-your-data.html#components-of-data-quality-2",
    "href": "slides/know-your-data.html#components-of-data-quality-2",
    "title": "Getting to know your data",
    "section": "Components of data quality",
    "text": "Components of data quality\n\n\n•  Accuracy\n•  Precision\n•  Usability\n•  Completeness\n•  Consistency\n•  Accessibility\n•  Relevance\n\nDoes the data contain any systematic errors or biases?\nHow affected are observations by random errors/noise?"
  },
  {
    "objectID": "slides/know-your-data.html#accuracy-means-low-bias-precision-means-low-noise",
    "href": "slides/know-your-data.html#accuracy-means-low-bias-precision-means-low-noise",
    "title": "Getting to know your data",
    "section": "Accuracy means low bias, precision means low noise",
    "text": "Accuracy means low bias, precision means low noise"
  },
  {
    "objectID": "slides/know-your-data.html#components-of-data-quality-3",
    "href": "slides/know-your-data.html#components-of-data-quality-3",
    "title": "Getting to know your data",
    "section": "Components of data quality",
    "text": "Components of data quality\n\n\n•  Accuracy\n•  Precision\n•  Usability\n•  Completeness\n•  Consistency\n•  Accessibility\n•  Relevance\n\nDoes the data contain any systematic errors or biases?\nHow affected are observations by random errors/noise?\nIs the data documented? Is it machine-readable?"
  },
  {
    "objectID": "slides/know-your-data.html#usability-requires-a-data-dictionary",
    "href": "slides/know-your-data.html#usability-requires-a-data-dictionary",
    "title": "Getting to know your data",
    "section": "Usability requires a data dictionary",
    "text": "Usability requires a data dictionary\n\nData Dictionary A “centralized repository of information about data such as meaning, relationships to other data, origin, usage, and format” (Wikipedia)\n\n\nExample: Palmer penguins reference page"
  },
  {
    "objectID": "slides/know-your-data.html#components-of-data-quality-4",
    "href": "slides/know-your-data.html#components-of-data-quality-4",
    "title": "Getting to know your data",
    "section": "Components of data quality",
    "text": "Components of data quality\n\n\n•  Accuracy\n•  Precision\n•  Usability\n•  Completeness\n•  Consistency\n•  Accessibility\n•  Relevance\n\nDoes the data contain any systematic errors or biases?\nHow affected are observations by random errors/noise?\nIs the data documented? Is it machine-readable?\nAre entire records missing? Are observations missing?"
  },
  {
    "objectID": "slides/know-your-data.html#components-of-data-quality-5",
    "href": "slides/know-your-data.html#components-of-data-quality-5",
    "title": "Getting to know your data",
    "section": "Components of data quality",
    "text": "Components of data quality\n\n\n•  Accuracy\n•  Precision\n•  Usability\n•  Completeness\n•  Consistency\n•  Accessibility\n•  Relevance\n\nDoes the data contain any systematic errors or biases?\nHow affected are observations by random errors/noise?\nIs the data documented? Is it machine-readable?\nAre entire records missing? Are observations missing?\nDoes data vary among sources or over time?"
  },
  {
    "objectID": "slides/know-your-data.html#components-of-data-quality-6",
    "href": "slides/know-your-data.html#components-of-data-quality-6",
    "title": "Getting to know your data",
    "section": "Components of data quality",
    "text": "Components of data quality\n\n\n•  Accuracy\n•  Precision\n•  Usability\n•  Completeness\n•  Consistency\n•  Accessibility\n•  Relevance\n\nDoes the data contain any systematic errors or biases?\nHow affected are observations by random errors/noise?\nIs the data documented? Is it machine-readable?\nAre entire records missing? Are observations missing?\nDoes data vary among sources or over time?\nDo you have access to the data? Can you obtain it?"
  },
  {
    "objectID": "slides/know-your-data.html#components-of-data-quality-7",
    "href": "slides/know-your-data.html#components-of-data-quality-7",
    "title": "Getting to know your data",
    "section": "Components of data quality",
    "text": "Components of data quality\n\n\n•  Accuracy\n•  Precision\n•  Usability\n•  Completeness\n•  Consistency\n•  Accessibility\n•  Relevance\n\nDoes the data contain any systematic errors or biases?\nHow affected are observations by random errors/noise?\nIs the data documented? Is it machine-readable?\nAre entire records missing? Are observations missing?\nDoes data vary among sources or over time?\nDo you have access to the data? Can you obtain it?\nCan you use the data to address your question?"
  },
  {
    "objectID": "slides/know-your-data.html#the-dataset-births-in-nc",
    "href": "slides/know-your-data.html#the-dataset-births-in-nc",
    "title": "Getting to know your data",
    "section": "The dataset: Births in NC",
    "text": "The dataset: Births in NC\n\n\nDetails and Source This dataset contains data on a sample of 1450 birth records from 2001 that statistician John Holcomb at Cleveland State University selected from the North Carolina State Center for Health and Environmental Statistics.\nThe dataset has 1450 observations on 15 variables.\n\n\n\n\n\n\n\n\nVariable\nDescription\n\n\n\n\nID\nPatient ID code\n\n\nPlural\n1=single birth, 2=twins, 3=triplets\n\n\nSex\nSex of the baby: 1=male 2=female\n\n\nMomAge\nMother’s age (in years)\n\n\nWeeks\nCompleted weeks of gestation\n\n\nMarital\nMarital status: 1=married or 2=not married\n\n\nRaceMom\nMother’s race: 1=white, 2=black, 3=American Indian, 4=Chinese, 5=Japanese, 6=Hawaiian, 7=Filipino, or 8=Other Asian or Pacific Islander\n\n\nHispMom\nHispanic origin of mother: C=Cuban, M=Mexican, N=not Hispanic, O=Other Hispanic, P=Puerto Rico, S=Central/South America\n\n\nGained\nWeight gained during pregnancy (in pounds)\n\n\nSmoke\nSmoker mom? 1=yes or 0=no\n\n\nBirthWeightOz\nBirth weight in ounces\n\n\nBirthWeightGm\nBirth weight in grams\n\n\nLow\nIndicator for low birth weight: 1=2500 grams or less\n\n\nPremie\nIndicator for premature birth: 1=36 weeks or sooner\n\n\nMomRace\nMother’s race: black, hispanic, other, or white"
  },
  {
    "objectID": "slides/know-your-data.html#start-with-a-cursory-inspection",
    "href": "slides/know-your-data.html#start-with-a-cursory-inspection",
    "title": "Getting to know your data",
    "section": "Start with a cursory inspection",
    "text": "Start with a cursory inspection\n\n\nNCbirths &lt;- read_csv(\"https://wilkelab.org/DSC385/datasets/NCbirths.csv\")\n\nNCbirths\n\n# A tibble: 1,450 × 15\n      ID Plural   Sex MomAge Weeks Marital RaceMom HispMom Gained Smoke BirthWeightOz BirthWeightGm   Low\n   &lt;dbl&gt;  &lt;dbl&gt; &lt;dbl&gt;  &lt;dbl&gt; &lt;dbl&gt;   &lt;dbl&gt;   &lt;dbl&gt; &lt;chr&gt;   &lt;chr&gt;  &lt;dbl&gt;         &lt;dbl&gt;         &lt;dbl&gt; &lt;dbl&gt;\n 1     1      1     1     32    40       1       1 N       38         0           111         3147.     0\n 2     2      1     2     32    37       1       1 N       34         0           116         3289.     0\n 3     3      1     1     27    39       1       1 N       12         0           138         3912.     0\n 4     4      1     1     27    39       1       1 N       15         0           136         3856.     0\n 5     5      1     1     25    39       1       1 N       32         0           121         3430.     0\n 6     6      1     1     28    43       1       1 N       32         0           117         3317.     0\n 7     7      1     2     25    39       1       1 N       75         0           143         4054.     0\n 8     8      1     2     15    42       2       1 N       25         0           113         3204.     0\n 9     9      1     2     21    39       1       1 N       28         0           120         3402      0\n10    10      1     2     27    40       2       1 N       37         0           124         3515.     0\n# ℹ 1,440 more rows\n# ℹ 2 more variables: Premie &lt;dbl&gt;, MomRace &lt;chr&gt;\n\n\n\n\nPay attention to the data types of each column\n\n\nWhat’s going on with the Gained column?"
  },
  {
    "objectID": "slides/know-your-data.html#missing-values-were-not-read-correctly",
    "href": "slides/know-your-data.html#missing-values-were-not-read-correctly",
    "title": "Getting to know your data",
    "section": "Missing values were not read correctly",
    "text": "Missing values were not read correctly\n\n\nNCbirths |&gt;\n  pull(Gained)\n\n   [1] \"38\"   \"34\"   \"12\"   \"15\"   \"32\"   \"32\"   \"75\"   \"25\"   \"28\"   \"37\"   \"45\"   \"52\"   \"26\"   \"31\"  \n  [15] \"40\"   \"51\"   \"45\"   \"25\"   \"0\"    \"20\"   \"20\"   \"38\"   \"15\"   \"3\"    \"9\"    \"37\"   \"30\"   \"40\"  \n  [29] \"37\"   \"56\"   \"48\"   \"4\"    \"43\"   \"40\"   \"25\"   \"53\"   \"15\"   \"19\"   \"26\"   \"32\"   \"25\"   \"50\"  \n  [43] \"34\"   \"2\"    \"23\"   \"16\"   \"48\"   \"80\"   \"19\"   \"16\"   \"50\"   \"55\"   \"25\"   \"33\"   \"10\"   \"30\"  \n  [57] \"30\"   \"#N/A\" \"55\"   \"38\"   \"33\"   \"49\"   \"14\"   \"18\"   \"40\"   \"30\"   \"17\"   \"45\"   \"15\"   \"31\"  \n  [71] \"50\"   \"25\"   \"12\"   \"38\"   \"47\"   \"20\"   \"40\"   \"34\"   \"5\"    \"25\"   \"18\"   \"27\"   \"46\"   \"31\"  \n  [85] \"48\"   \"15\"   \"51\"   \"12\"   \"33\"   \"17\"   \"25\"   \"31\"   \"24\"   \"16\"   \"18\"   \"40\"   \"16\"   \"57\"  \n  [99] \"18\"   \"29\"   \"45\"   \"18\"   \"11\"   \"20\"   \"50\"   \"26\"   \"20\"   \"35\"   \"12\"   \"38\"   \"50\"   \"28\"  \n [113] \"34\"   \"41\"   \"20\"   \"5\"    \"30\"   \"35\"   \"16\"   \"32\"   \"40\"   \"30\"   \"28\"   \"25\"   \"50\"   \"25\"  \n [127] \"0\"    \"7\"    \"24\"   \"34\"   \"40\"   \"32\"   \"25\"   \"25\"   \"25\"   \"0\"    \"47\"   \"45\"   \"34\"   \"46\"  \n [141] \"40\"   \"38\"   \"0\"    \"35\"   \"10\"   \"23\"   \"27\"   \"10\"   \"10\"   \"32\"   \"58\"   \"27\"   \"51\"   \"20\"  \n [155] \"20\"   \"55\"   \"19\"   \"30\"   \"0\"    \"43\"   \"46\"   \"25\"   \"25\"   \"50\"   \"40\"   \"17\"   \"35\"   \"45\"  \n [169] \"#N/A\" \"32\"   \"33\"   \"30\"   \"50\"   \"35\"   \"29\"   \"30\"   \"15\"   \"26\"   \"#N/A\" \"19\"   \"26\"   \"16\"  \n [183] \"21\"   \"33\"   \"30\"   \"33\"   \"61\"   \"11\"   \"22\"   \"29\"   \"21\"   \"0\"    \"34\"   \"12\"   \"34\"   \"31\"  \n [197] \"39\"   \"42\"   \"9\"    \"20\"   \"#N/A\" \"24\"   \"28\"   \"21\"   \"26\"   \"30\"   \"30\"   \"35\"   \"43\"   \"28\"  \n [211] \"35\"   \"41\"   \"40\"   \"20\"   \"25\"   \"50\"   \"30\"   \"20\"   \"20\"   \"23\"   \"40\"   \"35\"   \"22\"   \"60\"  \n [225] \"33\"   \"30\"   \"20\"   \"28\"   \"30\"   \"58\"   \"30\"   \"50\"   \"45\"   \"40\"   \"10\"   \"25\"   \"40\"   \"33\"  \n [239] \"20\"   \"26\"   \"25\"   \"26\"   \"43\"   \"#N/A\" \"#N/A\" \"56\"   \"21\"   \"#N/A\" \"40\"   \"45\"   \"50\"   \"46\"  \n [253] \"20\"   \"40\"   \"#N/A\" \"40\"   \"33\"   \"40\"   \"51\"   \"25\"   \"30\"   \"40\"   \"20\"   \"35\"   \"35\"   \"34\"  \n [267] \"38\"   \"28\"   \"20\"   \"70\"   \"20\"   \"24\"   \"43\"   \"50\"   \"12\"   \"22\"   \"18\"   \"51\"   \"50\"   \"25\"  \n [281] \"1\"    \"35\"   \"20\"   \"33\"   \"20\"   \"35\"   \"34\"   \"33\"   \"15\"   \"31\"   \"36\"   \"38\"   \"30\"   \"33\"  \n [295] \"12\"   \"45\"   \"34\"   \"40\"   \"35\"   \"55\"   \"19\"   \"39\"   \"19\"   \"#N/A\" \"27\"   \"20\"   \"35\"   \"40\"  \n [309] \"35\"   \"30\"   \"43\"   \"36\"   \"40\"   \"45\"   \"26\"   \"34\"   \"30\"   \"20\"   \"14\"   \"20\"   \"29\"   \"35\"  \n [323] \"42\"   \"37\"   \"9\"    \"20\"   \"32\"   \"0\"    \"30\"   \"35\"   \"45\"   \"50\"   \"50\"   \"25\"   \"#N/A\" \"34\"  \n [337] \"56\"   \"15\"   \"40\"   \"28\"   \"20\"   \"25\"   \"40\"   \"28\"   \"40\"   \"43\"   \"22\"   \"34\"   \"33\"   \"38\"  \n [351] \"53\"   \"29\"   \"16\"   \"45\"   \"33\"   \"31\"   \"18\"   \"39\"   \"20\"   \"9\"    \"25\"   \"15\"   \"25\"   \"40\"  \n [365] \"11\"   \"22\"   \"#N/A\" \"43\"   \"30\"   \"37\"   \"46\"   \"16\"   \"40\"   \"21\"   \"24\"   \"38\"   \"46\"   \"21\"  \n [379] \"23\"   \"35\"   \"45\"   \"55\"   \"30\"   \"34\"   \"30\"   \"11\"   \"55\"   \"11\"   \"29\"   \"23\"   \"26\"   \"8\"   \n [393] \"27\"   \"20\"   \"34\"   \"26\"   \"40\"   \"0\"    \"32\"   \"33\"   \"47\"   \"41\"   \"30\"   \"25\"   \"22\"   \"35\"  \n [407] \"5\"    \"25\"   \"30\"   \"18\"   \"18\"   \"36\"   \"29\"   \"34\"   \"30\"   \"30\"   \"21\"   \"26\"   \"45\"   \"15\"  \n [421] \"12\"   \"37\"   \"20\"   \"31\"   \"23\"   \"39\"   \"33\"   \"10\"   \"33\"   \"45\"   \"46\"   \"21\"   \"45\"   \"38\"  \n [435] \"24\"   \"30\"   \"20\"   \"11\"   \"16\"   \"30\"   \"10\"   \"33\"   \"40\"   \"24\"   \"32\"   \"55\"   \"30\"   \"20\"  \n [449] \"20\"   \"40\"   \"34\"   \"27\"   \"24\"   \"30\"   \"20\"   \"29\"   \"51\"   \"23\"   \"7\"    \"25\"   \"#N/A\" \"8\"   \n [463] \"50\"   \"40\"   \"35\"   \"38\"   \"34\"   \"38\"   \"26\"   \"69\"   \"10\"   \"35\"   \"19\"   \"31\"   \"20\"   \"32\"  \n [477] \"18\"   \"60\"   \"40\"   \"#N/A\" \"#N/A\" \"16\"   \"24\"   \"20\"   \"38\"   \"33\"   \"30\"   \"22\"   \"20\"   \"28\"  \n [491] \"45\"   \"#N/A\" \"53\"   \"11\"   \"35\"   \"22\"   \"44\"   \"22\"   \"27\"   \"40\"   \"36\"   \"31\"   \"47\"   \"68\"  \n [505] \"26\"   \"32\"   \"28\"   \"43\"   \"29\"   \"53\"   \"25\"   \"49\"   \"55\"   \"30\"   \"44\"   \"22\"   \"18\"   \"50\"  \n [519] \"49\"   \"18\"   \"40\"   \"25\"   \"44\"   \"30\"   \"18\"   \"0\"    \"25\"   \"26\"   \"50\"   \"#N/A\" \"31\"   \"30\"  \n [533] \"24\"   \"20\"   \"35\"   \"35\"   \"42\"   \"25\"   \"35\"   \"47\"   \"17\"   \"22\"   \"25\"   \"24\"   \"40\"   \"15\"  \n [547] \"39\"   \"20\"   \"14\"   \"52\"   \"23\"   \"25\"   \"31\"   \"12\"   \"25\"   \"30\"   \"45\"   \"41\"   \"21\"   \"44\"  \n [561] \"95\"   \"25\"   \"27\"   \"27\"   \"69\"   \"43\"   \"20\"   \"50\"   \"29\"   \"10\"   \"35\"   \"33\"   \"6\"    \"#N/A\"\n [575] \"42\"   \"35\"   \"60\"   \"45\"   \"28\"   \"20\"   \"#N/A\" \"20\"   \"14\"   \"27\"   \"29\"   \"30\"   \"31\"   \"40\"  \n [589] \"31\"   \"75\"   \"27\"   \"25\"   \"34\"   \"11\"   \"20\"   \"40\"   \"30\"   \"30\"   \"20\"   \"23\"   \"20\"   \"15\"  \n [603] \"10\"   \"37\"   \"35\"   \"28\"   \"45\"   \"17\"   \"30\"   \"36\"   \"42\"   \"10\"   \"21\"   \"0\"    \"33\"   \"38\"  \n [617] \"56\"   \"22\"   \"40\"   \"24\"   \"52\"   \"30\"   \"36\"   \"24\"   \"0\"    \"9\"    \"32\"   \"14\"   \"23\"   \"50\"  \n [631] \"29\"   \"25\"   \"40\"   \"20\"   \"55\"   \"25\"   \"35\"   \"38\"   \"25\"   \"15\"   \"33\"   \"4\"    \"29\"   \"24\"  \n [645] \"31\"   \"41\"   \"40\"   \"36\"   \"17\"   \"40\"   \"35\"   \"14\"   \"26\"   \"35\"   \"44\"   \"32\"   \"28\"   \"27\"  \n [659] \"30\"   \"32\"   \"25\"   \"20\"   \"40\"   \"34\"   \"60\"   \"20\"   \"50\"   \"27\"   \"8\"    \"55\"   \"28\"   \"18\"  \n [673] \"8\"    \"50\"   \"30\"   \"25\"   \"28\"   \"20\"   \"0\"    \"31\"   \"25\"   \"#N/A\" \"24\"   \"30\"   \"18\"   \"16\"  \n [687] \"#N/A\" \"30\"   \"1\"    \"38\"   \"5\"    \"17\"   \"7\"    \"32\"   \"50\"   \"10\"   \"35\"   \"10\"   \"55\"   \"20\"  \n [701] \"34\"   \"25\"   \"21\"   \"20\"   \"21\"   \"45\"   \"26\"   \"34\"   \"27\"   \"30\"   \"65\"   \"30\"   \"40\"   \"25\"  \n [715] \"50\"   \"3\"    \"20\"   \"30\"   \"45\"   \"10\"   \"31\"   \"#N/A\" \"48\"   \"30\"   \"46\"   \"30\"   \"40\"   \"40\"  \n [729] \"46\"   \"30\"   \"20\"   \"68\"   \"18\"   \"8\"    \"25\"   \"38\"   \"60\"   \"8\"    \"50\"   \"28\"   \"40\"   \"20\"  \n [743] \"33\"   \"50\"   \"50\"   \"30\"   \"15\"   \"33\"   \"81\"   \"15\"   \"28\"   \"32\"   \"#N/A\" \"27\"   \"32\"   \"36\"  \n [757] \"20\"   \"31\"   \"36\"   \"#N/A\" \"28\"   \"39\"   \"14\"   \"38\"   \"25\"   \"20\"   \"18\"   \"32\"   \"52\"   \"32\"  \n [771] \"10\"   \"45\"   \"69\"   \"21\"   \"50\"   \"29\"   \"40\"   \"21\"   \"47\"   \"30\"   \"20\"   \"42\"   \"39\"   \"38\"  \n [785] \"15\"   \"11\"   \"36\"   \"43\"   \"25\"   \"25\"   \"20\"   \"62\"   \"69\"   \"20\"   \"38\"   \"30\"   \"30\"   \"#N/A\"\n [799] \"52\"   \"50\"   \"40\"   \"45\"   \"50\"   \"40\"   \"28\"   \"30\"   \"30\"   \"#N/A\" \"30\"   \"25\"   \"20\"   \"13\"  \n [813] \"32\"   \"15\"   \"32\"   \"10\"   \"45\"   \"6\"    \"24\"   \"40\"   \"26\"   \"18\"   \"35\"   \"60\"   \"44\"   \"37\"  \n [827] \"27\"   \"26\"   \"18\"   \"40\"   \"22\"   \"40\"   \"40\"   \"30\"   \"21\"   \"36\"   \"27\"   \"55\"   \"20\"   \"30\"  \n [841] \"38\"   \"33\"   \"24\"   \"35\"   \"30\"   \"35\"   \"21\"   \"31\"   \"20\"   \"40\"   \"25\"   \"32\"   \"39\"   \"35\"  \n [855] \"43\"   \"28\"   \"37\"   \"24\"   \"12\"   \"36\"   \"40\"   \"71\"   \"50\"   \"34\"   \"45\"   \"0\"    \"10\"   \"55\"  \n [869] \"56\"   \"30\"   \"40\"   \"13\"   \"22\"   \"23\"   \"32\"   \"30\"   \"30\"   \"33\"   \"20\"   \"40\"   \"44\"   \"32\"  \n [883] \"15\"   \"39\"   \"#N/A\" \"45\"   \"32\"   \"20\"   \"32\"   \"31\"   \"25\"   \"30\"   \"#N/A\" \"40\"   \"30\"   \"30\"  \n [897] \"29\"   \"37\"   \"31\"   \"28\"   \"34\"   \"32\"   \"40\"   \"28\"   \"50\"   \"31\"   \"23\"   \"25\"   \"32\"   \"45\"  \n [911] \"22\"   \"33\"   \"30\"   \"18\"   \"38\"   \"17\"   \"30\"   \"35\"   \"30\"   \"25\"   \"37\"   \"51\"   \"38\"   \"10\"  \n [925] \"55\"   \"27\"   \"21\"   \"40\"   \"47\"   \"56\"   \"23\"   \"40\"   \"37\"   \"45\"   \"23\"   \"26\"   \"38\"   \"45\"  \n [939] \"7\"    \"45\"   \"35\"   \"40\"   \"20\"   \"23\"   \"20\"   \"23\"   \"6\"    \"33\"   \"40\"   \"30\"   \"38\"   \"57\"  \n [953] \"30\"   \"10\"   \"28\"   \"33\"   \"4\"    \"20\"   \"25\"   \"27\"   \"15\"   \"60\"   \"65\"   \"64\"   \"65\"   \"50\"  \n [967] \"33\"   \"20\"   \"30\"   \"38\"   \"15\"   \"60\"   \"60\"   \"38\"   \"40\"   \"20\"   \"27\"   \"45\"   \"6\"    \"14\"  \n [981] \"33\"   \"37\"   \"35\"   \"12\"   \"25\"   \"35\"   \"27\"   \"30\"   \"#N/A\" \"45\"   \"20\"   \"38\"   \"43\"   \"20\"  \n [995] \"#N/A\" \"28\"   \"9\"    \"27\"   \"19\"   \"23\"   \"26\"   \"#N/A\" \"50\"   \"23\"   \"50\"   \"30\"   \"8\"    \"23\"  \n[1009] \"20\"   \"19\"   \"30\"   \"40\"   \"35\"   \"29\"   \"55\"   \"33\"   \"6\"    \"35\"   \"0\"    \"40\"   \"30\"   \"#N/A\"\n[1023] \"20\"   \"40\"   \"46\"   \"27\"   \"43\"   \"40\"   \"33\"   \"40\"   \"42\"   \"45\"   \"40\"   \"35\"   \"30\"   \"36\"  \n[1037] \"19\"   \"30\"   \"43\"   \"8\"    \"40\"   \"32\"   \"65\"   \"30\"   \"44\"   \"26\"   \"73\"   \"24\"   \"30\"   \"39\"  \n[1051] \"16\"   \"37\"   \"30\"   \"#N/A\" \"20\"   \"27\"   \"27\"   \"36\"   \"20\"   \"35\"   \"38\"   \"26\"   \"36\"   \"17\"  \n[1065] \"21\"   \"55\"   \"22\"   \"45\"   \"39\"   \"22\"   \"18\"   \"15\"   \"#N/A\" \"20\"   \"27\"   \"0\"    \"28\"   \"25\"  \n[1079] \"64\"   \"40\"   \"11\"   \"25\"   \"11\"   \"37\"   \"10\"   \"43\"   \"20\"   \"38\"   \"17\"   \"50\"   \"44\"   \"35\"  \n[1093] \"23\"   \"35\"   \"22\"   \"20\"   \"15\"   \"35\"   \"30\"   \"50\"   \"0\"    \"71\"   \"48\"   \"25\"   \"33\"   \"30\"  \n[1107] \"60\"   \"40\"   \"28\"   \"23\"   \"10\"   \"60\"   \"42\"   \"40\"   \"8\"    \"40\"   \"40\"   \"#N/A\" \"18\"   \"17\"  \n[1121] \"25\"   \"18\"   \"32\"   \"27\"   \"30\"   \"48\"   \"20\"   \"0\"    \"25\"   \"41\"   \"12\"   \"25\"   \"40\"   \"37\"  \n[1135] \"45\"   \"43\"   \"50\"   \"#N/A\" \"10\"   \"19\"   \"41\"   \"45\"   \"0\"    \"25\"   \"30\"   \"70\"   \"30\"   \"40\"  \n[1149] \"30\"   \"34\"   \"24\"   \"40\"   \"40\"   \"30\"   \"12\"   \"23\"   \"52\"   \"33\"   \"29\"   \"32\"   \"35\"   \"20\"  \n[1163] \"15\"   \"51\"   \"22\"   \"25\"   \"46\"   \"28\"   \"37\"   \"28\"   \"25\"   \"42\"   \"15\"   \"50\"   \"25\"   \"14\"  \n[1177] \"15\"   \"14\"   \"27\"   \"40\"   \"36\"   \"20\"   \"32\"   \"33\"   \"40\"   \"33\"   \"19\"   \"31\"   \"21\"   \"25\"  \n[1191] \"28\"   \"33\"   \"20\"   \"0\"    \"12\"   \"20\"   \"30\"   \"23\"   \"30\"   \"10\"   \"40\"   \"35\"   \"30\"   \"43\"  \n[1205] \"48\"   \"38\"   \"#N/A\" \"11\"   \"58\"   \"20\"   \"15\"   \"61\"   \"20\"   \"67\"   \"25\"   \"40\"   \"37\"   \"30\"  \n[1219] \"23\"   \"25\"   \"23\"   \"30\"   \"0\"    \"30\"   \"20\"   \"41\"   \"33\"   \"15\"   \"17\"   \"22\"   \"32\"   \"20\"  \n[1233] \"27\"   \"71\"   \"25\"   \"32\"   \"15\"   \"30\"   \"36\"   \"8\"    \"16\"   \"20\"   \"25\"   \"26\"   \"0\"    \"60\"  \n[1247] \"5\"    \"19\"   \"19\"   \"30\"   \"14\"   \"20\"   \"6\"    \"10\"   \"22\"   \"34\"   \"11\"   \"12\"   \"27\"   \"10\"  \n[1261] \"55\"   \"14\"   \"8\"    \"65\"   \"28\"   \"25\"   \"49\"   \"35\"   \"40\"   \"20\"   \"10\"   \"60\"   \"10\"   \"20\"  \n[1275] \"30\"   \"35\"   \"30\"   \"25\"   \"20\"   \"15\"   \"72\"   \"35\"   \"27\"   \"7\"    \"26\"   \"17\"   \"45\"   \"13\"  \n[1289] \"29\"   \"28\"   \"15\"   \"20\"   \"41\"   \"30\"   \"65\"   \"50\"   \"35\"   \"36\"   \"28\"   \"45\"   \"50\"   \"30\"  \n[1303] \"45\"   \"30\"   \"30\"   \"35\"   \"30\"   \"15\"   \"16\"   \"55\"   \"29\"   \"30\"   \"34\"   \"15\"   \"61\"   \"27\"  \n[1317] \"16\"   \"14\"   \"25\"   \"25\"   \"33\"   \"30\"   \"42\"   \"30\"   \"32\"   \"40\"   \"30\"   \"25\"   \"9\"    \"40\"  \n[1331] \"28\"   \"13\"   \"41\"   \"35\"   \"42\"   \"10\"   \"85\"   \"70\"   \"26\"   \"27\"   \"35\"   \"20\"   \"22\"   \"20\"  \n[1345] \"1\"    \"28\"   \"6\"    \"5\"    \"42\"   \"20\"   \"20\"   \"24\"   \"25\"   \"35\"   \"20\"   \"15\"   \"20\"   \"37\"  \n[1359] \"30\"   \"30\"   \"30\"   \"10\"   \"#N/A\" \"51\"   \"25\"   \"22\"   \"22\"   \"0\"    \"20\"   \"60\"   \"23\"   \"26\"  \n[1373] \"15\"   \"35\"   \"15\"   \"19\"   \"28\"   \"20\"   \"15\"   \"10\"   \"18\"   \"25\"   \"30\"   \"20\"   \"5\"    \"#N/A\"\n[1387] \"21\"   \"45\"   \"29\"   \"48\"   \"10\"   \"27\"   \"#N/A\" \"32\"   \"25\"   \"21\"   \"30\"   \"60\"   \"60\"   \"19\"  \n[1401] \"20\"   \"29\"   \"5\"    \"47\"   \"14\"   \"46\"   \"46\"   \"48\"   \"22\"   \"42\"   \"19\"   \"48\"   \"27\"   \"32\"  \n[1415] \"31\"   \"42\"   \"64\"   \"22\"   \"25\"   \"24\"   \"30\"   \"60\"   \"56\"   \"20\"   \"45\"   \"45\"   \"33\"   \"31\"  \n[1429] \"#N/A\" \"50\"   \"29\"   \"41\"   \"22\"   \"35\"   \"25\"   \"27\"   \"26\"   \"40\"   \"38\"   \"42\"   \"40\"   \"20\"  \n[1443] \"23\"   \"15\"   \"30\"   \"55\"   \"35\"   \"29\"   \"30\"   \"32\""
  },
  {
    "objectID": "slides/know-your-data.html#use-the-na-argument-to-specify-allowed-na-values",
    "href": "slides/know-your-data.html#use-the-na-argument-to-specify-allowed-na-values",
    "title": "Getting to know your data",
    "section": "Use the na argument to specify allowed NA values",
    "text": "Use the na argument to specify allowed NA values\n\n\nNCbirths &lt;- read_csv(\n  \"https://wilkelab.org/DSC385/datasets/NCbirths.csv\",\n  na = c(\"\", \"NA\", \"#N/A\")\n)\n\nNCbirths\n\n# A tibble: 1,450 × 15\n      ID Plural   Sex MomAge Weeks Marital RaceMom HispMom Gained Smoke BirthWeightOz BirthWeightGm   Low\n   &lt;dbl&gt;  &lt;dbl&gt; &lt;dbl&gt;  &lt;dbl&gt; &lt;dbl&gt;   &lt;dbl&gt;   &lt;dbl&gt; &lt;chr&gt;    &lt;dbl&gt; &lt;dbl&gt;         &lt;dbl&gt;         &lt;dbl&gt; &lt;dbl&gt;\n 1     1      1     1     32    40       1       1 N           38     0           111         3147.     0\n 2     2      1     2     32    37       1       1 N           34     0           116         3289.     0\n 3     3      1     1     27    39       1       1 N           12     0           138         3912.     0\n 4     4      1     1     27    39       1       1 N           15     0           136         3856.     0\n 5     5      1     1     25    39       1       1 N           32     0           121         3430.     0\n 6     6      1     1     28    43       1       1 N           32     0           117         3317.     0\n 7     7      1     2     25    39       1       1 N           75     0           143         4054.     0\n 8     8      1     2     15    42       2       1 N           25     0           113         3204.     0\n 9     9      1     2     21    39       1       1 N           28     0           120         3402      0\n10    10      1     2     27    40       2       1 N           37     0           124         3515.     0\n# ℹ 1,440 more rows\n# ℹ 2 more variables: Premie &lt;dbl&gt;, MomRace &lt;chr&gt;"
  },
  {
    "objectID": "slides/know-your-data.html#use-the-na-argument-to-specify-allowed-na-values-1",
    "href": "slides/know-your-data.html#use-the-na-argument-to-specify-allowed-na-values-1",
    "title": "Getting to know your data",
    "section": "Use the na argument to specify allowed NA values",
    "text": "Use the na argument to specify allowed NA values\n\n\nNCbirths &lt;- read_csv(\n  \"https://wilkelab.org/DSC385/datasets/NCbirths.csv\",\n  na = c(\"\", \"NA\", \"#N/A\")\n)\n\nNCbirths |&gt;\n  pull(Gained)\n\n   [1] 38 34 12 15 32 32 75 25 28 37 45 52 26 31 40 51 45 25  0 20 20 38 15  3  9 37 30 40 37 56 48  4 43 40\n  [35] 25 53 15 19 26 32 25 50 34  2 23 16 48 80 19 16 50 55 25 33 10 30 30 NA 55 38 33 49 14 18 40 30 17 45\n  [69] 15 31 50 25 12 38 47 20 40 34  5 25 18 27 46 31 48 15 51 12 33 17 25 31 24 16 18 40 16 57 18 29 45 18\n [103] 11 20 50 26 20 35 12 38 50 28 34 41 20  5 30 35 16 32 40 30 28 25 50 25  0  7 24 34 40 32 25 25 25  0\n [137] 47 45 34 46 40 38  0 35 10 23 27 10 10 32 58 27 51 20 20 55 19 30  0 43 46 25 25 50 40 17 35 45 NA 32\n [171] 33 30 50 35 29 30 15 26 NA 19 26 16 21 33 30 33 61 11 22 29 21  0 34 12 34 31 39 42  9 20 NA 24 28 21\n [205] 26 30 30 35 43 28 35 41 40 20 25 50 30 20 20 23 40 35 22 60 33 30 20 28 30 58 30 50 45 40 10 25 40 33\n [239] 20 26 25 26 43 NA NA 56 21 NA 40 45 50 46 20 40 NA 40 33 40 51 25 30 40 20 35 35 34 38 28 20 70 20 24\n [273] 43 50 12 22 18 51 50 25  1 35 20 33 20 35 34 33 15 31 36 38 30 33 12 45 34 40 35 55 19 39 19 NA 27 20\n [307] 35 40 35 30 43 36 40 45 26 34 30 20 14 20 29 35 42 37  9 20 32  0 30 35 45 50 50 25 NA 34 56 15 40 28\n [341] 20 25 40 28 40 43 22 34 33 38 53 29 16 45 33 31 18 39 20  9 25 15 25 40 11 22 NA 43 30 37 46 16 40 21\n [375] 24 38 46 21 23 35 45 55 30 34 30 11 55 11 29 23 26  8 27 20 34 26 40  0 32 33 47 41 30 25 22 35  5 25\n [409] 30 18 18 36 29 34 30 30 21 26 45 15 12 37 20 31 23 39 33 10 33 45 46 21 45 38 24 30 20 11 16 30 10 33\n [443] 40 24 32 55 30 20 20 40 34 27 24 30 20 29 51 23  7 25 NA  8 50 40 35 38 34 38 26 69 10 35 19 31 20 32\n [477] 18 60 40 NA NA 16 24 20 38 33 30 22 20 28 45 NA 53 11 35 22 44 22 27 40 36 31 47 68 26 32 28 43 29 53\n [511] 25 49 55 30 44 22 18 50 49 18 40 25 44 30 18  0 25 26 50 NA 31 30 24 20 35 35 42 25 35 47 17 22 25 24\n [545] 40 15 39 20 14 52 23 25 31 12 25 30 45 41 21 44 95 25 27 27 69 43 20 50 29 10 35 33  6 NA 42 35 60 45\n [579] 28 20 NA 20 14 27 29 30 31 40 31 75 27 25 34 11 20 40 30 30 20 23 20 15 10 37 35 28 45 17 30 36 42 10\n [613] 21  0 33 38 56 22 40 24 52 30 36 24  0  9 32 14 23 50 29 25 40 20 55 25 35 38 25 15 33  4 29 24 31 41\n [647] 40 36 17 40 35 14 26 35 44 32 28 27 30 32 25 20 40 34 60 20 50 27  8 55 28 18  8 50 30 25 28 20  0 31\n [681] 25 NA 24 30 18 16 NA 30  1 38  5 17  7 32 50 10 35 10 55 20 34 25 21 20 21 45 26 34 27 30 65 30 40 25\n [715] 50  3 20 30 45 10 31 NA 48 30 46 30 40 40 46 30 20 68 18  8 25 38 60  8 50 28 40 20 33 50 50 30 15 33\n [749] 81 15 28 32 NA 27 32 36 20 31 36 NA 28 39 14 38 25 20 18 32 52 32 10 45 69 21 50 29 40 21 47 30 20 42\n [783] 39 38 15 11 36 43 25 25 20 62 69 20 38 30 30 NA 52 50 40 45 50 40 28 30 30 NA 30 25 20 13 32 15 32 10\n [817] 45  6 24 40 26 18 35 60 44 37 27 26 18 40 22 40 40 30 21 36 27 55 20 30 38 33 24 35 30 35 21 31 20 40\n [851] 25 32 39 35 43 28 37 24 12 36 40 71 50 34 45  0 10 55 56 30 40 13 22 23 32 30 30 33 20 40 44 32 15 39\n [885] NA 45 32 20 32 31 25 30 NA 40 30 30 29 37 31 28 34 32 40 28 50 31 23 25 32 45 22 33 30 18 38 17 30 35\n [919] 30 25 37 51 38 10 55 27 21 40 47 56 23 40 37 45 23 26 38 45  7 45 35 40 20 23 20 23  6 33 40 30 38 57\n [953] 30 10 28 33  4 20 25 27 15 60 65 64 65 50 33 20 30 38 15 60 60 38 40 20 27 45  6 14 33 37 35 12 25 35\n [987] 27 30 NA 45 20 38 43 20 NA 28  9 27 19 23 26 NA 50 23 50 30  8 23 20 19 30 40 35 29 55 33  6 35  0 40\n[1021] 30 NA 20 40 46 27 43 40 33 40 42 45 40 35 30 36 19 30 43  8 40 32 65 30 44 26 73 24 30 39 16 37 30 NA\n[1055] 20 27 27 36 20 35 38 26 36 17 21 55 22 45 39 22 18 15 NA 20 27  0 28 25 64 40 11 25 11 37 10 43 20 38\n[1089] 17 50 44 35 23 35 22 20 15 35 30 50  0 71 48 25 33 30 60 40 28 23 10 60 42 40  8 40 40 NA 18 17 25 18\n[1123] 32 27 30 48 20  0 25 41 12 25 40 37 45 43 50 NA 10 19 41 45  0 25 30 70 30 40 30 34 24 40 40 30 12 23\n[1157] 52 33 29 32 35 20 15 51 22 25 46 28 37 28 25 42 15 50 25 14 15 14 27 40 36 20 32 33 40 33 19 31 21 25\n[1191] 28 33 20  0 12 20 30 23 30 10 40 35 30 43 48 38 NA 11 58 20 15 61 20 67 25 40 37 30 23 25 23 30  0 30\n[1225] 20 41 33 15 17 22 32 20 27 71 25 32 15 30 36  8 16 20 25 26  0 60  5 19 19 30 14 20  6 10 22 34 11 12\n[1259] 27 10 55 14  8 65 28 25 49 35 40 20 10 60 10 20 30 35 30 25 20 15 72 35 27  7 26 17 45 13 29 28 15 20\n[1293] 41 30 65 50 35 36 28 45 50 30 45 30 30 35 30 15 16 55 29 30 34 15 61 27 16 14 25 25 33 30 42 30 32 40\n[1327] 30 25  9 40 28 13 41 35 42 10 85 70 26 27 35 20 22 20  1 28  6  5 42 20 20 24 25 35 20 15 20 37 30 30\n[1361] 30 10 NA 51 25 22 22  0 20 60 23 26 15 35 15 19 28 20 15 10 18 25 30 20  5 NA 21 45 29 48 10 27 NA 32\n[1395] 25 21 30 60 60 19 20 29  5 47 14 46 46 48 22 42 19 48 27 32 31 42 64 22 25 24 30 60 56 20 45 45 33 31\n[1429] NA 50 29 41 22 35 25 27 26 40 38 42 40 20 23 15 30 55 35 29 30 32"
  },
  {
    "objectID": "slides/know-your-data.html#detailed-quality-checks-look-at-all-column-names",
    "href": "slides/know-your-data.html#detailed-quality-checks-look-at-all-column-names",
    "title": "Getting to know your data",
    "section": "Detailed quality checks: Look at all column names",
    "text": "Detailed quality checks: Look at all column names\n\n\n\n [1] \"ID\"            \"Plural\"        \"Sex\"           \"MomAge\"       \n [5] \"Weeks\"         \"Marital\"       \"RaceMom\"       \"HispMom\"      \n [9] \"Gained\"        \"Smoke\"         \"BirthWeightOz\" \"BirthWeightGm\"\n[13] \"Low\"           \"Premie\"        \"MomRace\"      \n\n\n\n\nWhat’s the difference between RaceMom and MomRace?"
  },
  {
    "objectID": "slides/know-your-data.html#detailed-quality-checks-look-at-all-column-names-1",
    "href": "slides/know-your-data.html#detailed-quality-checks-look-at-all-column-names-1",
    "title": "Getting to know your data",
    "section": "Detailed quality checks: Look at all column names",
    "text": "Detailed quality checks: Look at all column names\nFrom the data dictionary:\n\nRaceMomMother’s race: 1=white, 2=black, 3=American Indian, 4=Chinese, 5=Japanese, 6=Hawaiian, 7=Filipino, or 8=Other Asian or Pacific Islander\nMomRaceMother’s race: black, hispanic, other, or white\n\n\nThese are similar but not the same. Important not to confuse them!"
  },
  {
    "objectID": "slides/know-your-data.html#detailed-quality-checks-look-at-every-data-column",
    "href": "slides/know-your-data.html#detailed-quality-checks-look-at-every-data-column",
    "title": "Getting to know your data",
    "section": "Detailed quality checks: Look at every data column",
    "text": "Detailed quality checks: Look at every data column\n\n\n\n\nsummary(NCbirths$ID) # five number summary\n\n   Min. 1st Qu.  Median    Mean 3rd Qu.    Max. \n    1.0   363.2   725.5   725.5  1087.8  1450.0 \n\n\n\n\n\n\nunique(NCbirths$ID)  # all unique values\n\n   [1]    1    2    3    4    5    6    7    8\n   [9]    9   10   11   12   13   14   15   16\n  [17]   17   18   19   20   21   22   23   24\n  [25]   25   26   27   28   29   30   31   32\n  [33]   33   34   35   36   37   38   39   40\n  [41]   41   42   43   44   45   46   47   48\n  [49]   49   50   51   52   53   54   55   56\n  [57]   57   58   59   60   61   62   63   64\n  [65]   65   66   67   68   69   70   71   72\n  [73]   73   74   75   76   77   78   79   80\n  [81]   81   82   83   84   85   86   87   88\n  [89]   89   90   91   92   93   94   95   96\n  [97]   97   98   99  100  101  102  103  104\n [105]  105  106  107  108  109  110  111  112\n [113]  113  114  115  116  117  118  119  120\n [121]  121  122  123  124  125  126  127  128\n [129]  129  130  131  132  133  134  135  136\n [137]  137  138  139  140  141  142  143  144\n [145]  145  146  147  148  149  150  151  152\n [153]  153  154  155  156  157  158  159  160\n [161]  161  162  163  164  165  166  167  168\n [169]  169  170  171  172  173  174  175  176\n [177]  177  178  179  180  181  182  183  184\n [185]  185  186  187  188  189  190  191  192\n [193]  193  194  195  196  197  198  199  200\n [201]  201  202  203  204  205  206  207  208\n [209]  209  210  211  212  213  214  215  216\n [217]  217  218  219  220  221  222  223  224\n [225]  225  226  227  228  229  230  231  232\n [233]  233  234  235  236  237  238  239  240\n [241]  241  242  243  244  245  246  247  248\n [249]  249  250  251  252  253  254  255  256\n [257]  257  258  259  260  261  262  263  264\n [265]  265  266  267  268  269  270  271  272\n [273]  273  274  275  276  277  278  279  280\n [281]  281  282  283  284  285  286  287  288\n [289]  289  290  291  292  293  294  295  296\n [297]  297  298  299  300  301  302  303  304\n [305]  305  306  307  308  309  310  311  312\n [313]  313  314  315  316  317  318  319  320\n [321]  321  322  323  324  325  326  327  328\n [329]  329  330  331  332  333  334  335  336\n [337]  337  338  339  340  341  342  343  344\n [345]  345  346  347  348  349  350  351  352\n [353]  353  354  355  356  357  358  359  360\n [361]  361  362  363  364  365  366  367  368\n [369]  369  370  371  372  373  374  375  376\n [377]  377  378  379  380  381  382  383  384\n [385]  385  386  387  388  389  390  391  392\n [393]  393  394  395  396  397  398  399  400\n [401]  401  402  403  404  405  406  407  408\n [409]  409  410  411  412  413  414  415  416\n [417]  417  418  419  420  421  422  423  424\n [425]  425  426  427  428  429  430  431  432\n [433]  433  434  435  436  437  438  439  440\n [441]  441  442  443  444  445  446  447  448\n [449]  449  450  451  452  453  454  455  456\n [457]  457  458  459  460  461  462  463  464\n [465]  465  466  467  468  469  470  471  472\n [473]  473  474  475  476  477  478  479  480\n [481]  481  482  483  484  485  486  487  488\n [489]  489  490  491  492  493  494  495  496\n [497]  497  498  499  500  501  502  503  504\n [505]  505  506  507  508  509  510  511  512\n [513]  513  514  515  516  517  518  519  520\n [521]  521  522  523  524  525  526  527  528\n [529]  529  530  531  532  533  534  535  536\n [537]  537  538  539  540  541  542  543  544\n [545]  545  546  547  548  549  550  551  552\n [553]  553  554  555  556  557  558  559  560\n [561]  561  562  563  564  565  566  567  568\n [569]  569  570  571  572  573  574  575  576\n [577]  577  578  579  580  581  582  583  584\n [585]  585  586  587  588  589  590  591  592\n [593]  593  594  595  596  597  598  599  600\n [601]  601  602  603  604  605  606  607  608\n [609]  609  610  611  612  613  614  615  616\n [617]  617  618  619  620  621  622  623  624\n [625]  625  626  627  628  629  630  631  632\n [633]  633  634  635  636  637  638  639  640\n [641]  641  642  643  644  645  646  647  648\n [649]  649  650  651  652  653  654  655  656\n [657]  657  658  659  660  661  662  663  664\n [665]  665  666  667  668  669  670  671  672\n [673]  673  674  675  676  677  678  679  680\n [681]  681  682  683  684  685  686  687  688\n [689]  689  690  691  692  693  694  695  696\n [697]  697  698  699  700  701  702  703  704\n [705]  705  706  707  708  709  710  711  712\n [713]  713  714  715  716  717  718  719  720\n [721]  721  722  723  724  725  726  727  728\n [729]  729  730  731  732  733  734  735  736\n [737]  737  738  739  740  741  742  743  744\n [745]  745  746  747  748  749  750  751  752\n [753]  753  754  755  756  757  758  759  760\n [761]  761  762  763  764  765  766  767  768\n [769]  769  770  771  772  773  774  775  776\n [777]  777  778  779  780  781  782  783  784\n [785]  785  786  787  788  789  790  791  792\n [793]  793  794  795  796  797  798  799  800\n [801]  801  802  803  804  805  806  807  808\n [809]  809  810  811  812  813  814  815  816\n [817]  817  818  819  820  821  822  823  824\n [825]  825  826  827  828  829  830  831  832\n [833]  833  834  835  836  837  838  839  840\n [841]  841  842  843  844  845  846  847  848\n [849]  849  850  851  852  853  854  855  856\n [857]  857  858  859  860  861  862  863  864\n [865]  865  866  867  868  869  870  871  872\n [873]  873  874  875  876  877  878  879  880\n [881]  881  882  883  884  885  886  887  888\n [889]  889  890  891  892  893  894  895  896\n [897]  897  898  899  900  901  902  903  904\n [905]  905  906  907  908  909  910  911  912\n [913]  913  914  915  916  917  918  919  920\n [921]  921  922  923  924  925  926  927  928\n [929]  929  930  931  932  933  934  935  936\n [937]  937  938  939  940  941  942  943  944\n [945]  945  946  947  948  949  950  951  952\n [953]  953  954  955  956  957  958  959  960\n [961]  961  962  963  964  965  966  967  968\n [969]  969  970  971  972  973  974  975  976\n [977]  977  978  979  980  981  982  983  984\n [985]  985  986  987  988  989  990  991  992\n [993]  993  994  995  996  997  998  999 1000\n[1001] 1001 1002 1003 1004 1005 1006 1007 1008\n[1009] 1009 1010 1011 1012 1013 1014 1015 1016\n[1017] 1017 1018 1019 1020 1021 1022 1023 1024\n[1025] 1025 1026 1027 1028 1029 1030 1031 1032\n[1033] 1033 1034 1035 1036 1037 1038 1039 1040\n[1041] 1041 1042 1043 1044 1045 1046 1047 1048\n[1049] 1049 1050 1051 1052 1053 1054 1055 1056\n[1057] 1057 1058 1059 1060 1061 1062 1063 1064\n[1065] 1065 1066 1067 1068 1069 1070 1071 1072\n[1073] 1073 1074 1075 1076 1077 1078 1079 1080\n[1081] 1081 1082 1083 1084 1085 1086 1087 1088\n[1089] 1089 1090 1091 1092 1093 1094 1095 1096\n[1097] 1097 1098 1099 1100 1101 1102 1103 1104\n[1105] 1105 1106 1107 1108 1109 1110 1111 1112\n[1113] 1113 1114 1115 1116 1117 1118 1119 1120\n[1121] 1121 1122 1123 1124 1125 1126 1127 1128\n[1129] 1129 1130 1131 1132 1133 1134 1135 1136\n[1137] 1137 1138 1139 1140 1141 1142 1143 1144\n[1145] 1145 1146 1147 1148 1149 1150 1151 1152\n[1153] 1153 1154 1155 1156 1157 1158 1159 1160\n[1161] 1161 1162 1163 1164 1165 1166 1167 1168\n[1169] 1169 1170 1171 1172 1173 1174 1175 1176\n[1177] 1177 1178 1179 1180 1181 1182 1183 1184\n[1185] 1185 1186 1187 1188 1189 1190 1191 1192\n[1193] 1193 1194 1195 1196 1197 1198 1199 1200\n[1201] 1201 1202 1203 1204 1205 1206 1207 1208\n[1209] 1209 1210 1211 1212 1213 1214 1215 1216\n[1217] 1217 1218 1219 1220 1221 1222 1223 1224\n[1225] 1225 1226 1227 1228 1229 1230 1231 1232\n[1233] 1233 1234 1235 1236 1237 1238 1239 1240\n[1241] 1241 1242 1243 1244 1245 1246 1247 1248\n[1249] 1249 1250 1251 1252 1253 1254 1255 1256\n[1257] 1257 1258 1259 1260 1261 1262 1263 1264\n[1265] 1265 1266 1267 1268 1269 1270 1271 1272\n[1273] 1273 1274 1275 1276 1277 1278 1279 1280\n[1281] 1281 1282 1283 1284 1285 1286 1287 1288\n[1289] 1289 1290 1291 1292 1293 1294 1295 1296\n[1297] 1297 1298 1299 1300 1301 1302 1303 1304\n[1305] 1305 1306 1307 1308 1309 1310 1311 1312\n[1313] 1313 1314 1315 1316 1317 1318 1319 1320\n[1321] 1321 1322 1323 1324 1325 1326 1327 1328\n[1329] 1329 1330 1331 1332 1333 1334 1335 1336\n[1337] 1337 1338 1339 1340 1341 1342 1343 1344\n[1345] 1345 1346 1347 1348 1349 1350 1351 1352\n[1353] 1353 1354 1355 1356 1357 1358 1359 1360\n[1361] 1361 1362 1363 1364 1365 1366 1367 1368\n[1369] 1369 1370 1371 1372 1373 1374 1375 1376\n[1377] 1377 1378 1379 1380 1381 1382 1383 1384\n[1385] 1385 1386 1387 1388 1389 1390 1391 1392\n[1393] 1393 1394 1395 1396 1397 1398 1399 1400\n[1401] 1401 1402 1403 1404 1405 1406 1407 1408\n[1409] 1409 1410 1411 1412 1413 1414 1415 1416\n[1417] 1417 1418 1419 1420 1421 1422 1423 1424\n[1425] 1425 1426 1427 1428 1429 1430 1431 1432\n[1433] 1433 1434 1435 1436 1437 1438 1439 1440\n[1441] 1441 1442 1443 1444 1445 1446 1447 1448\n[1449] 1449 1450\n\n\n\n\n\n# histogram\nggplot(NCbirths, aes(ID)) +\n  geom_histogram()"
  },
  {
    "objectID": "slides/know-your-data.html#detailed-quality-checks-look-at-every-data-column-1",
    "href": "slides/know-your-data.html#detailed-quality-checks-look-at-every-data-column-1",
    "title": "Getting to know your data",
    "section": "Detailed quality checks: Look at every data column",
    "text": "Detailed quality checks: Look at every data column\n\n\n\nsummary(NCbirths$Plural) # five number summary\n\n   Min. 1st Qu.  Median    Mean 3rd Qu.    Max. \n  1.000   1.000   1.000   1.037   1.000   3.000 \n\n\n\n\n\nunique(NCbirths$Plural)  # all unique values\n\n[1] 1 2 3\n\n\n\n\n\n# histogram\nggplot(NCbirths, aes(Plural)) +\n  geom_histogram()"
  },
  {
    "objectID": "slides/know-your-data.html#detailed-quality-checks-look-at-every-data-column-2",
    "href": "slides/know-your-data.html#detailed-quality-checks-look-at-every-data-column-2",
    "title": "Getting to know your data",
    "section": "Detailed quality checks: Look at every data column",
    "text": "Detailed quality checks: Look at every data column\n\n\n\nsummary(NCbirths$Weeks) # five number summary\n\n   Min. 1st Qu.  Median    Mean 3rd Qu.    Max. \n-999.00   38.00   39.00   37.91   40.00   45.00 \n\n\n\n\n\nunique(NCbirths$Weeks)  # all unique values\n\n [1]   40   37   39   43   42   41   36   38   30\n[10]   31   45   33   34   44   32   35   24   27\n[19]   23   29   25   28   22 -999   26\n\n\n\n\n\n# histogram\nggplot(NCbirths, aes(Weeks)) +\n  geom_histogram()\n\n\n\n\n \n\n\n\n\n\n\nWhat is the meaning of -999 weeks?"
  },
  {
    "objectID": "slides/know-your-data.html#in-some-cases-nonsensical-values-indicate-missingness",
    "href": "slides/know-your-data.html#in-some-cases-nonsensical-values-indicate-missingness",
    "title": "Getting to know your data",
    "section": "In some cases, nonsensical values indicate missingness",
    "text": "In some cases, nonsensical values indicate missingness\n\nWe need to make sure to catch those cases:\n\nlibrary(naniar) # library for handling missing values\n\nNCbirths &lt;- read_csv(\n  \"https://wilkelab.org/DSC385/datasets/NCbirths.csv\",\n  na = c(\"\", \"NA\", \"#N/A\")\n) |&gt; replace_with_na_at(\"Weeks\", ~.x &lt; 0) # recode negative weeks to NA\n\n\n\n\n\nsummary(NCbirths$Weeks)\n\n   Min. 1st Qu.  Median    Mean 3rd Qu.    Max.    NA's \n  22.00   38.00   39.00   38.62   40.00   45.00       1 \n\n\n\n\n\n\nunique(NCbirths$Weeks)\n\n [1] 40 37 39 43 42 41 36 38 30 31 45 33 34 44 32 35 24 27 23 29 25 28 22\n[24] NA 26"
  },
  {
    "objectID": "slides/know-your-data.html#in-some-cases-nonsensical-values-indicate-missingness-1",
    "href": "slides/know-your-data.html#in-some-cases-nonsensical-values-indicate-missingness-1",
    "title": "Getting to know your data",
    "section": "In some cases, nonsensical values indicate missingness",
    "text": "In some cases, nonsensical values indicate missingness\n\n\nBefore recoding -999 to NA:\nggplot(NCbirths, aes(Weeks)) +\n  geom_histogram()\n\n\n\n\n\n \n\n\n\n\n\nAfter recoding -999 to NA:\n\nggplot(NCbirths, aes(Weeks)) +\n  geom_histogram()"
  },
  {
    "objectID": "slides/know-your-data.html#consider-recoding-categorical-variables",
    "href": "slides/know-your-data.html#consider-recoding-categorical-variables",
    "title": "Getting to know your data",
    "section": "Consider recoding categorical variables",
    "text": "Consider recoding categorical variables\n\nSex of the baby is encoded as 1/2:\n\nNCbirths |&gt;\n  pull(Sex)\n\n   [1] 1 2 1 1 1 1 2 2 2 2 1 2 2 2 2 1 1 1 1 1 2 2 2 2 2 1 2 2 1 2 1 2 2 1\n  [35] 2 2 1 2 1 2 2 1 2 1 1 1 2 1 1 2 2 1 2 2 2 1 1 2 1 2 1 2 1 2 2 1 1 2\n  [69] 1 1 2 2 1 1 2 2 1 1 2 1 2 2 2 1 1 1 2 2 2 1 1 1 1 1 1 1 1 2 2 1 1 1\n [103] 1 2 2 1 2 1 2 1 1 2 1 2 1 1 2 2 1 1 2 1 2 1 2 1 1 2 2 1 1 1 2 2 2 1\n [137] 1 1 1 2 1 1 2 1 1 1 1 2 2 1 1 1 1 2 2 2 2 2 2 2 1 2 1 1 1 1 1 2 2 2\n [171] 1 1 1 1 2 1 2 1 1 1 2 2 2 2 2 1 2 1 2 1 2 2 1 2 1 1 1 1 2 2 1 1 2 1\n [205] 2 1 1 2 1 2 1 1 1 1 1 2 1 2 2 1 2 2 1 1 2 2 2 2 1 2 1 2 1 1 1 1 2 2\n [239] 2 1 2 2 2 2 2 2 1 1 2 1 2 1 2 2 1 2 2 1 1 2 2 1 1 1 2 2 1 2 2 1 2 1\n [273] 2 1 1 1 1 1 2 2 1 1 1 1 2 1 1 1 2 2 2 2 1 2 1 2 2 1 1 2 1 1 1 1 1 2\n [307] 2 2 1 2 2 1 1 1 1 2 1 1 2 1 2 1 2 1 2 2 2 1 2 2 2 1 1 1 2 2 1 2 1 2\n [341] 1 2 1 1 1 2 1 1 1 2 2 1 2 2 2 2 1 1 1 2 1 2 1 2 1 2 1 1 2 2 2 2 1 2\n [375] 1 2 1 2 2 1 1 2 2 1 2 2 2 1 2 1 1 2 2 1 2 2 2 1 2 1 2 2 2 2 2 2 2 1\n [409] 1 2 2 1 1 1 1 2 1 1 1 1 1 1 1 2 1 2 2 2 1 2 1 2 2 1 1 2 2 2 1 1 2 2\n [443] 1 2 1 2 1 1 1 2 1 2 1 1 2 1 1 2 1 2 2 1 2 2 2 2 2 1 2 1 1 2 1 1 2 2\n [477] 1 2 2 2 2 1 2 1 1 1 2 1 1 1 1 2 1 1 2 1 2 1 1 1 2 2 2 1 2 2 1 1 1 2\n [511] 2 2 1 2 1 2 1 2 2 2 1 1 1 1 2 1 1 1 2 2 1 1 1 1 2 2 1 1 1 2 2 1 2 1\n [545] 2 1 1 1 2 2 2 1 1 1 1 2 2 1 2 2 1 2 2 1 1 2 2 1 1 1 2 2 1 2 1 1 1 2\n [579] 1 1 1 1 2 2 1 1 1 2 2 1 1 2 1 2 2 1 1 1 2 1 1 2 1 1 2 2 1 2 1 1 1 1\n [613] 2 2 2 1 2 1 2 1 1 2 1 1 1 2 2 1 1 2 1 2 2 2 2 2 1 1 2 1 1 2 1 2 2 1\n [647] 1 2 2 1 2 2 1 1 1 2 2 2 2 2 1 2 1 1 1 2 1 2 1 1 2 2 1 2 1 1 2 2 2 1\n [681] 2 1 2 2 1 2 2 2 2 2 1 2 1 1 1 2 1 2 2 1 2 2 1 2 1 2 1 2 1 2 2 2 1 1\n [715] 2 2 1 2 1 1 1 1 2 2 1 2 1 1 1 2 2 2 2 1 1 1 1 1 1 2 2 2 2 2 2 2 2 2\n [749] 1 2 1 1 1 1 2 2 2 1 2 2 2 2 1 2 1 1 1 2 2 1 2 2 1 1 2 1 1 1 2 2 2 2\n [783] 2 2 2 2 1 2 2 2 1 1 2 1 1 2 1 1 2 2 1 2 1 1 2 1 2 1 2 2 2 2 2 2 1 1\n [817] 1 1 2 1 1 2 2 1 1 2 1 1 2 1 2 1 1 2 1 2 2 1 1 1 2 1 2 2 2 2 1 1 1 2\n [851] 1 1 1 1 1 2 2 1 2 1 1 2 1 1 2 1 1 2 1 1 2 2 2 1 1 1 2 1 2 2 1 2 2 1\n [885] 1 2 1 1 1 1 2 2 2 1 2 2 1 1 2 2 2 1 2 1 1 1 2 1 1 2 2 2 1 2 1 1 1 2\n [919] 1 1 1 1 1 1 1 2 2 1 1 2 1 1 1 1 2 1 2 1 2 1 1 2 1 2 1 2 2 1 2 1 2 2\n [953] 1 2 2 1 2 1 2 1 2 1 2 2 1 1 2 2 1 2 1 2 1 2 2 2 1 2 2 1 1 2 2 1 2 1\n [987] 1 2 1 2 1 1 2 2 1 1 2 2 1 1 1 1 1 1 1 1 1 2 2 2 2 1 2 1 2 1 1 2 1 2\n[1021] 1 1 1 2 2 1 1 1 2 2 1 2 1 2 2 1 1 1 2 2 1 2 1 1 2 1 1 1 2 2 1 1 1 2\n[1055] 2 2 2 2 1 1 1 2 1 2 2 1 2 2 2 1 2 2 2 1 2 2 1 2 1 1 1 1 1 1 1 2 2 1\n[1089] 2 1 1 2 1 2 2 1 2 2 2 2 2 2 2 1 1 2 1 1 2 2 1 2 1 1 2 2 1 1 1 2 2 1\n[1123] 1 2 2 1 1 2 1 2 1 1 1 2 2 2 1 1 2 1 1 1 2 1 1 1 2 2 1 2 1 2 1 2 2 2\n[1157] 1 1 1 2 2 1 1 1 1 2 2 2 2 1 2 1 2 2 2 2 1 1 1 2 1 1 1 2 2 2 2 1 2 1\n[1191] 2 1 1 1 1 1 2 2 2 2 1 1 1 2 1 2 1 2 1 1 1 2 1 1 2 2 2 1 2 2 2 1 2 1\n[1225] 2 1 2 1 1 2 1 1 1 2 1 2 1 1 1 2 2 2 2 1 1 2 2 1 2 2 1 1 2 1 1 2 1 2\n[1259] 2 1 1 2 1 2 1 2 1 1 2 1 2 1 2 2 1 1 2 1 2 1 1 2 1 2 2 2 1 1 1 2 1 1\n[1293] 2 2 2 1 2 1 1 2 2 2 2 1 1 1 2 1 1 1 1 2 2 1 1 2 1 1 2 2 2 1 2 2 2 2\n[1327] 1 2 1 1 2 2 1 2 1 1 2 2 2 1 2 1 1 1 2 1 1 1 2 2 2 1 1 2 1 1 1 1 2 1\n[1361] 1 2 1 2 1 1 2 2 2 1 1 1 1 1 1 1 1 1 2 1 2 1 2 2 2 1 2 2 1 1 2 1 1 2\n[1395] 2 1 1 2 2 2 1 2 1 2 2 1 2 1 2 2 1 1 2 1 1 1 2 1 2 2 2 2 1 2 2 1 2 2\n[1429] 2 1 1 1 2 2 1 1 1 1 1 2 1 2 2 2 2 2 2 2 1 2"
  },
  {
    "objectID": "slides/know-your-data.html#consider-recoding-categorical-variables-1",
    "href": "slides/know-your-data.html#consider-recoding-categorical-variables-1",
    "title": "Getting to know your data",
    "section": "Consider recoding categorical variables",
    "text": "Consider recoding categorical variables\n\nRecode as \"male\"/\"female\":\n\nNCbirths |&gt;\n  mutate(\n    Sex = if_else(Sex == 1, \"male\", \"female\")\n  ) |&gt;\n  pull(Sex)\n\n   [1] \"male\"   \"female\" \"male\"   \"male\"   \"male\"   \"male\"   \"female\"\n   [8] \"female\" \"female\" \"female\" \"male\"   \"female\" \"female\" \"female\"\n  [15] \"female\" \"male\"   \"male\"   \"male\"   \"male\"   \"male\"   \"female\"\n  [22] \"female\" \"female\" \"female\" \"female\" \"male\"   \"female\" \"female\"\n  [29] \"male\"   \"female\" \"male\"   \"female\" \"female\" \"male\"   \"female\"\n  [36] \"female\" \"male\"   \"female\" \"male\"   \"female\" \"female\" \"male\"  \n  [43] \"female\" \"male\"   \"male\"   \"male\"   \"female\" \"male\"   \"male\"  \n  [50] \"female\" \"female\" \"male\"   \"female\" \"female\" \"female\" \"male\"  \n  [57] \"male\"   \"female\" \"male\"   \"female\" \"male\"   \"female\" \"male\"  \n  [64] \"female\" \"female\" \"male\"   \"male\"   \"female\" \"male\"   \"male\"  \n  [71] \"female\" \"female\" \"male\"   \"male\"   \"female\" \"female\" \"male\"  \n  [78] \"male\"   \"female\" \"male\"   \"female\" \"female\" \"female\" \"male\"  \n  [85] \"male\"   \"male\"   \"female\" \"female\" \"female\" \"male\"   \"male\"  \n  [92] \"male\"   \"male\"   \"male\"   \"male\"   \"male\"   \"male\"   \"female\"\n  [99] \"female\" \"male\"   \"male\"   \"male\"   \"male\"   \"female\" \"female\"\n [106] \"male\"   \"female\" \"male\"   \"female\" \"male\"   \"male\"   \"female\"\n [113] \"male\"   \"female\" \"male\"   \"male\"   \"female\" \"female\" \"male\"  \n [120] \"male\"   \"female\" \"male\"   \"female\" \"male\"   \"female\" \"male\"  \n [127] \"male\"   \"female\" \"female\" \"male\"   \"male\"   \"male\"   \"female\"\n [134] \"female\" \"female\" \"male\"   \"male\"   \"male\"   \"male\"   \"female\"\n [141] \"male\"   \"male\"   \"female\" \"male\"   \"male\"   \"male\"   \"male\"  \n [148] \"female\" \"female\" \"male\"   \"male\"   \"male\"   \"male\"   \"female\"\n [155] \"female\" \"female\" \"female\" \"female\" \"female\" \"female\" \"male\"  \n [162] \"female\" \"male\"   \"male\"   \"male\"   \"male\"   \"male\"   \"female\"\n [169] \"female\" \"female\" \"male\"   \"male\"   \"male\"   \"male\"   \"female\"\n [176] \"male\"   \"female\" \"male\"   \"male\"   \"male\"   \"female\" \"female\"\n [183] \"female\" \"female\" \"female\" \"male\"   \"female\" \"male\"   \"female\"\n [190] \"male\"   \"female\" \"female\" \"male\"   \"female\" \"male\"   \"male\"  \n [197] \"male\"   \"male\"   \"female\" \"female\" \"male\"   \"male\"   \"female\"\n [204] \"male\"   \"female\" \"male\"   \"male\"   \"female\" \"male\"   \"female\"\n [211] \"male\"   \"male\"   \"male\"   \"male\"   \"male\"   \"female\" \"male\"  \n [218] \"female\" \"female\" \"male\"   \"female\" \"female\" \"male\"   \"male\"  \n [225] \"female\" \"female\" \"female\" \"female\" \"male\"   \"female\" \"male\"  \n [232] \"female\" \"male\"   \"male\"   \"male\"   \"male\"   \"female\" \"female\"\n [239] \"female\" \"male\"   \"female\" \"female\" \"female\" \"female\" \"female\"\n [246] \"female\" \"male\"   \"male\"   \"female\" \"male\"   \"female\" \"male\"  \n [253] \"female\" \"female\" \"male\"   \"female\" \"female\" \"male\"   \"male\"  \n [260] \"female\" \"female\" \"male\"   \"male\"   \"male\"   \"female\" \"female\"\n [267] \"male\"   \"female\" \"female\" \"male\"   \"female\" \"male\"   \"female\"\n [274] \"male\"   \"male\"   \"male\"   \"male\"   \"male\"   \"female\" \"female\"\n [281] \"male\"   \"male\"   \"male\"   \"male\"   \"female\" \"male\"   \"male\"  \n [288] \"male\"   \"female\" \"female\" \"female\" \"female\" \"male\"   \"female\"\n [295] \"male\"   \"female\" \"female\" \"male\"   \"male\"   \"female\" \"male\"  \n [302] \"male\"   \"male\"   \"male\"   \"male\"   \"female\" \"female\" \"female\"\n [309] \"male\"   \"female\" \"female\" \"male\"   \"male\"   \"male\"   \"male\"  \n [316] \"female\" \"male\"   \"male\"   \"female\" \"male\"   \"female\" \"male\"  \n [323] \"female\" \"male\"   \"female\" \"female\" \"female\" \"male\"   \"female\"\n [330] \"female\" \"female\" \"male\"   \"male\"   \"male\"   \"female\" \"female\"\n [337] \"male\"   \"female\" \"male\"   \"female\" \"male\"   \"female\" \"male\"  \n [344] \"male\"   \"male\"   \"female\" \"male\"   \"male\"   \"male\"   \"female\"\n [351] \"female\" \"male\"   \"female\" \"female\" \"female\" \"female\" \"male\"  \n [358] \"male\"   \"male\"   \"female\" \"male\"   \"female\" \"male\"   \"female\"\n [365] \"male\"   \"female\" \"male\"   \"male\"   \"female\" \"female\" \"female\"\n [372] \"female\" \"male\"   \"female\" \"male\"   \"female\" \"male\"   \"female\"\n [379] \"female\" \"male\"   \"male\"   \"female\" \"female\" \"male\"   \"female\"\n [386] \"female\" \"female\" \"male\"   \"female\" \"male\"   \"male\"   \"female\"\n [393] \"female\" \"male\"   \"female\" \"female\" \"female\" \"male\"   \"female\"\n [400] \"male\"   \"female\" \"female\" \"female\" \"female\" \"female\" \"female\"\n [407] \"female\" \"male\"   \"male\"   \"female\" \"female\" \"male\"   \"male\"  \n [414] \"male\"   \"male\"   \"female\" \"male\"   \"male\"   \"male\"   \"male\"  \n [421] \"male\"   \"male\"   \"male\"   \"female\" \"male\"   \"female\" \"female\"\n [428] \"female\" \"male\"   \"female\" \"male\"   \"female\" \"female\" \"male\"  \n [435] \"male\"   \"female\" \"female\" \"female\" \"male\"   \"male\"   \"female\"\n [442] \"female\" \"male\"   \"female\" \"male\"   \"female\" \"male\"   \"male\"  \n [449] \"male\"   \"female\" \"male\"   \"female\" \"male\"   \"male\"   \"female\"\n [456] \"male\"   \"male\"   \"female\" \"male\"   \"female\" \"female\" \"male\"  \n [463] \"female\" \"female\" \"female\" \"female\" \"female\" \"male\"   \"female\"\n [470] \"male\"   \"male\"   \"female\" \"male\"   \"male\"   \"female\" \"female\"\n [477] \"male\"   \"female\" \"female\" \"female\" \"female\" \"male\"   \"female\"\n [484] \"male\"   \"male\"   \"male\"   \"female\" \"male\"   \"male\"   \"male\"  \n [491] \"male\"   \"female\" \"male\"   \"male\"   \"female\" \"male\"   \"female\"\n [498] \"male\"   \"male\"   \"male\"   \"female\" \"female\" \"female\" \"male\"  \n [505] \"female\" \"female\" \"male\"   \"male\"   \"male\"   \"female\" \"female\"\n [512] \"female\" \"male\"   \"female\" \"male\"   \"female\" \"male\"   \"female\"\n [519] \"female\" \"female\" \"male\"   \"male\"   \"male\"   \"male\"   \"female\"\n [526] \"male\"   \"male\"   \"male\"   \"female\" \"female\" \"male\"   \"male\"  \n [533] \"male\"   \"male\"   \"female\" \"female\" \"male\"   \"male\"   \"male\"  \n [540] \"female\" \"female\" \"male\"   \"female\" \"male\"   \"female\" \"male\"  \n [547] \"male\"   \"male\"   \"female\" \"female\" \"female\" \"male\"   \"male\"  \n [554] \"male\"   \"male\"   \"female\" \"female\" \"male\"   \"female\" \"female\"\n [561] \"male\"   \"female\" \"female\" \"male\"   \"male\"   \"female\" \"female\"\n [568] \"male\"   \"male\"   \"male\"   \"female\" \"female\" \"male\"   \"female\"\n [575] \"male\"   \"male\"   \"male\"   \"female\" \"male\"   \"male\"   \"male\"  \n [582] \"male\"   \"female\" \"female\" \"male\"   \"male\"   \"male\"   \"female\"\n [589] \"female\" \"male\"   \"male\"   \"female\" \"male\"   \"female\" \"female\"\n [596] \"male\"   \"male\"   \"male\"   \"female\" \"male\"   \"male\"   \"female\"\n [603] \"male\"   \"male\"   \"female\" \"female\" \"male\"   \"female\" \"male\"  \n [610] \"male\"   \"male\"   \"male\"   \"female\" \"female\" \"female\" \"male\"  \n [617] \"female\" \"male\"   \"female\" \"male\"   \"male\"   \"female\" \"male\"  \n [624] \"male\"   \"male\"   \"female\" \"female\" \"male\"   \"male\"   \"female\"\n [631] \"male\"   \"female\" \"female\" \"female\" \"female\" \"female\" \"male\"  \n [638] \"male\"   \"female\" \"male\"   \"male\"   \"female\" \"male\"   \"female\"\n [645] \"female\" \"male\"   \"male\"   \"female\" \"female\" \"male\"   \"female\"\n [652] \"female\" \"male\"   \"male\"   \"male\"   \"female\" \"female\" \"female\"\n [659] \"female\" \"female\" \"male\"   \"female\" \"male\"   \"male\"   \"male\"  \n [666] \"female\" \"male\"   \"female\" \"male\"   \"male\"   \"female\" \"female\"\n [673] \"male\"   \"female\" \"male\"   \"male\"   \"female\" \"female\" \"female\"\n [680] \"male\"   \"female\" \"male\"   \"female\" \"female\" \"male\"   \"female\"\n [687] \"female\" \"female\" \"female\" \"female\" \"male\"   \"female\" \"male\"  \n [694] \"male\"   \"male\"   \"female\" \"male\"   \"female\" \"female\" \"male\"  \n [701] \"female\" \"female\" \"male\"   \"female\" \"male\"   \"female\" \"male\"  \n [708] \"female\" \"male\"   \"female\" \"female\" \"female\" \"male\"   \"male\"  \n [715] \"female\" \"female\" \"male\"   \"female\" \"male\"   \"male\"   \"male\"  \n [722] \"male\"   \"female\" \"female\" \"male\"   \"female\" \"male\"   \"male\"  \n [729] \"male\"   \"female\" \"female\" \"female\" \"female\" \"male\"   \"male\"  \n [736] \"male\"   \"male\"   \"male\"   \"male\"   \"female\" \"female\" \"female\"\n [743] \"female\" \"female\" \"female\" \"female\" \"female\" \"female\" \"male\"  \n [750] \"female\" \"male\"   \"male\"   \"male\"   \"male\"   \"female\" \"female\"\n [757] \"female\" \"male\"   \"female\" \"female\" \"female\" \"female\" \"male\"  \n [764] \"female\" \"male\"   \"male\"   \"male\"   \"female\" \"female\" \"male\"  \n [771] \"female\" \"female\" \"male\"   \"male\"   \"female\" \"male\"   \"male\"  \n [778] \"male\"   \"female\" \"female\" \"female\" \"female\" \"female\" \"female\"\n [785] \"female\" \"female\" \"male\"   \"female\" \"female\" \"female\" \"male\"  \n [792] \"male\"   \"female\" \"male\"   \"male\"   \"female\" \"male\"   \"male\"  \n [799] \"female\" \"female\" \"male\"   \"female\" \"male\"   \"male\"   \"female\"\n [806] \"male\"   \"female\" \"male\"   \"female\" \"female\" \"female\" \"female\"\n [813] \"female\" \"female\" \"male\"   \"male\"   \"male\"   \"male\"   \"female\"\n [820] \"male\"   \"male\"   \"female\" \"female\" \"male\"   \"male\"   \"female\"\n [827] \"male\"   \"male\"   \"female\" \"male\"   \"female\" \"male\"   \"male\"  \n [834] \"female\" \"male\"   \"female\" \"female\" \"male\"   \"male\"   \"male\"  \n [841] \"female\" \"male\"   \"female\" \"female\" \"female\" \"female\" \"male\"  \n [848] \"male\"   \"male\"   \"female\" \"male\"   \"male\"   \"male\"   \"male\"  \n [855] \"male\"   \"female\" \"female\" \"male\"   \"female\" \"male\"   \"male\"  \n [862] \"female\" \"male\"   \"male\"   \"female\" \"male\"   \"male\"   \"female\"\n [869] \"male\"   \"male\"   \"female\" \"female\" \"female\" \"male\"   \"male\"  \n [876] \"male\"   \"female\" \"male\"   \"female\" \"female\" \"male\"   \"female\"\n [883] \"female\" \"male\"   \"male\"   \"female\" \"male\"   \"male\"   \"male\"  \n [890] \"male\"   \"female\" \"female\" \"female\" \"male\"   \"female\" \"female\"\n [897] \"male\"   \"male\"   \"female\" \"female\" \"female\" \"male\"   \"female\"\n [904] \"male\"   \"male\"   \"male\"   \"female\" \"male\"   \"male\"   \"female\"\n [911] \"female\" \"female\" \"male\"   \"female\" \"male\"   \"male\"   \"male\"  \n [918] \"female\" \"male\"   \"male\"   \"male\"   \"male\"   \"male\"   \"male\"  \n [925] \"male\"   \"female\" \"female\" \"male\"   \"male\"   \"female\" \"male\"  \n [932] \"male\"   \"male\"   \"male\"   \"female\" \"male\"   \"female\" \"male\"  \n [939] \"female\" \"male\"   \"male\"   \"female\" \"male\"   \"female\" \"male\"  \n [946] \"female\" \"female\" \"male\"   \"female\" \"male\"   \"female\" \"female\"\n [953] \"male\"   \"female\" \"female\" \"male\"   \"female\" \"male\"   \"female\"\n [960] \"male\"   \"female\" \"male\"   \"female\" \"female\" \"male\"   \"male\"  \n [967] \"female\" \"female\" \"male\"   \"female\" \"male\"   \"female\" \"male\"  \n [974] \"female\" \"female\" \"female\" \"male\"   \"female\" \"female\" \"male\"  \n [981] \"male\"   \"female\" \"female\" \"male\"   \"female\" \"male\"   \"male\"  \n [988] \"female\" \"male\"   \"female\" \"male\"   \"male\"   \"female\" \"female\"\n [995] \"male\"   \"male\"   \"female\" \"female\" \"male\"   \"male\"   \"male\"  \n[1002] \"male\"   \"male\"   \"male\"   \"male\"   \"male\"   \"male\"   \"female\"\n[1009] \"female\" \"female\" \"female\" \"male\"   \"female\" \"male\"   \"female\"\n[1016] \"male\"   \"male\"   \"female\" \"male\"   \"female\" \"male\"   \"male\"  \n[1023] \"male\"   \"female\" \"female\" \"male\"   \"male\"   \"male\"   \"female\"\n[1030] \"female\" \"male\"   \"female\" \"male\"   \"female\" \"female\" \"male\"  \n[1037] \"male\"   \"male\"   \"female\" \"female\" \"male\"   \"female\" \"male\"  \n[1044] \"male\"   \"female\" \"male\"   \"male\"   \"male\"   \"female\" \"female\"\n[1051] \"male\"   \"male\"   \"male\"   \"female\" \"female\" \"female\" \"female\"\n[1058] \"female\" \"male\"   \"male\"   \"male\"   \"female\" \"male\"   \"female\"\n[1065] \"female\" \"male\"   \"female\" \"female\" \"female\" \"male\"   \"female\"\n[1072] \"female\" \"female\" \"male\"   \"female\" \"female\" \"male\"   \"female\"\n[1079] \"male\"   \"male\"   \"male\"   \"male\"   \"male\"   \"male\"   \"male\"  \n[1086] \"female\" \"female\" \"male\"   \"female\" \"male\"   \"male\"   \"female\"\n[1093] \"male\"   \"female\" \"female\" \"male\"   \"female\" \"female\" \"female\"\n[1100] \"female\" \"female\" \"female\" \"female\" \"male\"   \"male\"   \"female\"\n[1107] \"male\"   \"male\"   \"female\" \"female\" \"male\"   \"female\" \"male\"  \n[1114] \"male\"   \"female\" \"female\" \"male\"   \"male\"   \"male\"   \"female\"\n[1121] \"female\" \"male\"   \"male\"   \"female\" \"female\" \"male\"   \"male\"  \n[1128] \"female\" \"male\"   \"female\" \"male\"   \"male\"   \"male\"   \"female\"\n[1135] \"female\" \"female\" \"male\"   \"male\"   \"female\" \"male\"   \"male\"  \n[1142] \"male\"   \"female\" \"male\"   \"male\"   \"male\"   \"female\" \"female\"\n[1149] \"male\"   \"female\" \"male\"   \"female\" \"male\"   \"female\" \"female\"\n[1156] \"female\" \"male\"   \"male\"   \"male\"   \"female\" \"female\" \"male\"  \n[1163] \"male\"   \"male\"   \"male\"   \"female\" \"female\" \"female\" \"female\"\n[1170] \"male\"   \"female\" \"male\"   \"female\" \"female\" \"female\" \"female\"\n[1177] \"male\"   \"male\"   \"male\"   \"female\" \"male\"   \"male\"   \"male\"  \n[1184] \"female\" \"female\" \"female\" \"female\" \"male\"   \"female\" \"male\"  \n[1191] \"female\" \"male\"   \"male\"   \"male\"   \"male\"   \"male\"   \"female\"\n[1198] \"female\" \"female\" \"female\" \"male\"   \"male\"   \"male\"   \"female\"\n[1205] \"male\"   \"female\" \"male\"   \"female\" \"male\"   \"male\"   \"male\"  \n[1212] \"female\" \"male\"   \"male\"   \"female\" \"female\" \"female\" \"male\"  \n[1219] \"female\" \"female\" \"female\" \"male\"   \"female\" \"male\"   \"female\"\n[1226] \"male\"   \"female\" \"male\"   \"male\"   \"female\" \"male\"   \"male\"  \n[1233] \"male\"   \"female\" \"male\"   \"female\" \"male\"   \"male\"   \"male\"  \n[1240] \"female\" \"female\" \"female\" \"female\" \"male\"   \"male\"   \"female\"\n[1247] \"female\" \"male\"   \"female\" \"female\" \"male\"   \"male\"   \"female\"\n[1254] \"male\"   \"male\"   \"female\" \"male\"   \"female\" \"female\" \"male\"  \n[1261] \"male\"   \"female\" \"male\"   \"female\" \"male\"   \"female\" \"male\"  \n[1268] \"male\"   \"female\" \"male\"   \"female\" \"male\"   \"female\" \"female\"\n[1275] \"male\"   \"male\"   \"female\" \"male\"   \"female\" \"male\"   \"male\"  \n[1282] \"female\" \"male\"   \"female\" \"female\" \"female\" \"male\"   \"male\"  \n[1289] \"male\"   \"female\" \"male\"   \"male\"   \"female\" \"female\" \"female\"\n[1296] \"male\"   \"female\" \"male\"   \"male\"   \"female\" \"female\" \"female\"\n[1303] \"female\" \"male\"   \"male\"   \"male\"   \"female\" \"male\"   \"male\"  \n[1310] \"male\"   \"male\"   \"female\" \"female\" \"male\"   \"male\"   \"female\"\n[1317] \"male\"   \"male\"   \"female\" \"female\" \"female\" \"male\"   \"female\"\n[1324] \"female\" \"female\" \"female\" \"male\"   \"female\" \"male\"   \"male\"  \n[1331] \"female\" \"female\" \"male\"   \"female\" \"male\"   \"male\"   \"female\"\n[1338] \"female\" \"female\" \"male\"   \"female\" \"male\"   \"male\"   \"male\"  \n[1345] \"female\" \"male\"   \"male\"   \"male\"   \"female\" \"female\" \"female\"\n[1352] \"male\"   \"male\"   \"female\" \"male\"   \"male\"   \"male\"   \"male\"  \n[1359] \"female\" \"male\"   \"male\"   \"female\" \"male\"   \"female\" \"male\"  \n[1366] \"male\"   \"female\" \"female\" \"female\" \"male\"   \"male\"   \"male\"  \n[1373] \"male\"   \"male\"   \"male\"   \"male\"   \"male\"   \"male\"   \"female\"\n[1380] \"male\"   \"female\" \"male\"   \"female\" \"female\" \"female\" \"male\"  \n[1387] \"female\" \"female\" \"male\"   \"male\"   \"female\" \"male\"   \"male\"  \n[1394] \"female\" \"female\" \"male\"   \"male\"   \"female\" \"female\" \"female\"\n[1401] \"male\"   \"female\" \"male\"   \"female\" \"female\" \"male\"   \"female\"\n[1408] \"male\"   \"female\" \"female\" \"male\"   \"male\"   \"female\" \"male\"  \n[1415] \"male\"   \"male\"   \"female\" \"male\"   \"female\" \"female\" \"female\"\n[1422] \"female\" \"male\"   \"female\" \"female\" \"male\"   \"female\" \"female\"\n[1429] \"female\" \"male\"   \"male\"   \"male\"   \"female\" \"female\" \"male\"  \n[1436] \"male\"   \"male\"   \"male\"   \"male\"   \"female\" \"male\"   \"female\"\n[1443] \"female\" \"female\" \"female\" \"female\" \"female\" \"female\" \"male\"  \n[1450] \"female\""
  },
  {
    "objectID": "slides/know-your-data.html#recode-multiple-categories-with-case_when",
    "href": "slides/know-your-data.html#recode-multiple-categories-with-case_when",
    "title": "Getting to know your data",
    "section": "Recode multiple categories with case_when()",
    "text": "Recode multiple categories with case_when()\n\nThe mother’s race is encoded as integers from 1 through 8:\n\nNCbirths |&gt;\n  pull(RaceMom)\n\n   [1] 1 1 1 1 1 1 1 1 1 1 1 1 1 5 1 5 1 1 1 5 1 1 5 1 5 1 1 1 5 1 1 1 5 1\n  [35] 1 1 5 5 5 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 5 1 1 1 1 1 1 1 5 1 5 1 1 5\n  [69] 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 5 1 5 1 5 1 1 1 1 1 1 1 1 1 1 1 5 1 1\n [103] 1 5 1 1 1 1 1 1 1 1 1 1 1 5 1 5 1 1 1 1 1 1 1 5 1 1 5 1 1 1 1 1 5 1\n [137] 1 1 1 1 1 1 5 1 1 5 5 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 5 1 5 1 5 5 1 1\n [171] 1 5 1 1 1 5 5 1 5 1 1 1 1 1 1 1 1 1 1 1 5 1 1 5 1 1 1 1 1 1 1 1 1 1\n [205] 1 1 1 5 1 1 1 1 1 1 1 1 1 5 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1\n [239] 5 1 1 1 1 1 5 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 5 5 1 1 1 1 5 1 1 1 1\n [273] 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1\n [307] 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 5 1 1 1 1 5 1 1 5 1 1 1 1 1 1 1 1\n [341] 1 1 1 1 5 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 5 1 1 1 1 1 1 1\n [375] 1 1 5 1 1 1 1 1 1 1 1 5 1 1 1 1 1 1 5 1 1 1 1 5 1 5 1 1 1 5 1 1 1 1\n [409] 1 1 1 1 1 5 1 1 1 1 1 5 1 1 5 1 1 1 1 5 1 1 5 1 1 1 1 1 1 1 1 1 1 1\n [443] 1 1 1 5 1 5 1 1 1 1 1 1 1 1 1 1 5 1 1 5 1 1 1 5 1 1 1 1 5 1 1 5 1 1\n [477] 1 1 1 5 1 1 1 1 1 1 1 5 1 1 1 1 1 1 5 1 1 1 1 5 1 1 1 1 1 1 1 1 1 1\n [511] 1 5 1 1 1 5 1 1 1 5 1 1 1 1 1 1 1 1 1 1 1 1 1 5 1 1 1 1 1 1 1 1 1 1\n [545] 1 1 1 1 1 1 1 1 1 5 1 5 1 1 1 1 1 1 1 1 1 1 5 1 1 1 1 1 1 1 1 1 1 1\n [579] 1 1 5 5 1 1 1 1 1 5 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 5 5 5 5 1 5 1\n [613] 1 1 5 5 1 5 1 1 1 1 1 5 1 1 1 1 1 1 1 1 1 1 1 1 1 5 1 1 1 1 1 1 1 1\n [647] 1 1 1 1 1 1 5 1 1 1 1 1 1 1 1 5 1 5 5 1 5 1 1 1 1 1 1 1 1 5 1 1 1 1\n [681] 1 5 1 5 5 1 5 1 1 5 5 1 1 1 1 5 5 5 1 1 1 5 1 5 1 1 1 1 1 5 1 5 1 5\n [715] 1 1 1 5 1 1 1 1 1 1 1 1 5 1 5 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 5 5\n [749] 1 1 1 1 1 1 1 1 1 1 1 1 1 5 1 5 1 1 1 1 1 1 1 1 5 1 1 5 1 1 1 5 1 1\n [783] 1 1 1 1 5 1 5 1 5 1 1 1 1 1 1 1 1 1 5 5 1 1 1 1 1 1 1 1 1 1 1 1 1 1\n [817] 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 5 1 1 1 1 1 1 1 1 5 1 1\n [851] 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 5 1 1 1 1 5 1 1 1 1 1 1 1 1 1 1 1 1\n [885] 1 1 5 5 1 1 1 1 5 1 5 1 1 5 1 5 1 1 1 1 1 1 1 1 5 1 1 1 1 1 5 1 1 1\n [919] 1 1 1 5 1 1 1 5 1 1 5 1 1 1 1 1 1 1 1 1 5 1 1 1 1 5 1 1 5 5 1 5 1 1\n [953] 5 1 5 1 5 5 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 5 5 1 1 1 5 5 1\n [987] 1 5 1 1 1 1 1 1 1 1 1 1 1 5 1 5 1 1 1 1 5 5 5 1 1 1 1 1 1 1 1 1 1 1\n[1021] 1 5 1 1 1 5 1 1 1 1 1 1 1 1 1 1 5 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 5\n[1055] 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2\n[1089] 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2\n[1123] 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2\n[1157] 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2\n[1191] 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2\n[1225] 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2\n[1259] 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2\n[1293] 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2\n[1327] 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2\n[1361] 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2\n[1395] 2 2 2 2 2 2 2 2 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 4 4 7 8\n[1429] 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8"
  },
  {
    "objectID": "slides/know-your-data.html#recode-multiple-categories-with-case_when-1",
    "href": "slides/know-your-data.html#recode-multiple-categories-with-case_when-1",
    "title": "Getting to know your data",
    "section": "Recode multiple categories with case_when()",
    "text": "Recode multiple categories with case_when()\n\nThe mother’s race is encoded as integers from 1 through 8:\n\nNCbirths |&gt;\n  pull(RaceMom) |&gt;\n  unique() # list all the unique values (ordered by first occurrence)\n\n[1] 1 5 2 3 4 7 8"
  },
  {
    "objectID": "slides/know-your-data.html#recode-multiple-categories-with-case_when-2",
    "href": "slides/know-your-data.html#recode-multiple-categories-with-case_when-2",
    "title": "Getting to know your data",
    "section": "Recode multiple categories with case_when()",
    "text": "Recode multiple categories with case_when()\n\nWe use case_when() to recode multiple values all at once:\n\n\n\nNCbirths |&gt;\n  mutate(\n    RaceMom = case_when(\n      RaceMom == 1 ~ \"white\",\n      RaceMom == 2 ~ \"black\",\n      RaceMom == 3 ~ \"American Indian\",\n      RaceMom == 4 ~ \"Chinese\",\n      RaceMom == 5 ~ \"Japanese\",\n      RaceMom == 6 ~ \"Hawaiian\",\n      RaceMom == 7 ~ \"Filipino\",\n      RaceMom == 8 ~ \n        \"Other Asian or Pacific Islander\",\n      TRUE ~ NA # should never reach\n    )\n  )"
  },
  {
    "objectID": "slides/know-your-data.html#recode-multiple-categories-with-case_when-3",
    "href": "slides/know-your-data.html#recode-multiple-categories-with-case_when-3",
    "title": "Getting to know your data",
    "section": "Recode multiple categories with case_when()",
    "text": "Recode multiple categories with case_when()\n\nWe use case_when() to recode multiple values all at once:\n\n\n\nNCbirths |&gt;\n  mutate(\n    RaceMom = case_when(\n      RaceMom == 1 ~ \"white\",\n      RaceMom == 2 ~ \"black\",\n      RaceMom == 3 ~ \"American Indian\",\n      RaceMom == 4 ~ \"Chinese\",\n      RaceMom == 5 ~ \"Japanese\",\n      RaceMom == 6 ~ \"Hawaiian\",\n      RaceMom == 7 ~ \"Filipino\",\n      RaceMom == 8 ~ \n        \"Other Asian or Pacific Islander\",\n      TRUE ~ NA # should never reach\n    )\n  ) |&gt;\n  pull(RaceMom)\n\n\n\n   [1] \"white\"                           \"white\"                          \n   [3] \"white\"                           \"white\"                          \n   [5] \"white\"                           \"white\"                          \n   [7] \"white\"                           \"white\"                          \n   [9] \"white\"                           \"white\"                          \n  [11] \"white\"                           \"white\"                          \n  [13] \"white\"                           \"Japanese\"                       \n  [15] \"white\"                           \"Japanese\"                       \n  [17] \"white\"                           \"white\"                          \n  [19] \"white\"                           \"Japanese\"                       \n  [21] \"white\"                           \"white\"                          \n  [23] \"Japanese\"                        \"white\"                          \n  [25] \"Japanese\"                        \"white\"                          \n  [27] \"white\"                           \"white\"                          \n  [29] \"Japanese\"                        \"white\"                          \n  [31] \"white\"                           \"white\"                          \n  [33] \"Japanese\"                        \"white\"                          \n  [35] \"white\"                           \"white\"                          \n  [37] \"Japanese\"                        \"Japanese\"                       \n  [39] \"Japanese\"                        \"white\"                          \n  [41] \"white\"                           \"white\"                          \n  [43] \"white\"                           \"white\"                          \n  [45] \"white\"                           \"white\"                          \n  [47] \"white\"                           \"white\"                          \n  [49] \"white\"                           \"white\"                          \n  [51] \"white\"                           \"white\"                          \n  [53] \"white\"                           \"white\"                          \n  [55] \"Japanese\"                        \"white\"                          \n  [57] \"white\"                           \"white\"                          \n  [59] \"white\"                           \"white\"                          \n  [61] \"white\"                           \"white\"                          \n  [63] \"Japanese\"                        \"white\"                          \n  [65] \"Japanese\"                        \"white\"                          \n  [67] \"white\"                           \"Japanese\"                       \n  [69] \"white\"                           \"white\"                          \n  [71] \"white\"                           \"white\"                          \n  [73] \"white\"                           \"white\"                          \n  [75] \"white\"                           \"white\"                          \n  [77] \"white\"                           \"white\"                          \n  [79] \"white\"                           \"white\"                          \n  [81] \"white\"                           \"white\"                          \n  [83] \"white\"                           \"Japanese\"                       \n  [85] \"white\"                           \"Japanese\"                       \n  [87] \"white\"                           \"Japanese\"                       \n  [89] \"white\"                           \"white\"                          \n  [91] \"white\"                           \"white\"                          \n  [93] \"white\"                           \"white\"                          \n  [95] \"white\"                           \"white\"                          \n  [97] \"white\"                           \"white\"                          \n  [99] \"white\"                           \"Japanese\"                       \n [101] \"white\"                           \"white\"                          \n [103] \"white\"                           \"Japanese\"                       \n [105] \"white\"                           \"white\"                          \n [107] \"white\"                           \"white\"                          \n [109] \"white\"                           \"white\"                          \n [111] \"white\"                           \"white\"                          \n [113] \"white\"                           \"white\"                          \n [115] \"white\"                           \"Japanese\"                       \n [117] \"white\"                           \"Japanese\"                       \n [119] \"white\"                           \"white\"                          \n [121] \"white\"                           \"white\"                          \n [123] \"white\"                           \"white\"                          \n [125] \"white\"                           \"Japanese\"                       \n [127] \"white\"                           \"white\"                          \n [129] \"Japanese\"                        \"white\"                          \n [131] \"white\"                           \"white\"                          \n [133] \"white\"                           \"white\"                          \n [135] \"Japanese\"                        \"white\"                          \n [137] \"white\"                           \"white\"                          \n [139] \"white\"                           \"white\"                          \n [141] \"white\"                           \"white\"                          \n [143] \"Japanese\"                        \"white\"                          \n [145] \"white\"                           \"Japanese\"                       \n [147] \"Japanese\"                        \"white\"                          \n [149] \"white\"                           \"white\"                          \n [151] \"white\"                           \"white\"                          \n [153] \"white\"                           \"white\"                          \n [155] \"white\"                           \"white\"                          \n [157] \"white\"                           \"white\"                          \n [159] \"white\"                           \"white\"                          \n [161] \"white\"                           \"white\"                          \n [163] \"Japanese\"                        \"white\"                          \n [165] \"Japanese\"                        \"white\"                          \n [167] \"Japanese\"                        \"Japanese\"                       \n [169] \"white\"                           \"white\"                          \n [171] \"white\"                           \"Japanese\"                       \n [173] \"white\"                           \"white\"                          \n [175] \"white\"                           \"Japanese\"                       \n [177] \"Japanese\"                        \"white\"                          \n [179] \"Japanese\"                        \"white\"                          \n [181] \"white\"                           \"white\"                          \n [183] \"white\"                           \"white\"                          \n [185] \"white\"                           \"white\"                          \n [187] \"white\"                           \"white\"                          \n [189] \"white\"                           \"white\"                          \n [191] \"Japanese\"                        \"white\"                          \n [193] \"white\"                           \"Japanese\"                       \n [195] \"white\"                           \"white\"                          \n [197] \"white\"                           \"white\"                          \n [199] \"white\"                           \"white\"                          \n [201] \"white\"                           \"white\"                          \n [203] \"white\"                           \"white\"                          \n [205] \"white\"                           \"white\"                          \n [207] \"white\"                           \"Japanese\"                       \n [209] \"white\"                           \"white\"                          \n [211] \"white\"                           \"white\"                          \n [213] \"white\"                           \"white\"                          \n [215] \"white\"                           \"white\"                          \n [217] \"white\"                           \"Japanese\"                       \n [219] \"white\"                           \"white\"                          \n [221] \"white\"                           \"white\"                          \n [223] \"white\"                           \"white\"                          \n [225] \"white\"                           \"white\"                          \n [227] \"white\"                           \"white\"                          \n [229] \"white\"                           \"white\"                          \n [231] \"white\"                           \"white\"                          \n [233] \"white\"                           \"white\"                          \n [235] \"white\"                           \"white\"                          \n [237] \"white\"                           \"white\"                          \n [239] \"Japanese\"                        \"white\"                          \n [241] \"white\"                           \"white\"                          \n [243] \"white\"                           \"white\"                          \n [245] \"Japanese\"                        \"white\"                          \n [247] \"white\"                           \"white\"                          \n [249] \"white\"                           \"white\"                          \n [251] \"white\"                           \"white\"                          \n [253] \"white\"                           \"white\"                          \n [255] \"white\"                           \"white\"                          \n [257] \"white\"                           \"white\"                          \n [259] \"white\"                           \"white\"                          \n [261] \"white\"                           \"Japanese\"                       \n [263] \"Japanese\"                        \"white\"                          \n [265] \"white\"                           \"white\"                          \n [267] \"white\"                           \"Japanese\"                       \n [269] \"white\"                           \"white\"                          \n [271] \"white\"                           \"white\"                          \n [273] \"white\"                           \"white\"                          \n [275] \"white\"                           \"white\"                          \n [277] \"white\"                           \"white\"                          \n [279] \"white\"                           \"white\"                          \n [281] \"white\"                           \"white\"                          \n [283] \"white\"                           \"white\"                          \n [285] \"white\"                           \"white\"                          \n [287] \"white\"                           \"white\"                          \n [289] \"white\"                           \"white\"                          \n [291] \"white\"                           \"white\"                          \n [293] \"white\"                           \"white\"                          \n [295] \"white\"                           \"white\"                          \n [297] \"white\"                           \"white\"                          \n [299] \"white\"                           \"white\"                          \n [301] \"white\"                           \"white\"                          \n [303] \"white\"                           \"white\"                          \n [305] \"white\"                           \"white\"                          \n [307] \"white\"                           \"white\"                          \n [309] \"white\"                           \"white\"                          \n [311] \"white\"                           \"white\"                          \n [313] \"white\"                           \"white\"                          \n [315] \"white\"                           \"white\"                          \n [317] \"white\"                           \"white\"                          \n [319] \"white\"                           \"white\"                          \n [321] \"white\"                           \"white\"                          \n [323] \"white\"                           \"Japanese\"                       \n [325] \"white\"                           \"white\"                          \n [327] \"white\"                           \"white\"                          \n [329] \"Japanese\"                        \"white\"                          \n [331] \"white\"                           \"Japanese\"                       \n [333] \"white\"                           \"white\"                          \n [335] \"white\"                           \"white\"                          \n [337] \"white\"                           \"white\"                          \n [339] \"white\"                           \"white\"                          \n [341] \"white\"                           \"white\"                          \n [343] \"white\"                           \"white\"                          \n [345] \"Japanese\"                        \"white\"                          \n [347] \"white\"                           \"white\"                          \n [349] \"white\"                           \"white\"                          \n [351] \"white\"                           \"white\"                          \n [353] \"white\"                           \"white\"                          \n [355] \"white\"                           \"white\"                          \n [357] \"white\"                           \"white\"                          \n [359] \"white\"                           \"white\"                          \n [361] \"white\"                           \"white\"                          \n [363] \"white\"                           \"white\"                          \n [365] \"white\"                           \"white\"                          \n [367] \"Japanese\"                        \"white\"                          \n [369] \"white\"                           \"white\"                          \n [371] \"white\"                           \"white\"                          \n [373] \"white\"                           \"white\"                          \n [375] \"white\"                           \"white\"                          \n [377] \"Japanese\"                        \"white\"                          \n [379] \"white\"                           \"white\"                          \n [381] \"white\"                           \"white\"                          \n [383] \"white\"                           \"white\"                          \n [385] \"white\"                           \"Japanese\"                       \n [387] \"white\"                           \"white\"                          \n [389] \"white\"                           \"white\"                          \n [391] \"white\"                           \"white\"                          \n [393] \"Japanese\"                        \"white\"                          \n [395] \"white\"                           \"white\"                          \n [397] \"white\"                           \"Japanese\"                       \n [399] \"white\"                           \"Japanese\"                       \n [401] \"white\"                           \"white\"                          \n [403] \"white\"                           \"Japanese\"                       \n [405] \"white\"                           \"white\"                          \n [407] \"white\"                           \"white\"                          \n [409] \"white\"                           \"white\"                          \n [411] \"white\"                           \"white\"                          \n [413] \"white\"                           \"Japanese\"                       \n [415] \"white\"                           \"white\"                          \n [417] \"white\"                           \"white\"                          \n [419] \"white\"                           \"Japanese\"                       \n [421] \"white\"                           \"white\"                          \n [423] \"Japanese\"                        \"white\"                          \n [425] \"white\"                           \"white\"                          \n [427] \"white\"                           \"Japanese\"                       \n [429] \"white\"                           \"white\"                          \n [431] \"Japanese\"                        \"white\"                          \n [433] \"white\"                           \"white\"                          \n [435] \"white\"                           \"white\"                          \n [437] \"white\"                           \"white\"                          \n [439] \"white\"                           \"white\"                          \n [441] \"white\"                           \"white\"                          \n [443] \"white\"                           \"white\"                          \n [445] \"white\"                           \"Japanese\"                       \n [447] \"white\"                           \"Japanese\"                       \n [449] \"white\"                           \"white\"                          \n [451] \"white\"                           \"white\"                          \n [453] \"white\"                           \"white\"                          \n [455] \"white\"                           \"white\"                          \n [457] \"white\"                           \"white\"                          \n [459] \"Japanese\"                        \"white\"                          \n [461] \"white\"                           \"Japanese\"                       \n [463] \"white\"                           \"white\"                          \n [465] \"white\"                           \"Japanese\"                       \n [467] \"white\"                           \"white\"                          \n [469] \"white\"                           \"white\"                          \n [471] \"Japanese\"                        \"white\"                          \n [473] \"white\"                           \"Japanese\"                       \n [475] \"white\"                           \"white\"                          \n [477] \"white\"                           \"white\"                          \n [479] \"white\"                           \"Japanese\"                       \n [481] \"white\"                           \"white\"                          \n [483] \"white\"                           \"white\"                          \n [485] \"white\"                           \"white\"                          \n [487] \"white\"                           \"Japanese\"                       \n [489] \"white\"                           \"white\"                          \n [491] \"white\"                           \"white\"                          \n [493] \"white\"                           \"white\"                          \n [495] \"Japanese\"                        \"white\"                          \n [497] \"white\"                           \"white\"                          \n [499] \"white\"                           \"Japanese\"                       \n [501] \"white\"                           \"white\"                          \n [503] \"white\"                           \"white\"                          \n [505] \"white\"                           \"white\"                          \n [507] \"white\"                           \"white\"                          \n [509] \"white\"                           \"white\"                          \n [511] \"white\"                           \"Japanese\"                       \n [513] \"white\"                           \"white\"                          \n [515] \"white\"                           \"Japanese\"                       \n [517] \"white\"                           \"white\"                          \n [519] \"white\"                           \"Japanese\"                       \n [521] \"white\"                           \"white\"                          \n [523] \"white\"                           \"white\"                          \n [525] \"white\"                           \"white\"                          \n [527] \"white\"                           \"white\"                          \n [529] \"white\"                           \"white\"                          \n [531] \"white\"                           \"white\"                          \n [533] \"white\"                           \"Japanese\"                       \n [535] \"white\"                           \"white\"                          \n [537] \"white\"                           \"white\"                          \n [539] \"white\"                           \"white\"                          \n [541] \"white\"                           \"white\"                          \n [543] \"white\"                           \"white\"                          \n [545] \"white\"                           \"white\"                          \n [547] \"white\"                           \"white\"                          \n [549] \"white\"                           \"white\"                          \n [551] \"white\"                           \"white\"                          \n [553] \"white\"                           \"Japanese\"                       \n [555] \"white\"                           \"Japanese\"                       \n [557] \"white\"                           \"white\"                          \n [559] \"white\"                           \"white\"                          \n [561] \"white\"                           \"white\"                          \n [563] \"white\"                           \"white\"                          \n [565] \"white\"                           \"white\"                          \n [567] \"Japanese\"                        \"white\"                          \n [569] \"white\"                           \"white\"                          \n [571] \"white\"                           \"white\"                          \n [573] \"white\"                           \"white\"                          \n [575] \"white\"                           \"white\"                          \n [577] \"white\"                           \"white\"                          \n [579] \"white\"                           \"white\"                          \n [581] \"Japanese\"                        \"Japanese\"                       \n [583] \"white\"                           \"white\"                          \n [585] \"white\"                           \"white\"                          \n [587] \"white\"                           \"Japanese\"                       \n [589] \"white\"                           \"white\"                          \n [591] \"white\"                           \"white\"                          \n [593] \"white\"                           \"white\"                          \n [595] \"white\"                           \"white\"                          \n [597] \"white\"                           \"white\"                          \n [599] \"white\"                           \"white\"                          \n [601] \"white\"                           \"white\"                          \n [603] \"white\"                           \"white\"                          \n [605] \"white\"                           \"Japanese\"                       \n [607] \"Japanese\"                        \"Japanese\"                       \n [609] \"Japanese\"                        \"white\"                          \n [611] \"Japanese\"                        \"white\"                          \n [613] \"white\"                           \"white\"                          \n [615] \"Japanese\"                        \"Japanese\"                       \n [617] \"white\"                           \"Japanese\"                       \n [619] \"white\"                           \"white\"                          \n [621] \"white\"                           \"white\"                          \n [623] \"white\"                           \"Japanese\"                       \n [625] \"white\"                           \"white\"                          \n [627] \"white\"                           \"white\"                          \n [629] \"white\"                           \"white\"                          \n [631] \"white\"                           \"white\"                          \n [633] \"white\"                           \"white\"                          \n [635] \"white\"                           \"white\"                          \n [637] \"white\"                           \"Japanese\"                       \n [639] \"white\"                           \"white\"                          \n [641] \"white\"                           \"white\"                          \n [643] \"white\"                           \"white\"                          \n [645] \"white\"                           \"white\"                          \n [647] \"white\"                           \"white\"                          \n [649] \"white\"                           \"white\"                          \n [651] \"white\"                           \"white\"                          \n [653] \"Japanese\"                        \"white\"                          \n [655] \"white\"                           \"white\"                          \n [657] \"white\"                           \"white\"                          \n [659] \"white\"                           \"white\"                          \n [661] \"white\"                           \"Japanese\"                       \n [663] \"white\"                           \"Japanese\"                       \n [665] \"Japanese\"                        \"white\"                          \n [667] \"Japanese\"                        \"white\"                          \n [669] \"white\"                           \"white\"                          \n [671] \"white\"                           \"white\"                          \n [673] \"white\"                           \"white\"                          \n [675] \"white\"                           \"Japanese\"                       \n [677] \"white\"                           \"white\"                          \n [679] \"white\"                           \"white\"                          \n [681] \"white\"                           \"Japanese\"                       \n [683] \"white\"                           \"Japanese\"                       \n [685] \"Japanese\"                        \"white\"                          \n [687] \"Japanese\"                        \"white\"                          \n [689] \"white\"                           \"Japanese\"                       \n [691] \"Japanese\"                        \"white\"                          \n [693] \"white\"                           \"white\"                          \n [695] \"white\"                           \"Japanese\"                       \n [697] \"Japanese\"                        \"Japanese\"                       \n [699] \"white\"                           \"white\"                          \n [701] \"white\"                           \"Japanese\"                       \n [703] \"white\"                           \"Japanese\"                       \n [705] \"white\"                           \"white\"                          \n [707] \"white\"                           \"white\"                          \n [709] \"white\"                           \"Japanese\"                       \n [711] \"white\"                           \"Japanese\"                       \n [713] \"white\"                           \"Japanese\"                       \n [715] \"white\"                           \"white\"                          \n [717] \"white\"                           \"Japanese\"                       \n [719] \"white\"                           \"white\"                          \n [721] \"white\"                           \"white\"                          \n [723] \"white\"                           \"white\"                          \n [725] \"white\"                           \"white\"                          \n [727] \"Japanese\"                        \"white\"                          \n [729] \"Japanese\"                        \"white\"                          \n [731] \"white\"                           \"white\"                          \n [733] \"white\"                           \"white\"                          \n [735] \"white\"                           \"white\"                          \n [737] \"white\"                           \"white\"                          \n [739] \"white\"                           \"white\"                          \n [741] \"white\"                           \"white\"                          \n [743] \"white\"                           \"white\"                          \n [745] \"white\"                           \"white\"                          \n [747] \"Japanese\"                        \"Japanese\"                       \n [749] \"white\"                           \"white\"                          \n [751] \"white\"                           \"white\"                          \n [753] \"white\"                           \"white\"                          \n [755] \"white\"                           \"white\"                          \n [757] \"white\"                           \"white\"                          \n [759] \"white\"                           \"white\"                          \n [761] \"white\"                           \"Japanese\"                       \n [763] \"white\"                           \"Japanese\"                       \n [765] \"white\"                           \"white\"                          \n [767] \"white\"                           \"white\"                          \n [769] \"white\"                           \"white\"                          \n [771] \"white\"                           \"white\"                          \n [773] \"Japanese\"                        \"white\"                          \n [775] \"white\"                           \"Japanese\"                       \n [777] \"white\"                           \"white\"                          \n [779] \"white\"                           \"Japanese\"                       \n [781] \"white\"                           \"white\"                          \n [783] \"white\"                           \"white\"                          \n [785] \"white\"                           \"white\"                          \n [787] \"Japanese\"                        \"white\"                          \n [789] \"Japanese\"                        \"white\"                          \n [791] \"Japanese\"                        \"white\"                          \n [793] \"white\"                           \"white\"                          \n [795] \"white\"                           \"white\"                          \n [797] \"white\"                           \"white\"                          \n [799] \"white\"                           \"white\"                          \n [801] \"Japanese\"                        \"Japanese\"                       \n [803] \"white\"                           \"white\"                          \n [805] \"white\"                           \"white\"                          \n [807] \"white\"                           \"white\"                          \n [809] \"white\"                           \"white\"                          \n [811] \"white\"                           \"white\"                          \n [813] \"white\"                           \"white\"                          \n [815] \"white\"                           \"white\"                          \n [817] \"white\"                           \"white\"                          \n [819] \"white\"                           \"white\"                          \n [821] \"white\"                           \"white\"                          \n [823] \"white\"                           \"white\"                          \n [825] \"white\"                           \"white\"                          \n [827] \"white\"                           \"white\"                          \n [829] \"white\"                           \"white\"                          \n [831] \"white\"                           \"white\"                          \n [833] \"white\"                           \"white\"                          \n [835] \"white\"                           \"white\"                          \n [837] \"white\"                           \"white\"                          \n [839] \"Japanese\"                        \"white\"                          \n [841] \"white\"                           \"white\"                          \n [843] \"white\"                           \"white\"                          \n [845] \"white\"                           \"white\"                          \n [847] \"white\"                           \"Japanese\"                       \n [849] \"white\"                           \"white\"                          \n [851] \"white\"                           \"white\"                          \n [853] \"white\"                           \"white\"                          \n [855] \"white\"                           \"white\"                          \n [857] \"white\"                           \"white\"                          \n [859] \"white\"                           \"white\"                          \n [861] \"white\"                           \"white\"                          \n [863] \"white\"                           \"white\"                          \n [865] \"white\"                           \"white\"                          \n [867] \"Japanese\"                        \"white\"                          \n [869] \"white\"                           \"white\"                          \n [871] \"white\"                           \"Japanese\"                       \n [873] \"white\"                           \"white\"                          \n [875] \"white\"                           \"white\"                          \n [877] \"white\"                           \"white\"                          \n [879] \"white\"                           \"white\"                          \n [881] \"white\"                           \"white\"                          \n [883] \"white\"                           \"white\"                          \n [885] \"white\"                           \"white\"                          \n [887] \"Japanese\"                        \"Japanese\"                       \n [889] \"white\"                           \"white\"                          \n [891] \"white\"                           \"white\"                          \n [893] \"Japanese\"                        \"white\"                          \n [895] \"Japanese\"                        \"white\"                          \n [897] \"white\"                           \"Japanese\"                       \n [899] \"white\"                           \"Japanese\"                       \n [901] \"white\"                           \"white\"                          \n [903] \"white\"                           \"white\"                          \n [905] \"white\"                           \"white\"                          \n [907] \"white\"                           \"white\"                          \n [909] \"Japanese\"                        \"white\"                          \n [911] \"white\"                           \"white\"                          \n [913] \"white\"                           \"white\"                          \n [915] \"Japanese\"                        \"white\"                          \n [917] \"white\"                           \"white\"                          \n [919] \"white\"                           \"white\"                          \n [921] \"white\"                           \"Japanese\"                       \n [923] \"white\"                           \"white\"                          \n [925] \"white\"                           \"Japanese\"                       \n [927] \"white\"                           \"white\"                          \n [929] \"Japanese\"                        \"white\"                          \n [931] \"white\"                           \"white\"                          \n [933] \"white\"                           \"white\"                          \n [935] \"white\"                           \"white\"                          \n [937] \"white\"                           \"white\"                          \n [939] \"Japanese\"                        \"white\"                          \n [941] \"white\"                           \"white\"                          \n [943] \"white\"                           \"Japanese\"                       \n [945] \"white\"                           \"white\"                          \n [947] \"Japanese\"                        \"Japanese\"                       \n [949] \"white\"                           \"Japanese\"                       \n [951] \"white\"                           \"white\"                          \n [953] \"Japanese\"                        \"white\"                          \n [955] \"Japanese\"                        \"white\"                          \n [957] \"Japanese\"                        \"Japanese\"                       \n [959] \"white\"                           \"white\"                          \n [961] \"white\"                           \"white\"                          \n [963] \"white\"                           \"white\"                          \n [965] \"white\"                           \"white\"                          \n [967] \"white\"                           \"white\"                          \n [969] \"white\"                           \"white\"                          \n [971] \"white\"                           \"white\"                          \n [973] \"white\"                           \"white\"                          \n [975] \"white\"                           \"white\"                          \n [977] \"white\"                           \"white\"                          \n [979] \"Japanese\"                        \"Japanese\"                       \n [981] \"white\"                           \"white\"                          \n [983] \"white\"                           \"Japanese\"                       \n [985] \"Japanese\"                        \"white\"                          \n [987] \"white\"                           \"Japanese\"                       \n [989] \"white\"                           \"white\"                          \n [991] \"white\"                           \"white\"                          \n [993] \"white\"                           \"white\"                          \n [995] \"white\"                           \"white\"                          \n [997] \"white\"                           \"white\"                          \n [999] \"white\"                           \"Japanese\"                       \n[1001] \"white\"                           \"Japanese\"                       \n[1003] \"white\"                           \"white\"                          \n[1005] \"white\"                           \"white\"                          \n[1007] \"Japanese\"                        \"Japanese\"                       \n[1009] \"Japanese\"                        \"white\"                          \n[1011] \"white\"                           \"white\"                          \n[1013] \"white\"                           \"white\"                          \n[1015] \"white\"                           \"white\"                          \n[1017] \"white\"                           \"white\"                          \n[1019] \"white\"                           \"white\"                          \n[1021] \"white\"                           \"Japanese\"                       \n[1023] \"white\"                           \"white\"                          \n[1025] \"white\"                           \"Japanese\"                       \n[1027] \"white\"                           \"white\"                          \n[1029] \"white\"                           \"white\"                          \n[1031] \"white\"                           \"white\"                          \n[1033] \"white\"                           \"white\"                          \n[1035] \"white\"                           \"white\"                          \n[1037] \"Japanese\"                        \"white\"                          \n[1039] \"white\"                           \"white\"                          \n[1041] \"white\"                           \"white\"                          \n[1043] \"white\"                           \"white\"                          \n[1045] \"white\"                           \"white\"                          \n[1047] \"white\"                           \"white\"                          \n[1049] \"white\"                           \"white\"                          \n[1051] \"white\"                           \"white\"                          \n[1053] \"white\"                           \"Japanese\"                       \n[1055] \"white\"                           \"white\"                          \n[1057] \"white\"                           \"white\"                          \n[1059] \"white\"                           \"white\"                          \n[1061] \"white\"                           \"white\"                          \n[1063] \"white\"                           \"white\"                          \n[1065] \"white\"                           \"white\"                          \n[1067] \"white\"                           \"white\"                          \n[1069] \"white\"                           \"white\"                          \n[1071] \"black\"                           \"black\"                          \n[1073] \"black\"                           \"black\"                          \n[1075] \"black\"                           \"black\"                          \n[1077] \"black\"                           \"black\"                          \n[1079] \"black\"                           \"black\"                          \n[1081] \"black\"                           \"black\"                          \n[1083] \"black\"                           \"black\"                          \n[1085] \"black\"                           \"black\"                          \n[1087] \"black\"                           \"black\"                          \n[1089] \"black\"                           \"black\"                          \n[1091] \"black\"                           \"black\"                          \n[1093] \"black\"                           \"black\"                          \n[1095] \"black\"                           \"black\"                          \n[1097] \"black\"                           \"black\"                          \n[1099] \"black\"                           \"black\"                          \n[1101] \"black\"                           \"black\"                          \n[1103] \"black\"                           \"black\"                          \n[1105] \"black\"                           \"black\"                          \n[1107] \"black\"                           \"black\"                          \n[1109] \"black\"                           \"black\"                          \n[1111] \"black\"                           \"black\"                          \n[1113] \"black\"                           \"black\"                          \n[1115] \"black\"                           \"black\"                          \n[1117] \"black\"                           \"black\"                          \n[1119] \"black\"                           \"black\"                          \n[1121] \"black\"                           \"black\"                          \n[1123] \"black\"                           \"black\"                          \n[1125] \"black\"                           \"black\"                          \n[1127] \"black\"                           \"black\"                          \n[1129] \"black\"                           \"black\"                          \n[1131] \"black\"                           \"black\"                          \n[1133] \"black\"                           \"black\"                          \n[1135] \"black\"                           \"black\"                          \n[1137] \"black\"                           \"black\"                          \n[1139] \"black\"                           \"black\"                          \n[1141] \"black\"                           \"black\"                          \n[1143] \"black\"                           \"black\"                          \n[1145] \"black\"                           \"black\"                          \n[1147] \"black\"                           \"black\"                          \n[1149] \"black\"                           \"black\"                          \n[1151] \"black\"                           \"black\"                          \n[1153] \"black\"                           \"black\"                          \n[1155] \"black\"                           \"black\"                          \n[1157] \"black\"                           \"black\"                          \n[1159] \"black\"                           \"black\"                          \n[1161] \"black\"                           \"black\"                          \n[1163] \"black\"                           \"black\"                          \n[1165] \"black\"                           \"black\"                          \n[1167] \"black\"                           \"black\"                          \n[1169] \"black\"                           \"black\"                          \n[1171] \"black\"                           \"black\"                          \n[1173] \"black\"                           \"black\"                          \n[1175] \"black\"                           \"black\"                          \n[1177] \"black\"                           \"black\"                          \n[1179] \"black\"                           \"black\"                          \n[1181] \"black\"                           \"black\"                          \n[1183] \"black\"                           \"black\"                          \n[1185] \"black\"                           \"black\"                          \n[1187] \"black\"                           \"black\"                          \n[1189] \"black\"                           \"black\"                          \n[1191] \"black\"                           \"black\"                          \n[1193] \"black\"                           \"black\"                          \n[1195] \"black\"                           \"black\"                          \n[1197] \"black\"                           \"black\"                          \n[1199] \"black\"                           \"black\"                          \n[1201] \"black\"                           \"black\"                          \n[1203] \"black\"                           \"black\"                          \n[1205] \"black\"                           \"black\"                          \n[1207] \"black\"                           \"black\"                          \n[1209] \"black\"                           \"black\"                          \n[1211] \"black\"                           \"black\"                          \n[1213] \"black\"                           \"black\"                          \n[1215] \"black\"                           \"black\"                          \n[1217] \"black\"                           \"black\"                          \n[1219] \"black\"                           \"black\"                          \n[1221] \"black\"                           \"black\"                          \n[1223] \"black\"                           \"black\"                          \n[1225] \"black\"                           \"black\"                          \n[1227] \"black\"                           \"black\"                          \n[1229] \"black\"                           \"black\"                          \n[1231] \"black\"                           \"black\"                          \n[1233] \"black\"                           \"black\"                          \n[1235] \"black\"                           \"black\"                          \n[1237] \"black\"                           \"black\"                          \n[1239] \"black\"                           \"black\"                          \n[1241] \"black\"                           \"black\"                          \n[1243] \"black\"                           \"black\"                          \n[1245] \"black\"                           \"black\"                          \n[1247] \"black\"                           \"black\"                          \n[1249] \"black\"                           \"black\"                          \n[1251] \"black\"                           \"black\"                          \n[1253] \"black\"                           \"black\"                          \n[1255] \"black\"                           \"black\"                          \n[1257] \"black\"                           \"black\"                          \n[1259] \"black\"                           \"black\"                          \n[1261] \"black\"                           \"black\"                          \n[1263] \"black\"                           \"black\"                          \n[1265] \"black\"                           \"black\"                          \n[1267] \"black\"                           \"black\"                          \n[1269] \"black\"                           \"black\"                          \n[1271] \"black\"                           \"black\"                          \n[1273] \"black\"                           \"black\"                          \n[1275] \"black\"                           \"black\"                          \n[1277] \"black\"                           \"black\"                          \n[1279] \"black\"                           \"black\"                          \n[1281] \"black\"                           \"black\"                          \n[1283] \"black\"                           \"black\"                          \n[1285] \"black\"                           \"black\"                          \n[1287] \"black\"                           \"black\"                          \n[1289] \"black\"                           \"black\"                          \n[1291] \"black\"                           \"black\"                          \n[1293] \"black\"                           \"black\"                          \n[1295] \"black\"                           \"black\"                          \n[1297] \"black\"                           \"black\"                          \n[1299] \"black\"                           \"black\"                          \n[1301] \"black\"                           \"black\"                          \n[1303] \"black\"                           \"black\"                          \n[1305] \"black\"                           \"black\"                          \n[1307] \"black\"                           \"black\"                          \n[1309] \"black\"                           \"black\"                          \n[1311] \"black\"                           \"black\"                          \n[1313] \"black\"                           \"black\"                          \n[1315] \"black\"                           \"black\"                          \n[1317] \"black\"                           \"black\"                          \n[1319] \"black\"                           \"black\"                          \n[1321] \"black\"                           \"black\"                          \n[1323] \"black\"                           \"black\"                          \n[1325] \"black\"                           \"black\"                          \n[1327] \"black\"                           \"black\"                          \n[1329] \"black\"                           \"black\"                          \n[1331] \"black\"                           \"black\"                          \n[1333] \"black\"                           \"black\"                          \n[1335] \"black\"                           \"black\"                          \n[1337] \"black\"                           \"black\"                          \n[1339] \"black\"                           \"black\"                          \n[1341] \"black\"                           \"black\"                          \n[1343] \"black\"                           \"black\"                          \n[1345] \"black\"                           \"black\"                          \n[1347] \"black\"                           \"black\"                          \n[1349] \"black\"                           \"black\"                          \n[1351] \"black\"                           \"black\"                          \n[1353] \"black\"                           \"black\"                          \n[1355] \"black\"                           \"black\"                          \n[1357] \"black\"                           \"black\"                          \n[1359] \"black\"                           \"black\"                          \n[1361] \"black\"                           \"black\"                          \n[1363] \"black\"                           \"black\"                          \n[1365] \"black\"                           \"black\"                          \n[1367] \"black\"                           \"black\"                          \n[1369] \"black\"                           \"black\"                          \n[1371] \"black\"                           \"black\"                          \n[1373] \"black\"                           \"black\"                          \n[1375] \"black\"                           \"black\"                          \n[1377] \"black\"                           \"black\"                          \n[1379] \"black\"                           \"black\"                          \n[1381] \"black\"                           \"black\"                          \n[1383] \"black\"                           \"black\"                          \n[1385] \"black\"                           \"black\"                          \n[1387] \"black\"                           \"black\"                          \n[1389] \"black\"                           \"black\"                          \n[1391] \"black\"                           \"black\"                          \n[1393] \"black\"                           \"black\"                          \n[1395] \"black\"                           \"black\"                          \n[1397] \"black\"                           \"black\"                          \n[1399] \"black\"                           \"black\"                          \n[1401] \"black\"                           \"black\"                          \n[1403] \"American Indian\"                 \"American Indian\"                \n[1405] \"American Indian\"                 \"American Indian\"                \n[1407] \"American Indian\"                 \"American Indian\"                \n[1409] \"American Indian\"                 \"American Indian\"                \n[1411] \"American Indian\"                 \"American Indian\"                \n[1413] \"American Indian\"                 \"American Indian\"                \n[1415] \"American Indian\"                 \"American Indian\"                \n[1417] \"American Indian\"                 \"American Indian\"                \n[1419] \"American Indian\"                 \"American Indian\"                \n[1421] \"American Indian\"                 \"American Indian\"                \n[1423] \"American Indian\"                 \"American Indian\"                \n[1425] \"Chinese\"                         \"Chinese\"                        \n[1427] \"Filipino\"                        \"Other Asian or Pacific Islander\"\n[1429] \"Other Asian or Pacific Islander\" \"Other Asian or Pacific Islander\"\n[1431] \"Other Asian or Pacific Islander\" \"Other Asian or Pacific Islander\"\n[1433] \"Other Asian or Pacific Islander\" \"Other Asian or Pacific Islander\"\n[1435] \"Other Asian or Pacific Islander\" \"Other Asian or Pacific Islander\"\n[1437] \"Other Asian or Pacific Islander\" \"Other Asian or Pacific Islander\"\n[1439] \"Other Asian or Pacific Islander\" \"Other Asian or Pacific Islander\"\n[1441] \"Other Asian or Pacific Islander\" \"Other Asian or Pacific Islander\"\n[1443] \"Other Asian or Pacific Islander\" \"Other Asian or Pacific Islander\"\n[1445] \"Other Asian or Pacific Islander\" \"Other Asian or Pacific Islander\"\n[1447] \"Other Asian or Pacific Islander\" \"Other Asian or Pacific Islander\"\n[1449] \"Other Asian or Pacific Islander\" \"Other Asian or Pacific Islander\""
  },
  {
    "objectID": "slides/know-your-data.html#make-pairwise-scatter-plots",
    "href": "slides/know-your-data.html#make-pairwise-scatter-plots",
    "title": "Getting to know your data",
    "section": "Make pairwise scatter plots",
    "text": "Make pairwise scatter plots\n\nggplot(NCbirths, aes(Plural, Sex, color = Sex)) + geom_point(position = \"jitter\", size = .5)\nggplot(NCbirths, aes(Plural, MomAge, color = Sex)) + geom_point(position = \"jitter\", size = .5)"
  },
  {
    "objectID": "slides/know-your-data.html#make-pairwise-scatter-plots-1",
    "href": "slides/know-your-data.html#make-pairwise-scatter-plots-1",
    "title": "Getting to know your data",
    "section": "Make pairwise scatter plots",
    "text": "Make pairwise scatter plots\n\nggplot(NCbirths, aes(Weeks, Plural, color = Sex)) + geom_point(position = \"jitter\", size = .5)\nggplot(NCbirths, aes(Weeks, Gained, color = Sex)) + geom_point(position = \"jitter\", size = .5)\n\n\n\n\n\n\n \n\n\n\n\n\nIf possible, make scatter plots of every variable against every other variable"
  },
  {
    "objectID": "slides/know-your-data.html#r-propagates-missingness",
    "href": "slides/know-your-data.html#r-propagates-missingness",
    "title": "Getting to know your data",
    "section": "R propagates missingness",
    "text": "R propagates missingness\n\nx &lt;- c(1, 2, NA, 4)\n\nsum(x)\n\n[1] NA\n\n\n\n\nmean(x)\n\n[1] NA\n\n\n\n\n\nx == 2\n\n[1] FALSE  TRUE    NA FALSE"
  },
  {
    "objectID": "slides/know-your-data.html#many-functions-allow-explicit-exclusion-of-na-values",
    "href": "slides/know-your-data.html#many-functions-allow-explicit-exclusion-of-na-values",
    "title": "Getting to know your data",
    "section": "Many functions allow explicit exclusion of NA values",
    "text": "Many functions allow explicit exclusion of NA values\n\nx &lt;- c(1, 2, NA, 4)\n\nsum(x, na.rm = TRUE)\n\n[1] 7\n\n\n\n\nmean(x, na.rm = TRUE)\n\n[1] 2.333333\n\n\n\n\nBut is this the right thing to do?"
  },
  {
    "objectID": "slides/know-your-data.html#there-is-no-general-right-or-wrong-approach",
    "href": "slides/know-your-data.html#there-is-no-general-right-or-wrong-approach",
    "title": "Getting to know your data",
    "section": "There is no general right or wrong approach",
    "text": "There is no general right or wrong approach\n\nx &lt;- c(2, 1, 1, 2, 1, 1, 1, 2, NA, 1, 2, 1, 1, 2, 1, 1, 1, 2)\nmean(x, na.rm = TRUE)\n\n[1] 1.352941\n\n\n\n\nx &lt;- c(NA, NA, NA, 2, NA, NA, NA, NA, NA, 1, NA, NA, NA, NA)\nmean(x, na.rm = TRUE)\n\n[1] 1.5\n\n\n\n\nR’s default is conservative: If there’s at least one NA, the result is NA"
  },
  {
    "objectID": "slides/know-your-data.html#we-need-to-use-is.na-to-check-for-missing-values",
    "href": "slides/know-your-data.html#we-need-to-use-is.na-to-check-for-missing-values",
    "title": "Getting to know your data",
    "section": "We need to use is.na() to check for missing values",
    "text": "We need to use is.na() to check for missing values\n\nc(1, 2, NA, 4) == NA   # does not work\n\n[1] NA NA NA NA\n\n\n\n\nis.na(c(1, 2, NA, 4))  # works\n\n[1] FALSE FALSE  TRUE FALSE"
  },
  {
    "objectID": "slides/know-your-data.html#replacing-na-values-with-something-else",
    "href": "slides/know-your-data.html#replacing-na-values-with-something-else",
    "title": "Getting to know your data",
    "section": "Replacing NA values with something else",
    "text": "Replacing NA values with something else\nRemember from class on data wrangling:\n\nband_data &lt;- full_join(band_members, band_instruments)\nband_data\n\n# A tibble: 4 × 3\n  name  band    plays \n  &lt;chr&gt; &lt;chr&gt;   &lt;chr&gt; \n1 Mick  Stones  &lt;NA&gt;  \n2 John  Beatles guitar\n3 Paul  Beatles bass  \n4 Keith &lt;NA&gt;    guitar"
  },
  {
    "objectID": "slides/know-your-data.html#replacing-na-values-with-something-else-1",
    "href": "slides/know-your-data.html#replacing-na-values-with-something-else-1",
    "title": "Getting to know your data",
    "section": "Replacing NA values with something else",
    "text": "Replacing NA values with something else\nReplace NAs with empty strings in plays column:\n\nband_data |&gt;\n  mutate(plays = replace_na(plays, \"\"))\n\n# A tibble: 4 × 3\n  name  band    plays   \n  &lt;chr&gt; &lt;chr&gt;   &lt;chr&gt;   \n1 Mick  Stones  \"\"      \n2 John  Beatles \"guitar\"\n3 Paul  Beatles \"bass\"  \n4 Keith &lt;NA&gt;    \"guitar\""
  },
  {
    "objectID": "slides/know-your-data.html#replacing-na-values-with-something-else-2",
    "href": "slides/know-your-data.html#replacing-na-values-with-something-else-2",
    "title": "Getting to know your data",
    "section": "Replacing NA values with something else",
    "text": "Replacing NA values with something else\nReplace NAs with empty strings in all columns:\n\nband_data |&gt;\n  mutate(across(everything(), ~replace_na(.x, \"\")))\n\n# A tibble: 4 × 3\n  name  band      plays   \n  &lt;chr&gt; &lt;chr&gt;     &lt;chr&gt;   \n1 Mick  \"Stones\"  \"\"      \n2 John  \"Beatles\" \"guitar\"\n3 Paul  \"Beatles\" \"bass\"  \n4 Keith \"\"        \"guitar\""
  },
  {
    "objectID": "slides/know-your-data.html#replacing-things-with-na-values",
    "href": "slides/know-your-data.html#replacing-things-with-na-values",
    "title": "Getting to know your data",
    "section": "Replacing things with NA values",
    "text": "Replacing things with NA values\nReplace empty strings with NA in plays column (requires naniar package):\n\nband_data |&gt;\n  mutate(across(everything(), ~replace_na(.x, \"\"))) |&gt;\n  replace_with_na_at(\"plays\", ~.x == \"\")\n\n# A tibble: 4 × 3\n  name  band      plays \n  &lt;chr&gt; &lt;chr&gt;     &lt;chr&gt; \n1 Mick  \"Stones\"  &lt;NA&gt;  \n2 John  \"Beatles\" guitar\n3 Paul  \"Beatles\" bass  \n4 Keith \"\"        guitar"
  },
  {
    "objectID": "slides/know-your-data.html#replacing-things-with-na-values-1",
    "href": "slides/know-your-data.html#replacing-things-with-na-values-1",
    "title": "Getting to know your data",
    "section": "Replacing things with NA values",
    "text": "Replacing things with NA values\nReplace empty strings with NA in all columns (requires naniar package):\n\nband_data |&gt;\n  mutate(across(everything(), ~replace_na(.x, \"\"))) |&gt;\n  replace_with_na_all(~.x == \"\")\n\n# A tibble: 4 × 3\n  name  band    plays \n  &lt;chr&gt; &lt;chr&gt;   &lt;chr&gt; \n1 Mick  Stones  &lt;NA&gt;  \n2 John  Beatles guitar\n3 Paul  Beatles bass  \n4 Keith &lt;NA&gt;    guitar"
  },
  {
    "objectID": "slides/know-your-data.html#removing-rows-with-na-values",
    "href": "slides/know-your-data.html#removing-rows-with-na-values",
    "title": "Getting to know your data",
    "section": "Removing rows with NA values",
    "text": "Removing rows with NA values\nRemove all rows with any NAs with na.omit():\n\nband_data |&gt;\n  na.omit()\n\n# A tibble: 2 × 3\n  name  band    plays \n  &lt;chr&gt; &lt;chr&gt;   &lt;chr&gt; \n1 John  Beatles guitar\n2 Paul  Beatles bass"
  },
  {
    "objectID": "slides/know-your-data.html#removing-rows-with-na-values-1",
    "href": "slides/know-your-data.html#removing-rows-with-na-values-1",
    "title": "Getting to know your data",
    "section": "Removing rows with NA values",
    "text": "Removing rows with NA values\nRemove all rows where specific columns contain NAs:\n\nband_data |&gt;\n  filter(!is.na(plays))\n\n# A tibble: 3 × 3\n  name  band    plays \n  &lt;chr&gt; &lt;chr&gt;   &lt;chr&gt; \n1 John  Beatles guitar\n2 Paul  Beatles bass  \n3 Keith &lt;NA&gt;    guitar"
  },
  {
    "objectID": "slides/know-your-data.html#removing-rows-with-na-values-2",
    "href": "slides/know-your-data.html#removing-rows-with-na-values-2",
    "title": "Getting to know your data",
    "section": "Removing rows with NA values",
    "text": "Removing rows with NA values\nConversely:\n\nband_data |&gt;\n  filter(is.na(plays))\n\n# A tibble: 1 × 3\n  name  band   plays\n  &lt;chr&gt; &lt;chr&gt;  &lt;chr&gt;\n1 Mick  Stones &lt;NA&gt;"
  },
  {
    "objectID": "slides/know-your-data.html#visualizing-nas",
    "href": "slides/know-your-data.html#visualizing-nas",
    "title": "Getting to know your data",
    "section": "Visualizing NAs",
    "text": "Visualizing NAs\n\nBy default, missing points are not shown\n\nggplot(NCbirths) +\n  aes(Weeks, Gained) +\n  geom_point()"
  },
  {
    "objectID": "slides/know-your-data.html#visualizing-nas-1",
    "href": "slides/know-your-data.html#visualizing-nas-1",
    "title": "Getting to know your data",
    "section": "Visualizing NAs",
    "text": "Visualizing NAs\n\nCan show them with the naniar package\n\nlibrary(naniar)\n\nggplot(NCbirths) +\n  aes(Weeks, Gained) +\n  geom_miss_point()"
  },
  {
    "objectID": "slides/know-your-data.html#further-reading",
    "href": "slides/know-your-data.html#further-reading",
    "title": "Getting to know your data",
    "section": "Further reading",
    "text": "Further reading\n\nWikipedia: Data dictionary\ndplyr reference documentation: if_else()\ndplyr reference documentation: case_when()\ndplyr reference documentation: across()\nnaniar documentation: Getting started with naniar\nnaniar reference documentation: replace_with_na_at()\nnaniar documentation: geom_miss_point()"
  },
  {
    "objectID": "slides/redundant-coding.html#color-encoding-alone-is-not-always-sufficient",
    "href": "slides/redundant-coding.html#color-encoding-alone-is-not-always-sufficient",
    "title": "Redundant coding, text annotations",
    "section": "Color encoding alone is not always sufficient",
    "text": "Color encoding alone is not always sufficient\n\n\n\n\n\n \n\n\n\n\n\nIris virginica and Iris versicolor are difficult to tell apart"
  },
  {
    "objectID": "slides/redundant-coding.html#iris-scatter-one-shape-cvd",
    "href": "slides/redundant-coding.html#iris-scatter-one-shape-cvd",
    "title": "Redundant coding, text annotations",
    "section": "",
    "text": "CVD simulation of preceding figure"
  },
  {
    "objectID": "slides/redundant-coding.html#using-both-colors-and-shapes-helps",
    "href": "slides/redundant-coding.html#using-both-colors-and-shapes-helps",
    "title": "Redundant coding, text annotations",
    "section": "Using both colors and shapes helps",
    "text": "Using both colors and shapes helps\n\n\n\n\n\n \n\n\n\n\n\nNotice also that color assignment has been switched"
  },
  {
    "objectID": "slides/redundant-coding.html#iris-scatter-three-shapes-cvd",
    "href": "slides/redundant-coding.html#iris-scatter-three-shapes-cvd",
    "title": "Redundant coding, text annotations",
    "section": "",
    "text": "CVD simulation of preceding figure"
  },
  {
    "objectID": "slides/redundant-coding.html#pay-attention-to-legend-order",
    "href": "slides/redundant-coding.html#pay-attention-to-legend-order",
    "title": "Redundant coding, text annotations",
    "section": "Pay attention to legend order",
    "text": "Pay attention to legend order\n\n\n\n\n\n \n\n\n\n\n\nLegend order does not match visual order of the lines"
  },
  {
    "objectID": "slides/redundant-coding.html#pay-attention-to-legend-order-1",
    "href": "slides/redundant-coding.html#pay-attention-to-legend-order-1",
    "title": "Redundant coding, text annotations",
    "section": "Pay attention to legend order",
    "text": "Pay attention to legend order\n\n\n\n\n\n \n\n\n\n\n\nLegend order does match visual order of the lines"
  },
  {
    "objectID": "slides/redundant-coding.html#tech-stocks-good-legend-cvd",
    "href": "slides/redundant-coding.html#tech-stocks-good-legend-cvd",
    "title": "Redundant coding, text annotations",
    "section": "",
    "text": "CVD simulation of preceding figure"
  },
  {
    "objectID": "slides/redundant-coding.html#even-better-dont-use-a-legend-at-all",
    "href": "slides/redundant-coding.html#even-better-dont-use-a-legend-at-all",
    "title": "Redundant coding, text annotations",
    "section": "Even better: Don’t use a legend at all",
    "text": "Even better: Don’t use a legend at all\n\n\n\n\n\n \n\n\n\n\n\nThis technique is called “direct labeling”"
  },
  {
    "objectID": "slides/redundant-coding.html#direct-labeling-the-iris-scatter-plot",
    "href": "slides/redundant-coding.html#direct-labeling-the-iris-scatter-plot",
    "title": "Redundant coding, text annotations",
    "section": "Direct labeling the Iris scatter plot",
    "text": "Direct labeling the Iris scatter plot\n\n\n\n\n\n \n\n\n\n\n\nThe ellipses help guide the eye"
  },
  {
    "objectID": "slides/redundant-coding.html#label-only-a-subset-if-there-are-too-many-items-to-label",
    "href": "slides/redundant-coding.html#label-only-a-subset-if-there-are-too-many-items-to-label",
    "title": "Redundant coding, text annotations",
    "section": "Label only a subset if there are too many items to label",
    "text": "Label only a subset if there are too many items to label"
  },
  {
    "objectID": "slides/redundant-coding.html#secondary-axis-trick",
    "href": "slides/redundant-coding.html#secondary-axis-trick",
    "title": "Redundant coding, text annotations",
    "section": "1. Secondary axis trick",
    "text": "1. Secondary axis trick\n\nData preparation:\n\n\n\ntech_stocks &lt;- read_csv(\"https://wilkelab.org/DSC385/datasets/tech_stocks.csv\") |&gt;\n  mutate(date = ymd(date)) |&gt;\n  select(company, date, price_indexed)\n\ntech_stocks\n\n# A tibble: 9,569 × 3\n   company  date       price_indexed\n   &lt;chr&gt;    &lt;date&gt;             &lt;dbl&gt;\n 1 Alphabet 2017-06-02          342.\n 2 Alphabet 2017-06-01          339.\n 3 Alphabet 2017-05-31          338.\n 4 Alphabet 2017-05-30          342.\n 5 Alphabet 2017-05-26          341.\n 6 Alphabet 2017-05-25          340.\n 7 Alphabet 2017-05-24          335.\n 8 Alphabet 2017-05-23          333.\n 9 Alphabet 2017-05-22          330.\n10 Alphabet 2017-05-19          327.\n# ℹ 9,559 more rows"
  },
  {
    "objectID": "slides/redundant-coding.html#secondary-axis-trick-1",
    "href": "slides/redundant-coding.html#secondary-axis-trick-1",
    "title": "Redundant coding, text annotations",
    "section": "1. Secondary axis trick",
    "text": "1. Secondary axis trick\n\nExtract most recent values:\n\n\n\ntech_stocks_last &lt;- tech_stocks |&gt;\n  filter(date == max(date))\n\ntech_stocks_last\n\n# A tibble: 4 × 3\n  company   date       price_indexed\n  &lt;chr&gt;     &lt;date&gt;             &lt;dbl&gt;\n1 Alphabet  2017-06-02          342.\n2 Apple     2017-06-02          194.\n3 Facebook  2017-06-02          554.\n4 Microsoft 2017-06-02          252."
  },
  {
    "objectID": "slides/redundant-coding.html#secondary-axis-trick-2",
    "href": "slides/redundant-coding.html#secondary-axis-trick-2",
    "title": "Redundant coding, text annotations",
    "section": "1. Secondary axis trick",
    "text": "1. Secondary axis trick\n\n\n\nggplot(tech_stocks) +\n  aes(x = date, y = price_indexed) +\n  geom_line(aes(color = company), na.rm = TRUE) +\n  scale_x_date(\n    limits = c(\n      ymd(\"2012-06-01\"),\n      ymd(\"2017-05-31\")\n    ),\n    expand = c(0, 0)\n  ) + \n  scale_y_continuous(\n    limits = c(0, 560),\n    expand = c(0, 0)\n  )\n\n\n\n\n\n \n\n\n\n\n\n\nSide remark: The default legend order doesn’t match the data"
  },
  {
    "objectID": "slides/redundant-coding.html#secondary-axis-trick-3",
    "href": "slides/redundant-coding.html#secondary-axis-trick-3",
    "title": "Redundant coding, text annotations",
    "section": "1. Secondary axis trick",
    "text": "1. Secondary axis trick\n\n\n\nggplot(tech_stocks) +\n  aes(x = date, y = price_indexed) +\n  geom_line(aes(color = company), na.rm = TRUE) +\n  scale_x_date(\n    limits = c(\n      ymd(\"2012-06-01\"),\n      ymd(\"2017-05-31\")\n    ),\n    expand = c(0, 0)\n  ) + \n  scale_y_continuous(\n    limits = c(0, 560),\n    expand = c(0, 0),\n    sec.axis = dup_axis(\n      breaks = tech_stocks_last$price_indexed,\n      labels = tech_stocks_last$company,\n      name = NULL\n    )\n  ) +\n  guides(color = \"none\")"
  },
  {
    "objectID": "slides/redundant-coding.html#manual-labeling-with-geom_text",
    "href": "slides/redundant-coding.html#manual-labeling-with-geom_text",
    "title": "Redundant coding, text annotations",
    "section": "2. Manual labeling with geom_text()",
    "text": "2. Manual labeling with geom_text()\n\nThe raw input data:\n\niris\n\n    Sepal.Length Sepal.Width Petal.Length Petal.Width    Species\n1            5.1         3.5          1.4         0.2     setosa\n2            4.9         3.0          1.4         0.2     setosa\n3            4.7         3.2          1.3         0.2     setosa\n4            4.6         3.1          1.5         0.2     setosa\n5            5.0         3.6          1.4         0.2     setosa\n6            5.4         3.9          1.7         0.4     setosa\n7            4.6         3.4          1.4         0.3     setosa\n8            5.0         3.4          1.5         0.2     setosa\n9            4.4         2.9          1.4         0.2     setosa\n10           4.9         3.1          1.5         0.1     setosa\n11           5.4         3.7          1.5         0.2     setosa\n12           4.8         3.4          1.6         0.2     setosa\n13           4.8         3.0          1.4         0.1     setosa\n14           4.3         3.0          1.1         0.1     setosa\n15           5.8         4.0          1.2         0.2     setosa\n16           5.7         4.4          1.5         0.4     setosa\n17           5.4         3.9          1.3         0.4     setosa\n18           5.1         3.5          1.4         0.3     setosa\n19           5.7         3.8          1.7         0.3     setosa\n20           5.1         3.8          1.5         0.3     setosa\n21           5.4         3.4          1.7         0.2     setosa\n22           5.1         3.7          1.5         0.4     setosa\n23           4.6         3.6          1.0         0.2     setosa\n24           5.1         3.3          1.7         0.5     setosa\n25           4.8         3.4          1.9         0.2     setosa\n26           5.0         3.0          1.6         0.2     setosa\n27           5.0         3.4          1.6         0.4     setosa\n28           5.2         3.5          1.5         0.2     setosa\n29           5.2         3.4          1.4         0.2     setosa\n30           4.7         3.2          1.6         0.2     setosa\n31           4.8         3.1          1.6         0.2     setosa\n32           5.4         3.4          1.5         0.4     setosa\n33           5.2         4.1          1.5         0.1     setosa\n34           5.5         4.2          1.4         0.2     setosa\n35           4.9         3.1          1.5         0.2     setosa\n36           5.0         3.2          1.2         0.2     setosa\n37           5.5         3.5          1.3         0.2     setosa\n38           4.9         3.6          1.4         0.1     setosa\n39           4.4         3.0          1.3         0.2     setosa\n40           5.1         3.4          1.5         0.2     setosa\n41           5.0         3.5          1.3         0.3     setosa\n42           4.5         2.3          1.3         0.3     setosa\n43           4.4         3.2          1.3         0.2     setosa\n44           5.0         3.5          1.6         0.6     setosa\n45           5.1         3.8          1.9         0.4     setosa\n46           4.8         3.0          1.4         0.3     setosa\n47           5.1         3.8          1.6         0.2     setosa\n48           4.6         3.2          1.4         0.2     setosa\n49           5.3         3.7          1.5         0.2     setosa\n50           5.0         3.3          1.4         0.2     setosa\n51           7.0         3.2          4.7         1.4 versicolor\n52           6.4         3.2          4.5         1.5 versicolor\n53           6.9         3.1          4.9         1.5 versicolor\n54           5.5         2.3          4.0         1.3 versicolor\n55           6.5         2.8          4.6         1.5 versicolor\n56           5.7         2.8          4.5         1.3 versicolor\n57           6.3         3.3          4.7         1.6 versicolor\n58           4.9         2.4          3.3         1.0 versicolor\n59           6.6         2.9          4.6         1.3 versicolor\n60           5.2         2.7          3.9         1.4 versicolor\n61           5.0         2.0          3.5         1.0 versicolor\n62           5.9         3.0          4.2         1.5 versicolor\n63           6.0         2.2          4.0         1.0 versicolor\n64           6.1         2.9          4.7         1.4 versicolor\n65           5.6         2.9          3.6         1.3 versicolor\n66           6.7         3.1          4.4         1.4 versicolor\n67           5.6         3.0          4.5         1.5 versicolor\n68           5.8         2.7          4.1         1.0 versicolor\n69           6.2         2.2          4.5         1.5 versicolor\n70           5.6         2.5          3.9         1.1 versicolor\n71           5.9         3.2          4.8         1.8 versicolor\n72           6.1         2.8          4.0         1.3 versicolor\n73           6.3         2.5          4.9         1.5 versicolor\n74           6.1         2.8          4.7         1.2 versicolor\n75           6.4         2.9          4.3         1.3 versicolor\n76           6.6         3.0          4.4         1.4 versicolor\n77           6.8         2.8          4.8         1.4 versicolor\n78           6.7         3.0          5.0         1.7 versicolor\n79           6.0         2.9          4.5         1.5 versicolor\n80           5.7         2.6          3.5         1.0 versicolor\n81           5.5         2.4          3.8         1.1 versicolor\n82           5.5         2.4          3.7         1.0 versicolor\n83           5.8         2.7          3.9         1.2 versicolor\n84           6.0         2.7          5.1         1.6 versicolor\n85           5.4         3.0          4.5         1.5 versicolor\n86           6.0         3.4          4.5         1.6 versicolor\n87           6.7         3.1          4.7         1.5 versicolor\n88           6.3         2.3          4.4         1.3 versicolor\n89           5.6         3.0          4.1         1.3 versicolor\n90           5.5         2.5          4.0         1.3 versicolor\n91           5.5         2.6          4.4         1.2 versicolor\n92           6.1         3.0          4.6         1.4 versicolor\n93           5.8         2.6          4.0         1.2 versicolor\n94           5.0         2.3          3.3         1.0 versicolor\n95           5.6         2.7          4.2         1.3 versicolor\n96           5.7         3.0          4.2         1.2 versicolor\n97           5.7         2.9          4.2         1.3 versicolor\n98           6.2         2.9          4.3         1.3 versicolor\n99           5.1         2.5          3.0         1.1 versicolor\n100          5.7         2.8          4.1         1.3 versicolor\n101          6.3         3.3          6.0         2.5  virginica\n102          5.8         2.7          5.1         1.9  virginica\n103          7.1         3.0          5.9         2.1  virginica\n104          6.3         2.9          5.6         1.8  virginica\n105          6.5         3.0          5.8         2.2  virginica\n106          7.6         3.0          6.6         2.1  virginica\n107          4.9         2.5          4.5         1.7  virginica\n108          7.3         2.9          6.3         1.8  virginica\n109          6.7         2.5          5.8         1.8  virginica\n110          7.2         3.6          6.1         2.5  virginica\n111          6.5         3.2          5.1         2.0  virginica\n112          6.4         2.7          5.3         1.9  virginica\n113          6.8         3.0          5.5         2.1  virginica\n114          5.7         2.5          5.0         2.0  virginica\n115          5.8         2.8          5.1         2.4  virginica\n116          6.4         3.2          5.3         2.3  virginica\n117          6.5         3.0          5.5         1.8  virginica\n118          7.7         3.8          6.7         2.2  virginica\n119          7.7         2.6          6.9         2.3  virginica\n120          6.0         2.2          5.0         1.5  virginica\n121          6.9         3.2          5.7         2.3  virginica\n122          5.6         2.8          4.9         2.0  virginica\n123          7.7         2.8          6.7         2.0  virginica\n124          6.3         2.7          4.9         1.8  virginica\n125          6.7         3.3          5.7         2.1  virginica\n126          7.2         3.2          6.0         1.8  virginica\n127          6.2         2.8          4.8         1.8  virginica\n128          6.1         3.0          4.9         1.8  virginica\n129          6.4         2.8          5.6         2.1  virginica\n130          7.2         3.0          5.8         1.6  virginica\n131          7.4         2.8          6.1         1.9  virginica\n132          7.9         3.8          6.4         2.0  virginica\n133          6.4         2.8          5.6         2.2  virginica\n134          6.3         2.8          5.1         1.5  virginica\n135          6.1         2.6          5.6         1.4  virginica\n136          7.7         3.0          6.1         2.3  virginica\n137          6.3         3.4          5.6         2.4  virginica\n138          6.4         3.1          5.5         1.8  virginica\n139          6.0         3.0          4.8         1.8  virginica\n140          6.9         3.1          5.4         2.1  virginica\n141          6.7         3.1          5.6         2.4  virginica\n142          6.9         3.1          5.1         2.3  virginica\n143          5.8         2.7          5.1         1.9  virginica\n144          6.8         3.2          5.9         2.3  virginica\n145          6.7         3.3          5.7         2.5  virginica\n146          6.7         3.0          5.2         2.3  virginica\n147          6.3         2.5          5.0         1.9  virginica\n148          6.5         3.0          5.2         2.0  virginica\n149          6.2         3.4          5.4         2.3  virginica\n150          5.9         3.0          5.1         1.8  virginica"
  },
  {
    "objectID": "slides/redundant-coding.html#manual-labeling-with-geom_text-1",
    "href": "slides/redundant-coding.html#manual-labeling-with-geom_text-1",
    "title": "Redundant coding, text annotations",
    "section": "2. Manual labeling with geom_text()",
    "text": "2. Manual labeling with geom_text()\n\nManually create table with label positions:\n\niris_labels &lt;- tibble(\n  Species = c(\"setosa\", \"virginica\", \"versicolor\"),\n  Sepal.Width = c(4.2, 3.76, 2.08),\n  Sepal.Length = c(5.7, 7, 5.1),\n  label = c(\"Iris setosa\", \"Iris virginica\", \"Iris versicolor\"),\n  hjust = c(0, 0.5, 0),\n  vjust = c(0, 0.5, 1)\n)\n\niris_labels\n\n# A tibble: 3 × 6\n  Species    Sepal.Width Sepal.Length label           hjust vjust\n  &lt;chr&gt;            &lt;dbl&gt;        &lt;dbl&gt; &lt;chr&gt;           &lt;dbl&gt; &lt;dbl&gt;\n1 setosa            4.2           5.7 Iris setosa       0     0  \n2 virginica         3.76          7   Iris virginica    0.5   0.5\n3 versicolor        2.08          5.1 Iris versicolor   0     1"
  },
  {
    "objectID": "slides/redundant-coding.html#manual-labeling-with-geom_text-2",
    "href": "slides/redundant-coding.html#manual-labeling-with-geom_text-2",
    "title": "Redundant coding, text annotations",
    "section": "2. Manual labeling with geom_text()",
    "text": "2. Manual labeling with geom_text()\n\n\n\nggplot(iris) +\n  aes(Sepal.Length, Sepal.Width, color = Species) +\n  geom_point(aes(shape = Species))"
  },
  {
    "objectID": "slides/redundant-coding.html#manual-labeling-with-geom_text-3",
    "href": "slides/redundant-coding.html#manual-labeling-with-geom_text-3",
    "title": "Redundant coding, text annotations",
    "section": "2. Manual labeling with geom_text()",
    "text": "2. Manual labeling with geom_text()\n\n\n\nggplot(iris) +\n  aes(Sepal.Length, Sepal.Width, color = Species) +\n  geom_point(aes(shape = Species)) +\n  geom_text(\n    data = iris_labels,\n    aes(\n      label = label,\n      hjust = hjust, vjust = vjust\n    ),\n    size = 14, size.unit = \"pt\" # 14pt font\n  ) +\n  guides(color = \"none\", shape = \"none\")"
  },
  {
    "objectID": "slides/redundant-coding.html#manual-labeling-with-geom_text-4",
    "href": "slides/redundant-coding.html#manual-labeling-with-geom_text-4",
    "title": "Redundant coding, text annotations",
    "section": "2. Manual labeling with geom_text()",
    "text": "2. Manual labeling with geom_text()\n\n\n\nggplot(iris) +\n  aes(Sepal.Length, Sepal.Width, color = Species) +\n  geom_point(aes(shape = Species)) +\n  geom_text(\n    data = iris_labels,\n    aes(\n      label = label,\n      hjust = hjust, vjust = vjust\n    ),\n    size = 14, size.unit = \"pt\" # 14pt font\n  ) +\n  stat_ellipse(size = 0.5) + \n  guides(color = \"none\", shape = \"none\")"
  },
  {
    "objectID": "slides/redundant-coding.html#automatic-labeling-with-geom_text_repel",
    "href": "slides/redundant-coding.html#automatic-labeling-with-geom_text_repel",
    "title": "Redundant coding, text annotations",
    "section": "3. Automatic labeling with geom_text_repel()",
    "text": "3. Automatic labeling with geom_text_repel()\n\nPrepare data:\n\n\n\nmtcars_named &lt;- mtcars |&gt;\n  rownames_to_column(\"car\") |&gt;\n  select(car, weight = wt, mpg)\n\nmtcars_named\n\n                   car weight  mpg\n1            Mazda RX4  2.620 21.0\n2        Mazda RX4 Wag  2.875 21.0\n3           Datsun 710  2.320 22.8\n4       Hornet 4 Drive  3.215 21.4\n5    Hornet Sportabout  3.440 18.7\n6              Valiant  3.460 18.1\n7           Duster 360  3.570 14.3\n8            Merc 240D  3.190 24.4\n9             Merc 230  3.150 22.8\n10            Merc 280  3.440 19.2\n11           Merc 280C  3.440 17.8\n12          Merc 450SE  4.070 16.4\n13          Merc 450SL  3.730 17.3\n14         Merc 450SLC  3.780 15.2\n15  Cadillac Fleetwood  5.250 10.4\n16 Lincoln Continental  5.424 10.4\n17   Chrysler Imperial  5.345 14.7\n18            Fiat 128  2.200 32.4\n19         Honda Civic  1.615 30.4\n20      Toyota Corolla  1.835 33.9\n21       Toyota Corona  2.465 21.5\n22    Dodge Challenger  3.520 15.5\n23         AMC Javelin  3.435 15.2\n24          Camaro Z28  3.840 13.3\n25    Pontiac Firebird  3.845 19.2\n26           Fiat X1-9  1.935 27.3\n27       Porsche 914-2  2.140 26.0\n28        Lotus Europa  1.513 30.4\n29      Ford Pantera L  3.170 15.8\n30        Ferrari Dino  2.770 19.7\n31       Maserati Bora  3.570 15.0\n32          Volvo 142E  2.780 21.4"
  },
  {
    "objectID": "slides/redundant-coding.html#automatic-labeling-with-geom_text_repel-1",
    "href": "slides/redundant-coding.html#automatic-labeling-with-geom_text_repel-1",
    "title": "Redundant coding, text annotations",
    "section": "3. Automatic labeling with geom_text_repel()",
    "text": "3. Automatic labeling with geom_text_repel()\n\n\n\nggplot(mtcars_named, aes(weight, mpg)) +\n  geom_point()"
  },
  {
    "objectID": "slides/redundant-coding.html#automatic-labeling-with-geom_text_repel-2",
    "href": "slides/redundant-coding.html#automatic-labeling-with-geom_text_repel-2",
    "title": "Redundant coding, text annotations",
    "section": "3. Automatic labeling with geom_text_repel()",
    "text": "3. Automatic labeling with geom_text_repel()\n\n\n\nggplot(mtcars_named, aes(weight, mpg)) +\n  geom_point() +\n  geom_text(aes(label = car))"
  },
  {
    "objectID": "slides/redundant-coding.html#automatic-labeling-with-geom_text_repel-3",
    "href": "slides/redundant-coding.html#automatic-labeling-with-geom_text_repel-3",
    "title": "Redundant coding, text annotations",
    "section": "3. Automatic labeling with geom_text_repel()",
    "text": "3. Automatic labeling with geom_text_repel()\n\n\n\nggplot(mtcars_named, aes(weight, mpg)) +\n  geom_point() +\n  geom_text(aes(label = car), hjust = 0)"
  },
  {
    "objectID": "slides/redundant-coding.html#automatic-labeling-with-geom_text_repel-4",
    "href": "slides/redundant-coding.html#automatic-labeling-with-geom_text_repel-4",
    "title": "Redundant coding, text annotations",
    "section": "3. Automatic labeling with geom_text_repel()",
    "text": "3. Automatic labeling with geom_text_repel()\n\n\n\nlibrary(ggrepel)\n\nggplot(mtcars_named, aes(weight, mpg)) +\n  geom_point() +\n  geom_text_repel(\n    aes(label = car),\n    max.overlaps = Inf\n  )"
  },
  {
    "objectID": "slides/redundant-coding.html#automatic-labeling-with-geom_text_repel-5",
    "href": "slides/redundant-coding.html#automatic-labeling-with-geom_text_repel-5",
    "title": "Redundant coding, text annotations",
    "section": "3. Automatic labeling with geom_text_repel()",
    "text": "3. Automatic labeling with geom_text_repel()\n\n\n\nset.seed(6643)\n\nmtcars_named |&gt;\n  mutate(\n    # randomly exclude 50% of the labels\n    car = ifelse(runif(n()) &lt; 0.5, \"\", car)\n  ) |&gt; \n  ggplot(aes(weight, mpg)) +\n  geom_point() +\n  geom_text_repel(\n    aes(label = car),\n    max.overlaps = Inf\n  )"
  },
  {
    "objectID": "slides/redundant-coding.html#automatic-labeling-with-geom_text_repel-6",
    "href": "slides/redundant-coding.html#automatic-labeling-with-geom_text_repel-6",
    "title": "Redundant coding, text annotations",
    "section": "3. Automatic labeling with geom_text_repel()",
    "text": "3. Automatic labeling with geom_text_repel()\n\n\n\nset.seed(6644)\n\nmtcars_named |&gt;\n  mutate(\n    # randomly exclude 50% of the labels\n    car = ifelse(runif(n()) &lt; 0.5, \"\", car)\n  ) |&gt; \n  ggplot(aes(weight, mpg)) +\n  geom_point() +\n  geom_text_repel(\n    aes(label = car),\n    max.overlaps = Inf\n  )"
  },
  {
    "objectID": "slides/redundant-coding.html#automatic-labeling-with-geom_text_repel-7",
    "href": "slides/redundant-coding.html#automatic-labeling-with-geom_text_repel-7",
    "title": "Redundant coding, text annotations",
    "section": "3. Automatic labeling with geom_text_repel()",
    "text": "3. Automatic labeling with geom_text_repel()\n\n\n\nset.seed(6644)\n\nmtcars_named |&gt;\n  mutate(\n    # randomly exclude 50% of the labels\n    car = ifelse(runif(n()) &lt; 0.5, \"\", car)\n  ) |&gt; \n  ggplot(aes(weight, mpg)) +\n  geom_point() +\n  geom_text_repel(\n    aes(label = car),\n    max.overlaps = Inf,\n    box.padding = 0.7\n  )\n\n\n\n\n\n \n\n\n\n\n\n\nbox.padding controls how far labels are placed from data points"
  },
  {
    "objectID": "slides/redundant-coding.html#further-reading",
    "href": "slides/redundant-coding.html#further-reading",
    "title": "Redundant coding, text annotations",
    "section": "Further reading",
    "text": "Further reading\n\nFundamentals of Data Visualization: Chapter 20: Redundant coding\nggplot2 reference documentation: geom_text()\nggrepel documentation: Examples\nggrepel reference documentation: geom_text_repel()"
  },
  {
    "objectID": "slides/visualizing-amounts.html#many-datasets-contain-simple-amounts",
    "href": "slides/visualizing-amounts.html#many-datasets-contain-simple-amounts",
    "title": "Visualizing amounts",
    "section": "Many datasets contain simple amounts",
    "text": "Many datasets contain simple amounts\n\n\nExample: Highest grossing movies Dec. 2017\n\n\n\n\n\nrank\ntitle\namount\n\n\n\n\n1\nStar Wars\n71.57\n\n\n2\nJumanji\n36.17\n\n\n3\nPitch Perfect 3\n19.93\n\n\n4\nGreatest Showman\n8.81\n\n\n5\nFerdinand\n7.32\n\n\n\n\n\n\n\n\nData source: Box Office Mojo"
  },
  {
    "objectID": "slides/visualizing-amounts.html#we-can-visualize-amounts-with-bar-plots",
    "href": "slides/visualizing-amounts.html#we-can-visualize-amounts-with-bar-plots",
    "title": "Visualizing amounts",
    "section": "We can visualize amounts with bar plots",
    "text": "We can visualize amounts with bar plots"
  },
  {
    "objectID": "slides/visualizing-amounts.html#bars-can-also-run-horizontally",
    "href": "slides/visualizing-amounts.html#bars-can-also-run-horizontally",
    "title": "Visualizing amounts",
    "section": "Bars can also run horizontally",
    "text": "Bars can also run horizontally"
  },
  {
    "objectID": "slides/visualizing-amounts.html#avoid-rotated-axis-labels",
    "href": "slides/visualizing-amounts.html#avoid-rotated-axis-labels",
    "title": "Visualizing amounts",
    "section": "Avoid rotated axis labels",
    "text": "Avoid rotated axis labels"
  },
  {
    "objectID": "slides/visualizing-amounts.html#avoid-rotated-axis-labels-1",
    "href": "slides/visualizing-amounts.html#avoid-rotated-axis-labels-1",
    "title": "Visualizing amounts",
    "section": "Avoid rotated axis labels",
    "text": "Avoid rotated axis labels"
  },
  {
    "objectID": "slides/visualizing-amounts.html#pay-attention-to-the-order-of-the-bars",
    "href": "slides/visualizing-amounts.html#pay-attention-to-the-order-of-the-bars",
    "title": "Visualizing amounts",
    "section": "Pay attention to the order of the bars",
    "text": "Pay attention to the order of the bars"
  },
  {
    "objectID": "slides/visualizing-amounts.html#pay-attention-to-the-order-of-the-bars-1",
    "href": "slides/visualizing-amounts.html#pay-attention-to-the-order-of-the-bars-1",
    "title": "Visualizing amounts",
    "section": "Pay attention to the order of the bars",
    "text": "Pay attention to the order of the bars"
  },
  {
    "objectID": "slides/visualizing-amounts.html#we-can-use-dots-instead-of-bars",
    "href": "slides/visualizing-amounts.html#we-can-use-dots-instead-of-bars",
    "title": "Visualizing amounts",
    "section": "We can use dots instead of bars",
    "text": "We can use dots instead of bars"
  },
  {
    "objectID": "slides/visualizing-amounts.html#dots-are-preferable-if-we-want-to-truncate-the-axes",
    "href": "slides/visualizing-amounts.html#dots-are-preferable-if-we-want-to-truncate-the-axes",
    "title": "Visualizing amounts",
    "section": "Dots are preferable if we want to truncate the axes",
    "text": "Dots are preferable if we want to truncate the axes"
  },
  {
    "objectID": "slides/visualizing-amounts.html#dots-are-preferable-if-we-want-to-truncate-the-axes-1",
    "href": "slides/visualizing-amounts.html#dots-are-preferable-if-we-want-to-truncate-the-axes-1",
    "title": "Visualizing amounts",
    "section": "Dots are preferable if we want to truncate the axes",
    "text": "Dots are preferable if we want to truncate the axes\n\n\n\n\n\n \n\n\n\n\n\nBar lengths donot accurately represent thedata values"
  },
  {
    "objectID": "slides/visualizing-amounts.html#dots-are-preferable-if-we-want-to-truncate-the-axes-2",
    "href": "slides/visualizing-amounts.html#dots-are-preferable-if-we-want-to-truncate-the-axes-2",
    "title": "Visualizing amounts",
    "section": "Dots are preferable if we want to truncate the axes",
    "text": "Dots are preferable if we want to truncate the axes\n\n\n\n\n\n \n\n\n\n\n\nKey featuresof the dataare obscured"
  },
  {
    "objectID": "slides/visualizing-amounts.html#dots-are-preferable-if-we-want-to-truncate-the-axes-3",
    "href": "slides/visualizing-amounts.html#dots-are-preferable-if-we-want-to-truncate-the-axes-3",
    "title": "Visualizing amounts",
    "section": "Dots are preferable if we want to truncate the axes",
    "text": "Dots are preferable if we want to truncate the axes"
  },
  {
    "objectID": "slides/visualizing-amounts.html#we-use-grouped-bars-for-higher-dimensional-datasets",
    "href": "slides/visualizing-amounts.html#we-use-grouped-bars-for-higher-dimensional-datasets",
    "title": "Visualizing amounts",
    "section": "We use grouped bars for higher-dimensional datasets",
    "text": "We use grouped bars for higher-dimensional datasets\n\n\n\n\n\n\n \n\n\n\n\n\nData source: United States Census Bureau, 2016"
  },
  {
    "objectID": "slides/visualizing-amounts.html#we-are-free-to-choose-by-which-variable-to-group",
    "href": "slides/visualizing-amounts.html#we-are-free-to-choose-by-which-variable-to-group",
    "title": "Visualizing amounts",
    "section": "We are free to choose by which variable to group",
    "text": "We are free to choose by which variable to group\n\n\n\n\n\n\n \n\n\n\n\n\nData source: United States Census Bureau, 2016"
  },
  {
    "objectID": "slides/visualizing-amounts.html#we-can-also-use-multiple-plot-panels-facets",
    "href": "slides/visualizing-amounts.html#we-can-also-use-multiple-plot-panels-facets",
    "title": "Visualizing amounts",
    "section": "We can also use multiple plot panels (facets)",
    "text": "We can also use multiple plot panels (facets)\n\n\n\n\n\n \n\n\n\n\n\nData source: United States Census Bureau, 2016"
  },
  {
    "objectID": "slides/visualizing-amounts.html#dataset-highest-grossing-movies-dec.-2017",
    "href": "slides/visualizing-amounts.html#dataset-highest-grossing-movies-dec.-2017",
    "title": "Visualizing amounts",
    "section": "Dataset: Highest grossing movies Dec. 2017",
    "text": "Dataset: Highest grossing movies Dec. 2017\n\n# Data from Box Office Mojo for Dec. 22-24, 2017. \nboxoffice &lt;- tibble(\n  rank = 1:5,\n  title = c(\n    \"Star Wars\", \"Jumanji\", \"Pitch Perfect 3\",\n    \"Greatest Showman\", \"Ferdinand\"\n  ),\n  amount = c(71.57, 36.17, 19.93, 8.81, 7.32) # million USD\n)\n\nboxoffice\n\n# A tibble: 5 × 3\n   rank title            amount\n  &lt;int&gt; &lt;chr&gt;             &lt;dbl&gt;\n1     1 Star Wars         71.6 \n2     2 Jumanji           36.2 \n3     3 Pitch Perfect 3   19.9 \n4     4 Greatest Showman   8.81\n5     5 Ferdinand          7.32"
  },
  {
    "objectID": "slides/visualizing-amounts.html#visualize-as-a-bar-plot",
    "href": "slides/visualizing-amounts.html#visualize-as-a-bar-plot",
    "title": "Visualizing amounts",
    "section": "Visualize as a bar plot",
    "text": "Visualize as a bar plot\n\nggplot(boxoffice, aes(title, amount)) +\n  geom_col()  # \"col\" stands for column"
  },
  {
    "objectID": "slides/visualizing-amounts.html#order-by-data-value",
    "href": "slides/visualizing-amounts.html#order-by-data-value",
    "title": "Visualizing amounts",
    "section": "Order by data value",
    "text": "Order by data value\n\nggplot(boxoffice, aes(fct_reorder(title, amount), amount)) +\n  geom_col()  # \"col\" stands for column"
  },
  {
    "objectID": "slides/visualizing-amounts.html#order-by-data-value-descending",
    "href": "slides/visualizing-amounts.html#order-by-data-value-descending",
    "title": "Visualizing amounts",
    "section": "Order by data value, descending",
    "text": "Order by data value, descending\n\nggplot(boxoffice, aes(fct_reorder(title, -amount), amount)) +\n  geom_col() + \n  xlab(NULL) # remove x axis label"
  },
  {
    "objectID": "slides/visualizing-amounts.html#flip-x-and-y-set-custom-x-axis-label",
    "href": "slides/visualizing-amounts.html#flip-x-and-y-set-custom-x-axis-label",
    "title": "Visualizing amounts",
    "section": "Flip x and y, set custom x axis label",
    "text": "Flip x and y, set custom x axis label\n\nggplot(boxoffice, aes(amount, fct_reorder(title, amount))) +\n  geom_col() +\n  xlab(\"amount (in million USD)\") +\n  ylab(NULL)"
  },
  {
    "objectID": "slides/visualizing-amounts.html#example-visualize-number-of-penguins-per-species",
    "href": "slides/visualizing-amounts.html#example-visualize-number-of-penguins-per-species",
    "title": "Visualizing amounts",
    "section": "Example: Visualize number of penguins per species",
    "text": "Example: Visualize number of penguins per species\n\n\nlibrary(palmerpenguins)\n\npenguins\n\n# A tibble: 344 × 8\n   species island    bill_length_mm bill_depth_mm flipper_length_mm body_mass_g\n   &lt;fct&gt;   &lt;fct&gt;              &lt;dbl&gt;         &lt;dbl&gt;             &lt;int&gt;       &lt;int&gt;\n 1 Adelie  Torgersen           39.1          18.7               181        3750\n 2 Adelie  Torgersen           39.5          17.4               186        3800\n 3 Adelie  Torgersen           40.3          18                 195        3250\n 4 Adelie  Torgersen           NA            NA                  NA          NA\n 5 Adelie  Torgersen           36.7          19.3               193        3450\n 6 Adelie  Torgersen           39.3          20.6               190        3650\n 7 Adelie  Torgersen           38.9          17.8               181        3625\n 8 Adelie  Torgersen           39.2          19.6               195        4675\n 9 Adelie  Torgersen           34.1          18.1               193        3475\n10 Adelie  Torgersen           42            20.2               190        4250\n# ℹ 334 more rows\n# ℹ 2 more variables: sex &lt;fct&gt;, year &lt;int&gt;"
  },
  {
    "objectID": "slides/visualizing-amounts.html#use-geom_bar-to-count-before-plotting",
    "href": "slides/visualizing-amounts.html#use-geom_bar-to-count-before-plotting",
    "title": "Visualizing amounts",
    "section": "Use geom_bar() to count before plotting",
    "text": "Use geom_bar() to count before plotting\n\nggplot(penguins, aes(y = species)) + # no x aesthetic needed\n  geom_bar()"
  },
  {
    "objectID": "slides/visualizing-amounts.html#getting-the-bars-into-the-right-order",
    "href": "slides/visualizing-amounts.html#getting-the-bars-into-the-right-order",
    "title": "Visualizing amounts",
    "section": "Getting the bars into the right order",
    "text": "Getting the bars into the right order\n\nOption 1: Manually, using fct_relevel()\n\nggplot(penguins) +\n  aes(y = fct_relevel(species, \"Chinstrap\", \"Gentoo\", \"Adelie\")) +\n  geom_bar() +\n  ylab(NULL)"
  },
  {
    "objectID": "slides/visualizing-amounts.html#getting-the-bars-into-the-right-order-1",
    "href": "slides/visualizing-amounts.html#getting-the-bars-into-the-right-order-1",
    "title": "Visualizing amounts",
    "section": "Getting the bars into the right order",
    "text": "Getting the bars into the right order\nOption 2: Using fct_rev() and fct_infreq() from the forcats package\n\nggplot(penguins) +\n  aes(y = fct_rev(fct_infreq(species))) +\n  geom_bar() +\n  ylab(NULL)"
  },
  {
    "objectID": "slides/visualizing-amounts.html#display-counts-by-species-and-sex",
    "href": "slides/visualizing-amounts.html#display-counts-by-species-and-sex",
    "title": "Visualizing amounts",
    "section": "Display counts by species and sex",
    "text": "Display counts by species and sex\n\nggplot(penguins, aes(sex, fill = species)) +\n  geom_bar()"
  },
  {
    "objectID": "slides/visualizing-amounts.html#remove-missing-values-nas",
    "href": "slides/visualizing-amounts.html#remove-missing-values-nas",
    "title": "Visualizing amounts",
    "section": "Remove missing values (NAs)",
    "text": "Remove missing values (NAs)\n\n# remove all rows with any missing values\npenguins2 &lt;- na.omit(penguins)\n\nggplot(penguins2, aes(sex, fill = species)) +\n  geom_bar()"
  },
  {
    "objectID": "slides/visualizing-amounts.html#positions-define-how-subgroups-are-shown",
    "href": "slides/visualizing-amounts.html#positions-define-how-subgroups-are-shown",
    "title": "Visualizing amounts",
    "section": "Positions define how subgroups are shown",
    "text": "Positions define how subgroups are shown\nposition = \"dodge\": Place bars for subgroups side-by-side\n\n\nggplot(penguins2, aes(sex, fill = species)) +\n  geom_bar(position = \"dodge\")"
  },
  {
    "objectID": "slides/visualizing-amounts.html#positions-define-how-subgroups-are-shown-1",
    "href": "slides/visualizing-amounts.html#positions-define-how-subgroups-are-shown-1",
    "title": "Visualizing amounts",
    "section": "Positions define how subgroups are shown",
    "text": "Positions define how subgroups are shown\nposition = \"stack\": Place bars for subgroups on top of each other\n\n\nggplot(penguins2, aes(sex, fill = species)) +\n  geom_bar(position = \"stack\")"
  },
  {
    "objectID": "slides/visualizing-amounts.html#positions-define-how-subgroups-are-shown-2",
    "href": "slides/visualizing-amounts.html#positions-define-how-subgroups-are-shown-2",
    "title": "Visualizing amounts",
    "section": "Positions define how subgroups are shown",
    "text": "Positions define how subgroups are shown\nposition = \"fill\": Like \"stack\", but scale to 100%\n\n\nggplot(penguins2, aes(sex, fill = species)) +\n  geom_bar(position = \"fill\")"
  },
  {
    "objectID": "slides/visualizing-amounts.html#further-reading",
    "href": "slides/visualizing-amounts.html#further-reading",
    "title": "Visualizing amounts",
    "section": "Further reading",
    "text": "Further reading\n\nFundamentals of Data Visualization: Chapter 6: Visualizing amounts\nData Visualization—A Practical Introduction: Chapter 4.4: Geoms can transform data\nggplot2 reference documentation: geom_bar(), geom_col()\nggplot2 reference documentation: position_stack(), position_fill()"
  },
  {
    "objectID": "slides/visualizing-distributions-2.html#reminder-density-estimates-visualize-distributions",
    "href": "slides/visualizing-distributions-2.html#reminder-density-estimates-visualize-distributions",
    "title": "Visualizing distributions 2",
    "section": "Reminder: Density estimates visualize distributions",
    "text": "Reminder: Density estimates visualize distributions\n\n\nMean temperatures in Lincoln, NE, in January 2016:\n\n\n\n\n\ndate\nmean temp\n\n\n\n\n2016-01-01\n24\n\n\n2016-01-02\n23\n\n\n2016-01-03\n23\n\n\n2016-01-04\n17\n\n\n2016-01-05\n29\n\n\n2016-01-06\n33\n\n\n2016-01-07\n30\n\n\n2016-01-08\n25\n\n\n2016-01-09\n9\n\n\n2016-01-10\n11\n\n\n\n\n\n\n\n\n\n\n\n \n\n\n\n\n\nHow can we compare distributions across months?"
  },
  {
    "objectID": "slides/visualizing-distributions-2.html#a-bad-idea-many-overlapping-density-plots",
    "href": "slides/visualizing-distributions-2.html#a-bad-idea-many-overlapping-density-plots",
    "title": "Visualizing distributions 2",
    "section": "A bad idea: Many overlapping density plots",
    "text": "A bad idea: Many overlapping density plots"
  },
  {
    "objectID": "slides/visualizing-distributions-2.html#another-bad-idea-stacked-density-plots",
    "href": "slides/visualizing-distributions-2.html#another-bad-idea-stacked-density-plots",
    "title": "Visualizing distributions 2",
    "section": "Another bad idea: Stacked density plots",
    "text": "Another bad idea: Stacked density plots"
  },
  {
    "objectID": "slides/visualizing-distributions-2.html#somewhat-better-small-multiples",
    "href": "slides/visualizing-distributions-2.html#somewhat-better-small-multiples",
    "title": "Visualizing distributions 2",
    "section": "Somewhat better: Small multiples",
    "text": "Somewhat better: Small multiples"
  },
  {
    "objectID": "slides/visualizing-distributions-2.html#instead-show-values-along-y-conditions-along-x",
    "href": "slides/visualizing-distributions-2.html#instead-show-values-along-y-conditions-along-x",
    "title": "Visualizing distributions 2",
    "section": "Instead: Show values along y, conditions along x",
    "text": "Instead: Show values along y, conditions along x\n\n\n\n\n\n \n\n\n\n\n\nA boxplot is a crude way of visualizing a distribution."
  },
  {
    "objectID": "slides/visualizing-distributions-2.html#how-to-read-a-boxplot",
    "href": "slides/visualizing-distributions-2.html#how-to-read-a-boxplot",
    "title": "Visualizing distributions 2",
    "section": "How to read a boxplot",
    "text": "How to read a boxplot"
  },
  {
    "objectID": "slides/visualizing-distributions-2.html#if-you-like-density-plots-consider-violins",
    "href": "slides/visualizing-distributions-2.html#if-you-like-density-plots-consider-violins",
    "title": "Visualizing distributions 2",
    "section": "If you like density plots, consider violins",
    "text": "If you like density plots, consider violins\n\n\n\n\n\n \n\n\n\n\n\nA violin plot is a density plot rotated 90 degrees and then mirrored."
  },
  {
    "objectID": "slides/visualizing-distributions-2.html#how-to-read-a-violin-plot",
    "href": "slides/visualizing-distributions-2.html#how-to-read-a-violin-plot",
    "title": "Visualizing distributions 2",
    "section": "How to read a violin plot",
    "text": "How to read a violin plot"
  },
  {
    "objectID": "slides/visualizing-distributions-2.html#for-small-datasets-you-can-also-use-a-strip-chart",
    "href": "slides/visualizing-distributions-2.html#for-small-datasets-you-can-also-use-a-strip-chart",
    "title": "Visualizing distributions 2",
    "section": "For small datasets, you can also use a strip chart",
    "text": "For small datasets, you can also use a strip chart\nAdvantage: Can see raw data points instead of abstract representation.\n\n\n\n\n\n\n \n\n\n\n\n\n\nHorizontal jittering may be necessary to avoid overlapping points."
  },
  {
    "objectID": "slides/visualizing-distributions-2.html#for-small-datasets-you-can-also-use-a-strip-chart-1",
    "href": "slides/visualizing-distributions-2.html#for-small-datasets-you-can-also-use-a-strip-chart-1",
    "title": "Visualizing distributions 2",
    "section": "For small datasets, you can also use a strip chart",
    "text": "For small datasets, you can also use a strip chart\nAdvantage: Can see raw data points instead of abstract representation.\n\n\n\n\n\n \n\n\n\n\n\nHorizontal jittering may be necessary to avoid overlapping points."
  },
  {
    "objectID": "slides/visualizing-distributions-2.html#for-small-datasets-you-can-also-use-a-strip-chart-2",
    "href": "slides/visualizing-distributions-2.html#for-small-datasets-you-can-also-use-a-strip-chart-2",
    "title": "Visualizing distributions 2",
    "section": "For small datasets, you can also use a strip chart",
    "text": "For small datasets, you can also use a strip chart\nAdvantage: Can see raw data points instead of abstract representation.\n\n\n\n\n\n \n\n\n\n\n\nHorizontal jittering may be necessary to avoid overlapping points."
  },
  {
    "objectID": "slides/visualizing-distributions-2.html#we-can-also-jitter-points-into-violins",
    "href": "slides/visualizing-distributions-2.html#we-can-also-jitter-points-into-violins",
    "title": "Visualizing distributions 2",
    "section": "We can also jitter points into violins",
    "text": "We can also jitter points into violins\n\n\n\n\n\n \n\n\n\n\n\nSuch plots are called sina plots, to honor Sina Hadi Sohi."
  },
  {
    "objectID": "slides/visualizing-distributions-2.html#but-maybe-theres-hope-for-overlapping-density-plots",
    "href": "slides/visualizing-distributions-2.html#but-maybe-theres-hope-for-overlapping-density-plots",
    "title": "Visualizing distributions 2",
    "section": "But maybe there’s hope for overlapping density plots?",
    "text": "But maybe there’s hope for overlapping density plots?\n\n\n\n\n\n \n\n\n\n\n\nHow about we stagger the densities vertically?"
  },
  {
    "objectID": "slides/visualizing-distributions-2.html#vertically-staggered-density-plots-are-called-ridgelines",
    "href": "slides/visualizing-distributions-2.html#vertically-staggered-density-plots-are-called-ridgelines",
    "title": "Visualizing distributions 2",
    "section": "Vertically staggered density plots are called ridgelines",
    "text": "Vertically staggered density plots are called ridgelines\n\n\n\n\n\n \n\n\n\n\n\nNotice the single fill color. More colors would be distracting."
  },
  {
    "objectID": "slides/visualizing-distributions-2.html#getting-the-data",
    "href": "slides/visualizing-distributions-2.html#getting-the-data",
    "title": "Visualizing distributions 2",
    "section": "Getting the data",
    "text": "Getting the data\n\nAll examples will use the lincoln_temps dataset:\n\nlincoln_temps &lt;- readRDS(url(\"https://wilkelab.org/DSC385/datasets/lincoln_temps.rds\"))\n\nlincoln_temps\n\n# A tibble: 366 × 4\n   date       month month_long mean_temp\n   &lt;date&gt;     &lt;fct&gt; &lt;fct&gt;          &lt;int&gt;\n 1 2016-01-01 Jan   January           24\n 2 2016-01-02 Jan   January           23\n 3 2016-01-03 Jan   January           23\n 4 2016-01-04 Jan   January           17\n 5 2016-01-05 Jan   January           29\n 6 2016-01-06 Jan   January           33\n 7 2016-01-07 Jan   January           30\n 8 2016-01-08 Jan   January           25\n 9 2016-01-09 Jan   January            9\n10 2016-01-10 Jan   January           11\n# ℹ 356 more rows"
  },
  {
    "objectID": "slides/visualizing-distributions-2.html#making-boxplots-violins-etc.-in-ggplot2-1",
    "href": "slides/visualizing-distributions-2.html#making-boxplots-violins-etc.-in-ggplot2-1",
    "title": "Visualizing distributions 2",
    "section": "Making boxplots, violins, etc. in ggplot2",
    "text": "Making boxplots, violins, etc. in ggplot2\n\n\n\n\n\n\n\n\n\nPlot type\nGeom\nNotes\n\n\n\n\nboxplot\ngeom_boxplot()\n\n\n\nviolin plot\ngeom_violin()\n\n\n\nstrip chart\ngeom_point()\nJittering requires position_jitter()\n\n\nsina plot\ngeom_sina()\nFrom package ggforce\n\n\nridgeline\ngeom_density_ridges()\nFrom package ggridges"
  },
  {
    "objectID": "slides/visualizing-distributions-2.html#examples-boxplot",
    "href": "slides/visualizing-distributions-2.html#examples-boxplot",
    "title": "Visualizing distributions 2",
    "section": "Examples: Boxplot",
    "text": "Examples: Boxplot\n\n\nggplot(lincoln_temps, aes(x = month, y = mean_temp)) +\n  geom_boxplot(fill = \"skyblue\")"
  },
  {
    "objectID": "slides/visualizing-distributions-2.html#examples-violins",
    "href": "slides/visualizing-distributions-2.html#examples-violins",
    "title": "Visualizing distributions 2",
    "section": "Examples: Violins",
    "text": "Examples: Violins\n\n\nggplot(lincoln_temps, aes(x = month, y = mean_temp)) +\n  geom_violin(fill = \"skyblue\")"
  },
  {
    "objectID": "slides/visualizing-distributions-2.html#examples-strip-chart-no-jitter",
    "href": "slides/visualizing-distributions-2.html#examples-strip-chart-no-jitter",
    "title": "Visualizing distributions 2",
    "section": "Examples: Strip chart (no jitter)",
    "text": "Examples: Strip chart (no jitter)\n\n\nggplot(lincoln_temps, aes(x = month, y = mean_temp)) +\n  geom_point(size = 0.75)  # reduce point size to minimize overplotting"
  },
  {
    "objectID": "slides/visualizing-distributions-2.html#examples-strip-chart-w-jitter",
    "href": "slides/visualizing-distributions-2.html#examples-strip-chart-w-jitter",
    "title": "Visualizing distributions 2",
    "section": "Examples: Strip chart (w/ jitter)",
    "text": "Examples: Strip chart (w/ jitter)\n\n\nggplot(lincoln_temps, aes(x = month, y = mean_temp)) +\n  geom_point(size = 0.75,  # reduce point size to minimize overplotting \n    position = position_jitter(\n      width = 0.15,  # amount of jitter in horizontal direction\n      height = 0     # amount of jitter in vertical direction (0 = none)\n    )\n  )"
  },
  {
    "objectID": "slides/visualizing-distributions-2.html#examples-sina-plot",
    "href": "slides/visualizing-distributions-2.html#examples-sina-plot",
    "title": "Visualizing distributions 2",
    "section": "Examples: Sina plot",
    "text": "Examples: Sina plot\n\n\nlibrary(ggforce) # for geom_sina()\n\nggplot(lincoln_temps, aes(x = month, y = mean_temp)) +\n  geom_violin(fill = \"skyblue\", color = NA) + # violins in background\n  geom_sina(size = 0.75) # sina jittered points in foreground"
  },
  {
    "objectID": "slides/visualizing-distributions-2.html#examples-ridgeline-plot",
    "href": "slides/visualizing-distributions-2.html#examples-ridgeline-plot",
    "title": "Visualizing distributions 2",
    "section": "Examples: Ridgeline plot",
    "text": "Examples: Ridgeline plot\n\n\nlibrary(ggridges) # for geom_density_ridges\n\nggplot(lincoln_temps, aes(x = mean_temp, y = month_long)) +\n  geom_density_ridges()"
  },
  {
    "objectID": "slides/visualizing-distributions-2.html#further-reading",
    "href": "slides/visualizing-distributions-2.html#further-reading",
    "title": "Visualizing distributions 2",
    "section": "Further reading",
    "text": "Further reading\n\nFundamentals of Data Visualization: Chapter 7: Visualizing many distributions at once\nggplot2 reference documentation: geom_boxplot(), geom_violin(), position_jitter()\nggforce reference documentation: geom_sina()\nggridges reference documentation: geom_density_ridges()"
  },
  {
    "objectID": "slides/visualizing-trends.html#we-visualize-linear-trends-with-regression-lines",
    "href": "slides/visualizing-trends.html#we-visualize-linear-trends-with-regression-lines",
    "title": "Visualizing Trends",
    "section": "We visualize linear trends with regression lines",
    "text": "We visualize linear trends with regression lines"
  },
  {
    "objectID": "slides/visualizing-trends.html#we-visualize-linear-trends-with-regression-lines-1",
    "href": "slides/visualizing-trends.html#we-visualize-linear-trends-with-regression-lines-1",
    "title": "Visualizing Trends",
    "section": "We visualize linear trends with regression lines",
    "text": "We visualize linear trends with regression lines"
  },
  {
    "objectID": "slides/visualizing-trends.html#we-visualize-linear-trends-with-regression-lines-2",
    "href": "slides/visualizing-trends.html#we-visualize-linear-trends-with-regression-lines-2",
    "title": "Visualizing Trends",
    "section": "We visualize linear trends with regression lines",
    "text": "We visualize linear trends with regression lines"
  },
  {
    "objectID": "slides/visualizing-trends.html#we-visualize-linear-trends-with-regression-lines-3",
    "href": "slides/visualizing-trends.html#we-visualize-linear-trends-with-regression-lines-3",
    "title": "Visualizing Trends",
    "section": "We visualize linear trends with regression lines",
    "text": "We visualize linear trends with regression lines"
  },
  {
    "objectID": "slides/visualizing-trends.html#exponential-trends-are-linear-trends-on-a-log-scale",
    "href": "slides/visualizing-trends.html#exponential-trends-are-linear-trends-on-a-log-scale",
    "title": "Visualizing Trends",
    "section": "Exponential trends are linear trends on a log scale",
    "text": "Exponential trends are linear trends on a log scale"
  },
  {
    "objectID": "slides/visualizing-trends.html#exponential-trends-are-linear-trends-on-a-log-scale-1",
    "href": "slides/visualizing-trends.html#exponential-trends-are-linear-trends-on-a-log-scale-1",
    "title": "Visualizing Trends",
    "section": "Exponential trends are linear trends on a log scale",
    "text": "Exponential trends are linear trends on a log scale"
  },
  {
    "objectID": "slides/visualizing-trends.html#exponential-trends-are-linear-trends-on-a-log-scale-2",
    "href": "slides/visualizing-trends.html#exponential-trends-are-linear-trends-on-a-log-scale-2",
    "title": "Visualizing Trends",
    "section": "Exponential trends are linear trends on a log scale",
    "text": "Exponential trends are linear trends on a log scale"
  },
  {
    "objectID": "slides/visualizing-trends.html#exponential-trends-are-linear-trends-on-a-log-scale-3",
    "href": "slides/visualizing-trends.html#exponential-trends-are-linear-trends-on-a-log-scale-3",
    "title": "Visualizing Trends",
    "section": "Exponential trends are linear trends on a log scale",
    "text": "Exponential trends are linear trends on a log scale"
  },
  {
    "objectID": "slides/visualizing-trends.html#exponential-trends-are-linear-trends-on-a-log-scale-4",
    "href": "slides/visualizing-trends.html#exponential-trends-are-linear-trends-on-a-log-scale-4",
    "title": "Visualizing Trends",
    "section": "Exponential trends are linear trends on a log scale",
    "text": "Exponential trends are linear trends on a log scale"
  },
  {
    "objectID": "slides/visualizing-trends.html#reminder-the-grammar-of-graphics-pipeline",
    "href": "slides/visualizing-trends.html#reminder-the-grammar-of-graphics-pipeline",
    "title": "Visualizing Trends",
    "section": "Reminder: The Grammar-of-Graphics pipeline",
    "text": "Reminder: The Grammar-of-Graphics pipeline\n\n\n\n\n\n\n\n\nScale transformations are applied before statistical transformations"
  },
  {
    "objectID": "slides/visualizing-trends.html#time-series-often-show-long-term-persistent-trends",
    "href": "slides/visualizing-trends.html#time-series-often-show-long-term-persistent-trends",
    "title": "Visualizing Trends",
    "section": "Time series often show long-term persistent trends",
    "text": "Time series often show long-term persistent trends\n\n\nHousing prices follow long-term exponential growth, overlaid with boom/bust cycles\n\n\n\n\n\n\n \n\n\n\n\n\nHouse Price Index (HPI) for California. Source: Freddie Mac"
  },
  {
    "objectID": "slides/visualizing-trends.html#raw-time-series-can-be-misleading",
    "href": "slides/visualizing-trends.html#raw-time-series-can-be-misleading",
    "title": "Visualizing Trends",
    "section": "Raw time series can be misleading",
    "text": "Raw time series can be misleading\n\n\n\n\n\n \n\n\n\n\n\nDid housing prices in California decline substantially from 1990 to 1998?\n\n\nDid housing prices in West Virginia recover by 2020?\n\n\nUS States House Price Index (HPI). Source: Freddie Mac"
  },
  {
    "objectID": "slides/visualizing-trends.html#comparing-the-raw-time-series-to-the-trendline-helps",
    "href": "slides/visualizing-trends.html#comparing-the-raw-time-series-to-the-trendline-helps",
    "title": "Visualizing Trends",
    "section": "Comparing the raw time series to the trendline helps",
    "text": "Comparing the raw time series to the trendline helps\n\n\n\n\n\n \n\n\n\n\n\nDid housing prices in California decline substantially from 1990 to 1998?\n\n\nDid housing prices in West Virginia recover by 2020?\n\n\nUS States House Price Index (HPI). Source: Freddie Mac"
  },
  {
    "objectID": "slides/visualizing-trends.html#even-better-remove-underlying-trend",
    "href": "slides/visualizing-trends.html#even-better-remove-underlying-trend",
    "title": "Visualizing Trends",
    "section": "Even better: Remove underlying trend",
    "text": "Even better: Remove underlying trend\n\n\n\n\n\n \n\n\n\n\n\nDid housing prices in California decline substantially from 1990 to 1998? — yes\n\n\nDid housing prices in West Virginia recover by 2020? — no\n\n\nUS States House Price Index (HPI). Source: Freddie Mac"
  },
  {
    "objectID": "slides/visualizing-trends.html#exponential-versus-linear-de-trending",
    "href": "slides/visualizing-trends.html#exponential-versus-linear-de-trending",
    "title": "Visualizing Trends",
    "section": "Exponential versus linear de-trending",
    "text": "Exponential versus linear de-trending\n\nTwo choices:\n\n\n\nFit linear trendline, remove by subtraction\nFit exponential trendline (linear in log space), remove by division\n\n\n\nIt is critical to make the correct choice for the dataset at hand\n\n\nAny type of growth or decay process (change is proportional to present value) must be analyzed in log space"
  },
  {
    "objectID": "slides/visualizing-trends.html#housing-price-analysis-in-linear-space-looks-wrong",
    "href": "slides/visualizing-trends.html#housing-price-analysis-in-linear-space-looks-wrong",
    "title": "Visualizing Trends",
    "section": "Housing-price analysis in linear space looks wrong",
    "text": "Housing-price analysis in linear space looks wrong\n\n\n\n\n\n \n\n\n\n\n\nUS States House Price Index (HPI). Source: Freddie Mac"
  },
  {
    "objectID": "slides/visualizing-trends.html#linear-de-trending-creates-systematic-deviations",
    "href": "slides/visualizing-trends.html#linear-de-trending-creates-systematic-deviations",
    "title": "Visualizing Trends",
    "section": "Linear de-trending creates systematic deviations",
    "text": "Linear de-trending creates systematic deviations\n\n\n\n\n\n \n\n\n\n\n\nUS States House Price Index (HPI). Source: Freddie Mac"
  },
  {
    "objectID": "slides/visualizing-trends.html#log-space-de-trending-one-more-time-for-comparison",
    "href": "slides/visualizing-trends.html#log-space-de-trending-one-more-time-for-comparison",
    "title": "Visualizing Trends",
    "section": "Log-space de-trending one more time for comparison",
    "text": "Log-space de-trending one more time for comparison\n\n\n\n\n\n \n\n\n\n\n\nUS States House Price Index (HPI). Source: Freddie Mac"
  },
  {
    "objectID": "slides/visualizing-trends.html#many-time-series-show-regular-seasonal-fluctuations",
    "href": "slides/visualizing-trends.html#many-time-series-show-regular-seasonal-fluctuations",
    "title": "Visualizing Trends",
    "section": "Many time series show regular seasonal fluctuations",
    "text": "Many time series show regular seasonal fluctuations\n\n\n\n\n\n \n\n\n\n\n\nCO2 abundance in the atmosphere over time. Source: NOAA Global Monitoring Laboratory"
  },
  {
    "objectID": "slides/visualizing-trends.html#many-time-series-show-regular-seasonal-fluctuations-1",
    "href": "slides/visualizing-trends.html#many-time-series-show-regular-seasonal-fluctuations-1",
    "title": "Visualizing Trends",
    "section": "Many time series show regular seasonal fluctuations",
    "text": "Many time series show regular seasonal fluctuations\n\n\n\n\n\n \n\n\n\n\n\nCO2 abundance in the atmosphere over time. Source: NOAA Global Monitoring Laboratory"
  },
  {
    "objectID": "slides/visualizing-trends.html#seasonal-decomposition-of-time-series-by-loess-stl",
    "href": "slides/visualizing-trends.html#seasonal-decomposition-of-time-series-by-loess-stl",
    "title": "Visualizing Trends",
    "section": "Seasonal Decomposition of Time Series by Loess (STL)",
    "text": "Seasonal Decomposition of Time Series by Loess (STL)\nWe can use STL to decompose a time series into:\n\nlong-term trend\nseasonal effect\nremainder (noise)"
  },
  {
    "objectID": "slides/visualizing-trends.html#keeling-curve-decomposition",
    "href": "slides/visualizing-trends.html#keeling-curve-decomposition",
    "title": "Visualizing Trends",
    "section": "",
    "text": "Magnitude of remainder should be small compared to magnitude of seasonal fluctuations"
  },
  {
    "objectID": "slides/visualizing-trends.html#keeling-curve-decomposition-zoomed",
    "href": "slides/visualizing-trends.html#keeling-curve-decomposition-zoomed",
    "title": "Visualizing Trends",
    "section": "",
    "text": "Magnitude of remainder should be small compared to magnitude of seasonal fluctuations"
  },
  {
    "objectID": "slides/visualizing-trends.html#other-strategies-for-adjusting-for-seasonality",
    "href": "slides/visualizing-trends.html#other-strategies-for-adjusting-for-seasonality",
    "title": "Visualizing Trends",
    "section": "Other strategies for adjusting for seasonality",
    "text": "Other strategies for adjusting for seasonality\n\nSimpler approaches:\n\nFit model with fixed or random effects for specific seasons\n\n\n\nMore complex approaches:\n\nPerform Fourier or wavelet decomposition\n\n\n\nAll of these are beyond the scope of this class"
  },
  {
    "objectID": "slides/visualizing-trends.html#getting-the-data",
    "href": "slides/visualizing-trends.html#getting-the-data",
    "title": "Visualizing Trends",
    "section": "Getting the data",
    "text": "Getting the data\n\nFirst dataset: blue_jays\n\n\n\nblue_jays &lt;- read_csv(\"https://wilkelab.org/DSC385/datasets/blue_jays.csv\")\nblue_jays\n\n# A tibble: 123 × 8\n   bird_id    sex   bill_depth_mm bill_width_mm bill_length_mm head_length_mm\n   &lt;chr&gt;      &lt;chr&gt;         &lt;dbl&gt;         &lt;dbl&gt;          &lt;dbl&gt;          &lt;dbl&gt;\n 1 0000-00000 M              8.26          9.21           25.9           56.6\n 2 1142-05901 M              8.54          8.76           25.0           56.4\n 3 1142-05905 M              8.39          8.78           26.1           57.3\n 4 1142-05907 F              7.78          9.3            23.5           53.8\n 5 1142-05909 M              8.71          9.84           25.5           57.3\n 6 1142-05911 F              7.28          9.3            22.2           52.2\n 7 1142-05912 M              8.74          9.28           25.4           57.1\n 8 1142-05914 M              8.72          9.94           30             60.7\n 9 1142-05917 F              8.2           9.01           22.8           52.8\n10 1142-05920 F              7.67          9.31           24.6           54.9\n# ℹ 113 more rows\n# ℹ 2 more variables: body_mass_g &lt;dbl&gt;, skull_size_mm &lt;dbl&gt;"
  },
  {
    "objectID": "slides/visualizing-trends.html#getting-the-data-1",
    "href": "slides/visualizing-trends.html#getting-the-data-1",
    "title": "Visualizing Trends",
    "section": "Getting the data",
    "text": "Getting the data\n\nSecond dataset: cars93\n\n\n\ncars93 &lt;- read_csv(\"https://wilkelab.org/DSC385/datasets/cars93.csv\")\ncars93\n\n# A tibble: 93 × 27\n   Manufacturer Model      Type   Min.Price Price Max.Price MPG.city MPG.highway\n   &lt;chr&gt;        &lt;chr&gt;      &lt;chr&gt;      &lt;dbl&gt; &lt;dbl&gt;     &lt;dbl&gt;    &lt;dbl&gt;       &lt;dbl&gt;\n 1 Acura        Integra    Small       12.9  15.9      18.8       25          31\n 2 Acura        Legend     Midsi…      29.2  33.9      38.7       18          25\n 3 Audi         90         Compa…      25.9  29.1      32.3       20          26\n 4 Audi         100        Midsi…      30.8  37.7      44.6       19          26\n 5 BMW          535i       Midsi…      23.7  30        36.2       22          30\n 6 Buick        Century    Midsi…      14.2  15.7      17.3       22          31\n 7 Buick        LeSabre    Large       19.9  20.8      21.7       19          28\n 8 Buick        Roadmaster Large       22.6  23.7      24.9       16          25\n 9 Buick        Riviera    Midsi…      26.3  26.3      26.3       19          27\n10 Cadillac     DeVille    Large       33    34.7      36.3       16          25\n# ℹ 83 more rows\n# ℹ 19 more variables: AirBags &lt;chr&gt;, DriveTrain &lt;chr&gt;, Cylinders &lt;chr&gt;,\n#   EngineSize &lt;dbl&gt;, Horsepower &lt;dbl&gt;, RPM &lt;dbl&gt;, Rev.per.mile &lt;dbl&gt;,\n#   Man.trans.avail &lt;chr&gt;, Fuel.tank.capacity &lt;dbl&gt;, Passengers &lt;dbl&gt;,\n#   Length &lt;dbl&gt;, Wheelbase &lt;dbl&gt;, Width &lt;dbl&gt;, Turn.circle &lt;dbl&gt;,\n#   Rear.seat.room &lt;dbl&gt;, Luggage.room &lt;dbl&gt;, Weight &lt;dbl&gt;, Origin &lt;chr&gt;,\n#   Make &lt;chr&gt;"
  },
  {
    "objectID": "slides/visualizing-trends.html#we-add-trend-lines-with-geom_smooth",
    "href": "slides/visualizing-trends.html#we-add-trend-lines-with-geom_smooth",
    "title": "Visualizing Trends",
    "section": "We add trend lines with geom_smooth()",
    "text": "We add trend lines with geom_smooth()\n\n\n\nggplot(blue_jays) +\n  aes(body_mass_g, head_length_mm) + \n  geom_point() + \n  theme_bw()\n\n\n\n\n\n \n\n\n\n\n\n\nScatter plot only"
  },
  {
    "objectID": "slides/visualizing-trends.html#we-add-trend-lines-with-geom_smooth-1",
    "href": "slides/visualizing-trends.html#we-add-trend-lines-with-geom_smooth-1",
    "title": "Visualizing Trends",
    "section": "We add trend lines with geom_smooth()",
    "text": "We add trend lines with geom_smooth()\n\n\n\nggplot(blue_jays) +\n  aes(body_mass_g, head_length_mm) + \n  geom_point() + \n  geom_smooth() +\n  theme_bw()\n\n\n\n\n\n \n\n\n\n\n\n\nScatter plot with loess smooth"
  },
  {
    "objectID": "slides/visualizing-trends.html#we-add-trend-lines-with-geom_smooth-2",
    "href": "slides/visualizing-trends.html#we-add-trend-lines-with-geom_smooth-2",
    "title": "Visualizing Trends",
    "section": "We add trend lines with geom_smooth()",
    "text": "We add trend lines with geom_smooth()\n\n\n\nggplot(blue_jays) +\n  aes(body_mass_g, head_length_mm) + \n  geom_point() + \n  geom_smooth(\n    # smooth using linear model\n    method = \"lm\"\n  ) +\n  theme_bw()\n\n\n\n\n\n \n\n\n\n\n\n\nScatter plot with linear regression"
  },
  {
    "objectID": "slides/visualizing-trends.html#we-add-trend-lines-with-geom_smooth-3",
    "href": "slides/visualizing-trends.html#we-add-trend-lines-with-geom_smooth-3",
    "title": "Visualizing Trends",
    "section": "We add trend lines with geom_smooth()",
    "text": "We add trend lines with geom_smooth()\n\n\n\nggplot(blue_jays) +\n  aes(body_mass_g, head_length_mm) + \n  geom_point() + \n  geom_smooth(\n    # smooth using linear model\n    method = \"lm\",\n    # suppress confidence band\n    se = FALSE\n  ) +\n  theme_bw()\n\n\n\n\n\n \n\n\n\n\n\n\nScatter plot with linear regression, no confidence band"
  },
  {
    "objectID": "slides/visualizing-trends.html#we-add-trend-lines-with-geom_smooth-4",
    "href": "slides/visualizing-trends.html#we-add-trend-lines-with-geom_smooth-4",
    "title": "Visualizing Trends",
    "section": "We add trend lines with geom_smooth()",
    "text": "We add trend lines with geom_smooth()\n\n\n\nggplot(blue_jays) +\n  aes(\n    body_mass_g, head_length_mm,\n    color = sex\n  ) + \n  geom_point() + \n  geom_smooth(\n    # smooth using linear model\n    method = \"lm\",\n    # suppress confidence band\n    se = FALSE\n  ) +\n  theme_bw()\n\n\n\n\n\n \n\n\n\n\n\n\nScatter plot with linear regression by sex"
  },
  {
    "objectID": "slides/visualizing-trends.html#example-fuel-tank-capacity-versus-price-in-cars",
    "href": "slides/visualizing-trends.html#example-fuel-tank-capacity-versus-price-in-cars",
    "title": "Visualizing Trends",
    "section": "Example: Fuel-tank capacity versus price in cars",
    "text": "Example: Fuel-tank capacity versus price in cars\n\n\n\nggplot(cars93) +\n  aes(x = Price, y = Fuel.tank.capacity) + \n  geom_point() + \n  geom_smooth(\n    # smooth using linear model\n    method = \"lm\",\n    # suppress confidence band\n    se = FALSE\n  ) +\n  theme_bw()\n\n\n\n\n\n \n\n\n\n\n\n\nDo more expensive cars have a larger fuel tank?"
  },
  {
    "objectID": "slides/visualizing-trends.html#example-fuel-tank-capacity-versus-price-in-cars-1",
    "href": "slides/visualizing-trends.html#example-fuel-tank-capacity-versus-price-in-cars-1",
    "title": "Visualizing Trends",
    "section": "Example: Fuel-tank capacity versus price in cars",
    "text": "Example: Fuel-tank capacity versus price in cars\n\n\n\nggplot(cars93) +\n  aes(x = Price, y = Fuel.tank.capacity) + \n  geom_point() +\n  # default: loess smoothing\n  geom_smooth(\n    se = FALSE\n  ) +\n  theme_bw()"
  },
  {
    "objectID": "slides/visualizing-trends.html#example-fuel-tank-capacity-versus-price-in-cars-2",
    "href": "slides/visualizing-trends.html#example-fuel-tank-capacity-versus-price-in-cars-2",
    "title": "Visualizing Trends",
    "section": "Example: Fuel-tank capacity versus price in cars",
    "text": "Example: Fuel-tank capacity versus price in cars\n\n\n\nggplot(cars93) +\n  aes(x = Price, y = Fuel.tank.capacity) + \n  geom_point() +\n  # loess smoothing\n  geom_smooth(\n    se = FALSE,\n    method = \"loess\",\n    formula = y ~ x\n  ) +\n  theme_bw()\n\n\n\n\n\n \n\n\n\n\n\n\nCaution: Exact shape of smoothing line depends on method details"
  },
  {
    "objectID": "slides/visualizing-trends.html#example-fuel-tank-capacity-versus-price-in-cars-3",
    "href": "slides/visualizing-trends.html#example-fuel-tank-capacity-versus-price-in-cars-3",
    "title": "Visualizing Trends",
    "section": "Example: Fuel-tank capacity versus price in cars",
    "text": "Example: Fuel-tank capacity versus price in cars\n\n\n\nggplot(cars93) +\n  aes(x = Price, y = Fuel.tank.capacity) + \n  geom_point() +\n  # loess smoothing\n  geom_smooth(\n    se = FALSE,\n    method = \"loess\",\n    formula = y ~ x,\n    span = 0.25\n  ) +\n  theme_bw()\n\n\n\n\n\n \n\n\n\n\n\n\nCaution: Exact shape of smoothing line depends on method details"
  },
  {
    "objectID": "slides/visualizing-trends.html#example-fuel-tank-capacity-versus-price-in-cars-4",
    "href": "slides/visualizing-trends.html#example-fuel-tank-capacity-versus-price-in-cars-4",
    "title": "Visualizing Trends",
    "section": "Example: Fuel-tank capacity versus price in cars",
    "text": "Example: Fuel-tank capacity versus price in cars\n\n\n\nggplot(cars93) +\n  aes(x = Price, y = Fuel.tank.capacity) + \n  geom_point() +\n  # loess smoothing\n  geom_smooth(\n    se = FALSE,\n    method = \"loess\",\n    formula = y ~ x,\n    span = 0.75 # default value\n  ) +\n  theme_bw()\n\n\n\n\n\n \n\n\n\n\n\n\nCaution: Exact shape of smoothing line depends on method details"
  },
  {
    "objectID": "slides/visualizing-trends.html#example-fuel-tank-capacity-versus-price-in-cars-5",
    "href": "slides/visualizing-trends.html#example-fuel-tank-capacity-versus-price-in-cars-5",
    "title": "Visualizing Trends",
    "section": "Example: Fuel-tank capacity versus price in cars",
    "text": "Example: Fuel-tank capacity versus price in cars\n\n\n\nggplot(cars93) +\n  aes(x = Price, y = Fuel.tank.capacity) + \n  geom_point() +\n  # loess smoothing\n  geom_smooth(\n    se = FALSE,\n    method = \"loess\",\n    formula = y ~ x,\n    span = 1.0\n  ) +\n  theme_bw()\n\n\n\n\n\n \n\n\n\n\n\n\nCaution: Exact shape of smoothing line depends on method details"
  },
  {
    "objectID": "slides/visualizing-trends.html#example-fuel-tank-capacity-versus-price-in-cars-6",
    "href": "slides/visualizing-trends.html#example-fuel-tank-capacity-versus-price-in-cars-6",
    "title": "Visualizing Trends",
    "section": "Example: Fuel-tank capacity versus price in cars",
    "text": "Example: Fuel-tank capacity versus price in cars\n\n\n\nggplot(cars93) +\n  aes(x = Price, y = Fuel.tank.capacity) + \n  geom_point() +\n  # loess smoothing\n  geom_smooth(\n    se = FALSE,\n    method = \"loess\",\n    formula = y ~ x,\n    span = 1.5\n  ) +\n  theme_bw()\n\n\n\n\n\n \n\n\n\n\n\n\nCaution: Exact shape of smoothing line depends on method details"
  },
  {
    "objectID": "slides/visualizing-trends.html#example-fuel-tank-capacity-versus-price-in-cars-7",
    "href": "slides/visualizing-trends.html#example-fuel-tank-capacity-versus-price-in-cars-7",
    "title": "Visualizing Trends",
    "section": "Example: Fuel-tank capacity versus price in cars",
    "text": "Example: Fuel-tank capacity versus price in cars\n\n\n\nggplot(cars93) +\n  aes(x = Price, y = Fuel.tank.capacity) + \n  geom_point() +\n  # cubic spline, 5 knots\n  geom_smooth(\n    se = FALSE,\n    method = \"gam\",\n    formula = y ~ s(x, k = 5, bs = 'cr')\n  ) +\n  theme_bw()\n\n\n\n\n\n \n\n\n\n\n\n\nCaution: Exact shape of smoothing line depends on method details"
  },
  {
    "objectID": "slides/visualizing-trends.html#example-fuel-tank-capacity-versus-price-in-cars-8",
    "href": "slides/visualizing-trends.html#example-fuel-tank-capacity-versus-price-in-cars-8",
    "title": "Visualizing Trends",
    "section": "Example: Fuel-tank capacity versus price in cars",
    "text": "Example: Fuel-tank capacity versus price in cars\n\n\n\nggplot(cars93) +\n  aes(x = Price, y = Fuel.tank.capacity) + \n  geom_point() +\n  # thin-plate spline, 3 knots\n  geom_smooth(\n    se = FALSE,\n    method = \"gam\",\n    formula = y ~ s(x, k = 3)\n  ) +\n  theme_bw()\n\n\n\n\n\n \n\n\n\n\n\n\nCaution: Exact shape of smoothing line depends on method details"
  },
  {
    "objectID": "slides/visualizing-trends.html#example-fuel-tank-capacity-versus-price-in-cars-9",
    "href": "slides/visualizing-trends.html#example-fuel-tank-capacity-versus-price-in-cars-9",
    "title": "Visualizing Trends",
    "section": "Example: Fuel-tank capacity versus price in cars",
    "text": "Example: Fuel-tank capacity versus price in cars\n\n\n\nggplot(cars93) +\n  aes(x = Price, y = Fuel.tank.capacity) + \n  geom_point() +\n  # Gaussian process spline, 6 knots\n  geom_smooth(\n    se = FALSE,\n    method = \"gam\",\n    formula = y ~ s(x, k = 6, bs = 'gp')\n  ) +\n  theme_bw()\n\n\n\n\n\n \n\n\n\n\n\n\nCaution: Exact shape of smoothing line depends on method details\n\n\nSmoothing lines are particularly unreliable near their endpoints"
  },
  {
    "objectID": "slides/visualizing-trends.html#further-reading",
    "href": "slides/visualizing-trends.html#further-reading",
    "title": "Visualizing Trends",
    "section": "Further reading",
    "text": "Further reading\n\nFundamentals of Data Visualization: Chapter 14: Visualizing trends\nData Visualization—A Practical Introduction: Chapter 6: Work with models\nggplot2 reference documentation: geom_smooth()\nmgcv reference documentation (for gam smoothing): pdf document"
  },
  {
    "objectID": "slides/web-design-worksheet.html#exercise-instructions",
    "href": "slides/web-design-worksheet.html#exercise-instructions",
    "title": "Web design worksheet",
    "section": "Exercise instructions",
    "text": "Exercise instructions\n\nFor each of the following exercises, try to reproduce the output shown in the box using the indicated HTML tags and CSS properties.\n\n\nAfter each exercise slide the solutions are shown on the next slide, so don’t jump ahead.\n\n\nDo the exercises on JSFiddle: https://jsfiddle.net/"
  },
  {
    "objectID": "slides/web-design-worksheet.html#exercise-1",
    "href": "slides/web-design-worksheet.html#exercise-1",
    "title": "Web design worksheet",
    "section": "Exercise 1",
    "text": "Exercise 1\n\n\nThe quick brown fox jumps over the lazy dog.\n\nHTML tags used: &lt;span&gt;\n\nCSS properties used:\ncolor: brown;\nfont-style: italic;"
  },
  {
    "objectID": "slides/web-design-worksheet.html#solution-to-exercise-1",
    "href": "slides/web-design-worksheet.html#solution-to-exercise-1",
    "title": "Web design worksheet",
    "section": "Solution to Exercise 1",
    "text": "Solution to Exercise 1\n\n\nHTML input:\nThe quick &lt;span class = \"brown\"&gt;brown&lt;/span&gt; fox\njumps over the &lt;span class = \"italics\"&gt;lazy\ndog&lt;span&gt;.\n\nCSS input:\n.brown {\n  color: brown;\n}\n\n.italics {\n  font-style: italic;\n}"
  },
  {
    "objectID": "slides/web-design-worksheet.html#exercise-2",
    "href": "slides/web-design-worksheet.html#exercise-2",
    "title": "Web design worksheet",
    "section": "Exercise 2",
    "text": "Exercise 2\n\n\n\nThe quick brown fox\n\n\njumps over the lazy dog.\n\n\nHTML tags used: &lt;div&gt;\n\nCSS properties used:\nbackground-color: AliceBlue;\nmargin: 1em 0;"
  },
  {
    "objectID": "slides/web-design-worksheet.html#solution-to-exercise-2",
    "href": "slides/web-design-worksheet.html#solution-to-exercise-2",
    "title": "Web design worksheet",
    "section": "Solution to Exercise 2",
    "text": "Solution to Exercise 2\n\n\nHTML input:\n&lt;div&gt;The quick brown fox&lt;/div&gt;\n&lt;div&gt;jumps over the lazy dog.&lt;/div&gt;\n\nCSS input:\ndiv {\n  background-color: AliceBlue;\n  margin: 1em 0;\n}"
  },
  {
    "objectID": "slides/web-design-worksheet.html#exercise-3",
    "href": "slides/web-design-worksheet.html#exercise-3",
    "title": "Web design worksheet",
    "section": "Exercise 3",
    "text": "Exercise 3\n\n\nThe quick brown fox jumps over the lazy dog.\n\nHTML tags used: &lt;span&gt;\n\nCSS properties used:\nbackground-color: AliceBlue;\npadding: 0.5em;\nmargin: 0 0.5em;"
  },
  {
    "objectID": "slides/web-design-worksheet.html#solution-to-exercise-3",
    "href": "slides/web-design-worksheet.html#solution-to-exercise-3",
    "title": "Web design worksheet",
    "section": "Solution to Exercise 3",
    "text": "Solution to Exercise 3\n\n\nHTML input:\n&lt;span&gt;The quick brown fox&lt;/span&gt;\n&lt;span&gt;jumps over the lazy dog.&lt;/span&gt;\n\nCSS input:\nspan {\n  background-color: AliceBlue;\n  padding: 0.5em;\n  margin: 0 0.5em;\n}"
  },
  {
    "objectID": "slides/web-design-worksheet.html#exercise-4",
    "href": "slides/web-design-worksheet.html#exercise-4",
    "title": "Web design worksheet",
    "section": "Exercise 4",
    "text": "Exercise 4\n\n\n\nChapter 1\n\n\nLorem ipsum dolor sit amet, consectetur adipiscing elit, sed do eiusmod tempor incididunt ut labore et dolore magna aliqua. Ut enim ad minim veniam, quis nostrud exercitation ullamco laboris nisi ut aliquip ex ea commodo consequat.\n\n\nHTML tags used: &lt;div&gt;\n\nCSS properties used:\nfont-family: fantasy;\nfont-family: cursive;\nfont-size: 1.6em;\nfont-weight: bold;"
  },
  {
    "objectID": "slides/web-design-worksheet.html#solution-to-exercise-4",
    "href": "slides/web-design-worksheet.html#solution-to-exercise-4",
    "title": "Web design worksheet",
    "section": "Solution to Exercise 4",
    "text": "Solution to Exercise 4\n\n\nHTML input:\n&lt;div class = \"heading\"&gt;Chapter 1&lt;/div&gt;\n\n&lt;div class = \"body\"&gt;Lorem ipsum dolor sit\namet, consectetur adipiscing elit, sed do\neiusmod tempor incididunt ut labore et dolore\nmagna aliqua. Ut enim ad minim veniam, quis\nnostrud exercitation ullamco laboris nisi ut\naliquip ex ea commodo consequat.&lt;/div&gt;\n\nCSS input:\n.heading {\n  font-family: fantasy;\n  font-size: 1.6em;\n  font-weight: bold;\n}\n\n.body {\n  font-family: cursive;\n}"
  },
  {
    "objectID": "slides/web-design-worksheet.html#exercise-5",
    "href": "slides/web-design-worksheet.html#exercise-5",
    "title": "Web design worksheet",
    "section": "Exercise 5",
    "text": "Exercise 5\n\n\n\nChapter 1\n\n\nLorem ipsum dolor sit amet, consectetur adipiscing elit, sed do eiusmod tempor incididunt ut labore et dolore magna aliqua. Ut enim ad minim veniam, quis nostrud exercitation ullamco laboris nisi ut aliquip ex ea commodo consequat.\n\n\nHTML tags used: &lt;div&gt;\n\nCSS properties used:\nfont-size: 1.6em;\nfont-weight: bold;\ntext-align: center;\ncolor: MidnightBlue;\nbackground-color: AliceBlue;\npadding: 0.5em;\nmargin-top: 1em;"
  },
  {
    "objectID": "slides/web-design-worksheet.html#solution-to-exercise-5",
    "href": "slides/web-design-worksheet.html#solution-to-exercise-5",
    "title": "Web design worksheet",
    "section": "Solution to Exercise 5",
    "text": "Solution to Exercise 5\n\n\nHTML input:\n&lt;div class = \"heading\"&gt;Chapter 1&lt;/div&gt;\n\n&lt;div class = \"body\"&gt;Lorem ipsum dolor sit\namet, consectetur adipiscing elit, sed do\neiusmod tempor incididunt ut labore et dolore\nmagna aliqua. Ut enim ad minim veniam, quis\nnostrud exercitation ullamco laboris nisi ut\naliquip ex ea commodo consequat.&lt;/div&gt;\n\nCSS input:\ndiv {\n  color: MidnightBlue;\n}\n\n.heading {\n  font-size: 1.6em;\n  font-weight: bold;\n  text-align: center;\n  background-color: AliceBlue;\n  padding: 0.5em;\n}\n\n.body {\n  margin-top: 1em;\n}"
  },
  {
    "objectID": "slides/working-with-models.html#how-do-we-obtain-information-about-model-fits",
    "href": "slides/working-with-models.html#how-do-we-obtain-information-about-model-fits",
    "title": "Working with models",
    "section": "How do we obtain information about model fits?",
    "text": "How do we obtain information about model fits?\n\npenguins |&gt;\n  ggplot(aes(body_mass_g, flipper_length_mm)) +\n  geom_point() +\n  geom_smooth(method = \"lm\", se = FALSE) +\n  facet_wrap(~species)"
  },
  {
    "objectID": "slides/working-with-models.html#we-can-fit-a-linear-model-with-lm",
    "href": "slides/working-with-models.html#we-can-fit-a-linear-model-with-lm",
    "title": "Working with models",
    "section": "We can fit a linear model with lm()",
    "text": "We can fit a linear model with lm()\n\n\npenguins_adelie &lt;- filter(penguins, species == \"Adelie\")"
  },
  {
    "objectID": "slides/working-with-models.html#we-can-fit-a-linear-model-with-lm-1",
    "href": "slides/working-with-models.html#we-can-fit-a-linear-model-with-lm-1",
    "title": "Working with models",
    "section": "We can fit a linear model with lm()",
    "text": "We can fit a linear model with lm()\n\n\npenguins_adelie &lt;- filter(penguins, species == \"Adelie\")\n\nlm_out &lt;- lm(flipper_length_mm ~ body_mass_g, data = penguins_adelie)"
  },
  {
    "objectID": "slides/working-with-models.html#we-can-fit-a-linear-model-with-lm-2",
    "href": "slides/working-with-models.html#we-can-fit-a-linear-model-with-lm-2",
    "title": "Working with models",
    "section": "We can fit a linear model with lm()",
    "text": "We can fit a linear model with lm()\n\n\npenguins_adelie &lt;- filter(penguins, species == \"Adelie\")\n\nlm_out &lt;- lm(flipper_length_mm ~ body_mass_g, data = penguins_adelie)\nsummary(lm_out)\n\n\nCall:\nlm(formula = flipper_length_mm ~ body_mass_g, data = penguins_adelie)\n\nResiduals:\n     Min       1Q   Median       3Q      Max \n-14.2769  -3.6192   0.0569   3.4696  18.0477 \n\nCoefficients:\n             Estimate Std. Error t value Pr(&gt;|t|)    \n(Intercept) 1.652e+02  3.849e+00  42.929  &lt; 2e-16 ***\nbody_mass_g 6.677e-03  1.032e-03   6.468 1.34e-09 ***\n---\nSignif. codes:  0 '***' 0.001 '**' 0.01 '*' 0.05 '.' 0.1 ' ' 1\n\nResidual standard error: 5.798 on 149 degrees of freedom\n  (1 observation deleted due to missingness)\nMultiple R-squared:  0.2192,    Adjusted R-squared:  0.214 \nF-statistic: 41.83 on 1 and 149 DF,  p-value: 1.343e-09"
  },
  {
    "objectID": "slides/working-with-models.html#we-use-map-to-fit-models-to-groups-of-data",
    "href": "slides/working-with-models.html#we-use-map-to-fit-models-to-groups-of-data",
    "title": "Working with models",
    "section": "We use map() to fit models to groups of data",
    "text": "We use map() to fit models to groups of data\n\n\npenguins |&gt;\n  nest(data = -species) # nest all data except species column\n\n# A tibble: 3 × 2\n  species   data              \n  &lt;fct&gt;     &lt;list&gt;            \n1 Adelie    &lt;tibble [152 × 7]&gt;\n2 Gentoo    &lt;tibble [124 × 7]&gt;\n3 Chinstrap &lt;tibble [68 × 7]&gt;"
  },
  {
    "objectID": "slides/working-with-models.html#we-use-map-to-fit-models-to-groups-of-data-1",
    "href": "slides/working-with-models.html#we-use-map-to-fit-models-to-groups-of-data-1",
    "title": "Working with models",
    "section": "We use map() to fit models to groups of data",
    "text": "We use map() to fit models to groups of data\n\n\npenguins |&gt;\n  nest(data = -species) |&gt;\n  mutate(\n    # apply linear model to each nested data frame\n    fit = map(data, ~lm(flipper_length_mm ~ body_mass_g, data = .x))\n  )\n\n# A tibble: 3 × 3\n  species   data               fit   \n  &lt;fct&gt;     &lt;list&gt;             &lt;list&gt;\n1 Adelie    &lt;tibble [152 × 7]&gt; &lt;lm&gt;  \n2 Gentoo    &lt;tibble [124 × 7]&gt; &lt;lm&gt;  \n3 Chinstrap &lt;tibble [68 × 7]&gt;  &lt;lm&gt;"
  },
  {
    "objectID": "slides/working-with-models.html#we-use-map-to-fit-models-to-groups-of-data-2",
    "href": "slides/working-with-models.html#we-use-map-to-fit-models-to-groups-of-data-2",
    "title": "Working with models",
    "section": "We use map() to fit models to groups of data",
    "text": "We use map() to fit models to groups of data\n\n\nlm_data &lt;- penguins |&gt;\n  nest(data = -species) |&gt;\n  mutate(\n    # apply linear model to each nested data frame\n    fit = map(data, ~lm(flipper_length_mm ~ body_mass_g, data = .x))\n  )\n\nlm_data$fit[[1]]  # first model fit, for Adelie species\n\n\nCall:\nlm(formula = flipper_length_mm ~ body_mass_g, data = .x)\n\nCoefficients:\n(Intercept)  body_mass_g  \n  1.652e+02    6.677e-03"
  },
  {
    "objectID": "slides/working-with-models.html#manually-extracting-summary-data-is-cumbersome",
    "href": "slides/working-with-models.html#manually-extracting-summary-data-is-cumbersome",
    "title": "Working with models",
    "section": "Manually extracting summary data is cumbersome",
    "text": "Manually extracting summary data is cumbersome\n\n\nsummary(lm_data$fit[[1]]) # summarize the first model, which is for Adelie\n\n\nCall:\nlm(formula = flipper_length_mm ~ body_mass_g, data = .x)\n\nResiduals:\n     Min       1Q   Median       3Q      Max \n-14.2769  -3.6192   0.0569   3.4696  18.0477 \n\nCoefficients:\n             Estimate Std. Error t value Pr(&gt;|t|)    \n(Intercept) 1.652e+02  3.849e+00  42.929  &lt; 2e-16 ***\nbody_mass_g 6.677e-03  1.032e-03   6.468 1.34e-09 ***\n---\nSignif. codes:  0 '***' 0.001 '**' 0.01 '*' 0.05 '.' 0.1 ' ' 1\n\nResidual standard error: 5.798 on 149 degrees of freedom\n  (1 observation deleted due to missingness)\nMultiple R-squared:  0.2192,    Adjusted R-squared:  0.214 \nF-statistic: 41.83 on 1 and 149 DF,  p-value: 1.343e-09"
  },
  {
    "objectID": "slides/working-with-models.html#manually-extracting-summary-data-is-cumbersome-1",
    "href": "slides/working-with-models.html#manually-extracting-summary-data-is-cumbersome-1",
    "title": "Working with models",
    "section": "Manually extracting summary data is cumbersome",
    "text": "Manually extracting summary data is cumbersome\n\n\nsummary(lm_data$fit[[2]]) # second model, Chinstrap\n\n\nCall:\nlm(formula = flipper_length_mm ~ body_mass_g, data = .x)\n\nResiduals:\n     Min       1Q   Median       3Q      Max \n-12.0194  -2.7401   0.1781   2.9859   8.9806 \n\nCoefficients:\n             Estimate Std. Error t value Pr(&gt;|t|)    \n(Intercept) 1.713e+02  4.244e+00   40.36   &lt;2e-16 ***\nbody_mass_g 9.039e-03  8.321e-04   10.86   &lt;2e-16 ***\n---\nSignif. codes:  0 '***' 0.001 '**' 0.01 '*' 0.05 '.' 0.1 ' ' 1\n\nResidual standard error: 4.633 on 121 degrees of freedom\n  (1 observation deleted due to missingness)\nMultiple R-squared:  0.4937,    Adjusted R-squared:  0.4896 \nF-statistic:   118 on 1 and 121 DF,  p-value: &lt; 2.2e-16"
  },
  {
    "objectID": "slides/working-with-models.html#manually-extracting-summary-data-is-cumbersome-2",
    "href": "slides/working-with-models.html#manually-extracting-summary-data-is-cumbersome-2",
    "title": "Working with models",
    "section": "Manually extracting summary data is cumbersome",
    "text": "Manually extracting summary data is cumbersome\n\n\nsummary(lm_data$fit[[3]]) # third model, Gentoo\n\n\nCall:\nlm(formula = flipper_length_mm ~ body_mass_g, data = .x)\n\nResiduals:\n     Min       1Q   Median       3Q      Max \n-14.4296  -3.3315   0.4097   2.8889  11.5941 \n\nCoefficients:\n             Estimate Std. Error t value Pr(&gt;|t|)    \n(Intercept) 1.514e+02  6.575e+00  23.024  &lt; 2e-16 ***\nbody_mass_g 1.191e-02  1.752e-03   6.795 3.75e-09 ***\n---\nSignif. codes:  0 '***' 0.001 '**' 0.01 '*' 0.05 '.' 0.1 ' ' 1\n\nResidual standard error: 5.512 on 66 degrees of freedom\nMultiple R-squared:  0.4116,    Adjusted R-squared:  0.4027 \nF-statistic: 46.17 on 1 and 66 DF,  p-value: 3.748e-09"
  },
  {
    "objectID": "slides/working-with-models.html#the-broom-package-glance-and-tidy",
    "href": "slides/working-with-models.html#the-broom-package-glance-and-tidy",
    "title": "Working with models",
    "section": "The broom package: glance() and tidy()",
    "text": "The broom package: glance() and tidy()\n\n\nglance() provides model-wide summary estimates in tidy format\n\n\n\n\nlibrary(broom)\n\nglance(lm_data$fit[[1]])\n\n# A tibble: 1 × 12\n  r.squared adj.r.squared sigma statistic       p.value    df logLik   AIC   BIC\n      &lt;dbl&gt;         &lt;dbl&gt; &lt;dbl&gt;     &lt;dbl&gt;         &lt;dbl&gt; &lt;dbl&gt;  &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt;\n1     0.219         0.214  5.80      41.8 0.00000000134     1  -479.  963.  972.\n# ℹ 3 more variables: deviance &lt;dbl&gt;, df.residual &lt;int&gt;, nobs &lt;int&gt;\n\n\n\n\n\ntidy() provides information about regression coefficients in tidy format\n\n\n\n\nlibrary(broom)\n\ntidy(lm_data$fit[[1]])\n\n# A tibble: 2 × 5\n  term         estimate std.error statistic  p.value\n  &lt;chr&gt;           &lt;dbl&gt;     &lt;dbl&gt;     &lt;dbl&gt;    &lt;dbl&gt;\n1 (Intercept) 165.        3.85        42.9  8.68e-86\n2 body_mass_g   0.00668   0.00103      6.47 1.34e- 9"
  },
  {
    "objectID": "slides/working-with-models.html#apply-these-functions-to-multiple-models-with-map",
    "href": "slides/working-with-models.html#apply-these-functions-to-multiple-models-with-map",
    "title": "Working with models",
    "section": "Apply these functions to multiple models with map()",
    "text": "Apply these functions to multiple models with map()\n\nReminder: This is the nested table with fitted models\n\nlm_data\n\n# A tibble: 3 × 3\n  species   data               fit   \n  &lt;fct&gt;     &lt;list&gt;             &lt;list&gt;\n1 Adelie    &lt;tibble [152 × 7]&gt; &lt;lm&gt;  \n2 Gentoo    &lt;tibble [124 × 7]&gt; &lt;lm&gt;  \n3 Chinstrap &lt;tibble [68 × 7]&gt;  &lt;lm&gt;"
  },
  {
    "objectID": "slides/working-with-models.html#apply-these-functions-to-multiple-models-with-map-1",
    "href": "slides/working-with-models.html#apply-these-functions-to-multiple-models-with-map-1",
    "title": "Working with models",
    "section": "Apply these functions to multiple models with map()",
    "text": "Apply these functions to multiple models with map()\n\n\nlm_data |&gt;\n  mutate(\n    glance_out = map(fit, glance) # apply `glance()` to each fitted model\n  )\n\n# A tibble: 3 × 4\n  species   data               fit    glance_out       \n  &lt;fct&gt;     &lt;list&gt;             &lt;list&gt; &lt;list&gt;           \n1 Adelie    &lt;tibble [152 × 7]&gt; &lt;lm&gt;   &lt;tibble [1 × 12]&gt;\n2 Gentoo    &lt;tibble [124 × 7]&gt; &lt;lm&gt;   &lt;tibble [1 × 12]&gt;\n3 Chinstrap &lt;tibble [68 × 7]&gt;  &lt;lm&gt;   &lt;tibble [1 × 12]&gt;"
  },
  {
    "objectID": "slides/working-with-models.html#apply-these-functions-to-multiple-models-with-map-2",
    "href": "slides/working-with-models.html#apply-these-functions-to-multiple-models-with-map-2",
    "title": "Working with models",
    "section": "Apply these functions to multiple models with map()",
    "text": "Apply these functions to multiple models with map()\n\n\nlm_data |&gt;\n  mutate(\n    glance_out = map(fit, glance) # apply `glance()` to each fitted model\n  ) |&gt;\n  select(species, glance_out)     # only keep species name and glance output\n\n# A tibble: 3 × 2\n  species   glance_out       \n  &lt;fct&gt;     &lt;list&gt;           \n1 Adelie    &lt;tibble [1 × 12]&gt;\n2 Gentoo    &lt;tibble [1 × 12]&gt;\n3 Chinstrap &lt;tibble [1 × 12]&gt;"
  },
  {
    "objectID": "slides/working-with-models.html#apply-these-functions-to-multiple-models-with-map-3",
    "href": "slides/working-with-models.html#apply-these-functions-to-multiple-models-with-map-3",
    "title": "Working with models",
    "section": "Apply these functions to multiple models with map()",
    "text": "Apply these functions to multiple models with map()\n\n\nlm_data |&gt;\n  mutate(\n    glance_out = map(fit, glance) # apply `glance()` to each fitted model\n  ) |&gt;\n  select(species, glance_out) |&gt;  # only keep species name and glance output\n  unnest(cols = glance_out)\n\n# A tibble: 3 × 13\n  species   r.squared adj.r.squared sigma statistic  p.value    df logLik   AIC\n  &lt;fct&gt;         &lt;dbl&gt;         &lt;dbl&gt; &lt;dbl&gt;     &lt;dbl&gt;    &lt;dbl&gt; &lt;dbl&gt;  &lt;dbl&gt; &lt;dbl&gt;\n1 Adelie        0.219         0.214  5.80      41.8 1.34e- 9     1  -479.  963.\n2 Gentoo        0.494         0.490  4.63     118.  1.33e-19     1  -362.  730.\n3 Chinstrap     0.412         0.403  5.51      46.2 3.75e- 9     1  -212.  429.\n# ℹ 4 more variables: BIC &lt;dbl&gt;, deviance &lt;dbl&gt;, df.residual &lt;int&gt;, nobs &lt;int&gt;"
  },
  {
    "objectID": "slides/working-with-models.html#putting-everything-into-one-pipeline",
    "href": "slides/working-with-models.html#putting-everything-into-one-pipeline",
    "title": "Working with models",
    "section": "Putting everything into one pipeline",
    "text": "Putting everything into one pipeline\n\n\nlm_summary &lt;- penguins |&gt;\n  nest(data = -species) |&gt;\n  mutate(\n    fit = map(data, ~lm(flipper_length_mm ~ body_mass_g, data = .x)),\n    glance_out = map(fit, glance)\n  ) |&gt;\n  select(species, glance_out) |&gt;\n  unnest(cols = glance_out)\n\nlm_summary\n\n# A tibble: 3 × 13\n  species   r.squared adj.r.squared sigma statistic  p.value    df logLik   AIC\n  &lt;fct&gt;         &lt;dbl&gt;         &lt;dbl&gt; &lt;dbl&gt;     &lt;dbl&gt;    &lt;dbl&gt; &lt;dbl&gt;  &lt;dbl&gt; &lt;dbl&gt;\n1 Adelie        0.219         0.214  5.80      41.8 1.34e- 9     1  -479.  963.\n2 Gentoo        0.494         0.490  4.63     118.  1.33e-19     1  -362.  730.\n3 Chinstrap     0.412         0.403  5.51      46.2 3.75e- 9     1  -212.  429.\n# ℹ 4 more variables: BIC &lt;dbl&gt;, deviance &lt;dbl&gt;, df.residual &lt;int&gt;, nobs &lt;int&gt;"
  },
  {
    "objectID": "slides/working-with-models.html#make-label-data",
    "href": "slides/working-with-models.html#make-label-data",
    "title": "Working with models",
    "section": "Make label data",
    "text": "Make label data\n\n\nlabel_data &lt;- lm_summary |&gt;\n  mutate(\n    rsqr = signif(r.squared, 2),  # round to 2 significant digits\n    pval = signif(p.value, 2),\n    label = glue(\"R^2 = {rsqr}, P = {pval}\"),\n    body_mass_g = 6400, flipper_length_mm = 175 # label position in plot\n  ) |&gt;\n  select(species, label, body_mass_g, flipper_length_mm)\n\nlabel_data\n\n# A tibble: 3 × 4\n  species   label                   body_mass_g flipper_length_mm\n  &lt;fct&gt;     &lt;glue&gt;                        &lt;dbl&gt;             &lt;dbl&gt;\n1 Adelie    R^2 = 0.22, P = 1.3e-09        6400               175\n2 Gentoo    R^2 = 0.49, P = 1.3e-19        6400               175\n3 Chinstrap R^2 = 0.41, P = 3.7e-09        6400               175"
  },
  {
    "objectID": "slides/working-with-models.html#and-plot",
    "href": "slides/working-with-models.html#and-plot",
    "title": "Working with models",
    "section": "And plot",
    "text": "And plot\n\n\nggplot(penguins, aes(body_mass_g, flipper_length_mm)) + geom_point() +\n  geom_text(\n    data = label_data, aes(label = label),\n    size = 10, size.unit = \"pt\", hjust = 1  # 10pt, right-justified\n  ) +\n  geom_smooth(method = \"lm\", se = FALSE) + facet_wrap(vars(species))"
  },
  {
    "objectID": "slides/working-with-models.html#further-reading",
    "href": "slides/working-with-models.html#further-reading",
    "title": "Working with models",
    "section": "Further reading",
    "text": "Further reading\n\nData Visualization—A Practical Introduction: Chapter 6.5: Tidy model objects with broom\nbroom reference documentation: https://broom.tidymodels.org/\nArticle on using broom with dplyr: broom and dplyr"
  },
  {
    "objectID": "worksheets/clustering.html",
    "href": "worksheets/clustering.html",
    "title": "Clustering",
    "section": "",
    "text": "In this worksheet, we will discuss how to perform k-means clustering.\nFirst we need to load the required R packages. Please wait a moment until the live R session is fully set up and all packages are loaded.\n\n\n\n\n\n\n\n\nNext we set up the data.\n\n\n\n\n\n\n\n\nWe will be working with two datasets, spirals and iris. The dataset spirals contains made-up data in two dimensions that forms three intertwined spirals.\n\n\n\n\n\n\n\n\nThe dataset iris contains measurements on the leaves of flowers of three Iris species.\n\n\n\n\n\n\n\n\nHint: Pay attention to the column names in the iris dataset. They are all capitalized (e.g., Species), and the first four use a point as a separator (e.g., Sepal.Length). It is easy to misspell them and then the R code doesn’t work correctly."
  },
  {
    "objectID": "worksheets/clustering.html#introduction",
    "href": "worksheets/clustering.html#introduction",
    "title": "Clustering",
    "section": "",
    "text": "In this worksheet, we will discuss how to perform k-means clustering.\nFirst we need to load the required R packages. Please wait a moment until the live R session is fully set up and all packages are loaded.\n\n\n\n\n\n\n\n\nNext we set up the data.\n\n\n\n\n\n\n\n\nWe will be working with two datasets, spirals and iris. The dataset spirals contains made-up data in two dimensions that forms three intertwined spirals.\n\n\n\n\n\n\n\n\nThe dataset iris contains measurements on the leaves of flowers of three Iris species.\n\n\n\n\n\n\n\n\nHint: Pay attention to the column names in the iris dataset. They are all capitalized (e.g., Species), and the first four use a point as a separator (e.g., Sepal.Length). It is easy to misspell them and then the R code doesn’t work correctly."
  },
  {
    "objectID": "worksheets/clustering.html#clustering-the-iris-dataset",
    "href": "worksheets/clustering.html#clustering-the-iris-dataset",
    "title": "Clustering",
    "section": "Clustering the iris dataset",
    "text": "Clustering the iris dataset\nWe perform k-means clustering in R with the function kmeans(). It takes two important arguments, the number of clusters we want to generate (centers) and the number of times we want to re-run the clustering algorithm with different random starting points (nstart). Similarly to a PCA, we need to remove all non-numeric data columns before we can run the analysis.\n\n\n\n\n\n\n\n\nThe output from the fitted object (km_fit) gives us various pieces of information in human-readable form, such as the cluster sizes, the cluster means, and the assignment of rows in the original data table to the different clusters (“clustering vector”).\nAt the end of the output, you see a list of “available components.” These are various pieces of information about the clustering result that you can extract from the fitted object. For example, km_fit$cluster gives you information about which row in the original data table belongs to which cluster.\n\n\n\n\n\n\n\n\nSimilarly, centers will give you the positions of the cluster centers and tot.withinss will give you the total within sum-of-squares. Try this out. Also, see if you can figure out what the component size represents.\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nHint\n\n\n\n\n\nkm_fit$cluster\n___\n___\n\n\n\n\n\n\n\n\n\n\n\nSolution\n\n\n\n\n\nkm_fit$cluster      # assignment of original data rows to clusters\nkm_fit$tot.withinss # total within sum-of-squares\nkm_fit$size         # cluster sizes (number of observations in each cluster)\n\n\n\n\nNext we move on to plotting the clustering output. The k-means algorithm is a stochastic algorithm that produces slightly different output each time it is run. This is particularly apparent when you set nstart = 1. In this case, you will get possibly quite different results for different random seeds. You can set the random seed via set.seed().\nIn the example below, try various seeds, including 2356, 2357, 2358, 2359, and see what the results are.\n\n\n\n\n\n\n\n\nNow set nstart = 10 and try the same random seeds once more."
  },
  {
    "objectID": "worksheets/clustering.html#finding-the-appropriate-number-of-clusters",
    "href": "worksheets/clustering.html#finding-the-appropriate-number-of-clusters",
    "title": "Clustering",
    "section": "Finding the appropriate number of clusters",
    "text": "Finding the appropriate number of clusters\nTo get a sense of the correct number of clusters for a given dataset, we can plot the total within sum-of-squares as a function of the cluster number and look for a bend (“elbow”) in the curve. Remember, the total within sum-of-squares can be obtained from the fitted object via km_fit$tot.withinss.\nThe following code sets up a function calc_withinss that calculates the total within sum-of-squares for an arbitrary data set and number of clusters, and then applies it to the spirals dataset.\n\n\n\n\n\n\n\n\nNow take this code and use it to make a plot of the total within sum-of-squares against cluster number.\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nHint\n\n\n\n\n\ntibble(centers = 1:15) |&gt;\n  mutate(\n    within_sum_squares = map_dbl(\n      centers, ~calc_withinss(spirals, .x)\n    )\n  ) |&gt;\n  ggplot(aes(___)) +\n  ___\n\n\n\n\n\n\n\n\n\n\n\nSolution\n\n\n\n\n\ntibble(centers = 1:15) |&gt;\n  mutate(\n    within_sum_squares = map_dbl(\n      centers, ~calc_withinss(spirals, .x)\n    )\n  ) |&gt;\n  ggplot(aes(centers, within_sum_squares)) +\n  geom_point() +\n  geom_line() +\n  theme_bw()\n\n\n\n\nThe plot suggests that the correct number of clusters should be around 3 or 4. Now cluster the spirals dataset with this number of clusters and then plot it colored by cluster id.\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nHint\n\n\n\n\n\nkm_fit &lt;- ___ |&gt; \n  select(where(is.numeric)) |&gt;\n  kmeans(centers = 3, nstart = 10)\n\nkm_fit |&gt;\n  augment(___) |&gt;\n  ___\n\n\n\n\n\n\n\n\n\n\n\nHint\n\n\n\n\n\nkm_fit &lt;- spirals |&gt; \n  select(where(is.numeric)) |&gt;\n  kmeans(centers = 3, nstart = 10)\n\nkm_fit |&gt;\n  augment(spirals) |&gt;\n  ggplot() +\n  aes(___) +\n  geom_point(aes(color = ___, shape = ___))\n\n\n\n\n\n\n\n\n\n\n\nSolution\n\n\n\n\n\nkm_fit &lt;- spirals |&gt; \n  select(where(is.numeric)) |&gt;\n  kmeans(centers = 3, nstart = 10)\n\nkm_fit |&gt;\n  augment(spirals) |&gt;\n  ggplot() +\n  aes(x, y) +\n  geom_point(aes(color = .cluster, shape = group))\n\n\n\n\nTry a few different cluster numbers to see how the algorithm behaves. Do you think k-means clustering works on this dataset?"
  },
  {
    "objectID": "worksheets/clustering.html#combining-k-means-and-pca",
    "href": "worksheets/clustering.html#combining-k-means-and-pca",
    "title": "Clustering",
    "section": "Combining k-means and PCA",
    "text": "Combining k-means and PCA\nIn practice, we often perform PCA first on a dataset and then cluster the transformed coordinates. Try this out on the iris dataset. Run a PCA, then cluster the PCA coordinates, and then plot the clusters in PCA space.\nAs a reminder, this is how we would do a PCA on this dataset:\n\n\n\n\n\n\n\n\nNow modify this example so you perform a k-means clustering analysis and then color by clusters rather than by species.\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nHint\n\n\n\n\n\npca_fit &lt;- iris |&gt; \n  select(where(is.numeric)) |&gt; # retain only numeric columns\n  scale() |&gt;                   # scale to zero mean and unit variance\n  prcomp()\n\n# combine iris data with PCA data (needed for plot)\niris_pca &lt;- augment(pca_fit, iris)\n\n# perform k-means\nkm_fit &lt;- augment(pca_fit) |&gt;\n  select(-.rownames) |&gt;\n  ___\n\n\n\n\n\n\n\n\n\n\n\nHint\n\n\n\n\n\npca_fit &lt;- iris |&gt; \n  select(where(is.numeric)) |&gt; # retain only numeric columns\n  scale() |&gt;                   # scale to zero mean and unit variance\n  prcomp()\n\n# combine iris data with PCA data (needed for plot)\niris_pca &lt;- augment(pca_fit, iris)\n\n# perform k-means\nkm_fit &lt;- augment(pca_fit) |&gt;\n  select(-.rownames) |&gt;\n  kmeans(centers = 3, nstart = 10)\n\nkm_fit |&gt;\n  # combine with original data and the PCA coordinates\n  ___ |&gt;\n  # plot\n  ___\n\n\n\n\n\n\n\n\n\n\n\nHint\n\n\n\n\n\npca_fit &lt;- iris |&gt; \n  select(where(is.numeric)) |&gt; # retain only numeric columns\n  scale() |&gt;                   # scale to zero mean and unit variance\n  prcomp()\n\n# combine iris data with PCA data (needed for plot)\niris_pca &lt;- augment(pca_fit, iris)\n\n# perform k-means\nkm_fit &lt;- augment(pca_fit) |&gt;\n  select(-.rownames) |&gt;\n  kmeans(centers = 3, nstart = 10)\n\nkm_fit |&gt;\n  # combine with original data and the PCA coordinates\n  augment(iris_pca) |&gt;\n  ggplot() +\n  ___\n\n\n\n\n\n\n\n\n\n\n\nHint\n\n\n\n\n\npca_fit &lt;- iris |&gt; \n  select(where(is.numeric)) |&gt; # retain only numeric columns\n  scale() |&gt;                   # scale to zero mean and unit variance\n  prcomp()\n\n# combine iris data with PCA data (needed for plot)\niris_pca &lt;- augment(pca_fit, iris)\n\n# perform k-means\nkm_fit &lt;- augment(pca_fit) |&gt;\n  select(-.rownames) |&gt;\n  kmeans(centers = 3, nstart = 10)\n\nkm_fit |&gt;\n  # combine with original data and the PCA coordinates\n  augment(iris_pca) |&gt;\n  ggplot() +\n  aes(x = .fittedPC1, .fittedPC2) +\n  geom_point(\n    aes(color = .cluster, shape = Species)\n  )\n\n\n\n\n\n\n\n\n\n\n\nSolution\n\n\n\n\n\npca_fit &lt;- iris |&gt; \n  select(where(is.numeric)) |&gt; # retain only numeric columns\n  scale() |&gt;                   # scale to zero mean and unit variance\n  prcomp()\n\n# combine iris data with PCA data (needed for plot)\niris_pca &lt;- augment(pca_fit, iris)\n\n# perform k-means\nkm_fit &lt;- augment(pca_fit) |&gt;\n  select(-.rownames) |&gt;\n  kmeans(centers = 3, nstart = 10)\n\nkm_fit |&gt;\n  # combine with original data and the PCA coordinates\n  augment(iris_pca) |&gt;\n  ggplot() +\n  aes(x = .fittedPC1, .fittedPC2) +\n  geom_point(\n    aes(color = .cluster, shape = Species)\n  ) +\n  geom_point(\n    data = tidy(km_fit),\n    aes(fill = cluster),\n    shape = 21, color = \"black\", size = 4\n  ) +\n  guides(color = \"none\")\n\n\n\n\nChange which components you plot on the x and the y axis to try to get a sense of how the clusters are located in the 4-dimensional PC space."
  },
  {
    "objectID": "worksheets/color-selection.html",
    "href": "worksheets/color-selection.html",
    "title": "Color selection",
    "section": "",
    "text": "In this worksheet, you will practice choosing your own colors.\nFirst we need to load the required R packages. Please wait a moment until the live R session is fully set up and all packages are loaded.\n\n\n\n\n\n\n\n\nNext we set up the data.\n\n\n\n\n\n\n\n\nWe will be working with two datasets that we have seen previously. First, the penguins dataset:\npenguins\n\n\n\n\n\n\n\n\n\n\nSecond, the temps_months dataset which contains the mean temperature for each month in four different locations.\n\n\n\n\n\n\n\n\nWe will start with a scatter plot of the penguins dataset.\n\n\n\n\n\n\n\n\nUse the color chooser app to manually pick three colors that are appropriate for a qualitative color scale. Then modify the plot to use this scale.\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nHint\n\n\n\n\n\nggplot(penguins, aes(body_mass_g, bill_length_mm, color = species)) +\n  geom_point(size = 2, na.rm = TRUE) +\n  scale_color_manual(\n    values = ___ # your colors here \n  )\n\n\n\n\n\n\n\n\n\n\n\nSolution\n\n\n\n\n\nggplot(penguins, aes(body_mass_g, bill_length_mm, color = species)) +\n  geom_point(size = 2, na.rm = TRUE) +\n  scale_color_manual(\n    # this is just an example, there are many possible choices here\n    values = c('#BF8A21', '#A74C48', '#17517A')\n  )\n\n\n\n\nNow let’s consider this heat map of temperatures in different locations throughout the year.\n\n\n\n\n\n\n\n\nUse the color chooser app to manually pick four to six colors that are appropriate for a sequential color scale. Then modify the plot to use this scale. (To create a manual color gradient, use scale_fill_gradientn().)\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nHint\n\n\n\n\n\nggplot(temps_months, aes(x = month, y = location, fill = mean)) + \n  geom_tile() + \n  coord_fixed(expand = FALSE) +\n  scale_fill_gradientn(\n    colours = ___ # your colors here \n  )\n\n\n\n\n\n\n\n\n\n\n\nSolution\n\n\n\n\n\nggplot(temps_months, aes(x = month, y = location, fill = mean)) + \n  geom_tile() + \n  coord_fixed(expand = FALSE) +\n  scale_fill_gradientn(\n    # this is just an example, there are many possible choices here\n    colours = c('#475010', '#8B9B38', '#C6D77C', '#F4F9E1')\n  )"
  },
  {
    "objectID": "worksheets/color-selection.html#introduction",
    "href": "worksheets/color-selection.html#introduction",
    "title": "Color selection",
    "section": "",
    "text": "In this worksheet, you will practice choosing your own colors.\nFirst we need to load the required R packages. Please wait a moment until the live R session is fully set up and all packages are loaded.\n\n\n\n\n\n\n\n\nNext we set up the data.\n\n\n\n\n\n\n\n\nWe will be working with two datasets that we have seen previously. First, the penguins dataset:\npenguins\n\n\n\n\n\n\n\n\n\n\nSecond, the temps_months dataset which contains the mean temperature for each month in four different locations.\n\n\n\n\n\n\n\n\nWe will start with a scatter plot of the penguins dataset.\n\n\n\n\n\n\n\n\nUse the color chooser app to manually pick three colors that are appropriate for a qualitative color scale. Then modify the plot to use this scale.\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nHint\n\n\n\n\n\nggplot(penguins, aes(body_mass_g, bill_length_mm, color = species)) +\n  geom_point(size = 2, na.rm = TRUE) +\n  scale_color_manual(\n    values = ___ # your colors here \n  )\n\n\n\n\n\n\n\n\n\n\n\nSolution\n\n\n\n\n\nggplot(penguins, aes(body_mass_g, bill_length_mm, color = species)) +\n  geom_point(size = 2, na.rm = TRUE) +\n  scale_color_manual(\n    # this is just an example, there are many possible choices here\n    values = c('#BF8A21', '#A74C48', '#17517A')\n  )\n\n\n\n\nNow let’s consider this heat map of temperatures in different locations throughout the year.\n\n\n\n\n\n\n\n\nUse the color chooser app to manually pick four to six colors that are appropriate for a sequential color scale. Then modify the plot to use this scale. (To create a manual color gradient, use scale_fill_gradientn().)\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nHint\n\n\n\n\n\nggplot(temps_months, aes(x = month, y = location, fill = mean)) + \n  geom_tile() + \n  coord_fixed(expand = FALSE) +\n  scale_fill_gradientn(\n    colours = ___ # your colors here \n  )\n\n\n\n\n\n\n\n\n\n\n\nSolution\n\n\n\n\n\nggplot(temps_months, aes(x = month, y = location, fill = mean)) + \n  geom_tile() + \n  coord_fixed(expand = FALSE) +\n  scale_fill_gradientn(\n    # this is just an example, there are many possible choices here\n    colours = c('#475010', '#8B9B38', '#C6D77C', '#F4F9E1')\n  )"
  },
  {
    "objectID": "worksheets/coordinate-systems-axes.html",
    "href": "worksheets/coordinate-systems-axes.html",
    "title": "Coordinate systems and axes",
    "section": "",
    "text": "In this worksheet, we will discuss how to change and customize scales and coordinate systems.\nFirst we need to load the required R packages. Please wait a moment until the live R session is fully set up and all packages are loaded.\n\n\n\n\n\n\n\n\nNext we set up the data.\n\n\n\n\n\n\n\n\nWe will be working with three different datasets, boxoffice, temperatures, and tx_counties. You have already seen the first two previously.\nThe boxoffice dataset contains box-office gross results for Dec. 22-24, 2017.\n\n\n\n\n\n\n\n\nThe temperatures dataset contains the average temperature for each day of the year for four different locations.\n\n\n\n\n\n\n\n\nThe tx_counties dataset holds information about how many people lived in Texas counties in 2010. The column popratio is the ratio of the number of inhabitants to the median across all counties, and the column index simply counts the counties from most populous to least populous."
  },
  {
    "objectID": "worksheets/coordinate-systems-axes.html#introduction",
    "href": "worksheets/coordinate-systems-axes.html#introduction",
    "title": "Coordinate systems and axes",
    "section": "",
    "text": "In this worksheet, we will discuss how to change and customize scales and coordinate systems.\nFirst we need to load the required R packages. Please wait a moment until the live R session is fully set up and all packages are loaded.\n\n\n\n\n\n\n\n\nNext we set up the data.\n\n\n\n\n\n\n\n\nWe will be working with three different datasets, boxoffice, temperatures, and tx_counties. You have already seen the first two previously.\nThe boxoffice dataset contains box-office gross results for Dec. 22-24, 2017.\n\n\n\n\n\n\n\n\nThe temperatures dataset contains the average temperature for each day of the year for four different locations.\n\n\n\n\n\n\n\n\nThe tx_counties dataset holds information about how many people lived in Texas counties in 2010. The column popratio is the ratio of the number of inhabitants to the median across all counties, and the column index simply counts the counties from most populous to least populous."
  },
  {
    "objectID": "worksheets/coordinate-systems-axes.html#scale-customizations",
    "href": "worksheets/coordinate-systems-axes.html#scale-customizations",
    "title": "Coordinate systems and axes",
    "section": "Scale customizations",
    "text": "Scale customizations\nWe can modify the appearance of the x and y axis with scale functions. All scale functions have name of the form scale_aesthetic_type(), where aesthetic stands for an aesthetic to which we’re mapping data (e.g., x, y, color, fill, etc), and type stands for the specific type of the scale. What scale types are available depends on both the aesthetic and the data.\nHere, we only consider position scales, which are scales for the x and y aesthetics. The most commonly used scales types for position scales are continuous for continuous data and discrete for discrete data, yielding the scale functions scale_x_continuous(), scale_y_continuous(), scale_x_discrete(), and scale_y_discrete(). But there are others, such as date, time, or binned. You can look them up here: https://ggplot2.tidyverse.org/reference/index.html#section-scales\nPosition scale functions are used to modify both the appearance of the axis (axis title, axis labels, number and location of breaks, etc.) and the mapping from data to position (including the range of data values considered, i.e., axis limits, and whether the data should be transformed, as is the case in log scales).\nLet’s start with this plot of the boxoffice data:\n\n\n\n\n\n\n\n\nWe can use scale functions to modify the axis titles, by setting the name argument. For example, scale_x_continuous(name = \"the x value\") would set the axis title to “the x value” in a continuous scale along the x axis.\nUse the appropriate scale functions to modify both axis titles in the above plot. Think about which axes (if any) are continuous and which are discrete.\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nHint\n\n\n\n\n\nggplot(boxoffice) +\n  aes(amount, fct_reorder(title, amount)) +\n  geom_col() +\n  scale_x_continuous(___) +\n  scale_y_discrete(___)\n\n\n\n\n\n\n\n\n\n\n\nSolution\n\n\n\n\n\nggplot(boxoffice) +\n  aes(amount, fct_reorder(title, amount)) +\n  geom_col() +\n  scale_x_continuous(name = \"weekend gross (million USD)\") +\n  scale_y_discrete(name = NULL)\n\n\n\n\nWe can also use scale functions to set axis limits, via the limits argument. For continuous scales, the limits argument takes a vector of two numbers representing the lower and upper limit. For example, limits = c(0, 80) would indicate an axis that runs from 0 to 80. For discrete scales, the limits argument takes a vector of all the categories that should be shown, in the order in which they should be shown.\nTry this out by setting a limit from 0 to 80 on the x axis.\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nHint\n\n\n\n\n\nggplot(boxoffice) +\n  aes(amount, fct_reorder(title, amount)) +\n  geom_col() +\n  scale_x_continuous(\n    name = \"weekend gross (million USD)\",\n    limits = ___\n  ) +\n  scale_y_discrete(name = NULL)\n\n\n\n\n\n\n\n\n\n\n\nSolution\n\n\n\n\n\nggplot(boxoffice) +\n  aes(amount, fct_reorder(title, amount)) +\n  geom_col() +\n  scale_x_continuous(\n    name = \"weekend gross (million USD)\",\n    limits = c(0, 80)\n  ) +\n  scale_y_discrete(name = NULL)\n\n\n\n\nWhat happens if you set the axis limits such that not all data points can be shown, for example an upper limit of 65 rather than 80? Do you understand why?\n(Hint: Scale limits are applied before the plot is drawn, and data points outside the scale limits are discarded. If this is not what you want, there’s an alternative way of setting limits. See the very end of this worksheet under “Coords”.)\nNext, we can use the breaks and labels arguments to customize which axis ticks are shown and how they are labeled. In general, you need exactly as many breaks as labels. If you define only breaks but not labels then labels are automatically generated from the breaks.\nBuilding on the code from the previous example, set breaks at 0, 25, 50, and 75, and format the labels such that they can be read as currency. For example, write $25M instead of just 25.\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nHint\n\n\n\n\n\nggplot(boxoffice) +\n  aes(amount, fct_reorder(title, amount)) +\n  geom_col() +\n  scale_x_continuous(\n    name = \"weekend gross\",\n    limits = c(0, 80),\n    breaks = ___,\n    labels = ___\n  ) +\n  scale_y_discrete(name = NULL)\n\n\n\n\n\n\n\n\n\n\n\nSolution\n\n\n\n\n\nggplot(boxoffice) +\n  aes(amount, fct_reorder(title, amount)) +\n  geom_col() +\n  scale_x_continuous(\n    name = \"weekend gross\",\n    limits = c(0, 80),\n    breaks = c(0, 25, 50, 75),\n    labels = c(\"0\", \"$25M\", \"$50M\", \"$75M\")\n  ) +\n  scale_y_discrete(name = NULL)\n\n\n\n\nWhen looking at the resulting plot, you may notice that the x axis extends beyond the limits you have set. This happens because by default ggplot scales expand the axis range by a small amount. You can set the axis expansion via the expand parameter. Setting the expansion can be a bit tricky, because we can set expansion at either end of a scale and we can define both additive and multiplicative expansion. (Additive expansion adds a fixed value, whereas multiplicative expansion adds a multiple of the scale range. ggplot uses additive expansion for discrete scales and multiplicative expansion for continuous scales, but you can use either for either scale.)\nThe simplest way to define expansions is with the expansion() function, which takes arguments mult for multiplicative expansion and add for additive expansion. Either takes a vector of two values, indicating expansion at the lower and upper end, respectively. Thus, expansion(mult = c(0, 0.1)) indicates multiplicative expansion of 0% at the lower end and 10% at the upper end, whereas expansion(add = c(2, 2)) indicates additive expansion of 2 units at either end of the scale.\nTry this yourself. Use the expand argument to remove the gap to the left of 0 on the x axis.\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nHint\n\n\n\n\n\nggplot(boxoffice) +\n  aes(amount, fct_reorder(title, amount)) +\n  geom_col() +\n  scale_x_continuous(\n    name = \"weekend gross\",\n    limits = c(0, 80),\n    breaks = c(0, 25, 50, 75),\n    labels = c(\"0\", \"$25M\", \"$50M\", \"$75M\"),\n    expand = expansion(___)\n  ) +\n  scale_y_discrete(name = NULL)\n\n\n\n\n\n\n\n\n\n\n\nSolution\n\n\n\n\n\nggplot(boxoffice) +\n  aes(amount, fct_reorder(title, amount)) +\n  geom_col() +\n  scale_x_continuous(\n    name = \"weekend gross\",\n    limits = c(0, 80),\n    breaks = c(0, 25, 50, 75),\n    labels = c(\"0\", \"$25M\", \"$50M\", \"$75M\"),\n    expand = expansion(mult = c(0, 0.06))\n  ) +\n  scale_y_discrete(name = NULL)\n\n\n\n\nTry different settings for the expand argument. Try both multiplicative and additive expansions. Apply different expansions to the y axis as well."
  },
  {
    "objectID": "worksheets/coordinate-systems-axes.html#logarithmic-scales",
    "href": "worksheets/coordinate-systems-axes.html#logarithmic-scales",
    "title": "Coordinate systems and axes",
    "section": "Logarithmic scales",
    "text": "Logarithmic scales\nScales can also transform the data before plotting. For example, log scales such as scale_x_log10() and scale_y_log10() log-transform the data. To try this out, we’ll be working with the tx_counties dataset:\n\n\n\n\n\n\n\n\nModify this plot so the y axis uses a log scale.\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nSolution\n\n\n\n\n\nggplot(tx_counties) +\n  aes(x = index, y = popratio) +\n  geom_point() +\n  scale_y_log10()\n\n\n\n\nNow customize the log scale by setting name, limits, breaks, and labels. These work exactly as they did in scale_x_continuous().\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nHint\n\n\n\n\n\nggplot(tx_counties) +\n  aes(x = index, y = popratio) +\n  geom_point() +\n  scale_y_log10(\n    name = ___,\n    limits = ___,\n    breaks = ___,\n    labels = ___\n  )\n\n\n\n\n\n\n\n\n\n\n\nSolution\n\n\n\n\n\nggplot(tx_counties) +\n  aes(x = index, y = popratio) +\n  geom_point() +\n  scale_y_log10(\n    name = \"population number / median\",\n    limits = c(0.003, 300),\n    breaks = c(0.01, 1, 100),\n    labels = c(\"0.01\", \"1\", \"100\")\n  )"
  },
  {
    "objectID": "worksheets/coordinate-systems-axes.html#coords",
    "href": "worksheets/coordinate-systems-axes.html#coords",
    "title": "Coordinate systems and axes",
    "section": "Coords",
    "text": "Coords\nWhile scales determine how data values are mapped and represented along one dimension, e.g. the x or the y axis, coordinate systems define how these dimensions are projected onto the 2d plot surface. The default coordinate system is the Cartesian coordinate system, which uses orthogonal x and y axes. In the following example, I have added the coord explicitly, but this is not normally necessary.\n\n\n\n\n\n\n\n\nWe can however add a different coord, for example coord_polar() to use a polar coordinate system. Try this out.\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nSolution\n\n\n\n\n\nggplot(temperatures, aes(day_of_year, temperature, color = location)) +\n  geom_line() +\n  coord_polar()\n\n\n\n\nIn the polar coordinate system, the y axis (here, temperature) is mapped onto the radius, and the x axis (here, day of year) is mapped onto the angle. You can use scale_x_continuous() and scale_y_continuous() to modify the radial and angular axes. For example, you may want to change the temperature limits from 0 to 105 so the temperature curve for Chicago doesn’t hit the exact center of the plot. Try this out.\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nHint\n\n\n\n\n\nggplot(temperatures, aes(day_of_year, temperature, color = location)) +\n  geom_line() +\n  coord_polar() +\n  scale_y_continuous(limits = ___)\n\n\n\n\n\n\n\n\n\n\n\nSolution\n\n\n\n\n\nggplot(temperatures, aes(day_of_year, temperature, color = location)) +\n  geom_line() +\n  coord_polar() +\n  scale_y_continuous(limits = c(0, 105))\n\n\n\n\nThere are other useful coords. For example, coord_fixed() is a Cartesian coordinate system with fixed aspect ratio. This is useful when we plot variables along the x and y axes that are measured in the same units. In this case, we want the two axes to be coordinated, such that one step along x has the same meaning as one step along y.\nTo demonstrate this, we reshape the temperatures dataset into wide format, and then plot temperatures in San Diego versus temperatures in Houston.\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n(A side remark: Do you know why we write `San Diego` and not \"San Diego\" or 'San Diego' inside the aes() function? If you don’t, see if you can find out.)\nThe units along both the x and the y axis are temperatures, but a 10 degree difference in Houston is shown as a shorter distance than a 10 degree difference in San Diego. To address this problem, add coord_fixed() to the above plot.\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nSolution\n\n\n\n\n\nggplot(temps_wide, aes(`San Diego`, Houston)) +\n  geom_point() +\n  coord_fixed()\n\n\n\n\nThis plot is technically correct but it doesn’t look good, because breaks are spaced differently along the two axes. Also, the plot looks strangely narrow and tall. We can fix both issues by manually setting breaks and limits for both axes. Try this out.\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nHint\n\n\n\n\n\nggplot(temps_wide, aes(`San Diego`, Houston)) +\n  geom_point() +\n  coord_fixed() +\n  scale_x_continuous(\n    limits = ___,\n    breaks = ___\n  ) +\n  scale_y_continuous(\n    limits = ___,\n    breaks = ___\n  )\n\n\n\n\n\n\n\n\n\n\n\nSolution\n\n\n\n\n\nggplot(temps_wide, aes(`San Diego`, Houston)) +\n  geom_point() +\n  coord_fixed() +\n  scale_x_continuous(\n    limits = c(45, 85),\n    breaks = c(40, 50, 60, 70, 80)\n  ) +\n  scale_y_continuous(\n    limits = c(48, 88),\n    breaks = c(50, 60, 70, 80)\n  )\n\n\n\n\nFinally, as the last example of what can be done with coords, we go back to the problem of setting limits on the box-office bar plot. Instead of setting limits with scale functions, we can also set them via the arguments xlim and ylim inside the coord, for example here coord_cartesian(). (This would be a good reason to explicity add coord_cartesian() to a plot.) When we set limits in the coord ggplot does not discard any data points. Instead it simply zooms in or out according to the limits set. Try this out by setting the x limits from 10 to 65 in the box-office plot.\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nHint\n\n\n\n\n\nggplot(boxoffice) +\n  aes(amount, fct_reorder(title, amount)) +\n  geom_col() +\n  coord_cartesian(\n    xlim = ___\n  )\n\n\n\n\n\n\n\n\n\n\n\nSolution\n\n\n\n\n\nggplot(boxoffice) +\n  aes(amount, fct_reorder(title, amount)) +\n  geom_col() +\n  coord_cartesian(\n    xlim = c(10, 65)\n  )\n\n\n\n\nNote: It is normally not a good idea to start a bar plot at a value other than 0. This exercise was solely meant to demonstrate how limits in coords differ from limits in scales."
  },
  {
    "objectID": "worksheets/data-wrangling-2.html",
    "href": "worksheets/data-wrangling-2.html",
    "title": "Data wrangling 2",
    "section": "",
    "text": "In this worksheet, we will continue with basic data manipulations, now moving on to grouping and summarizing, making data tables wider or longer, and joining data tables.\nFirst we need to load the required R packages. Please wait a moment until the live R session is fully set up and all packages are loaded.\n\n\n\n\n\n\n\n\nNext we set up the data. We will be working with data on individual penguins in Antarctica.\npenguins\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nWe’ll also be working with two datasets containing some information about Texas cities."
  },
  {
    "objectID": "worksheets/data-wrangling-2.html#introduction",
    "href": "worksheets/data-wrangling-2.html#introduction",
    "title": "Data wrangling 2",
    "section": "",
    "text": "In this worksheet, we will continue with basic data manipulations, now moving on to grouping and summarizing, making data tables wider or longer, and joining data tables.\nFirst we need to load the required R packages. Please wait a moment until the live R session is fully set up and all packages are loaded.\n\n\n\n\n\n\n\n\nNext we set up the data. We will be working with data on individual penguins in Antarctica.\npenguins\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nWe’ll also be working with two datasets containing some information about Texas cities."
  },
  {
    "objectID": "worksheets/data-wrangling-2.html#analyzing-subsets",
    "href": "worksheets/data-wrangling-2.html#analyzing-subsets",
    "title": "Data wrangling 2",
    "section": "Analyzing subsets",
    "text": "Analyzing subsets\nIn many data analysis settings, we want to break a dataset into subsets and then perform some summary calculation on each subset. The simplest example is counting, which we have done previously with the count() function.\n\n\n\n\n\n\n\n\nThis function subdivides the penguins dataset into subsets for each species and then calculates the number n for each subset, which is the number of observations in each subset.\nThe function count() here does all the work for us, but what if instead of counting we wanted to calculate the mean weight of the penguins for each species, or calculate the mean weight and count at the same time? We need a general framework that allows us to do these kinds of calculations with maximum flexibility.\nThe tidyverse approach is to first group a dataset with group_by() and then to calculate grouped summaries with summarize().\n\nGrouping\nLet’s first consider just grouping. If we look at the raw R output of just the penguins table or the penguins table after running it through group_by(species), we see that the table is the same, except in the second case there is a line # Groups:   species [3] which indicates that the table is grouped by species and there are three groups. (Here, we need to pipe the tables into the print() function to see the raw R output instead of a formatted table that would hide the grouping information.)\n\n\n\n\n\n\n\n\nWe can also group by multiple data columns at once, and we can undo any grouping with ungroup().\n\n\n\n\n\n\n\n\nNow try this yourself. Group the penguins dataset by sex and island.\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nHint\n\n\n\n\n\npenguins |&gt;\n  group_by(___) |&gt;\n  print()\n\n\n\n\n\n\n\n\n\n\n\nSolution\n\n\n\n\n\npenguins |&gt;\n  group_by(sex, island) |&gt;\n  print()\n\n\n\n\nNow undo the previous grouping.\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nHint\n\n\n\n\n\npenguins |&gt;\n  group_by(sex, island) |&gt;\n  ___ |&gt;\n  print()\n\n\n\n\n\n\n\n\n\n\n\nSolution\n\n\n\n\n\npenguins |&gt;\n  group_by(sex, island) |&gt;\n  ungroup() |&gt;\n  print()\n\n\n\n\nAlso verify what the output looks like when you omit the print() function at the end.\n\n\nPerforming summaries\nOnce we have set up a grouping for a data table, we can then calculate summary data with the summarize() function. This function works similarly to mutate(), in that we provide it with statements of the form &lt;new column name&gt; = &lt;computation&gt;, where &lt;new column name&gt; stands for the name of the new column that is being created and &lt;computation&gt; stands for the computation that is used to generate the values in the new column. As an example, if we want to calculate the mean weight (body mass) of penguins, we could write summarize(mean_weight = mean(body_mass_g)), and this would create a new column called mean_weight.\nTry this out. First group by sex and then calculate the mean weight for each sex.\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nHint\n\n\n\n\n\npenguins |&gt;\n  group_by(sex) |&gt;\n  summarize(\n    ___ = ___\n  )\n\n\n\n\n\n\n\n\n\n\n\nSolution\n\n\n\n\n\npenguins |&gt;\n  group_by(sex) |&gt;\n  summarize(\n    mean_weight = mean(body_mass_g)\n  )\n\n\n\n\nWe see that male penguins on average are heavier than female penguins. We also see that there is a row containing NAs. This happens because there are a few entries in the dataset for which we know neither the penguins’ sex nor their weight.\nNext, see if the pattern changes if we subdivide the dataset by species.\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nHint\n\n\n\n\n\npenguins |&gt;\n  group_by(species, sex) |&gt;\n  summarize(\n    ___ = ___\n  )\n\n\n\n\n\n\n\n\n\n\n\nSolution\n\n\n\n\n\npenguins |&gt;\n  group_by(species, sex) |&gt;\n  summarize(\n    mean_weight = mean(body_mass_g)\n  )\n\n\n\n\nWhen running this code, you see a message that summarise() (the tidyverse uses British spelling internally) has grouped the output by species. This happens because if you group by multiple variables and then perform a summary it usually makes sense to keep all but the innermost groupings. Verify this is the case by piping the output from summarize() into print().\nWe can perform multiple summaries at once by adding more statements inside the summarize() function. To try this out, calculate the mean bill length in addition to the mean weight.\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nHint\n\n\n\n\n\npenguins |&gt;\n  group_by(species, sex) |&gt;\n  summarize(\n    mean_weight = ___,\n    mean_bill_length = ___\n  )\n\n\n\n\n\n\n\n\n\n\n\nSolution\n\n\n\n\n\npenguins |&gt;\n  group_by(species, sex) |&gt;\n  summarize(\n    mean_weight = mean(body_mass_g),\n    mean_bill_length = mean(bill_length_mm)\n  )\n\n\n\n\nWhen performing summaries, we often want to know how many observations there are in each group (i.e., we want to count). We can do this with the function n(), which inside summarize() gives us the group size. So, we can count by adding a statement such as count = n() inside summarize(). Try this out.\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nHint\n\n\n\n\n\npenguins |&gt;\n  group_by(species, sex) |&gt;\n  summarize(\n    mean_weight = ___,\n    mean_bill_length = ___,\n    count = ___\n  )\n\n\n\n\n\n\n\n\n\n\n\nSolution\n\n\n\n\n\npenguins |&gt;\n  group_by(species, sex) |&gt;\n  summarize(\n    mean_weight = mean(body_mass_g),\n    mean_bill_length = mean(bill_length_mm),\n    count = n()\n  )\n\n\n\n\n\n\nRemoving missing values\nIf we try the previous calculation but grouping only by species and not by sex, we notice a problem: Most values have been replaced by NA.\n\n\n\n\n\n\n\n\nThis happens because R does not like to calculate the mean of a set of numbers where at least one is missing. Whenever there are missing values, we need to think carefully whether we can just ignore them or need to do something more sophisticated. In the penguins dataset there are only a handful of missing values, and therefore ignoring them is fine.\nWe can ignore missing values by setting na.rm = TRUE inside the mean() function. Try this out.\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nHint\n\n\n\n\n\npenguins |&gt;\n  group_by(species) |&gt;\n  summarize(\n    mean_weight = mean(body_mass_g, ___),\n    mean_bill_length = mean(bill_length_mm, ___)\n  )\n\n\n\n\n\n\n\n\n\n\n\nSolution\n\n\n\n\n\npenguins |&gt;\n  group_by(species) |&gt;\n  summarize(\n    mean_weight = mean(body_mass_g, na.rm = TRUE),\n    mean_bill_length = mean(bill_length_mm, na.rm = TRUE)\n  )\n\n\n\n\nAlternatively, we could filter out all rows that contain NAs in the columns of interest. We test whether a column contains NAs with is.na(&lt;column name&gt;), and to keep rows without NAs we use !is.na(&lt;column name&gt;). Try this out.\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nHint\n\n\n\n\n\npenguins |&gt;\n  filter(!is.na(body_mass_g), ___) |&gt;\n  group_by(species) |&gt;\n  summarize(\n    mean_weight = mean(body_mass_g),\n    mean_bill_length = mean(bill_length_mm)\n  )\n\n\n\n\n\n\n\n\n\n\n\nSolution\n\n\n\n\n\npenguins |&gt;\n  filter(!is.na(body_mass_g), !is.na(bill_length_mm)) |&gt;\n  group_by(species) |&gt;\n  summarize(\n    mean_weight = mean(body_mass_g),\n    mean_bill_length = mean(bill_length_mm)\n  )"
  },
  {
    "objectID": "worksheets/data-wrangling-2.html#making-tables-wider-or-longer",
    "href": "worksheets/data-wrangling-2.html#making-tables-wider-or-longer",
    "title": "Data wrangling 2",
    "section": "Making tables wider or longer",
    "text": "Making tables wider or longer\nFor efficient data processing, we usually want tables in long form, where each columns is one variable and each row is one observation. However, in some applications, for example when making a table easier to read for humans, a wide format can be preferred. In a wide format, some variables are displayed as column names, and other variables are distributed over multiple columns.\nConsider the following two versions of a summary table. The first is in long format, where sex is one column and the mean weight is another.\n\n\n\n\n\n\n\n\nThe second is in wide format, where the values of the sex variable (female or male) are used as column headings, and the mean weight values are distributed over these two columns.\n\n\n\n\n\n\n\n\nYou can turn a long table into a wide table using the function pivot_wider(), which takes two arguments: names_from specifies the long column from which the new wide column names should be taken (here e.g., \"sex\"), and values_from specifies the long column from which the new wide values should be taken (here e.g., \"mean_weight\"). Try this out.\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nHint\n\n\n\n\n\npenguins_long |&gt;\n  pivot_wider(names_from = ___, values_from = ___)\n\n\n\n\n\n\n\n\n\n\n\nSolution\n\n\n\n\n\npenguins_long |&gt;\n  pivot_wider(names_from = \"sex\", values_from = \"mean_weight\")\n\n\n\n\nYou can similarly turn a wide table into a long one using the function pivot_longer(). It has arguments cols, names_to, and values_to. cols specifies the wide columns on which to operate, names_to specifies into which long columns the names of the wide columns should be written, and values_to specfies into which long columns the values of the wide columns should be written. Note that while names_to and values_to are specified as strings (that is, in quotes, such as names_to = \"sex\"), the cols argument does not use quotes (e.g., cols = c(female, male)).\nTry this out.\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nHint\n\n\n\n\n\npenguins_wide |&gt;\n  pivot_longer(\n    cols = ___,\n    names_to = ___,\n    values_to = ___\n  )\n\n\n\n\n\n\n\n\n\n\n\nSolution\n\n\n\n\n\npenguins_wide |&gt;\n  pivot_longer(\n    cols = c(female, male),\n    names_to = \"sex\",\n    values_to = \"mean_weight\"\n  )\n\n\n\n\nNotice how the arguments names_from and values_from in pivot_wider() are exactly equivalent to names_to and values_to in pivot_longer()."
  },
  {
    "objectID": "worksheets/data-wrangling-2.html#combining-datasets-with-joins",
    "href": "worksheets/data-wrangling-2.html#combining-datasets-with-joins",
    "title": "Data wrangling 2",
    "section": "Combining datasets with joins",
    "text": "Combining datasets with joins\nFinally, we sometimes encounter the situation where we have two data sets that contain different pieces of information about the same subjects or objects, and we need to merge these tables for further analysis. In this situation, we need to perform a join, and there are multiple different types of joins available: left_join(), right_join(), inner_join(), full_join(). These joins all differ in how they handle cases where an observation is present in only one of the two tables but missing in the other.\nTwo explore joins, consider the following two datasets, which contain the population number of three Texas cities and the city areas, respectively. The cities in the two tables are not the same, on purpose.\n\n\n\n\n\n\n\n\nTry to merge TX_area into TX_population, using left_join().\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nHint\n\n\n\n\n\nleft_join(___, ___)\n\n\n\n\n\n\n\n\n\n\n\nSolution\n\n\n\n\n\nleft_join(TX_population, TX_area)\n\n\n\n\nWhat happens if you reverse the two arguments?\nNow try the same with full_join().\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nHint\n\n\n\n\n\nfull_join(___, ___)\n\n\n\n\n\n\n\n\n\n\n\nSolution\n\n\n\n\n\nfull_join(TX_population, TX_area)\n\n\n\n\nTry also right_join() and inner_join(). See if you can describe what each join function does and how they differ from one another."
  },
  {
    "objectID": "worksheets/dimension-reduction-2.html",
    "href": "worksheets/dimension-reduction-2.html",
    "title": "Dimension reduction 2",
    "section": "",
    "text": "In this worksheet, we will discuss how to perform t-SNE (t-distributed stochastic neighbor embedding), a type of non-linear dimension reduction.\nFirst we need to load the required R packages. Please wait a moment until the live R session is fully set up and all packages are loaded.\n\n\n\n\n\n\n\n\nNext we set up the data.\n\n\n\n\n\n\n\n\nWe will be working with two datasets, spirals and blue_jays. The dataset spirals contains made-up data in two dimensions that forms three intertwined spirals.\n\n\n\n\n\n\n\n\nThe dataset blue_jays contains various measurements taken on blue jay birds."
  },
  {
    "objectID": "worksheets/dimension-reduction-2.html#introduction",
    "href": "worksheets/dimension-reduction-2.html#introduction",
    "title": "Dimension reduction 2",
    "section": "",
    "text": "In this worksheet, we will discuss how to perform t-SNE (t-distributed stochastic neighbor embedding), a type of non-linear dimension reduction.\nFirst we need to load the required R packages. Please wait a moment until the live R session is fully set up and all packages are loaded.\n\n\n\n\n\n\n\n\nNext we set up the data.\n\n\n\n\n\n\n\n\nWe will be working with two datasets, spirals and blue_jays. The dataset spirals contains made-up data in two dimensions that forms three intertwined spirals.\n\n\n\n\n\n\n\n\nThe dataset blue_jays contains various measurements taken on blue jay birds."
  },
  {
    "objectID": "worksheets/dimension-reduction-2.html#performing-t-sne-on-the-spirals-dataset",
    "href": "worksheets/dimension-reduction-2.html#performing-t-sne-on-the-spirals-dataset",
    "title": "Dimension reduction 2",
    "section": "Performing t-SNE on the spirals dataset",
    "text": "Performing t-SNE on the spirals dataset\nWe start by taking a closer look at the spirals dataset. It has three columns, x, y, and group. When we create a scatterplot of y against x and color by group we see three intertwined spirals.\n\n\n\n\n\n\n\n\nWe perform t-SNE on this dataset with the function Rtsne(). Data preparation is similar to PCA: First, we discard all non-numeric columns. Then, we scale the variables to zero mean and unit variance.\n\n\n\n\n\n\n\n\nThe result looks quite similar to the plot of the raw data. That is the case because we have not customized t-SNE. The main parameter that we change when running t-SNE is the perplexity value (perplexity), and its default of 30 is relativley large for the spirals data. We can also change the random seed and the number of iterations until the algorithm is considered converged (max_iter, higher is better).\n\n\n\n\n\n\n\n\nNow, to see how the parameter settings change the t-SNE results, run the above code for a few different values of the three custom config parameters we have set up. Pay attention to how the output changes as you change each of these parameters.\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nSolution\n\n\n\n\n\n# random seed\nset.seed(1255)\n\n# run t-SNE with different perplexity and total number of iterations\ntsne_fit &lt;- spirals |&gt;\n  select(where(is.numeric)) |&gt;\n  scale() |&gt;\n  Rtsne(perplexity = 8, max_iter = 1000)\n\n# extract coordinates from the `tsne_fit` object and plot\ntsne_fit$Y |&gt;\n  as.data.frame() |&gt;\n  # put non-numeric data columns back in to the dataset\n  cbind(select(spirals, -where(is.numeric))) |&gt;\n  ggplot(aes(V1, V2, color = group)) +\n  geom_point()"
  },
  {
    "objectID": "worksheets/dimension-reduction-2.html#performing-t-sne-on-the-blue_jays-dataset",
    "href": "worksheets/dimension-reduction-2.html#performing-t-sne-on-the-blue_jays-dataset",
    "title": "Dimension reduction 2",
    "section": "Performing t-SNE on the blue_jays dataset",
    "text": "Performing t-SNE on the blue_jays dataset\nNext we will perform t-SNE on the blue_jays dataset. See if you can adapt the code from the spirals data to work with the blue_jays dataset.\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nHint\n\n\n\n\n\n# random seed\nset.seed(1255)\n\n# run t-SNE with different perplexity and total number of iterations\ntsne_fit &lt;- ___ |&gt;\n  select(where(is.numeric)) |&gt;\n  scale() |&gt;\n  Rtsne(perplexity = 8, max_iter = 1000)\n\n# extract coordinates from the `tsne_fit` object and plot\ntsne_fit$Y |&gt;\n  as.data.frame() |&gt;\n  # put non-numeric data columns back in to the dataset\n  cbind(select(___, -where(is.numeric))) |&gt;\n  ggplot(aes(V1, V2, color = ___)) +\n  geom_point()\n\n\n\n\n\n\n\n\n\n\n\nSolution\n\n\n\n\n\n# random seed\nset.seed(1255)\n\n# run t-SNE with different perplexity and total number of iterations\ntsne_fit &lt;- blue_jays |&gt;\n  select(where(is.numeric)) |&gt;\n  scale() |&gt;\n  Rtsne(perplexity = 8, max_iter = 1000)\n\n# extract coordinates from the `tsne_fit` object and plot\ntsne_fit$Y |&gt;\n  as.data.frame() |&gt;\n  # put non-numeric data columns back in to the dataset\n  cbind(select(blue_jays, -where(is.numeric))) |&gt;\n  ggplot(aes(V1, V2, color = sex)) +\n  geom_point()\n\n\n\n\nAs before, change the t-SNE configuration parameters and see what effect different choices have on the results you obtain.\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nHint\n\n\n\n\n\n# random seed\nset.seed(___)\n\n# run t-SNE with different perplexity and total number of iterations\ntsne_fit &lt;- blue_jays |&gt;\n  select(where(is.numeric)) |&gt;\n  scale() |&gt;\n  Rtsne(\n    perplexity = ___,\n    max_iter = ___\n  )\n\n# extract coordinates from the `tsne_fit` object and plot\ntsne_fit$Y |&gt;\n  as.data.frame() |&gt;\n  # put non-numeric data columns back in to the dataset\n  cbind(select(blue_jays, -where(is.numeric))) |&gt;\n  ggplot(aes(V1, V2, color = sex)) +\n  geom_point()\n\n\n\n\n\n\n\n\n\n\n\nSolution\n\n\n\n\n\n# random seed\nset.seed(9327)\n\n# run t-SNE with different perplexity and total number of iterations\ntsne_fit &lt;- blue_jays |&gt;\n  select(where(is.numeric)) |&gt;\n  scale() |&gt;\n  Rtsne(\n    perplexity = 6,\n    max_iter = 2000\n  )\n\n# extract coordinates from the `tsne_fit` object and plot\ntsne_fit$Y |&gt;\n  as.data.frame() |&gt;\n  # put non-numeric data columns back in to the dataset\n  cbind(select(blue_jays, -where(is.numeric))) |&gt;\n  ggplot(aes(V1, V2, color = sex)) +\n  geom_point()"
  },
  {
    "objectID": "worksheets/functional-programming.html",
    "href": "worksheets/functional-programming.html",
    "title": "Functional programming",
    "section": "",
    "text": "In this worksheet, we will discuss elements of functional programming in R.\nFirst we need to load the required R packages. Please wait a moment until the live R session is fully set up and all packages are loaded.\n\n\n\n\n\n\n\n\nNext we set up the data. We will be working with data on individual penguins in Antarctica."
  },
  {
    "objectID": "worksheets/functional-programming.html#introduction",
    "href": "worksheets/functional-programming.html#introduction",
    "title": "Functional programming",
    "section": "",
    "text": "In this worksheet, we will discuss elements of functional programming in R.\nFirst we need to load the required R packages. Please wait a moment until the live R session is fully set up and all packages are loaded.\n\n\n\n\n\n\n\n\nNext we set up the data. We will be working with data on individual penguins in Antarctica."
  },
  {
    "objectID": "worksheets/functional-programming.html#calling-functions-repeatedly",
    "href": "worksheets/functional-programming.html#calling-functions-repeatedly",
    "title": "Functional programming",
    "section": "Calling functions repeatedly",
    "text": "Calling functions repeatedly\nThe core concept in functional programming is a function, which is a way of running the same code multiple times on different input data. In R, functions are defined with the function keyword, followed by a list of arguments in parentheses and the body of the function in curly braces. For example, the following code defines a function that squares a numeric value.\n\n\n\n\n\n\n\n\nThe variable x is the argument of the function, and it can then be used in the body of the function for computations. The result of the last expression in the function body is used as the return value of the function, so this simple function returns the square of its argument. Note that functions are first-class objects in R, and we can assign a function to a variable using &lt;-, just like any other assignment in R.\nTo call a function, we write the name of the function followed by parentheses enclosing the argument(s). For example, the following code calculates the squares of 3, 4, and 5:\n\n\n\n\n\n\n\n\nWe often want to run a function on a set of given input values. In procedural programming, we would typically do this with a for loop. The equivalent concept in functional programming is the map. Specifically, the map() function takes as input a vector of values (e.g., the numbers from 3 to 5, 3:5) and a function name (e.g. square, note no parentheses) and applies the function to each value in the input vector.\n\n\n\n\n\n\n\n\nThe return result is a list, hence the weird double brackets ([[1]], [[2]], etc.). If instead we want a regular vector of numbers, we can use map_dbl(). Here, “dbl” stands for “double”, which is shorthand for “double precision floating point numbers”, the default numeric datatype of R.\n\n\n\n\n\n\n\n\nWhen using any of the map functions, instead of providing a function by name, we can also define a function in place, as a formula. We do so by writing an R expression with a tilde (~) in front. The parameter supplied by the map function is always called .x. So ~.x^2 is equivalent to function(.x) { .x^2 }.\n\n\n\n\n\n\n\n\nNow try these concepts yourself. First write a function that calculates the cube of its argument.\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nHint\n\n\n\n\n\ncube &lt;- function(___) {\n  ___\n}\n\ncube(2)\ncube(3)\ncube(4)\n\n\n\n\n\n\n\n\n\n\n\nSolution\n\n\n\n\n\ncube &lt;- function(x) {\n  x^3\n}\n\ncube(2)\ncube(3)\ncube(4)\n\n\n\n\nNow use this function in conjunction with either map() or map_dbl() to calculate the first 5 cubes.\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nHint\n\n\n\n\n\ncube &lt;- function(x) {\n  x^3\n}\n\nmap(1:5, ___)\n\n\n\n\n\n\n\n\n\n\n\nSolution\n\n\n\n\n\ncube &lt;- function(x) {\n  x^3\n}\n\nmap(1:5, cube)\nmap_dbl(1:5, cube)\n\n\n\n\nNow calculate the first 5 cubes using the in-place function definition via a formula.\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nHint\n\n\n\n\n\nmap(1:5, ~___)\n\n\n\n\n\n\n\n\n\n\n\nSolution\n\n\n\n\n\nmap(1:5, ~.x^3)\nmap_dbl(1:5, ~.x^3)\n\n\n\n\nThe map() function applies a function taking a single argument to a single vector of values. But what if we have a function with two arguments, say, a function that takes values x and y and returns their product? In this case, we can use map2(), which requires two input vectors and a function of two arguments.\n\n\n\n\n\n\n\n\nTo try this out, use a single map2() expression to calculate the square of 3, the cube of 4, and the fourth power of 5.\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nHint\n\n\n\n\n\nmap2(3:5, 2:4, ___)\n\n\n\n\n\n\n\n\n\n\n\nSolution\n\n\n\n\n\nmap2(3:5, 2:4, function(x, y) x^y)\n\n\n\n\nFinally, sometimes we want to call a function repeatedly but not to collect the return values but rather for side effects, such as printing output. In this case, we use walk() instead of map().\n\n\n\n\n\n\n\n\nTry this out by calling the following function print_value() on the input values 1, 2, and 3.\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nHint\n\n\n\n\n\nprint_value &lt;- function(x) {\n  cat(\"The value is\", x, \"\\n\")\n}\n\nwalk(1:3, ___)\n\n\n\n\n\n\n\n\n\n\n\nSolution\n\n\n\n\n\nprint_value &lt;- function(x) {\n  cat(\"The value is\", x, \"\\n\")\n}\n\nwalk(1:3, print_value)"
  },
  {
    "objectID": "worksheets/functional-programming.html#nesting-and-unnesting",
    "href": "worksheets/functional-programming.html#nesting-and-unnesting",
    "title": "Functional programming",
    "section": "Nesting and unnesting",
    "text": "Nesting and unnesting\nFunctional programming becomes a very powerful concept in data analysis when combined with nested data frames, so we will be discussing nesting and unnesting next.\nWe use the function nest() to take rectangular regions in a data table and compress them into a single cell in a higher-level table. This process is useful when we want to store all the information for one category of data in a single cell.\nFor example, we can store all the penguin data in a nested table with three rows and two columns, where one column contains the penguins species and the other column contains all the data for that species. We generate such a table as follows.\n\n\n\n\n\n\n\n\nThe specification data = -species means “create a new column called data and move everything into this column except the contents of the species column”. The nest() function will automatically generate exactly one row for each unique combination of data values that are not being nested. Therefore, we end up with three rows, one for each species.\nThe data column is a list column, and we can access individual values in it via list indexing, i.e., double square brackets. So, data[[1]] is the first nested table, data[[2]] is the second nested table, and so on. For example, the following code extracts all the data for Gentoo penguins.\n\n\n\n\n\n\n\n\nNow try this out. First, make a nested table but nest by island.\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nHint\n\n\n\n\n\npenguins |&gt;\n  nest(data = ___)\n\n\n\n\n\n\n\n\n\n\n\nSolution\n\n\n\n\n\npenguins |&gt;\n  nest(data = -island)\n\n\n\n\nNow extract the data table for the third island.\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nHint\n\n\n\n\n\npenguins_nested &lt;- penguins |&gt;\n  nest(data = -island)\n\npenguins_nested$data[[___]]\n\n\n\n\n\n\n\n\n\n\n\nSolution\n\n\n\n\n\npenguins_nested &lt;- penguins |&gt;\n  nest(data = -island)\n\npenguins_nested$data[[3]]\n\n\n\n\nNow nest by species and island at the same time. You can nest by multiple columns by excluding both from the newly created data column, via data = -c(species, island).\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nHint\n\n\n\n\n\npenguins |&gt;\n  nest(data = ___)\n\n\n\n\n\n\n\n\n\n\n\nSolution\n\n\n\n\n\npenguins |&gt;\n  nest(data = -c(species, island))\n\n\n\n\nTo unnest, we use the function unnest(). Its argument cols takes the name of the column to be unnested. For example, if we nest into the data column, as we have done in all examples so far, then cols = data unnests this column.\n\n\n\n\n\n\n\n\nTry this for yourself in the following example. Note that the data column has a different name here.\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nHint\n\n\n\n\n\npenguins_nested &lt;- penguins |&gt;\n  nest(species_data = -species)\n\npenguins_nested |&gt;\n  unnest(cols = ___)\n\n\n\n\n\n\n\n\n\n\n\nSolution\n\n\n\n\n\npenguins_nested &lt;- penguins |&gt;\n  nest(species_data = -species)\n\npenguins_nested |&gt;\n  unnest(cols = species_data)"
  },
  {
    "objectID": "worksheets/functional-programming.html#plotting-subsets-of-data",
    "href": "worksheets/functional-programming.html#plotting-subsets-of-data",
    "title": "Functional programming",
    "section": "Plotting subsets of data",
    "text": "Plotting subsets of data\nNow we will use the concepts of mapping and nesting to automatically create plots of subsets of data. Specifically, we will make pie charts of the species composition of penguin species on the different islands. The pie charts will be generated by the following function, which takes as arguments the data for the island and the name of the island.\n\n\n\n\n\n\n\n\nWe can use this function for a single island like so.\n\n\n\n\n\n\n\n\nHowever, here we want to automate the process of calling this function for all islands separately. See if you can make this happen, using the functions nest(), mutate(), map2(), pull(), and walk(). Note: The individual stages of the calculation are provided as hints, so you can click through them one-by-one if you get stuck or something is not clear.\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nHint 1\n\n\n\n\n\nFirst create a nested table so it has three rows, one for each island. The table should have a column data whose entries contain all the data for each island.\npenguins |&gt;\n  nest(___)\n\n\n\n\n\n\n\n\n\n\n\nHint 2\n\n\n\n\n\nNext use mutate() and map2() to run the make_pie() function on each subset of data and store the resulting plots.\npenguins |&gt;\n  # move all data for each island into a single\n  # entry in a column called `data`\n  nest(data = -island) |&gt;\n  ___ # continue here with mutate\n\n\n\n\n\n\n\n\n\n\n\nHint 3\n\n\n\n\n\nNext extract the plots column.\npenguins |&gt;\n  # move all data for each island into a single\n  # entry in a column called `data`\n  nest(data = -island) |&gt;\n  # run the `make_pie()` function on each dataset separately,\n  # store result in a column `plots`\n  mutate(\n    plots = map2(data, island, make_pie)\n  ) |&gt;\n  ___ # extract the plots column\n\n\n\n\n\n\n\n\n\n\n\nHint 4\n\n\n\n\n\nNext use walk() to print all the plots.\npenguins |&gt;\n  # move all data for each island into a single\n  # entry in a column called `data`\n  nest(data = -island) |&gt;\n  # run the `make_pie()` function on each dataset separately,\n  # store result in a column `plots`\n  mutate(\n    plots = map2(data, island, make_pie)\n  ) |&gt;\n  pull(plots) |&gt;  # extract the column holding the plots\n  ___ # use `walk()` to print all the plots\n\n\n\n\n\n\n\n\n\n\n\nSolution\n\n\n\n\n\npenguins |&gt;\n  # move all data for each island into a single\n  # entry in a column called `data`\n  nest(data = -island) |&gt;\n  # run the `make_pie()` function on each dataset separately,\n  # store result in a column `plots`\n  mutate(\n    plots = map2(data, island, make_pie)\n  ) |&gt;\n  pull(plots) |&gt; # extract the column holding the plots\n  walk(print)    # print all plots one by one"
  },
  {
    "objectID": "worksheets/getting-things-in-order.html",
    "href": "worksheets/getting-things-in-order.html",
    "title": "Getting things into the right order",
    "section": "",
    "text": "In this worksheet, we will discuss how to manipulate factor levels such that plots show visual elements in the correct order.\nFirst we need to load the required R packages. Please wait a moment until the live R session is fully set up and all packages are loaded.\n\n\n\n\n\n\n\n\nWe will be working with the dataset penguins, which contains data on individual penguins on Antarctica.\npenguins\n\n\n\n\n\n\n\n\n\n\nWe will also be working with the dataset gapminder, which contains information about life expectancy, population number, and GDP for 142 different countries.\n\n\n\n\n\n\n\n\nFinally, we will be working with the dataset Aus_athletes, which contains various physiological measurements made on athletes competing in different sports."
  },
  {
    "objectID": "worksheets/getting-things-in-order.html#introduction",
    "href": "worksheets/getting-things-in-order.html#introduction",
    "title": "Getting things into the right order",
    "section": "",
    "text": "In this worksheet, we will discuss how to manipulate factor levels such that plots show visual elements in the correct order.\nFirst we need to load the required R packages. Please wait a moment until the live R session is fully set up and all packages are loaded.\n\n\n\n\n\n\n\n\nWe will be working with the dataset penguins, which contains data on individual penguins on Antarctica.\npenguins\n\n\n\n\n\n\n\n\n\n\nWe will also be working with the dataset gapminder, which contains information about life expectancy, population number, and GDP for 142 different countries.\n\n\n\n\n\n\n\n\nFinally, we will be working with the dataset Aus_athletes, which contains various physiological measurements made on athletes competing in different sports."
  },
  {
    "objectID": "worksheets/getting-things-in-order.html#manual-reordering",
    "href": "worksheets/getting-things-in-order.html#manual-reordering",
    "title": "Getting things into the right order",
    "section": "Manual reordering",
    "text": "Manual reordering\nThe simplest form of reordering is manual, where we state explicitly in which order we want some graphical element to appear. We reorder manually with the function fct_relevel(), which takes as arguments the variable to reorder and the levels we want to reorder, in the order in which we want them to appear.\nHere is a simple example. We create a factor x with levels \"A\", \"B\", \"C\", in that order, and then we reorder the levels to \"B\", \"C\", \"A\".\n\n\n\n\n\n\n\n\nTry this out for yourself. Place the levels into a few different orderings. Also try listing only some of the levels to reorder.\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nSolution\n\n\n\n\n\nx &lt;- factor(c(\"A\", \"B\", \"A\", \"C\", \"B\"))\nx\n\nfct_relevel(x, \"C\", \"A\", \"B\")\n\n\n\n\nNow we apply this concept to a ggplot graph. We will work with the following boxplot visualization of the distribution of bill length versus penguin species.\n\n\n\n\n\n\n\n\nUse the function fct_relevel() to place the three species into the order Chinstrap, Gentoo, Adelie. (Hint: You will have to use a mutate() statement to modify the species column.)\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nHint\n\n\n\n\n\npenguins |&gt;\n  mutate(\n    species = fct_relevel(___)\n  ) |&gt;\n  ggplot(aes(species, bill_length_mm)) +\n  geom_boxplot(na.rm = TRUE)\n\n\n\n\n\n\n\n\n\n\n\nSolution\n\n\n\n\n\npenguins |&gt;\n  mutate(\n    species = fct_relevel(species, \"Chinstrap\", \"Gentoo\", \"Adelie\")\n  ) |&gt;\n  ggplot(aes(species, bill_length_mm)) +\n  geom_boxplot(na.rm = TRUE)\n\n\n\n\nNow flip the x and y axes, making sure that the order remains Chinstrap, Gentoo, Adelie from top to bottom.\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nHint\n\n\n\n\n\npenguins |&gt;\n  mutate(\n    species = fct_relevel(species, ___)\n  ) |&gt;\n  ggplot(aes(bill_length_mm, species)) +\n  geom_boxplot(na.rm = TRUE)\n\n\n\n\n\n\n\n\n\n\n\nSolution\n\n\n\n\n\npenguins |&gt;\n  mutate(\n    species = fct_relevel(species, \"Adelie\", \"Gentoo\", \"Chinstrap\")\n  ) |&gt;\n  ggplot(aes(bill_length_mm, species)) +\n  geom_boxplot(na.rm = TRUE)"
  },
  {
    "objectID": "worksheets/getting-things-in-order.html#reordering-based-on-frequency",
    "href": "worksheets/getting-things-in-order.html#reordering-based-on-frequency",
    "title": "Getting things into the right order",
    "section": "Reordering based on frequency",
    "text": "Reordering based on frequency\nManual reordering is cumbersome if there are many levels that need to be reorderd. Therefore, we often use functions that can reorder automatically based on some quantitative criterion. For example, we can use fct_infreq() to order a factor based on the number of occurrences of each level in the dataset. And we can reverse the order of a factor using the function fct_rev(). These two functions are particularly useful for making bar plots.\nConsider the following plot of the number of athletes competing in various sports in the Aus_athletes dataset. This plot is problematic because the sports are arranged in an arbitrary (here: alphabetic) order that is not meaningful for the data shown.\n\n\n\n\n\n\n\n\nReorder the sport column so that the sport with the most athletes appears on top and the sport with the least athletes at the bottom.\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nHint\n\n\n\n\n\nAus_athletes |&gt;\n  mutate(\n    sport = ___\n  ) |&gt;\n  ggplot(aes(y = sport)) +\n  geom_bar()\n\n\n\n\n\n\n\n\n\n\n\nSolution\n\n\n\n\n\nAus_athletes |&gt;\n  mutate(\n    sport = fct_rev(fct_infreq(sport))\n  ) |&gt;\n  ggplot(aes(y = sport)) +\n  geom_bar()"
  },
  {
    "objectID": "worksheets/getting-things-in-order.html#reordering-based-on-numerical-values",
    "href": "worksheets/getting-things-in-order.html#reordering-based-on-numerical-values",
    "title": "Getting things into the right order",
    "section": "Reordering based on numerical values",
    "text": "Reordering based on numerical values\nAnother common problem we encounter is that we want to order a factor based on some other numerical variable, possibly after we have calculated some summary statistic such as the median, minimum, or maximum.\nAs an example for this problem, we consider a plot of the life expectancy in various countries in the Americas over time, shown as colored tiles.\n\n\n\n\n\n\n\n\nThe default alphabetic ordering creates a meaningless color pattern that is difficult to read. It would make more sense to order the countries by some function of the life expectancy values, such as the minimum, median, or maximum value. We can do this with the function fct_reorder(), which takes three arguments: The factor to reorder, the numerical variable on which to base the ordering, and the name of a function (such as min, median, max) to be applied to calculate the ordering statistic.\nModify the above plot so the countries are ordered by their median life expectancy over the observed time period.\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nHint\n\n\n\n\n\ngapminder |&gt;\n  filter(continent == \"Americas\") |&gt;\n  mutate(\n    country = fct_reorder(___, ___, ___)\n  ) |&gt;\n  ggplot(aes(year, country, fill = lifeExp)) + \n  geom_tile() +\n  scale_fill_viridis_c(option = \"A\")\n\n\n\n\n\n\n\n\n\n\n\nSolution\n\n\n\n\n\ngapminder |&gt;\n  filter(continent == \"Americas\") |&gt;\n  mutate(\n    country = fct_reorder(country, lifeExp, median)\n  ) |&gt;\n  ggplot(aes(year, country, fill = lifeExp)) + \n  geom_tile() +\n  scale_fill_viridis_c(option = \"A\")\n\n\n\n\nTry other orderings, such as min, max, or mean.\nNext, instead of plotting this data as colored tiles, plot it as lines, using facets to make separate panels for each country.\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nHint\n\n\n\n\n\ngapminder |&gt;\n  filter(continent == \"Americas\") |&gt;\n  mutate(country = fct_reorder(country, lifeExp, median)) |&gt;\n  ggplot(___) + \n  geom____() +\n  facet_wrap(___)\n\n\n\n\n\n\n\n\n\n\n\nSolution\n\n\n\n\n\ngapminder |&gt;\n  filter(continent == \"Americas\") |&gt;\n  mutate(country = fct_reorder(country, lifeExp, median)) |&gt;\n  ggplot(aes(year, lifeExp)) + \n  geom_line() +\n  facet_wrap(vars(country))\n\n\n\n\nAgain, try various orderings, including min, max, or mean."
  },
  {
    "objectID": "worksheets/getting-things-in-order.html#lumping-of-factor-levels",
    "href": "worksheets/getting-things-in-order.html#lumping-of-factor-levels",
    "title": "Getting things into the right order",
    "section": "Lumping of factor levels",
    "text": "Lumping of factor levels\nFinally, we sometimes have factors with too many levels and we want to combine some into a catch-all level such as “Other”. We illustrate this concept with the following plot, which shows BMI (body-mass index) versus height for male athletes, broken down by sport.\n\n\n\n\n\n\n\n\nWe want to modify this plot so that all sports other than basketball and water polo are shown as “Other”. To achieve this goal, you will have to create a new column called sport_lump that contains a lumped version of the sport factor.\nThe function that does the lumping is called fct_other(), and it takes as argument the variable to lump and an argument keep listing the values to keep or alternatively an argument drop listing the values to drop. Since you want to keep only basketball and water polo, use the variant with the keep argument.\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nHint\n\n\n\n\n\nAus_athletes |&gt;\n  filter(sex == \"m\") |&gt;\n  mutate(\n    sport_lump = fct_other(sport, keep = ___)\n  ) |&gt;\n  ggplot(aes(height, bmi, color = sport_lump)) +\n  geom_point()\n\n\n\n\n\n\n\n\n\n\n\nSolution\n\n\n\n\n\nAus_athletes |&gt;\n  filter(sex == \"m\") |&gt;\n  mutate(\n    sport_lump = fct_other(sport, keep = c(\"basketball\", \"water polo\"))\n  ) |&gt;\n  ggplot(aes(height, bmi, color = sport_lump)) +\n  geom_point()\n\n\n\n\nNow use the variant of the fct_other() function with the drop argument. Drop field, rowing, and tennis from the sports considered individually.\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nHint\n\n\n\n\n\nAus_athletes |&gt;\n  filter(sex == \"m\") |&gt;\n  mutate(\n    sport_lump = fct_other(sport, drop = ___)\n  ) |&gt;\n  ggplot(aes(height, bmi, color = sport_lump)) +\n  geom_point()\n\n\n\n\n\n\n\n\n\n\n\nSolution\n\n\n\n\n\nAus_athletes |&gt;\n  filter(sex == \"m\") |&gt;\n  mutate(\n    sport_lump = fct_other(sport, drop = c(\"field\", \"rowing\", \"tennis\"))\n  ) |&gt;\n  ggplot(aes(height, bmi, color = sport_lump)) +\n  geom_point()\n\n\n\n\nFinally, try other lumping functions also. For example, the function fct_lump_n() retains the n most frequent levels and lump all others into \"Other\". See if you can create a meaningful example with the Aus_athletes dataset that uses the fct_lump_n() function. Hint: Try to make a bar plot, similar to the one we made in the section on reordering based on frequency."
  },
  {
    "objectID": "worksheets/interactive-plots.html",
    "href": "worksheets/interactive-plots.html",
    "title": "Interactive plots",
    "section": "",
    "text": "In this worksheet, we will discuss how to combine several ggplot2 plots into one compound figure.\nFirst we need to load the required R packages. Please wait a moment until the live R session is fully set up and all packages are loaded.\n\n\n\n\n\n\n\n\nNext we set up the data.\n\n\n\n\n\n\n\n\nWe will be working with the dataset texas_counties. This dataset contains various pieces of information about each county in Texas, such as the number of people living in the county in 2010 (pop2010), the size of each county (column area), and the median income (median_income). The column popratio is the ratio of the number of inhabitants to the median across all counties. The dataset also contains the shape information about each county (stored in the geometry column). The column FIPS contains a five-digit id code that uniquely represents each county."
  },
  {
    "objectID": "worksheets/interactive-plots.html#introduction",
    "href": "worksheets/interactive-plots.html#introduction",
    "title": "Interactive plots",
    "section": "",
    "text": "In this worksheet, we will discuss how to combine several ggplot2 plots into one compound figure.\nFirst we need to load the required R packages. Please wait a moment until the live R session is fully set up and all packages are loaded.\n\n\n\n\n\n\n\n\nNext we set up the data.\n\n\n\n\n\n\n\n\nWe will be working with the dataset texas_counties. This dataset contains various pieces of information about each county in Texas, such as the number of people living in the county in 2010 (pop2010), the size of each county (column area), and the median income (median_income). The column popratio is the ratio of the number of inhabitants to the median across all counties. The dataset also contains the shape information about each county (stored in the geometry column). The column FIPS contains a five-digit id code that uniquely represents each county."
  },
  {
    "objectID": "worksheets/interactive-plots.html#interactice-scatterplots",
    "href": "worksheets/interactive-plots.html#interactice-scatterplots",
    "title": "Interactive plots",
    "section": "Interactice scatterplots",
    "text": "Interactice scatterplots\nThe ggiraph package provides the simplest means towards adding a moderate amount of interactivity into ggplot2 plots. It makes it quite straightforward to produce interactive tooltips, interactive highlighting, and the ability to execute actions in the browser (such as opening a new page) when the user clicks on specific elements in the plot.\nAs a first example, we will create an interactive version of the following plot, which shows median income in Texas counties versus the number of inhabitants of that county.\n\n\n\n\n\n\n\n\nTo turn this plot interactive, we need to make at least the following three modifications:\n\nReplace the geom with the appropriate interactive version. For example, geom_point() is replaced by geom_point_interactive().\nAdd an interactive aesthetic. For example, the tooltip aesthetic sets the contents of tooltips that show when hovering over the data points.\nDisplay the interactive plot object by calling the girafe() function with the argument ggobj. For example, if your ggplot2 plot is stored in a variable p, you would call girafe(ggobj = p).\n\nMake these modifications to the above plot to create an interactive version.\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nHint\n\n\n\n\n\ntexas_scatter &lt;- texas_counties |&gt;\n  ggplot(aes(pop2010, median_income)) +\n  geom_point_interactive(\n    aes(tooltip = ___),\n    na.rm = TRUE, size = 2\n  ) +\n  scale_x_log10()\n\ngirafe(\n  ggobj = ___\n)\n\n\n\n\n\n\n\n\n\n\n\nSolution\n\n\n\n\n\ntexas_scatter &lt;- texas_counties |&gt;\n  ggplot(aes(pop2010, median_income)) +\n  geom_point_interactive(\n    aes(tooltip = county),\n    na.rm = TRUE, size = 2\n  ) +\n  scale_x_log10()\n\ngirafe(\n  ggobj = texas_scatter\n)\n\n\n\n\nIn addition to the tooltip aesthetic, there is also the data_id aesthetic, which enables highlighting of the selected point(s). If each element has its own data_id then elements get highlighted individually. Alternatively, if elements share their data_id value then they get highlighted jointly.\nFirst, try individual highlighting, by using county as the data_id.\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nHint\n\n\n\n\n\ntexas_scatter &lt;- texas_counties |&gt;\n  ggplot(aes(pop2010, median_income)) +\n  geom_point_interactive(\n    aes(\n      tooltip = county,\n      data_id = ___\n    ),\n    na.rm = TRUE, size = 2\n  ) +\n  scale_x_log10()\n\ngirafe(\n  ggobj = texas_scatter\n)\n\n\n\n\n\n\n\n\n\n\n\nSolution\n\n\n\n\n\ntexas_scatter &lt;- texas_counties |&gt;\n  ggplot(aes(pop2010, median_income)) +\n  geom_point_interactive(\n    aes(\n      tooltip = county,\n      data_id = county\n    ),\n    na.rm = TRUE, size = 2\n  ) +\n  scale_x_log10()\n\ngirafe(\n  ggobj = texas_scatter\n)\n\n\n\n\nNext, try joint highlighting, by creating two groups: one for counties with a median income above $60,000 and one for all other counties.\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nHint\n\n\n\n\n\ntexas_scatter &lt;- texas_counties |&gt;\n  mutate(\n    income = ifelse(___)\n  ) |&gt;\n  ggplot(aes(pop2010, median_income, color = ___)) +\n  geom_point_interactive(\n    aes(\n      tooltip = county,\n      data_id = ___\n    ),\n    na.rm = TRUE, size = 2\n  ) +\n  scale_x_log10()\n\ngirafe(\n  ggobj = texas_scatter\n)\n\n\n\n\n\n\n\n\n\n\n\nSolution\n\n\n\n\n\ntexas_scatter &lt;- texas_counties |&gt;\n  mutate(\n    income = ifelse(median_income &gt; 60000, \"high\", \"low\")\n  ) |&gt;\n  ggplot(aes(pop2010, median_income, color = income)) +\n  geom_point_interactive(\n    aes(\n      tooltip = county,\n      data_id = income\n    ),\n    na.rm = TRUE, size = 2\n  ) +\n  scale_x_log10()\n\ngirafe(\n  ggobj = texas_scatter\n)\n\n\n\n\nYou can customize how tooltips and highlighted data points appear by providing the argument options in the girafe() function. Options are separated out by tooltip options, hover options, etc. which are provided inside a list(). Tooltip options are set via opts_tooltip(), and hover options are set via opts_hover(). Both functions take an argument css which takes CSS declarations such as background: #F5F5F5; or fill: blue;. Thus, customization code could look as follows:\ngirafe(\n  ggobj = texas_scatter,\n  options = list(\n    opts_tooltip(\n      css = \"background: #F5F5F5; color: black;\"\n    ),\n    opts_hover(\n      css = \"fill: orange;\"\n    )\n  )\n)\nTry this out.\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nHint\n\n\n\n\n\ntexas_scatter &lt;- texas_counties |&gt;\n  ggplot(aes(pop2010, median_income)) +\n  geom_point_interactive(\n    aes(\n      tooltip = county,\n      data_id = county\n    ),\n    na.rm = TRUE, size = 2\n  ) +\n  scale_x_log10()\n\ngirafe(\n  ggobj = texas_scatter,\n  options = list(\n    opts_tooltip(\n      css = ___\n    ),\n    opts_hover(\n      css = ___\n    )\n  )\n)\n\n\n\n\n\n\n\n\n\n\n\nSolution\n\n\n\n\n\ntexas_scatter &lt;- texas_counties |&gt;\n  ggplot(aes(pop2010, median_income)) +\n  geom_point_interactive(\n    aes(\n      tooltip = county,\n      data_id = county\n    ),\n    na.rm = TRUE, size = 2\n  ) +\n  scale_x_log10()\n\ngirafe(\n  ggobj = texas_scatter,\n  options = list(\n    opts_tooltip(\n      css = \"background: #F5F5F5; color: #191970;\"\n    ),\n    opts_hover(\n      css = \"fill: #D83832;\"\n    )\n  )\n)\n\n\n\n\nAlso try different CSS properties to see which effect they have. For example, for the tooltip CSS, try padding (docs). For the hove CSS, try stroke (docs) or stroke-width (docs)."
  },
  {
    "objectID": "worksheets/interactive-plots.html#interactive-maps",
    "href": "worksheets/interactive-plots.html#interactive-maps",
    "title": "Interactive plots",
    "section": "Interactive maps",
    "text": "Interactive maps\nWe can also make interactive maps. This requires using geom_sf_interactive() instead of geom_sf(), and again using aesthetics such as tooltip or data_id.\nAs an example, consider this non-interactive plot of median income in Texas counties.\n\n\n\n\n\n\n\n\nMake it interactive, such that by hovering over the map counties get highlighted and a tooltip shows the county name.\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nSolution\n\n\n\n\n\ntexas_county_map &lt;- texas_counties %&gt;%\n  ggplot(aes(fill = median_income)) +\n  geom_sf_interactive(\n    aes(\n      tooltip = county,\n      data_id = county\n    ),\n    size = 0.2, color = \"black\"\n  ) +\n  scale_fill_viridis_c(option = \"E\") +\n  theme_minimal()\n\ngirafe(\n  ggobj = texas_county_map\n)\n\n\n\n\nWe can also make the counties in the map clickable, by providing an onclick aesthetic. The aesthetic needs to be provided with strings holding JavaScript code that should be executed when the user clicks on the element. For example, to open the Wikipedia page for Travis County we would need to provide the following code snippet:\nwindow.open(\"https://en.wikipedia.org/wiki/Travis County, Texas\")\nIntegrate this into the previous map by writing code that generates the JavaScript snippets for each county and maps them onto the onclick aesthetic. Hint: The glue() function will be very helpful here.\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nHint\n\n\n\n\n\ntexas_county_map &lt;- texas_counties %&gt;%\n  mutate(\n    onclick = glue(___)\n  ) %&gt;%\n  ggplot(aes(fill = median_income)) +\n  geom_sf_interactive(\n    aes(\n      tooltip = county,\n      data_id = county,\n      onclick = ___\n    ),\n    size = 0.2, color = \"black\"\n  ) +\n  scale_fill_viridis_c(option = \"E\") +\n  theme_minimal()\n\ngirafe(\n  ggobj = texas_county_map\n)\n\n\n\n\n\n\n\n\n\n\n\nSolution\n\n\n\n\n\ntexas_county_map &lt;- texas_counties %&gt;%\n  mutate(\n    onclick = glue('window.open(\"https://en.wikipedia.org/wiki/{county} County, Texas\")')\n  ) %&gt;%\n  ggplot(aes(fill = median_income)) +\n  geom_sf_interactive(\n    aes(\n      tooltip = county,\n      data_id = county,\n      onclick = onclick\n    ),\n    size = 0.2, color = \"black\"\n  ) +\n  scale_fill_viridis_c(option = \"E\") +\n  theme_minimal()\n\ngirafe(\n  ggobj = texas_county_map\n)\n\n\n\n\nInteractive maps become particularly useful if you combine them with one or more additional plots that show further information, e.g. a scatterplot. Then, we can highlight a county in the map and the corresponding data point in the scatterplot or vice versa. We will do this by combining the scatter plot from the previous section with the Texas map from this section. You can combine two plots with the function plot_grid(), which takes as argument the two plots to combine, e.g. plot_grid(texas_scatter, texas_county_map). This can be used as the ggobj in girafe().\nHint: Set width_svg = 8 and height_svg = 4 in the girafe() function to obtain an appropriate plot layout.\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nHint\n\n\n\n\n\n# first make the scatter plot\ntexas_scatter &lt;- texas_counties %&gt;%\n  ggplot(aes(pop2010, median_income)) +\n  geom_point_interactive(\n    aes(\n      tooltip = county,\n      data_id = county\n    ),\n    na.rm = TRUE, size = 3\n  ) +\n  scale_x_log10() +\n  theme_bw()\n\n\n\n\n\n\n\n\n\n\n\nHint\n\n\n\n\n\n# first make the scatter plot\ntexas_scatter &lt;- texas_counties %&gt;%\n  ggplot(aes(pop2010, median_income)) +\n  geom_point_interactive(\n    aes(\n      tooltip = county,\n      data_id = county\n    ),\n    na.rm = TRUE, size = 3\n  ) +\n  scale_x_log10() +\n  theme_bw()\n\n# then make the map\ntexas_county_map &lt;- texas_counties %&gt;%\n  ggplot() +\n  geom_sf_interactive(\n    aes(\n      tooltip = county,\n      data_id = county\n    ),\n    size = 0.2, color = \"black\"\n  ) +\n  theme_void()\n\n\n\n\n\n\n\n\n\n\n\nHint\n\n\n\n\n\n# first make the scatter plot\ntexas_scatter &lt;- texas_counties %&gt;%\n  ggplot(aes(pop2010, median_income)) +\n  geom_point_interactive(\n    aes(\n      tooltip = county,\n      data_id = county\n    ),\n    na.rm = TRUE, size = 3\n  ) +\n  scale_x_log10() +\n  theme_bw()\n\n# then make the map\ntexas_county_map &lt;- texas_counties %&gt;%\n  ggplot() +\n  geom_sf_interactive(\n    aes(\n      tooltip = county,\n      data_id = county\n    ),\n    size = 0.2, color = \"black\"\n  ) +\n  theme_void()\n\n# then combine\ngirafe(\n  ggobj = (___ | ___),\n  width_svg = 8,\n  height_svg = 4\n)\n\n\n\n\n\n\n\n\n\n\n\nSolution\n\n\n\n\n\n# first make the scatter plot\ntexas_scatter &lt;- texas_counties %&gt;%\n  ggplot(aes(pop2010, median_income)) +\n  geom_point_interactive(\n    aes(\n      tooltip = county,\n      data_id = county\n    ),\n    na.rm = TRUE, size = 3\n  ) +\n  scale_x_log10() +\n  theme_bw()\n\n# then make the map\ntexas_county_map &lt;- texas_counties %&gt;%\n  ggplot() +\n  geom_sf_interactive(\n    aes(\n      tooltip = county,\n      data_id = county\n    ),\n    size = 0.2, color = \"black\"\n  ) +\n  theme_void()\n\n# then combine\ngirafe(\n  ggobj = (texas_scatter | texas_county_map),\n  width_svg = 8,\n  height_svg = 4\n)"
  },
  {
    "objectID": "worksheets/intro-to-R.html#introduction",
    "href": "worksheets/intro-to-R.html#introduction",
    "title": "Introduction to R",
    "section": "Introduction",
    "text": "Introduction\nIn this worksheet, we will cover some of the basic concepts of the R programming language. The worksheet is not an exhaustive introduction to the language, but it will cover the most important concepts and in particular the concepts where R differs from other languages you may be familiar with. If you have prior R experience you can skip this worksheet.\nR is a language designed for interactive data analysis, and some of its features may seem strange when approached from the perspective of a general purpose programming language. Keep in mind that language features that simplify interactive work may get in the way of writing complex programs and vice versa.\nPlease wait a moment until the live R session is fully set up and all packages are loaded."
  },
  {
    "objectID": "worksheets/intro-to-R.html#basic-data-types",
    "href": "worksheets/intro-to-R.html#basic-data-types",
    "title": "Introduction to R",
    "section": "Basic data types",
    "text": "Basic data types\nR implements all the standard mathematical operations you would expect, such as addition, subtraction, etc., as well as special functions. This will generally work just like you would expect from other languages.\n\n\n\n\n\n\n\n\nTry this out. Can you calculate 2 to the power of 5? Or the sin of pi/4? Or the square-root of 2?\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nSolution\n\n\n\n\n\n2^5\nsin(pi/4)\nsqrt(2)\n\n\n\n\nOne way in which R differs from most programming languages is that it is inherently vectorized. In R, you always work with vectors of numbers rather than with individual values. (A vector is an ordered set of values of the same data type.) Vectors are created with c(...), as in c(1, 2, 3). You can also create vectors of consecutive integers using the colon notation, as in 1:3 or 3:1. The latter places the integers into the reverse order.\n\n\n\n\n\n\n\n\nTry this out. Make a vector of the integers from 1 to 10. Make a vector of the values 0.25, 0.5, 0.75. Make a vector of the words “orange”, “banana”, “grapefruit”.\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nSolution\n\n\n\n\n\n1:10\nc(0.25, 0.5, 0.75)\nc(\"orange\", \"banana\", \"grapefruit\")\n\n\n\n\nMathematical operations are also vectorized, so you can for example multiply all values in a vector by the same number or calculate multiple square roots at once. You can also do mathematical operations combining two (or more) vectors and the operation will be element-wise. If the numbers of elements don’t match you will get a warning but R will still give you a result. However, it’s generally best to avoid combining vectors with mismatched lengths, as the results can be non-intuitive.\n\n\n\n\n\n\n\n\nTry this out. Make a vector of all the squares of the numbers from 1 to 5. Also make a vector of the values 0.25, 0.5, 0.75, by using a vectorized mathematical expression.\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nSolution\n\n\n\n\n\n(1:5)^2\n(1:3)/4\n\n\n\n\nR also has logical values TRUE and FALSE (written in all capitals). Logical values also are vectorized, and they can be created by vectorized comparisons. This is very important for data analysis tasks.\n\n\n\n\n\n\n\n\nTry this out. Manually create a vector of logical values. Then create a vector of logical values via comparison.\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nSolution\n\n\n\n\n\nc(TRUE, TRUE, TRUE, FALSE)\n(1:10) &lt;= 5\n\n\n\n\nYou can combine vectors of logical values with & (logical AND) and | (logical OR). You can negate logical values with ! (logical NOT).\n\n\n\n\n\n\n\n\nTry this out. Combine some logical vectors with & and |. Also negate a logical vector.\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nSolution\n\n\n\n\n\n!c(FALSE, TRUE) & c(TRUE, FALSE)\nc(FALSE, TRUE) | c(TRUE, FALSE)"
  },
  {
    "objectID": "worksheets/intro-to-R.html#missing-values",
    "href": "worksheets/intro-to-R.html#missing-values",
    "title": "Introduction to R",
    "section": "Missing values",
    "text": "Missing values\nR supports the concept of missing values. Missing values are data values that don’t exist. This is a common issue in real-world data. For example, consider a scenario where people are asked to fill out a questionaire about various aspects of who they are and where they live, and one question asks about where they were born, and some people simply don’t answer that question. The result is a missing value, and we need the ability to express this concept.\nIn R, missing values are denoted by NA. You can use NA as a value for any vector.\n\n\n\n\n\n\n\n\nNote that the NA indicating a missing value is not enclosed in quotes, even for vectors of words (i.e, character strings).\nIn computations, missing values remain missing. You can check for missingness via is.na().\n\n\n\n\n\n\n\n\nTry this out. Make both a numerical and a character vector with some missing values. Also test for the missing positions in one of the vectors you made.\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nSolution\n\n\n\n\n\nc(NA, 1, NA, 1)\nc(\"banana\", NA, \"orange\", NA)\nis.na(c(\"banana\", NA, \"orange\", NA))"
  },
  {
    "objectID": "worksheets/intro-to-R.html#variables-and-functions",
    "href": "worksheets/intro-to-R.html#variables-and-functions",
    "title": "Introduction to R",
    "section": "Variables and functions",
    "text": "Variables and functions\nAny data values or objects that you are working with in R can be assigned to variables to be reused later. Assignment in R is expressed with the &lt;- operator. (You can also assign with = but this is generally discouraged.) If you subsequently just write the variable name by itself R prints out the value corresponding to that variable.\n\n\n\n\n\n\n\n\nTry this out. Assign the number 5 to a variable called foo and then print the value of foo. Then calculate the cosine of this number.\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nSolution\n\n\n\n\n\nfoo &lt;- 5\nfoo\ncos(foo)\n\n\n\n\nIn addition to working with variables, we commonly use and interact with functions in R. Functions are a way to store code and reuse it at a later stage. To call a function (which means to execute the code the function stores), you write the name of the variable storing the function followed by parentheses, as in sin() for the sine function. Inside the parentheses we can place values that are called “arguments,” as in sin(0.5). These arguments turn into variables that are used inside the function body.\nIn R, function arguments are always named, which means you can write the name of the argument when you provide the argument value, as in sin(x = 0.5). This is helpful for functions with many arguments, as without providing the argument names it can be confusing which value gets assigned to which argument. If you don’t name the function arguments, then values are assigned to arguments in order (positional matching), similarly to how most other programming languages work.\nIn the following example, the function example_fun() takes three arguments, a, b, and c, and each argument has a default value that will be used in case the argument is not provided when the function is called. The function then simply prints the values of the arguments. This allows us to explore how argument matching works in R.\n\n\n\n\n\n\n\n\nNow try this out yourself. Using the function example_fun() defined above, see what happens when you provide different arguments, positional or named. Do you understand what example_fun(2, a = 1) does?"
  },
  {
    "objectID": "worksheets/intro-to-R.html#packages",
    "href": "worksheets/intro-to-R.html#packages",
    "title": "Introduction to R",
    "section": "Packages",
    "text": "Packages\nMany R features are provided by extension packages. You need to load those packages with library() before you can use them. For example, throughout this class, we make extensive use of the tidyverse package and therefore you will see library(tidyverse) at the beginning of most worksheets and homework templates. One of the most common problem students encounter in assignments is that they want to use a function from a package but have not properly loaded the package.\nNote that we don’t normally put the package name in quotes inside the library() statement.\nUpon loading, some packages write out all sorts of messages. In particular, the tidyverse package lists a number of “conflicts”. This frequently confuses students as they think something has gone wrong. You can just ignore these conflicts. They are expected and they will not interfere with your work in this class.\n\n\n\n\n\n\n\n\nTry out loading a package. Load the package ggridges. Then load the package cowplot.\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nSolution\n\n\n\n\n\nlibrary(ggridges)\nlibrary(cowplot)"
  },
  {
    "objectID": "worksheets/intro-to-R.html#numerical-and-logical-indexing",
    "href": "worksheets/intro-to-R.html#numerical-and-logical-indexing",
    "title": "Introduction to R",
    "section": "Numerical and logical indexing",
    "text": "Numerical and logical indexing\nR has a variety of ways to extract specific values or subsets of a vector. First, you can extract an individual element by indexing with square brackets. For example, if x is a vector, x[1] is the first element, x[2] is the second element, and so on. Note that in R, the first element of a vector is number 1, not number 0 as it is in most other languages (Python, C, Rust, etc.). You can also extract multiple elements by placing a vector of numeric values inside the square brackets.\n\n\n\n\n\n\n\n\nNegative indices remove the respective elements.\n\n\n\n\n\n\n\n\nTry this out. Extract the first element from the names vector, then extract the last two, then extract all but the first.\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nSolution\n\n\n\n\n\nnames[1]\nnames[c(3, 4)]\nnames[-1]\n\n\n\n\nIn addition to numerical indexing, a frequently used indexing approach in R is logical indexing. In logical indexing, you provide inside the square brackets a logical vector that indicates for each element whether you want to keep it (TRUE) or not (FALSE). The benefit of this indexing approach is that you can combine it with logical statements to extract all elements that meet a specific condition.\n\n\n\n\n\n\n\n\nTry this out, by extracting all the even numbers from the numerical vector 1:10. To test whether a number x is even, you can use x %% 2 == 0.\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nSolution\n\n\n\n\n\nnumbers &lt;- 1:10\nnumbers[numbers %% 2 == 0]"
  },
  {
    "objectID": "worksheets/intro-to-R.html#data-frames",
    "href": "worksheets/intro-to-R.html#data-frames",
    "title": "Introduction to R",
    "section": "Data frames",
    "text": "Data frames\nA core concept of R is the data frame, which holds data in tabular form. A data frame is made up of multiple columns that all have the same number of elements. Different columns can be of different types.\nThere are a variety of ways to create a data frame. We will usually use the tibble() function from the tidyverse package.\n\n\n\n\n\n\n\n\nNote how we can assign names to the columns via named arguments in the tibble() function.\nTry this out. Create a tibble of your own."
  },
  {
    "objectID": "worksheets/intro-to-R.html#flow-control",
    "href": "worksheets/intro-to-R.html#flow-control",
    "title": "Introduction to R",
    "section": "Flow control",
    "text": "Flow control\nR has standard flow-control features such as for loops and if/else statements. These are almost never needed in data analysis and therefore I will not cover them here. If you find yourself wanting to use those constructs chances are you are replicating procedural programming patterns you have learned in other languages but that are not the most elegant way to solving a data analysis problem. I would encourage you to think about how to solve your problem using vectorized or functional programming patterns instead. (Functional programming patterns such as map() go beyond this basic tutorial but will be covered later in this class.)\nA concept closely related to flow control is the if_else() function from the tidyverse package. With if_else(), you can run a comparison at each position in a vector and then create a new vector whose elements depend on the outcome of each comparison.\nFor example, we can replace each occurrence of the word “orange” by “citrus” like so:\n\n\n\n\n\n\n\n\nThe first argument to if_else() is the logical condition you want to execute, the second argument is the resulting value if the condition is true, and the third argument is the resulting value if the condition is false.\nTry this out. In the following example, replace all numbers greater than 5 with the number 5 in the vector numbers.\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nHint\n\n\n\n\n\nnumbers &lt;- c(10, 2, 4, 7, 6, -1, -8)\nif_else(numbers &gt; 5, ___, ___)\n\n\n\n\n\n\n\n\n\n\n\nSolution\n\n\n\n\n\nnumbers &lt;- c(10, 2, 4, 7, 6, -1, -8)\nif_else(numbers &gt; 5, 5, numbers)"
  },
  {
    "objectID": "worksheets/know-your-data-2.html",
    "href": "worksheets/know-your-data-2.html",
    "title": "Getting to know your data 2",
    "section": "",
    "text": "In this worksheet, we will discuss how to work with missing values in R.\nFirst we need to load the required R packages. Please wait a moment until the live R session is fully set up and all packages are loaded.\n\n\n\n\n\n\n\n\nWe will be working with the R built-in dataset airquality, which contains daily air quality measurements in New York, May to September 1973. The data columns are mean ozone in parts per billion, solar radiation in Langleys, average wind speed in miles per hour, maximum temperature in Fahrenheit, and numeric month and day of the month."
  },
  {
    "objectID": "worksheets/know-your-data-2.html#introduction",
    "href": "worksheets/know-your-data-2.html#introduction",
    "title": "Getting to know your data 2",
    "section": "",
    "text": "In this worksheet, we will discuss how to work with missing values in R.\nFirst we need to load the required R packages. Please wait a moment until the live R session is fully set up and all packages are loaded.\n\n\n\n\n\n\n\n\nWe will be working with the R built-in dataset airquality, which contains daily air quality measurements in New York, May to September 1973. The data columns are mean ozone in parts per billion, solar radiation in Langleys, average wind speed in miles per hour, maximum temperature in Fahrenheit, and numeric month and day of the month."
  },
  {
    "objectID": "worksheets/know-your-data-2.html#reading-csv-files-with-missing-values",
    "href": "worksheets/know-your-data-2.html#reading-csv-files-with-missing-values",
    "title": "Getting to know your data 2",
    "section": "Reading csv files with missing values",
    "text": "Reading csv files with missing values\nWe will first talk about how to replace specific values with NA when reading in data files. We prepare a simple comma-separated values (CSV) file with four columns, a, b, c, and d, which all use different ways to indicate a missing value.\n\n\n\n\n\n\n\n\nIn column a, second row, a field is completely empty, the line starts with a comma. In column b, first row, a missing value is indicated with #N/A. In column c, second row, a missing value is indicated with NA. In column d, fourth row, a missing value is indicated with -99.\nIf we read this input with read_csv(), we can see that the missing values in columns a and c are treated correctly but the others are not.\n\n\n\n\n\n\n\n\nThis outcome is determined by the na argument of read_csv(). By default, it is set to na = c(\"\", \"NA\"), which handles empty cells and cells containing NA correctly. Modify this argument so that the entire table is read correctly.\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nHint\n\n\n\n\n\nread_csv(simple_csv, na = ___)\n\n\n\n\n\n\n\n\n\n\n\nSolution\n\n\n\n\n\nread_csv(simple_csv, na = c(\"\", \"NA\", \"#N/A\", \"-99\"))\n\n\n\n\nAlso try other options to see what happens. For example, how does the result change if you remove the empty string from the na argument?\nAs an alternative to defining a global set of character strings that should be interpreted as missing values, you can make the substitution on a column-by-column basis, via the function replace_with_na_at() from the naniar package. This function allows you to specify one or more columns to work on and the specific data values that should be replaced with NA. The first argument to the function is the name of the data column on which you want to operate, given as a string, and the second argument is a logical expression determining whether replacement should be made or not, given as a formula. For example, the following code replaces -99 with NA in column d:\n\n\n\n\n\n\n\n\nNow use this same construct to replace the string #N/A with NA in column b.\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nHint\n\n\n\n\n\nread_csv(simple_csv) |&gt;\n  replace_with_na_at(___)\n\n\n\n\n\n\n\n\n\n\n\nSolution\n\n\n\n\n\nread_csv(simple_csv) |&gt;\n  replace_with_na_at(\"b\", ~.x == \"#N/A\")\n\n\n\n\nDo you see any remaining issues with this result?"
  },
  {
    "objectID": "worksheets/know-your-data-2.html#computing-with-missing-values",
    "href": "worksheets/know-your-data-2.html#computing-with-missing-values",
    "title": "Getting to know your data 2",
    "section": "Computing with missing values",
    "text": "Computing with missing values\nWhen performing common summary calculations, such as calculating the mean of a numerical column, any missing values will cause the final result to be NA. For example, if you wanted to calculate the mean ozone value in the airquality dataset, you might see the following:\n\n\n\n\n\n\n\n\nIf you are certain that it is Ok to ignore missing values in your summary calculation, you can set the argument na.rm = TRUE inside the mean() function. Try this.\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nHint\n\n\n\n\n\nmean(airquality$Ozone) # not ignoring NA values\nmean(airquality$Ozone, na.rm = ___) # ignoring NA values\n\n\n\n\n\n\n\n\n\n\n\nSolution\n\n\n\n\n\nmean(airquality$Ozone) # not ignoring NA values\nmean(airquality$Ozone, na.rm = TRUE) # ignoring NA values\n\n\n\n\nNow try the same with the median, the maximum, and the sum of the Ozone column.\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nSolution\n\n\n\n\n\nmedian(airquality$Ozone)\nmedian(airquality$Ozone, na.rm = TRUE)\nmax(airquality$Ozone)\nmax(airquality$Ozone, na.rm = TRUE)\nsum(airquality$Ozone)\nsum(airquality$Ozone, na.rm = TRUE)\n\n\n\n\nTo test whether a specific value is missing, you cannot use the standard comparison operator ==. Instead, you have to use the function is.na(). Try this out by retaining only the rows in airquality for which the Ozone column contains a missing value.\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nHint\n\n\n\n\n\nairquality |&gt;\n  filter(is.na(___))\n\n\n\n\n\n\n\n\n\n\n\nSolution\n\n\n\n\n\nairquality |&gt;\n  filter(is.na(Ozone))\n\n\n\n\nNow do the opposite. Retain only the rows for which the Ozone column does not contain a missing value.\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nSolution\n\n\n\n\n\nairquality |&gt;\n  filter(!is.na(Ozone))"
  },
  {
    "objectID": "worksheets/know-your-data-2.html#visualizing-missing-values",
    "href": "worksheets/know-your-data-2.html#visualizing-missing-values",
    "title": "Getting to know your data 2",
    "section": "Visualizing missing values",
    "text": "Visualizing missing values\nIt is also useful to be able to visualize missing values easily. By default, when we make for example a scatter plot, missing values are simply not shown, and instead ggplot gives us a warning about missing values.\n\n\n\n\n\n\n\n\nThis is not very helpful, because we don’t know where the values are missing. In this specific example, are they missing in the Ozone column or in the Solar.R column? And also, we may want to know whether missing values in one column coincide with particular values in the other column.\nThis can be addressed by using geom_miss_point() from the naniar package. Try this out.\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nSolution\n\n\n\n\n\nggplot(airquality, aes(x = Solar.R, y = Ozone)) +\n geom_miss_point()\n\n\n\n\nThe naniar package has various other methods to visualize missing values. For example, gg_miss_var() will provide an overall summary of how many missing values there are in each column in the data frame. Try this out.\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nSolution\n\n\n\n\n\ngg_miss_var(airquality)"
  },
  {
    "objectID": "worksheets/redundant-coding.html",
    "href": "worksheets/redundant-coding.html",
    "title": "Redundant coding, text annotations",
    "section": "",
    "text": "In this worksheet, we will discuss how to encode data using multiple visual channels (such as color and point shape), and we will also discuss text annotations.\nFirst we need to load the required R packages. Please wait a moment until the live R session is fully set up and all packages are loaded.\n\n\n\n\n\n\n\n\nWe will be working with two datasets, iris and cars93. The iris dataset contains measurements on the flowers of three Iris species.\n\n\n\n\n\n\n\n\nHint: Pay attention to the column names in the iris dataset. They are all capitalized (e.g., Species), and the first four use a point as a separator (e.g., Sepal.Length). It is easy to misspell them and then the R code doesn’t work correctly.\nThe cars93 dataset contains information about various passenger cars that were on the market in 1993."
  },
  {
    "objectID": "worksheets/redundant-coding.html#introduction",
    "href": "worksheets/redundant-coding.html#introduction",
    "title": "Redundant coding, text annotations",
    "section": "",
    "text": "In this worksheet, we will discuss how to encode data using multiple visual channels (such as color and point shape), and we will also discuss text annotations.\nFirst we need to load the required R packages. Please wait a moment until the live R session is fully set up and all packages are loaded.\n\n\n\n\n\n\n\n\nWe will be working with two datasets, iris and cars93. The iris dataset contains measurements on the flowers of three Iris species.\n\n\n\n\n\n\n\n\nHint: Pay attention to the column names in the iris dataset. They are all capitalized (e.g., Species), and the first four use a point as a separator (e.g., Sepal.Length). It is easy to misspell them and then the R code doesn’t work correctly.\nThe cars93 dataset contains information about various passenger cars that were on the market in 1993."
  },
  {
    "objectID": "worksheets/redundant-coding.html#mapping-variables-to-color-and-shape",
    "href": "worksheets/redundant-coding.html#mapping-variables-to-color-and-shape",
    "title": "Redundant coding, text annotations",
    "section": "Mapping variables to color and shape",
    "text": "Mapping variables to color and shape\nFirst, we will do an exercise to practice using multiple visual channels (color and shape) to represent the same qualitative variable. We will do this exercise with the iris dataset.\nMake a plot of Sepal.Width versus Sepal.Length for the three species in the iris dataset. Map Species to both color and shape.\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nHint\n\n\n\n\n\nggplot(iris, aes(Sepal.Length, Sepal.Width, ___)) +\n  geom_point()\n\n\n\n\n\n\n\n\n\n\n\nSolution\n\n\n\n\n\nggplot(iris, aes(Sepal.Length, Sepal.Width, color = Species, shape = Species)) +\n  geom_point()\n\n\n\n\nYou can set the shapes with scale_shape_manual(), just like you do with colors. There are five special shapes, 21 through 25, that have a line color and a fill color. Modify the plot from the previous exercise so it uses these shapes. Hint: This means you should use the fill aesthetic rather than the color aesthetic.\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nHint\n\n\n\n\n\nggplot(iris, aes(Sepal.Length, Sepal.Width, ___)) +\n  geom_point() +\n  scale_shape_manual(values = ___)\n\n\n\n\n\n\n\n\n\n\n\nSolution\n\n\n\n\n\nggplot(iris, aes(Sepal.Length, Sepal.Width, fill = Species, shape = Species)) +\n  geom_point() +\n  scale_shape_manual(values = c(21, 23, 25))"
  },
  {
    "objectID": "worksheets/redundant-coding.html#manually-applying-text-labels",
    "href": "worksheets/redundant-coding.html#manually-applying-text-labels",
    "title": "Redundant coding, text annotations",
    "section": "Manually applying text labels",
    "text": "Manually applying text labels\nWe can place text labels with geom_text(). Oftentimes it makes sense to manually fine-tune exactly where the text labels will be located. To practice this, we will work with a simple dataset that contains three points:\n\n\n\n\n\n\n\n\nPlot these three points with geom_point(), and use geom_text() to add the label text to the right side of each point. Remember that hjust = 0 plots text left-justified. Hints: Add xlim(1, 4) to ensure the text labels don’t run beyond the edge of the plot panel.\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nHint\n\n\n\n\n\nggplot(data, aes(x, y)) +\n  geom_point() +\n  geom_text(___) +\n  xlim(1, 4)\n\n\n\n\n\n\n\n\n\n\n\nHint\n\n\n\n\n\nggplot(data, aes(x, y)) +\n  geom_point() +\n  geom_text(aes(label = ___), hjust = ___) +\n  xlim(1, 4)\n\n\n\n\n\n\n\n\n\n\n\nSolution\n\n\n\n\n\nggplot(data, aes(x, y)) +\n  geom_point() +\n  geom_text(aes(label = label), hjust = 0) +\n  xlim(1, 4)\n\n\n\n\nNow place the text labels centered below the points. Remember: hjust = 0.5 means horizontally centered, and vjust = 1 means vertically below the reference point. You may also have to adjust x and y limits to make sure all labels are within the plot area.\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nHint\n\n\n\n\n\nggplot(data, aes(x, y)) +\n  geom_point() +\n  geom_text(\n    aes(label = label),\n    ___\n  ) +\n  xlim(0.5, 3.5) +\n  ylim(0.5, 3)\n\n\n\n\n\n\n\n\n\n\n\nHint\n\n\n\n\n\nggplot(data, aes(x, y)) +\n  geom_point() +\n  geom_text(\n    aes(label = label),\n    hjust = ___,\n    vjust = ___\n  ) +\n  xlim(0.5, 3.5) +\n  ylim(0.5, 3)\n\n\n\n\n\n\n\n\n\n\n\nSolution\n\n\n\n\n\nggplot(data, aes(x, y)) +\n  geom_point() +\n  geom_text(\n    aes(label = label),\n    hjust = 0.5,\n    vjust = 1\n  ) +\n  xlim(0.5, 3.5) +\n  ylim(0.5, 3)\n\n\n\n\nFinally, place each label in a different relative orientation to the point. Place “alpha” horizontally centered underneath the point, “beta” vertically centered left of the point, and “gamma” horizontally centered above the point. This will require adding justification data columns to the data table and then mapping them to hjust and vjust in geom_text().\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nHint\n\n\n\n\n\ndata &lt;- tibble(\n  x = c(1, 2, 3),\n  y = c(1, 3, 2),\n  label = c(\"alpha\", \"beta\", \"gamma\"),\n  hjust = ___,\n  vjust = ___\n)\n\nggplot(data, aes(x, y)) +\n  geom_point() +\n  geom_text(\n    aes(label = ___, ___)\n  ) +\n  xlim(0.5, 3.5) +\n  ylim(0.5, 3)\n\n\n\n\n\n\n\n\n\n\n\nHint\n\n\n\n\n\ndata &lt;- tibble(\n  x = c(1, 2, 3),\n  y = c(1, 3, 2),\n  label = c(\"alpha\", \"beta\", \"gamma\"),\n  hjust = c(0.5, 1, 0.5),\n  vjust = c(1, 0.5, 0)\n)\n\nggplot(data, aes(x, y)) +\n  geom_point() +\n  geom_text(\n    aes(label = ___, ___)\n  ) +\n  xlim(0.5, 3.5) +\n  ylim(0.5, 3)\n\n\n\n\n\n\n\n\n\n\n\nSolution\n\n\n\n\n\ndata &lt;- tibble(\n  x = c(1, 2, 3),\n  y = c(1, 3, 2),\n  label = c(\"alpha\", \"beta\", \"gamma\"),\n  hjust = c(0.5, 1, 0.5),\n  vjust = c(1, 0.5, 0)\n)\n\nggplot(data, aes(x, y)) +\n  geom_point() +\n  geom_text(\n    aes(label = label, hjust = hjust, vjust = vjust)\n  ) +\n  xlim(0.5, 3.5) +\n  ylim(0.5, 3)"
  },
  {
    "objectID": "worksheets/redundant-coding.html#non-overlapping-text-labels",
    "href": "worksheets/redundant-coding.html#non-overlapping-text-labels",
    "title": "Redundant coding, text annotations",
    "section": "Non-overlapping text labels",
    "text": "Non-overlapping text labels\nWhen there are many points to be labeled, we frequently run into the issue that labels overlap and become unreadable. This problem can be resolved with geom_text_repel() from the ggrepel package. This geom ensures that none of the text labels overlap. It is also highly customizable, and nearly any labeling problem can be solved with it.\nConsider the following plot of fuel-tank capacity versus price, for cars costing more than $30k.\n\n\n\n\n\n\n\n\nUse geom_text_repel() to add a text label to each point that shows the make of the car (column Make). Hint: Set max.overlaps = Inf to avoid a warning about unlabeled data points.\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nHint\n\n\n\n\n\ncars93 |&gt;\n  filter(Price &gt; 30) |&gt;\n  ggplot(aes(Price, Fuel.tank.capacity)) +\n  geom_point() +\n  geom_text_repel(\n    aes(label = ___),\n    max.overlaps = ___\n  )\n\n\n\n\n\n\n\n\n\n\n\nSolution\n\n\n\n\n\ncars93 |&gt;\n  filter(Price &gt; 30) |&gt;\n  ggplot(aes(Price, Fuel.tank.capacity)) +\n  geom_point() +\n  geom_text_repel(\n    aes(label = Make),\n    max.overlaps = Inf\n  )\n\n\n\n\nThe value of the argument box.padding determines how far the labels are drawn from the data points. The default is box.padding = 0.25. Try out what larger values do. E.g., use 0.8 or 1.2.\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nHint\n\n\n\n\n\ncars93 |&gt;\n  filter(Price &gt; 30) |&gt;\n  ggplot(aes(Price, Fuel.tank.capacity)) +\n  geom_point() +\n  geom_text_repel(\n    aes(label = Make),\n    max.overlaps = Inf,\n    ___\n  )\n\n\n\n\n\n\n\n\n\n\n\nSolution\n\n\n\n\n\ncars93 |&gt;\n  filter(Price &gt; 30) |&gt;\n  ggplot(aes(Price, Fuel.tank.capacity)) +\n  geom_point() +\n  geom_text_repel(\n    aes(label = Make),\n    max.overlaps = Inf,\n    box.padding = 0.8\n  )\n\ncars93 |&gt;\n  filter(Price &gt; 30) |&gt;\n  ggplot(aes(Price, Fuel.tank.capacity)) +\n  geom_point() +\n  geom_text_repel(\n    aes(label = Make),\n    max.overlaps = Inf,\n    box.padding = 1.2\n  )\n\n\n\n\nSee if you can pull the text labels towards the left edge of the plot. This will require using the arguments force_pull, hjust, nudge_x, and direction. It will also require manual setting of the x limits. For additional hints, see the ggrepel documentation here.\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nHint\n\n\n\n\n\ncars93 |&gt;\n  filter(Price &gt; 30) |&gt;\n  ggplot(aes(Price, Fuel.tank.capacity)) +\n  geom_point() +\n  geom_text_repel(\n    aes(label = Make),\n    max.overlaps = Inf,\n    ___\n  ) +\n  ___\n\n\n\n\n\n\n\n\n\n\n\nHint\n\n\n\n\n\ncars93 |&gt;\n  filter(Price &gt; 30) |&gt;\n  ggplot(aes(Price, Fuel.tank.capacity)) +\n  geom_point() +\n  geom_text_repel(\n    aes(label = Make),\n    max.overlaps = Inf,\n    force_pull = ___,\n    hjust = ___,\n    nudge_x = ___,\n    direction = ___\n  ) +\n  xlim(___)\n\n\n\n\n\n\n\n\n\n\n\nSolution\n\n\n\n\n\ncars93 |&gt;\n  filter(Price &gt; 30) |&gt;\n  ggplot(aes(Price, Fuel.tank.capacity)) +\n  geom_point() +\n  geom_text_repel(\n    aes(label = Make),\n    max.overlaps = Inf,\n    force_pull = 0,\n    hjust = 1,\n    nudge_x = -10,\n    direction = \"y\"\n  ) +\n  xlim(20, 65)\n\n\n\n\nExperiment with the various options for force_pull, hjust/vjust, nudge_x/nudge_y, and direction to get a sense of how they work."
  },
  {
    "objectID": "worksheets/visualizing-distributions-1.html",
    "href": "worksheets/visualizing-distributions-1.html",
    "title": "Visualizing distributions 1",
    "section": "",
    "text": "In this worksheet, we will discuss how to display distributions of data values using histograms and density plots.\nFirst we need to load the required R packages. Please wait a moment until the live R session is fully set up and all packages are loaded.\n\n\n\n\n\n\n\n\nNext we set up the data.\n\n\n\n\n\n\n\n\nWe will be working with the titanic dataset which contains information about passengers on the Titanic, including their age, sex, the class in which they traveled on the ship, and whether they survived or not:"
  },
  {
    "objectID": "worksheets/visualizing-distributions-1.html#introduction",
    "href": "worksheets/visualizing-distributions-1.html#introduction",
    "title": "Visualizing distributions 1",
    "section": "",
    "text": "In this worksheet, we will discuss how to display distributions of data values using histograms and density plots.\nFirst we need to load the required R packages. Please wait a moment until the live R session is fully set up and all packages are loaded.\n\n\n\n\n\n\n\n\nNext we set up the data.\n\n\n\n\n\n\n\n\nWe will be working with the titanic dataset which contains information about passengers on the Titanic, including their age, sex, the class in which they traveled on the ship, and whether they survived or not:"
  },
  {
    "objectID": "worksheets/visualizing-distributions-1.html#histograms",
    "href": "worksheets/visualizing-distributions-1.html#histograms",
    "title": "Visualizing distributions 1",
    "section": "Histograms",
    "text": "Histograms\nWe start by drawing a histogram of the passenger ages (column age in the dataset titanic). We can do this in ggplot with the geom geom_histogram(). Try this for yourself.\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nSolution\n\n\n\n\n\nggplot(titanic, aes(age)) +\n  geom_histogram()\n\n\n\n\nIf you don’t specify how many bins you want or how wide you want them to be, geom_histogram() will make an automatic choice, but it will also give you a warning that the automatic choice is probably not good. Make a better choice by setting the binwidth and center parameters. Try the values 5 and 2.5, respectively.\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nHint\n\n\n\n\n\nggplot(titanic, aes(age)) +\n  geom_histogram(binwidth = ___, center = ___)\n\n\n\n\n\n\n\n\n\n\n\nSolution\n\n\n\n\n\nggplot(titanic, aes(age)) +\n  geom_histogram(binwidth = 5, center = 2.5)\n\n\n\n\nTry a few more different binwidths, e.g. 1 or 10. What are good values for center that go with these choices?"
  },
  {
    "objectID": "worksheets/visualizing-distributions-1.html#density-plots",
    "href": "worksheets/visualizing-distributions-1.html#density-plots",
    "title": "Visualizing distributions 1",
    "section": "Density plots",
    "text": "Density plots\nDensity plots are a good alternative to histograms. We can create them with geom_density(). Try this out by drawing a density plot of the passenger ages (column age in the dataset titanic). Also, by default geom_density() does not draw a filled area under the density line. We can change this by setting an explicit fill color, e.g. “cornsilk”.\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nHint\n\n\n\n\n\nggplot(titanic, aes(age)) +\n  geom_density(___)\n\n\n\n\n\n\n\n\n\n\n\nSolution\n\n\n\n\n\nggplot(titanic, aes(age)) +\n  geom_density(fill = \"cornsilk\")\n\n\n\n\nJust like for histograms, there are options to modify how much detail a density plot shows. A small binwidth in a histogram corresponds to a low bandwidth (bw) in a density plot and similarly a large binwidth corresponds to a high bandwidth. In addition, you can change the kernel, e.g. kernel = \"rectangular\" or kernel = \"triangular\". Try this out by using a bandwidth of 1 and a triangular kernel.\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nHint\n\n\n\n\n\nggplot(titanic, aes(age)) +\n  geom_density(fill = \"cornsilk\", bw = ___, kernel = ___)\n\n\n\n\n\n\n\n\n\n\n\nSolution\n\n\n\n\n\nggplot(titanic, aes(age)) +\n  geom_density(fill = \"cornsilk\", bw = 1, kernel = \"triangular\")\n\n\n\n\nTry a few more different bandwidth and kernel choices, e.g. 0.1 or 10, or rectangular or gaussian kernels. How does the density plot depend on these choices?"
  },
  {
    "objectID": "worksheets/visualizing-distributions-1.html#small-multiples-facets",
    "href": "worksheets/visualizing-distributions-1.html#small-multiples-facets",
    "title": "Visualizing distributions 1",
    "section": "Small multiples (facets)",
    "text": "Small multiples (facets)\nWe can also draw separate histograms for passengers meeting different criteria, for example for passengers traveling in the different classes. Whenever we draw multiple plot panels containing the same type of plot but for different subsets of the data, we speak of “small multiples”. In ggplot, we generate small multiples with the function facet_wrap(). The function facet_wrap() takes as its argument a list of data columns to subdivide the data by. This list is provided as an R formula. It’s Ok if you don’t know what an R formula is. Simply think of it as the name of the column with a tilde (~) in front. For example, ~class means draw a separate panel for each class, ~survived means draw a separate panel for each survival status, and ~class + survived means draw a separate panel for each combination of class and survival status.\nAs an example, the following code generates small multiple histograms by class:\n\n\n\n\n\n\n\n\nNow use the same principle to draw small multiple histograms by survival status.\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nHint\n\n\n\n\n\nggplot(titanic, aes(age)) +\n  geom_histogram(binwidth = 5, center = 2.5) +\n  facet_wrap(___)\n\n\n\n\n\n\n\n\n\n\n\nSolution\n\n\n\n\n\nggplot(titanic, aes(age)) +\n  geom_histogram(binwidth = 5, center = 2.5) +\n  facet_wrap(~survived)\n\n\n\n\nNow make a plot that breaks down the data by both survival status and class.\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nHint\n\n\n\n\n\nggplot(titanic, aes(age)) +\n  geom_histogram(binwidth = 5, center = 2.5) +\n  facet_wrap(___)\n\n\n\n\n\n\n\n\n\n\n\nSolution\n\n\n\n\n\nggplot(titanic, aes(age)) +\n  geom_histogram(binwidth = 5, center = 2.5) +\n  facet_wrap(~survived + class)\n\n\n\n\nFinally, do the same but drawing density plots rather than histograms.\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nHint\n\n\n\n\n\nggplot(titanic, aes(age)) +\n  ___ +\n  facet_wrap(~survived + class)\n\n\n\n\n\n\n\n\n\n\n\nSolution\n\n\n\n\n\nggplot(titanic, aes(age)) +\n  geom_density(fill = \"cornsilk\", bw = 2) +\n  facet_wrap(~survived + class)\n\n\n\n\notice the difference between this plot and the corresponding histogram plot. Histograms show absolute counts whereas the density plots are normalized so that the area under the curve is 1. As a consequence, the density plot does not provide an accurate representation of the number of passengers in each grouping. This can be changed. See next section."
  },
  {
    "objectID": "worksheets/visualizing-distributions-1.html#manipulating-stats",
    "href": "worksheets/visualizing-distributions-1.html#manipulating-stats",
    "title": "Visualizing distributions 1",
    "section": "Manipulating stats",
    "text": "Manipulating stats\nYou may have noticed that neither geom_histogram() nor geom_density() require you to define an aesthetic mapping for the y variable. This is because under the hood, a statistical transformation (called a “stat”) calculates the histogram or density from the raw data and then sets the appropriate y mapping.\nSometimes it can be useful to access or modify this mapping directly. We tell ggplot that we want to map a value calculated by a stat, rather than one that is in the original data, by writing after_stat(...) inside the aes() function. So, for example, the default y mapping for geom_density() is y = after_stat(density). An alternative mapping, y = after_stat(count) scales densities by the number of points in each grouping, thus producing something more similar to a histogram. You can see the difference between these two choices in the following two examples:\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nThe same options of after_stat(count) and after_stat(density) exist for geom_histogram() as well. Try this by making histograms that use the calculated density for the y value.\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nHint\n\n\n\n\n\nggplot(titanic, aes(age, y = ___)) + \n  geom_histogram(binwidth = 5, center = 2.5) +\n  facet_wrap(~survived + class)\n\n\n\n\n\n\n\n\n\n\n\nSolution\n\n\n\n\n\nggplot(titanic, aes(age, y = after_stat(density))) + \n  geom_histogram(binwidth = 5, center = 2.5) +\n  facet_wrap(~survived + class)\n\n\n\n\nNow, instead, try mapping the calculated counts onto the fill aesthetic.\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nHint\n\n\n\n\n\nggplot(titanic, aes(age, fill = ___)) + \n  geom_histogram(binwidth = 5, center = 2.5) +\n  facet_wrap(~survived + class)\n\n\n\n\n\n\n\n\n\n\n\nSolution\n\n\n\n\n\nggplot(titanic, aes(age, fill = after_stat(count))) + \n  geom_histogram(binwidth = 5, center = 2.5) +\n  facet_wrap(~survived + class)\n\n\n\n\nFinally, we can make our own combination of geoms and stats, by setting the stat argument of a geom, e.g. stat = \"density\" to use the density stat. To try this out, draw a density plot using geom_point(), and also map the calculated density values onto the point color.\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nHint\n\n\n\n\n\nggplot(titanic, aes(age, color = ___)) +\n  geom_point(stat = \"density\") +\n  facet_wrap(~survived + class)\n\n\n\n\n\n\n\n\n\n\n\nSolution\n\n\n\n\n\nggplot(titanic, aes(age, color = after_stat(density))) +\n  geom_point(stat = \"density\") +\n  facet_wrap(~survived + class)"
  },
  {
    "objectID": "worksheets/visualizing-proportions.html",
    "href": "worksheets/visualizing-proportions.html",
    "title": "Visualizing proportions",
    "section": "",
    "text": "In this worksheet, we will discuss how to visualize proportions using stacked or dodged bar plots and pie charts.\nFirst we need to load the required R packages. Please wait a moment until the live R session is fully set up and all packages are loaded.\n\n\n\n\n\n\n\n\nNext we set up the data.\n\n\n\n\n\n\n\n\nWe will be working with the dataset bundestag, which contains the composition of the German parliament (Bundestag) from 1976 to 1980.\n\n\n\n\n\n\n\n\nWe will also be working with the dataset marketshare, which contains made-up information about the market share of five hypothetical companies, A, B, C, D, and E, over a time period of three years."
  },
  {
    "objectID": "worksheets/visualizing-proportions.html#introduction",
    "href": "worksheets/visualizing-proportions.html#introduction",
    "title": "Visualizing proportions",
    "section": "",
    "text": "In this worksheet, we will discuss how to visualize proportions using stacked or dodged bar plots and pie charts.\nFirst we need to load the required R packages. Please wait a moment until the live R session is fully set up and all packages are loaded.\n\n\n\n\n\n\n\n\nNext we set up the data.\n\n\n\n\n\n\n\n\nWe will be working with the dataset bundestag, which contains the composition of the German parliament (Bundestag) from 1976 to 1980.\n\n\n\n\n\n\n\n\nWe will also be working with the dataset marketshare, which contains made-up information about the market share of five hypothetical companies, A, B, C, D, and E, over a time period of three years."
  },
  {
    "objectID": "worksheets/visualizing-proportions.html#bars-in-cartesian-and-polar-coordinates",
    "href": "worksheets/visualizing-proportions.html#bars-in-cartesian-and-polar-coordinates",
    "title": "Visualizing proportions",
    "section": "Bars in Cartesian and polar coordinates",
    "text": "Bars in Cartesian and polar coordinates\nThere are three main approaches to visualizing proportions: Stacked bars, grouped (dodged) bars, and pie charts. From the perspective of ggplot, these are all bar charts with only minor tweaks, and we can make them all using geom_bar() or geom_col() (depending on whether the data source contains individual observations or summary counts). The first two types are created by setting position adjustments to \"fill\" and \"dodge\", respectively, and the third type is created by setting the position adjustment to \"fill\" and adding coord_polar() to the plot.\nLet’s try this on the bundestag dataset. We want to lay out the bars horizontally, so let’s map the number of seats (seats) to x and map party to fill. We have nothing to map to y, but ggplot needs something there to generate the plot, so we can write for example y = \"abc\". (Instead of \"abc\", you can use any string you want.) First, make a stacked bar plot using these ideas. Remember that the correct geom in this context is geom_col(), as the dataset contains summary counts. Also, the position adjustment should be \"fill\", to show the numbers as relative proportions.\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nHint\n\n\n\n\n\nggplot(bundestag, aes(x = seats, y = \"abc\", fill = party)) +\n  geom_col(position = ___)\n\n\n\n\n\n\n\n\n\n\n\nSolution\n\n\n\n\n\nggplot(bundestag, aes(x = seats, y = \"abc\", fill = party)) +\n  geom_col(position = \"fill\")\n\n\n\n\nNext, modify this plot so the bars a side-by-side rather than stacked.\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nHint\n\n\n\n\n\nggplot(bundestag, aes(x = seats, y = \"abc\", fill = party)) +\n  geom_col(position = ___)\n\n\n\n\n\n\n\n\n\n\n\nSolution\n\n\n\n\n\nggplot(bundestag, aes(x = seats, y = \"abc\", fill = party)) +\n  geom_col(position = \"dodge\")\n\n\n\n\nCan you order the arrangement of the bars such that the party with the most seats is on top and the one with the least seats at the bottom?\nNext, use coord_polar() to turn this plot into a pie chart. Which position adjustment do you need to use?\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nHint\n\n\n\n\n\nggplot(bundestag, aes(x = seats, y = \"abc\", fill = party)) +\n  geom_col(position = ___) +\n  coord_polar()\n\n\n\n\n\n\n\n\n\n\n\nSolution\n\n\n\n\n\nggplot(bundestag, aes(x = seats, y = \"abc\", fill = party)) +\n  geom_col(position = \"fill\") +\n  coord_polar()\n\n\n\n\nThe previous plots showed only a single set of propotions, a snapshot of the parliamentary composition at one point in time. Frequently, however, we want to show multiple proportions, for example from different time points.\nWe can try this out with the marketshare dataset. Remember that this dataset has the columns company, year, and percent. Make a stacked bar plot showing percent along the x axis, year along the y axis, and filled by company name.\nHint: Turn year into a factor to ensure ggplot interprets it as a categorical variable.\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nHint\n\n\n\n\n\nggplot(marketshare, aes(percent, factor(year), fill = ___)) +\n  geom_col(___)\n\n\n\n\n\n\n\n\n\n\n\nSolution\n\n\n\n\n\nggplot(marketshare, aes(percent, factor(year), fill = company)) +\n  geom_col(position = \"fill\")\n\n\n\n\nNow convert this plot into side-by-side bars.\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nHint\n\n\n\n\n\nggplot(marketshare, aes(percent, factor(year), fill = company)) +\n  geom_col(___)\n\n\n\n\n\n\n\n\n\n\n\nSolution\n\n\n\n\n\nggplot(marketshare, aes(percent, factor(year), fill = company)) +\n  geom_col(position = \"dodge\")\n\n\n\n\nAnd now convert this plot into a set of three pie charts.\nHint: You will have to use faceting and plot one pie per facet.\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nHint\n\n\n\n\n\nggplot(marketshare, aes(percent, ___, fill = company)) +\n  geom_col(position = ___) +\n  facet_wrap(___) +\n  ___\n\n\n\n\n\n\n\n\n\n\n\nSolution\n\n\n\n\n\nggplot(marketshare, aes(percent, \"abc\", fill = company)) +\n  geom_col(position = \"fill\") +\n  facet_wrap(~year) +\n  coord_polar()"
  },
  {
    "objectID": "worksheets/visualizing-proportions.html#pie-charts-in-cartesian-coordinates",
    "href": "worksheets/visualizing-proportions.html#pie-charts-in-cartesian-coordinates",
    "title": "Visualizing proportions",
    "section": "Pie charts in Cartesian coordinates",
    "text": "Pie charts in Cartesian coordinates\nThe idea that a pie chart is a stacked bar plot in polar coordinates tends to be very appealing to proponents of the Grammar of Graphics (which forms the mathematical underpinnings of ggplot), but it oftentimes is not that useful in practice. Instead, we have much more ability to customize our pie charts if we draw them in Cartesian coordinates, using geom_arc_bar() from the package ggforce. It allows us to specify the exact location of the pie center in the x-y plane, and it also allows us to specify the inner and outer pie radius. As an example, consider this code.\n\n\n\n\n\n\n\n\nNow modify this code to reproduce the marketshare pies from the previous section. Reminder: The columns are company, year, and percent.\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nHint\n\n\n\n\n\nggplot(marketshare) +\n  aes(\n    ___\n  ) +\n  geom_arc_bar(stat = \"pie\") +\n  facet_wrap(___) +\n  coord_fixed()\n\n\n\n\n\n\n\n\n\n\n\nSolution\n\n\n\n\n\nggplot(marketshare) +\n  aes(\n    x0 = 0, y0 = 0,\n    r0 = 0, r = 1,\n    amount = percent,\n    fill = company\n  ) +\n  geom_arc_bar(stat = \"pie\") +\n  facet_wrap(~year) +\n  coord_fixed()\n\n\n\n\nYou can turn the pies into donuts by modifying r0. You can also adjust the plot limits to create some space between the pies and the plot boundaries. Try this out.\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nHint\n\n\n\n\n\nggplot(marketshare) +\n  aes(\n    x0 = 0, y0 = 0,\n    r0 = ___, r = 1,\n    amount = percent,\n    fill = company\n  ) +\n  geom_arc_bar(stat = \"pie\") +\n  facet_wrap(~year) +\n  coord_fixed(\n    xlim = ___,\n    ylim = ___\n  ) \n\n\n\n\n\n\n\n\n\n\n\nSolution\n\n\n\n\n\nggplot(marketshare) +\n  aes(\n    x0 = 0, y0 = 0,\n    r0 = 0.4, r = 1,\n    amount = percent,\n    fill = company\n  ) +\n  geom_arc_bar(stat = \"pie\") +\n  facet_wrap(~year) +\n  coord_fixed(\n    xlim = c(-1.1, 1.1),\n    ylim = c(-1.4, 1.4)\n  )\n\n\n\n\nCan you plot the year into the center of the donuts? This is an advanced exercise and it’s Ok if you can’t figure this out.\nHints:\n\nYou can draw text with geom_text().\nYou will need to create a new data table just for geom_text().\nBoth geoms will need their own aesthetic mappings.\n\nThe final plot could look like this:\n\n\n\n\n\n\n\n\nHow close to this can you get with your own code?\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nHint\n\n\n\n\n\n# data table for geom text\nyears &lt;- tibble(year = c(2015, 2016, 2017))\n\nggplot(marketshare) +\n  geom_arc_bar(\n    aes(\n      ___\n    ),\n    stat = \"pie\"\n  ) +\n  geom_text(\n    data = years,\n    aes(___)\n  ) +\n  ____\n\n\n\n\n\n\n\n\n\n\n\nSolution\n\n\n\n\n\n# data table for geom text\nyears &lt;- tibble(year = c(2015, 2016, 2017))\n\nggplot(marketshare) +\n  geom_arc_bar(\n    aes(\n      x0 = 0, y0 = 0,\n      r0 = 0.4, r = 1,\n      amount = percent,\n      fill = company\n    ),\n    stat = \"pie\"\n  ) +\n  geom_text(\n    data = years,\n    aes(x = 0, y = 0, label = year)\n  ) +\n  facet_wrap(~year) +\n  coord_fixed(\n    xlim = c(-1.0, 1.0),\n    ylim = c(-1.1, 1.4)\n  ) +\n  theme_void() +\n  theme(\n    strip.text = element_blank(),\n    strip.background = element_blank()\n  )"
  },
  {
    "objectID": "worksheets/visualizing-uncertainty.html",
    "href": "worksheets/visualizing-uncertainty.html",
    "title": "Visualizing uncertainty",
    "section": "",
    "text": "In this worksheet, we will discuss how to visualize uncertainty estimates obtained from a model fit.\nFirst we need to load the required R packages. Please wait a moment until the live R session is fully set up and all packages are loaded.\n\n\n\n\n\n\n\n\nWe will be working with the dataset gapminder containing data on data on life expectancy, GDP per capita, and population by country and year."
  },
  {
    "objectID": "worksheets/visualizing-uncertainty.html#introduction",
    "href": "worksheets/visualizing-uncertainty.html#introduction",
    "title": "Visualizing uncertainty",
    "section": "",
    "text": "In this worksheet, we will discuss how to visualize uncertainty estimates obtained from a model fit.\nFirst we need to load the required R packages. Please wait a moment until the live R session is fully set up and all packages are loaded.\n\n\n\n\n\n\n\n\nWe will be working with the dataset gapminder containing data on data on life expectancy, GDP per capita, and population by country and year."
  },
  {
    "objectID": "worksheets/visualizing-uncertainty.html#plotting-model-estimates-as-error-bars",
    "href": "worksheets/visualizing-uncertainty.html#plotting-model-estimates-as-error-bars",
    "title": "Visualizing uncertainty",
    "section": "Plotting model estimates as error bars",
    "text": "Plotting model estimates as error bars\nWhenever we are working with linear models applied to a complex dataset, we typically end up with a summary table that holds various parameter estimates with associated standard errors. For example, for the gapminder dataset, we can fit life expectancy against log-transformed GDP per capita separately for each continent and year. We end up with a set of estimates of the slope of the regression line for each subset of data.\nThe pipeline to perform these model fits and extract the estimates and standard errors has been discussed in the preceding worksheet, and we take it as a given here.\n\n\n\n\n\n\n\n\nNext, we can visualize these estimates. Let’s focus just on the Americas. We could make a scatter plot of the estimate (which is the slope of the regression line) against year.\n\n\n\n\n\n\n\n\nHowever, this does not show the uncertainty of each estimate. The simplest way to show uncertainty is via error bars, which we can plot in ggplot with geom_pointrange(). This geom takes in addition to the x and y aesthetics an additional set of aesthetics ymin and ymax (or alternatively xmin and xmax, depending on whether error bars should be shown vertically or horizontally), which represent the end points of the error bars. Importantly, you need to calculate these endpoints yourself, the geom cannot calculate them from the estimate and standard error.\nFor sufficiently large data sets, we can make a normal approximation and assume that the 95% confidence interval corresponds to the mean +/- 1.96 times the error. Thus, we calculate lower and upper bounds in this way and then plot.\n\n\n\n\n\n\n\n\nTo see if you understand these concepts, repeat this plot but with two modifications:\n\nCalculate a 99% confidence interval instead of a 95% confidence interval. The multiplier for a 99% confidence interval is 2.58.\nPlot year along the y axis and the estimate along the x axis. This requires the error bars to be laid out horizontally.\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nHint\n\n\n\n\n\nlm_data |&gt;\n  filter(continent == \"Americas\") |&gt;\n  mutate(\n    lower = estimate - 2.58*std.error,\n    upper = estimate + 2.58*std.error\n  ) |&gt;\n  ggplot(___) +\n  ___\n\n\n\n\n\n\n\n\n\n\n\nSolution\n\n\n\n\n\nlm_data |&gt;\n  filter(continent == \"Americas\") |&gt;\n  mutate(\n    lower = estimate - 2.58*std.error,\n    upper = estimate + 2.58*std.error\n  ) |&gt;\n  ggplot(aes(estimate, year)) +\n  geom_pointrange(aes(xmin = lower, xmax = upper))\n\n\n\n\nThere are two related geoms, geom_linerange() and geom_errorbar(), that differ in minor ways from geom_pointrange(). First, both omit the point in the middle, so you have to plot it manually. Second, geom_errorbar() shows error bars with a little cap at the end. Repeat the previous plot using both of these geoms.\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nHint\n\n\n\n\n\nlm_data |&gt;\n  filter(continent == \"Americas\") |&gt;\n  mutate(\n    lower = estimate - 2.58*std.error,\n    upper = estimate + 2.58*std.error\n  ) |&gt;\n  ggplot(___) +\n  ___\n\n\n\n\n\n\n\n\n\n\n\nSolution\n\n\n\n\n\nlm_data |&gt;\n  filter(continent == \"Americas\") |&gt;\n  mutate(\n    lower = estimate - 2.58*std.error,\n    upper = estimate + 2.58*std.error\n  ) |&gt;\n  ggplot(aes(estimate, year)) +\n  geom_linerange(aes(xmin = lower, xmax = upper)) +\n  geom_point(color = \"navyblue\")\n\nlm_data |&gt;\n  filter(continent == \"Americas\") |&gt;\n  mutate(\n    lower = estimate - 2.58*std.error,\n    upper = estimate + 2.58*std.error\n  ) |&gt;\n  ggplot(aes(estimate, year)) +\n  geom_errorbar(aes(xmin = lower, xmax = upper)) +\n  geom_point(color = \"navyblue\")"
  },
  {
    "objectID": "worksheets/visualizing-uncertainty.html#half-eyes-gradient-intervals-etc.",
    "href": "worksheets/visualizing-uncertainty.html#half-eyes-gradient-intervals-etc.",
    "title": "Visualizing uncertainty",
    "section": "Half-eyes, gradient intervals, etc.",
    "text": "Half-eyes, gradient intervals, etc.\nIf we want to go beyond simple error bars, the ggdist package provides many more sophisticated approaches to visualizing uncertainty distributions. These include stat_dist_halfeye(), stat_dist_gradientinterval(), and stat_dist_dotsinterval() to draw half-eyes, gradient intervals, and quantile dotplots, respectively. All these functions take an unusual aes() argument of the form aes(dist = &lt;distribution function&gt;). Here, &lt;distribution function&gt; is a distribution function from the distributional package converting the parameter estimate and standard error (and possibly other values, such as the residual degrees of freedom) into an error distribution. For example, the following mapping would use the estimate and std.error columns in the data to create a normal error distribution.\naes(dist = dist_normal(mu = estimate, sigma = std.error))\nTo demonstrate how this works, we’ll make a half-eye plot for the gapminder regression models, focusing on the year 1952 but keeping all continents.\n\n\n\n\n\n\n\n\nTry this for yourself. To change things up, pick a different year, e.g. 2002, and a different fill color.\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nSolution\n\n\n\n\n\nlm_data |&gt;\n  filter(year == 2002) |&gt;\n  mutate(continent = fct_reorder(continent, estimate)) |&gt;\n  ggplot(aes(x = estimate, y = continent)) +\n  stat_dist_halfeye(\n    aes(dist = dist_normal(mu = estimate, sigma = std.error)),\n    fill = \"olivedrab\"\n  )\n\n\n\n\nNow use stat_dist_gradientinterval() instead of stat_dist_halfeye().\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nSolution\n\n\n\n\n\nlm_data |&gt;\n  filter(year == 2002) |&gt;\n  mutate(continent = fct_reorder(continent, estimate)) |&gt;\n  ggplot(aes(x = estimate, y = continent)) +\n  stat_dist_gradientinterval(\n    aes(dist = dist_normal(mu = estimate, sigma = std.error))\n  )\n\n\n\n\nAnd finally use stat_dist_dotsinterval(). This stat takes an additional parameter quantiles that determines the number of quantile dots to draw. Try quantiles = 20.\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nHint\n\n\n\n\n\nlm_data |&gt;\n  filter(year == 2002) |&gt;\n  mutate(continent = fct_reorder(continent, estimate)) |&gt;\n  ggplot(aes(x = estimate, y = continent)) +\n  stat_dist_dotsinterval(\n    aes(dist = dist_normal(mu = estimate, sigma = std.error)),\n    fill = \"olivedrab\",\n    quantiles = ___\n  )\n\n\n\n\n\n\n\n\n\n\n\nSolution\n\n\n\n\n\nlm_data |&gt;\n  filter(year == 2002) |&gt;\n  mutate(continent = fct_reorder(continent, estimate)) |&gt;\n  ggplot(aes(x = estimate, y = continent)) +\n  stat_dist_dotsinterval(\n    aes(dist = dist_normal(mu = estimate, sigma = std.error)),\n    fill = \"olivedrab\",\n    quantiles = 20\n  )\n\n\n\n\nChange both the year and the number of quantiles to see how quantile dotplots look in a variety of different scenarios. The possible year values range from 1952 to 2007 in five-year increments."
  }
]