---
title: "Getting things into the right order"
author: "Claus O. Wilke"
date: last-modified
format: 
  revealjs:
    theme:
      - default
      - Wilke-theme.scss
    auto-stretch: false
    chalkboard: true
execute:
  fig-format: svg
  fig-asp: 0.618
  fig-width: 5.5
---

```{r}
#| include: false
library(tidyverse)
library(cowplot)
library(palmerpenguins)
library(here)

# ggplot2 settings so plots scale well for slide size 
theme_set(theme_gray(14))
update_geom_defaults("point", list(size = 2))
#update_geom_defaults("line", list(linewidth = 1))
```

## Remember from "Visualizing amounts"

::: {.small-font}
We can use `fct_relevel()` to manually order the bars in a bar plot

```{r}
#| label: penguins-ordered
#| echo: true
#| fig-width: 5.5
#| fig-cap: "&nbsp;"
#| out-width: "65%"
ggplot(penguins) +
  aes(y = fct_relevel(species, "Chinstrap", "Gentoo", "Adelie")) +
  geom_bar() + ylab(NULL)
```
:::

## Somewhat cleaner: mutate first, then plot

::: {.small-font}
```{r}
#| label: penguins-ordered-pipe
#| echo: true
#| fig-width: 5.5
#| fig-cap: "&nbsp;"
#| out-width: "65%"
penguins |>
  mutate(species = fct_relevel(species, "Chinstrap", "Gentoo", "Adelie")) |>
  ggplot(aes(y = species)) +
  geom_bar()
```
:::

## We order things in ggplot with factors

::: {.small-font}
```{r}
#| echo: true
penguins |>
  mutate(species = fct_relevel(species, "Chinstrap", "Gentoo", "Adelie")) |>
  slice(1:30) |>    # get first 30 rows
  pull(species)     # pull out just the `species` column
```
:::

::: {.small-font .incremental .move-down-1em}
- The column `species` is a factor
- A factor is a categorical variable with defined categories called levels
- For factors, ggplot generally places visual elements in the order defined by the levels
:::

## We order things in ggplot with factors

::: {.small-font}
```{r}
#| echo: true
penguins |>
  mutate(species = fct_relevel(species, "Chinstrap", "Gentoo", "Adelie")) |>
  slice(1:30) |>    # get first 30 rows
  pull(species)     # pull out just the `species` column
```
:::

::: {.small-font .move-down-1em}
The order of factor levels is independent of the order of values in the table:
```{r}
#| echo: true
penguins |>
  mutate(species = fct_relevel(species, "Gentoo", "Adelie", "Chinstrap")) |>
  slice(1:30) |> pull(species)  
```
:::


## Manual ordering of factor levels: `fct_relevel()`

::: {.small-font}
```{r}
#| echo: true
penguins |>
  mutate(species = fct_relevel(species)) |>
  slice(1:30) |> pull(species)
```

Default: alphabetic order
:::

## Manual ordering of factor levels: `fct_relevel()`

::: {.small-font}
```{r}
#| echo: true
penguins |>
  mutate(species = fct_relevel(species, "Gentoo")) |>
  slice(1:30) |> pull(species)
```

Move `"Gentoo"` in front, rest alphabetic
:::

## Manual ordering of factor levels: `fct_relevel()`

::: {.small-font}
```{r}
#| echo: true
penguins |>
  mutate(species = fct_relevel(species, "Chinstrap", "Gentoo")) |>
  slice(1:30) |> pull(species)
```

Move `"Chinstrap"` in front, then `"Gentoo"`, rest alphabetic
:::

## Manual ordering of factor levels: `fct_relevel()`

::: {.small-font}
```{r}
#| echo: true
penguins |>
  mutate(species = fct_relevel(species, "Chinstrap", "Adelie", "Gentoo")) |>
  slice(1:30) |> pull(species)
```

Use order `"Chinstrap"`, `"Adelie"`, `"Gentoo"`
:::

## In ggplot, the order of the y axis is from bottom to top

::: {.small-font}
```{r}
#| label: penguins-ordered-pipe2
#| echo: true
#| fig-width: 5.5
#| fig-cap: "&nbsp;"
#| out-width: "65%"
penguins |>
  mutate(species = fct_relevel(species, "Chinstrap", "Gentoo", "Adelie")) |>
  ggplot(aes(y = species)) +
  geom_bar()
```
:::

## Reorder based on frequency: `fct_infreq()`

::: {.small-font}
```{r}
#| echo: true
penguins |>
  mutate(species = fct_infreq(species)) |>
  slice(1:30) |> pull(species)
```
:::

::: {.small-font .incremental}
- Use the order defined by the number of penguins of different species
- The order is descending, from most frequent to least frequent
:::

## Reorder based on frequency: `fct_infreq()`

::: {.small-font}
```{r}
#| label: penguins-infreq
#| echo: true
#| fig-width: 5.5
#| fig-cap: "&nbsp;"
#| out-width: "65%"
penguins |>
  mutate(species = fct_infreq(species)) |>
  ggplot(aes(y = species)) + 
  geom_bar()
```
:::

## Reverse order: `fct_rev()`

::: {.small-font}
```{r}
#| label: penguins-infreq-rev
#| echo: true
#| fig-width: 5.5
#| fig-cap: "&nbsp;"
#| out-width: "65%"
penguins |>
  mutate(species = fct_rev(fct_infreq(species))) |>
  ggplot(aes(y = species)) + 
  geom_bar()
```
:::

## Reorder based on numeric values: `fct_reorder()`

::: {.small-font}
```{r}
#| echo: true
penguins |>
  count(species)
```
:::

::: {.fragment .small-font .move-down-1em}
```{r}
#| echo: true
penguins |>
  count(species) |>
  mutate(species = fct_reorder(species, n)) |>
  pull(species)
```
:::

::: {.small-font .fragment}
The order is ascending, from smallest to largest value
:::

## Reorder based on numeric values: `fct_reorder()`

::: {.small-font}
```{r}
#| label: penguins-reorder
#| echo: true
#| fig-width: 5.5
#| fig-cap: "&nbsp;"
#| out-width: "65%"
penguins |>
  count(species) |>
  mutate(species = fct_reorder(species, n)) |>
  ggplot(aes(n, species)) + geom_col()
```
:::

## Compare to see the difference

:::: {.columns}

::: {.column .tiny-font width="50%"}
```{r}
#| echo: true
penguins |>
  count(species) |> # summarize data
  mutate(species = fct_reorder(species, n))
```
:::

::: {.fragment .column .tiny-font width="50%"}
```{r}
#| echo: true
penguins |>
  # modify the original dataset, no summary
  mutate(species = fct_infreq(species))
```
:::
::::

## Compare to see the difference

:::: {.columns}

::: {.column .tiny-font width="50%"}
```{r}
#| label: penguins-geom-col
#| echo: true
#| fig-width: 5.5
#| fig-cap: "&nbsp;"
#| out-width: "100%"
penguins |>
  count(species) |> # summarize data
  mutate(species = fct_reorder(species, n)) |>
  ggplot(aes(n, species)) + geom_col()
```
:::

::: {.column .tiny-font width="50%"}
```{r}
#| label: penguins-geom-bar
#| echo: true
#| fig-width: 5.5
#| fig-cap: "&nbsp;"
#| out-width: "100%"
penguins |>
  # modify the original dataset, no summary
  mutate(species = fct_infreq(species)) |>
  ggplot(aes(y = species)) + geom_bar()
```
:::
::::

## Compare to see the difference

:::: {.columns}

::: {.column .tiny-font width="50%"}
```{r}
#| label: penguins-geom-col2
#| echo: true
#| fig-width: 5.5
#| fig-cap: "&nbsp;"
#| out-width: "100%"
penguins |>
  count(species) |> # summarize data
  mutate(species = fct_reorder(species, n)) |>
  ggplot(aes(n, species)) + geom_col()
```
:::

::: {.column .tiny-font width="50%"}
```{r}
#| label: penguins-geom-bar2
#| echo: true
#| fig-width: 5.5
#| fig-cap: "&nbsp;"
#| out-width: "100%"
penguins |>
  # modify the original dataset, no summary
  mutate(species = fct_infreq(species)) |>
  ggplot(aes(y = fct_rev(species))) + geom_bar()
```
:::
::::

<!-- Segment ends here -->

#

# Ordering other plot elements

## The gapminder dataset: Life expectancy data

::: {.tiny-font}
```{r}
#| echo: true
library(gapminder)

gapminder
```
:::

## Life expectancy in the Americas in 2007

::: {.tiny-font}
```{r}
#| label: gapminder-unordered
#| echo: true
#| fig-width: 5
#| fig-asp: 0.9
#| fig-cap: "&nbsp;"
#| out-width: "95%"
#| output-location: column
gapminder |>
  filter(
    year == 2007,
    continent == "Americas"
  ) |>
  ggplot(aes(lifeExp, country)) + 
  geom_point()
```
:::

::: {.fragment .small-font .move-up-2em}
Reminder: Default order is alphabetic, from bottom to top
:::

## Life expectancy, ordered from highest to lowest

::: {.tiny-font}
```{r}
#| label: gapminder-ordered
#| echo: true
#| fig-width: 5
#| fig-asp: 0.9
#| fig-cap: "&nbsp;"
#| out-width: "95%"
#| output-location: column
gapminder |>
  filter(
    year == 2007,
    continent == "Americas"
  ) |>
  mutate(
    country = fct_reorder(country, lifeExp)
  ) |>
  ggplot(aes(lifeExp, country)) + 
  geom_point()
```
:::

::: {.small-font .move-up-2em}
Order is ascending from bottom to top
:::

## We can also order facets

::: {.fragment .small-font}
```{r}
#| label: gapminder-europe-unordered
#| echo: true
#| fig-width: 12
#| fig-asp: 0.25
#| fig-cap: "&nbsp;"
#| out-width: "95%"
gapminder |>
  filter(country %in% c("Norway", "Portugal", "Spain", "Austria")) |>
  ggplot(aes(year, lifeExp)) + geom_line() +
  facet_wrap(vars(country), nrow = 1)
```
:::

::: {.incremental .small-font .move-up-2em}
- Default ordering is alphabetic; there's no good reason for this ordering
- Let's apply `fct_reorder()` and see what happens
:::

## We can also order facets

::: {.small-font}
```{r}
#| label: gapminder-europe-1
#| echo: true
#| fig-width: 12
#| fig-asp: 0.25
#| fig-cap: "&nbsp;"
#| out-width: "95%"
gapminder |>
  filter(country %in% c("Norway", "Portugal", "Spain", "Austria")) |>
  mutate(country = fct_reorder(country, lifeExp)) |> # default: order by median
  ggplot(aes(year, lifeExp)) + geom_line() +
  facet_wrap(vars(country), nrow = 1)
```
:::

::: {.incremental .small-font .move-up-2em}
- When the levels of a factor occur more than once, `fct_reorder()` applies a summary function
- The default summary function is `median()`
:::

## We can also order facets

::: {.small-font}
```{r}
#| label: gapminder-europe-2
#| echo: true
#| fig-width: 12
#| fig-asp: 0.25
#| fig-cap: "&nbsp;"
#| out-width: "95%"
gapminder |>
  filter(country %in% c("Norway", "Portugal", "Spain", "Austria")) |>
  mutate(country = fct_reorder(country, lifeExp, median)) |> # order by median
  ggplot(aes(year, lifeExp)) + geom_line() +
  facet_wrap(vars(country), nrow = 1)
```
:::

::: {.small-font .move-up-2em}
- When the levels of a factor occur more than once, `fct_reorder()` applies a summary function
- The default summary function is `median()`
:::

## Alternative orderings: By smallest value per facet

::: {.small-font}
```{r}
#| label: gapminder-europe-3
#| echo: true
#| fig-width: 12
#| fig-asp: 0.25
#| fig-cap: "&nbsp;"
#| out-width: "95%"
gapminder |>
  filter(country %in% c("Norway", "Portugal", "Spain", "Austria")) |>
  mutate(country = fct_reorder(country, lifeExp, min)) |> # order by minimum
  ggplot(aes(year, lifeExp)) + geom_line() +
  facet_wrap(vars(country), nrow = 1)
```
:::

## Alternative orderings: By largest value per facet

::: {.small-font}
```{r}
#| label: gapminder-europe-4
#| echo: true
#| fig-width: 12
#| fig-asp: 0.25
#| fig-cap: "&nbsp;"
#| out-width: "95%"
gapminder |>
  filter(country %in% c("Norway", "Portugal", "Spain", "Austria")) |>
  mutate(country = fct_reorder(country, lifeExp, max)) |> # order by maximum
  ggplot(aes(year, lifeExp)) + geom_line() +
  facet_wrap(vars(country), nrow = 1)
```
:::

## Alternative orderings: By smallest difference

::: {.small-font}
```{r}
#| label: gapminder-europe-5
#| echo: true
#| fig-width: 12
#| fig-asp: 0.25
#| fig-cap: "&nbsp;"
#| out-width: "95%"
gapminder |>
  filter(country %in% c("Norway", "Portugal", "Spain", "Austria")) |>
  mutate(country = fct_reorder(country, lifeExp, \(x) { max(x) - min(x) })) |> 
  ggplot(aes(year, lifeExp)) + geom_line() +
  facet_wrap(vars(country), nrow = 1)
```
:::

## Alternative orderings: By largest difference

::: {.small-font}
```{r}
#| label: gapminder-europe-6
#| echo: true
#| fig-width: 12
#| fig-asp: 0.25
#| fig-cap: "&nbsp;"
#| out-width: "95%"
gapminder |>
  filter(country %in% c("Norway", "Portugal", "Spain", "Austria")) |>
  mutate(country = fct_reorder(country, lifeExp, \(x) { min(x) - max(x) })) |> 
  ggplot(aes(year, lifeExp)) + geom_line() +
  facet_wrap(vars(country), nrow = 1)
```
:::

## Final example: Lumping factor levels together

::: {.fragment .tiny-font}
Dataset: Flights out of New York City in 2013

::: {.fragment}
```{r}
#| echo: true
library(nycflights13)

flight_data <- flights |> # take data on individual flights
  left_join(airlines) |>  # add in full-length airline names
  select(name, carrier, flight, year, month, day, origin, dest) # pick columns of interest

flight_data
```
:::
:::


## Flights out of New York City in 2013

::: {.tiny-font}
```{r}
#| label: flights-unordered
#| echo: true
#| fig-width: 6
#| fig-asp: 0.75
#| fig-cap: "&nbsp;"
#| out-width: "95%"
#| output-location: column
flight_data |>
  ggplot(aes(y = name)) + 
  geom_bar()
```
:::

::: {.fragment .small-font .move-up-2em}
As (almost) always, the default alphabetic ordering is terrible
:::

## Flights out of New York City in 2013

::: {.tiny-font}
```{r}
#| label: flights-ordered
#| echo: true
#| fig-width: 6
#| fig-asp: 0.75
#| fig-cap: "&nbsp;"
#| out-width: "95%"
#| output-location: column
flight_data |>
  mutate(
    name = fct_infreq(name)
  ) |>
  ggplot(aes(y = fct_rev(name))) + 
  geom_bar()
```
:::

::: {.fragment .small-font .move-up-2em}
Ordering by frequency is better, but do we need to show all airlines?
:::

## Flights out of New York City in 2013, with lumping

::: {.tiny-font}
```{r}
#| label: flights-lumped
#| echo: true
#| fig-width: 6
#| fig-asp: 0.75
#| fig-cap: "&nbsp;"
#| out-width: "95%"
#| output-location: column
flight_data |>
  mutate(
    # keep only the 7 most common airlines
    name = fct_lump_n(name, 7)
  ) |>
  ggplot(aes(y = fct_rev(name))) + 
  geom_bar()
```
:::

::: {.fragment .small-font .move-up-2em}
Now the ordering is again alphabetic...
:::

## Flights out of New York City in 2013, with lumping

::: {.tiny-font}
```{r}
#| label: flights-lumped-ordered
#| echo: true
#| fig-width: 6
#| fig-asp: 0.75
#| fig-cap: "&nbsp;"
#| out-width: "95%"
#| output-location: column
flight_data |>
  mutate(
    # order after lumping
    name = fct_infreq(fct_lump_n(name, 7))
  ) |>
  ggplot(aes(y = fct_rev(name))) + 
  geom_bar()
```
:::

## Flights out of New York City in 2013, with lumping

::: {.tiny-font}
```{r}
#| label: flights-lumped-ordered2
#| echo: true
#| fig-width: 6
#| fig-asp: 0.75
#| fig-cap: "&nbsp;"
#| out-width: "95%"
#| output-location: column
flight_data |>
  mutate(
    # order before lumping
    name = fct_lump_n(fct_infreq(name), 7)
  ) |>
  ggplot(aes(y = fct_rev(name))) + 
  geom_bar()
```
:::

::: {.fragment .small-font .move-up-2em}
In most cases, you will want to order before lumping
:::

::: {.fragment .small-font}
Can we visually separate the "Other" category?
:::

## Flights out of New York City in 2013, with lumping

::: {.tiny-font}
```{r}
#| label: flights-highlight
#| echo: true
#| fig-width: 6
#| fig-asp: 0.75
#| fig-cap: "&nbsp;"
#| out-width: "95%"
#| output-location: column
flight_data |>
  mutate(
    name = fct_lump_n(fct_infreq(name), 7),
    # Use `fct_other()` to manually lump all
    # levels not called "Other" into "Named"
    highlight = fct_other(
      name,
      keep = "Other", other_level = "Named"
    )
  ) |>
  ggplot() +
  aes(
    y = fct_rev(name),
    fill = highlight
  ) + 
  geom_bar()
```
:::

::: {.fragment .small-font .move-up-2em}
One annoying issue: The legend is in the wrong order
:::


## Flights out of New York City in 2013, with lumping

::: {.tiny-font}
```{r}
#| label: flights-highlight2
#| echo: true
#| fig-width: 6
#| fig-asp: 0.75
#| fig-cap: "&nbsp;"
#| out-width: "95%"
#| output-location: column
flight_data |>
  mutate(
    name = fct_lump_n(fct_infreq(name), 7),
    # Use `fct_other()` to manually lump all
    # levels not called "Other" into "Named"
    highlight = fct_other(
      name,
      keep = "Other", other_level = "Named"
    )
  ) |>
  ggplot() +
  aes(
    y = fct_rev(name),
    # reverse fill aesthetic
    fill = fct_rev(highlight)
  ) + 
  geom_bar()
```
:::

## Flights out of New York City in 2013, final tweaks

::: {.tiny-font}
```{r}
#| label: flights-final
#| echo: true
#| fig-width: 6
#| fig-asp: 0.75
#| fig-cap: "&nbsp;"
#| out-width: "95%"
#| output-location: column
flight_data |>
  mutate(
    name = fct_lump_n(fct_infreq(name), 7),
    highlight = fct_other(
      name, keep = "Other", other_level = "Named"
    )
  ) |>
  ggplot() +
  aes(y = fct_rev(name), fill = highlight) + 
  geom_bar() +
  scale_x_continuous(
    name = "Number of flights",
    expand = expansion(mult = c(0, 0.07))
  ) +
  scale_y_discrete(name = NULL) +
  scale_fill_manual(
    values = c(
      Named = "gray50", Other = "#98545F"
    ),
    guide = "none"
  ) +
  theme_minimal_vgrid()
```
:::

## Summary of key factor manipulation functions

::: {.tiny-font .center-text .move-down-1em}
Function           | Use case             | Documentation
:---------       | :---------------     | :----------:
`fct_relevel()`    | Change order of factor levels manually | [click here](https://forcats.tidyverse.org/reference/fct_relevel.html)
`fct_infreq()`     | Put levels in descending order of how frequently each level occurs in the data | [click here](https://forcats.tidyverse.org/reference/fct_inorder.html)
`fct_rev()`        | Reverse the order of factor levels | [click here](https://forcats.tidyverse.org/reference/fct_rev.html)
`fct_reorder()`    | Put levels in ascending order determined by a numeric variable or summary function | [click here](https://forcats.tidyverse.org/reference/fct_reorder.html)
`fct_lump_n()`     | Retain the *n* most frequent levels and lump all others into `"Other"` | [click here](https://forcats.tidyverse.org/reference/fct_lump.html)
`fct_other()`      | Manually group some factor levels into `"Other"` | [click here](https://forcats.tidyverse.org/reference/fct_other.html)
:::

::: {.fragment .small-font .move-down-1em}
For more options, check out the [reference documentation](https://forcats.tidyverse.org/reference/index.html) of the **forcats** package
:::

<!-- Segment ends here -->

#

## Further reading

- Fundamentals of Data Visualization: [Chapter 6: Visualizing amounts](https://clauswilke.com/dataviz/visualizing-amounts.html)
- **forcats** documentation: [Introduction to forcats](https://forcats.tidyverse.org/articles/forcats.html)
- **forcats** reference documentation: [Change order of levels](https://forcats.tidyverse.org/reference/index.html#section-change-order-of-levels)
