---
title: "Hierarchical clustering"
author: "Claus O. Wilke"
date: last-modified
format: 
  revealjs:
    theme:
      - default
      - Wilke-theme.scss
    auto-stretch: false
    chalkboard: true
execute:
  fig-format: svg
  fig-asp: 0.618
  fig-width: 5.5
---

```{r}
#| include: false
library(tidyverse)
library(ggdendro)
library(cowplot)
library(colorspace)
library(kableExtra)
library(ggforce)
library(broom)
library(here)

# ggplot2 settings so plots scale well for slide size 
theme_set(theme_gray(14))
update_geom_defaults("point", list(size = 2))
update_geom_defaults("line", list(linewidth = 1))

US_regions <- read_csv(here("datasets", "US_regions.csv"))
US_state_stats <- read_csv(here("datasets", "US_state_stats.csv")) |>
  filter(state != "District of Columbia")

correlation <- readRDS(here("datasets", "correlation-matrix.rds"))
```

## Example data: State level statistics for US

::: {.tiny-font}
```{r}
#| echo: true
US_state_stats
```
:::

## PCA reveals broad trends

```{r}
#| label: US_states_pca
#| fig-cap: "&nbsp;"
#| fig-width: 8
#| out-width: "85%"
pca_fit <- US_state_stats |>
  select(-state, -murder, -robbery, -agg_assault, -larceny, -motor_theft) |>
  scale() |>
  prcomp()

pca_fit |>
  # add PCs to the original dataset
  augment(US_state_stats) |>
  left_join(US_regions) |>
  ggplot(aes(.fittedPC1, .fittedPC2)) +
  geom_point(aes(color = region, fill = region, shape = region), size = 3) +
  scale_shape_manual(
    values = c(21, 22, 23, 24),
    name = NULL
  ) +
  scale_color_manual(
    values = darken(c("#56B4E9", "#E69F00", "#009E73", "#F0E442"), 0.3),
    name = NULL
  ) +
  scale_fill_manual(
    values = c("#56B4E9C0", "#E69F00C0", "#009E73C0", "#F0E442C0"),
    name = NULL
  ) +
  scale_x_continuous(
    name = "PC 1",
    limits = c(-5, 6),
    breaks = c(-4, -2, 0, 2, 4, 6)
    
  ) +
  scale_y_continuous(
    name = "PC 2",
    limits = c(-4, 3)
  ) +
  coord_fixed() +
  theme_minimal_grid(rel_small = 1)
```

# Can we get a more detailed picture?

## Hierarchical clustering

```{r}
#| label: US_states_dendro
#| fig-cap: "&nbsp;"
#| fig-width: 12
#| fig-asp: 0.45
#| out-width: "100%"
hc <- US_state_stats |>
  column_to_rownames(var = "state") |>
  scale() |>
  dist(method = "euclidean") |>
  hclust(method = "ward.D2")

ddata <- dendro_data(as.dendrogram(hc), type = "rectangle")
segments <- segment(ddata)
labels <- label(ddata) |>
  left_join(US_regions, by = c("label" = "state"))

ggplot() + 
  geom_segment(data = segments, aes(x, -y, xend = xend, yend = -yend)) + 
  geom_text(
    data = labels,
    aes(x, -y+.5, label = label, color = region),
    hjust = 0,
    angle = 90,
    key_glyph = "point",
    size = 4
  ) +
  scale_color_manual(
    values = darken(c("#56B4E9", "#E69F00", "#009E73", "#F0E442"), 0.3),
    name = NULL
  ) +
  scale_x_continuous(name = NULL) +
  scale_y_continuous(name = NULL, limits = c(-20, 6), expand = c(0, 0)) +
  guides(
    color = guide_legend(
      override.aes = list(color = c("#56B4E9", "#E69F00", "#009E73", "#F0E442"))
    )
  ) +
  theme_void(16)
```

::: {.fragment .small-font}
This visualization is called a dendrogram
:::

## Cut the dendrogram to obtain defined clusters

```{r}
#| label: US_states_dendro_cut
#| fig-cap: "&nbsp;"
#| fig-width: 12
#| fig-asp: 0.45
#| out-width: "100%"
cut_height <- 14.7
clusters <- cutree(hc, h = cut_height)
clustered_labels <- left_join(
  labels,
  tibble(label = names(clusters), cluster = factor(clusters)),
  by = "label"
) 

ggplot() + 
  geom_segment(data = segments, aes(x, -y, xend = xend, yend = -yend)) + 
  geom_text(
    data = clustered_labels,
    aes(x, -y+.5, label = label, color = cluster),
    hjust = 0,
    angle = 90,
    key_glyph = "point",
    size = 4
  ) +
  geom_hline(yintercept = -cut_height, linetype = 2) +
  scale_color_viridis_d(option = "B", begin = 0.2, end = 0.8) +
  scale_x_continuous(name = NULL) +
  scale_y_continuous(name = NULL, limits = c(-20, 6), expand = c(0, 0)) +
  theme_void(16)
```

## Cut the dendrogram to obtain defined clusters

```{r}
#| label: US_states_dendro_cut2
#| fig-cap: "&nbsp;"
#| fig-width: 12
#| fig-asp: 0.45
#| out-width: "100%"
cut_height <- 10.9
clusters <- cutree(hc, h = cut_height)
clustered_labels <- left_join(
  labels,
  tibble(label = names(clusters), cluster = factor(clusters)),
  by = "label"
) 

ggplot() + 
  geom_segment(data = segments, aes(x, -y, xend = xend, yend = -yend)) + 
  geom_text(
    data = clustered_labels,
    aes(x, -y+.5, label = label, color = cluster),
    hjust = 0,
    angle = 90,
    key_glyph = "point",
    size = 4
  ) +
  geom_hline(yintercept = -cut_height, linetype = 2) +
  scale_color_viridis_d(option = "B", begin = 0.2, end = 0.8) +
  scale_x_continuous(name = NULL) +
  scale_y_continuous(name = NULL, limits = c(-20, 6), expand = c(0, 0)) +
  theme_void(16)
```

## Cut the dendrogram to obtain defined clusters

```{r}
#| label: US_states_dendro_cut3
#| fig-cap: "&nbsp;"
#| fig-width: 12
#| fig-asp: 0.45
#| out-width: "100%"
cut_height <- 7.5
clusters <- cutree(hc, h = cut_height)
clustered_labels <- left_join(
  labels,
  tibble(label = names(clusters), cluster = factor(clusters)),
  by = "label"
) 

ggplot() + 
  geom_segment(data = segments, aes(x, -y, xend = xend, yend = -yend)) + 
  geom_text(
    data = clustered_labels,
    aes(x, -y+.5, label = label, color = cluster),
    hjust = 0,
    angle = 90,
    key_glyph = "point",
    size = 4
  ) +
  geom_hline(yintercept = -cut_height, linetype = 2) +
  scale_color_viridis_d(option = "B", begin = 0.05, end = 0.95) +
  scale_x_continuous(name = NULL) +
  scale_y_continuous(name = NULL, limits = c(-20, 6), expand = c(0, 0)) +
  theme_void(16)
```

## Cut the dendrogram to obtain defined clusters

```{r}
#| label: US_states_dendro_cut4
#| fig-cap: "&nbsp;"
#| fig-width: 12
#| fig-asp: 0.45
#| out-width: "100%"
cut_height <- 5.0
clusters <- cutree(hc, h = cut_height)
clustered_labels <- left_join(
  labels,
  tibble(label = names(clusters), cluster = factor(clusters)),
  by = "label"
) 

ggplot() + 
  geom_segment(data = segments, aes(x, -y, xend = xend, yend = -yend)) + 
  geom_text(
    data = clustered_labels,
    aes(x, -y+.5, label = label, color = cluster),
    hjust = 0,
    angle = 90,
    key_glyph = "point",
    size = 4
  ) +
  geom_hline(yintercept = -cut_height, linetype = 2) +
  scale_color_viridis_d(option = "B", begin = 0.05, end = 0.95) +
  scale_x_continuous(name = NULL) +
  scale_y_continuous(name = NULL, limits = c(-20, 6), expand = c(0, 0)) +
  theme_void(16)
```

## Cut the dendrogram to obtain defined clusters

```{r}
#| label: US_states_dendro_cut5
#| fig-cap: "&nbsp;"
#| fig-width: 12
#| fig-asp: 0.45
#| out-width: "100%"
cut_height <- 10.9
clusters <- cutree(hc, h = cut_height)
clustered_labels <- left_join(
  labels,
  tibble(label = names(clusters), cluster = factor(clusters)),
  by = "label"
) 

ggplot() + 
  geom_segment(data = segments, aes(x, -y, xend = xend, yend = -yend)) + 
  geom_text(
    data = clustered_labels,
    aes(x, -y+.5, label = label, color = cluster),
    hjust = 0,
    angle = 90,
    key_glyph = "point",
    size = 4
  ) +
  geom_hline(yintercept = -cut_height, linetype = 2) +
  scale_color_viridis_d(option = "B", begin = 0.2, end = 0.8) +
  scale_x_continuous(name = NULL) +
  scale_y_continuous(name = NULL, limits = c(-20, 6), expand = c(0, 0)) +
  theme_void(16)
```

## Display clusters in PCA space

```{r}
#| label: US_states_pca_cluster
#| fig-cap: "&nbsp;"
#| fig-width: 8
#| out-width: "85%"
pca_fit |>
  # add PCs to the original dataset
  augment(US_state_stats) |>
  left_join(
    tibble(state = names(clusters), cluster = factor(clusters)),
    by = "state"
  ) |>
  left_join(US_regions, by = "state") |>
  ggplot(aes(.fittedPC1, .fittedPC2)) +
  geom_point(aes(color = cluster, fill = cluster, shape = region), size = 3) +
  scale_shape_manual(
    values = c(21, 22, 23, 24),
    name = NULL
  ) +
  scale_color_viridis_d(
    name = "cluster",
    option = "B", begin = 0, end = 0.8
  ) +
  scale_fill_viridis_d(
    name = "cluster",
    option = "B", begin = 0.4, end = 1
  ) +
  scale_x_continuous(
    name = "PC 1",
    limits = c(-5, 6),
    breaks = c(-4, -2, 0, 2, 4, 6)
  ) +
  scale_y_continuous(
    name = "PC 2",
    limits = c(-4, 3)
  ) +
  guides(
    color = guide_legend(
      order = 1,
      override.aes = list(shape = 21)
    ),
    fill = guide_legend(
      order = 1
    ),
    shape = guide_legend(
      order = 2,
      override.aes = list(fill = "gray80")
    )
  ) +
  coord_fixed() +
  theme_minimal_grid(rel_small = 1)
```

## Hierarchical clustering can be useful with heatmaps

:::: {.columns}

::: {.fragment .column .small-font width="50%"}
Arbitrary ordering:

```{r}
#| label: correlation-matrix-1
#| fig-format: png
#| fig-dpi: 300
#| fig-cap: "&nbsp;"
#| fig-width: 3.5
#| fig-asp: 1
#| out-width: "100%"
make_cor_plot <- function(data) {
  data |>
  filter(as.integer(x) < as.integer(y)) |>
    ggplot(aes(x, y, fill = correlation)) + 
    geom_tile() +
    scale_x_discrete(
      name = "gene 1",
      position = "top"
    ) +
    scale_y_discrete(
      name = "gene 2"
    ) +
    scale_fill_continuous_divergingx(
      palette = "PRGn",
      limits = c(-0.85, 1)
    ) +
    coord_fixed() +
    theme(
      axis.text.x = element_blank(),
      axis.text.y = element_blank(),
      axis.ticks.x = element_blank(),
      axis.ticks.y = element_blank(),
      legend.title = element_text(hjust = 0.5),
      legend.position = "inside",
      legend.position.inside = c(1, 0),
      legend.justification = c(1, 0)
    )
}

correlation |>
  make_cor_plot()
```
:::

::: {.fragment .column .small-font width="50%"}
Ordering by clustering similarity:

```{r}
#| label: correlation-matrix-2
#| fig-format: png
#| fig-dpi: 300
#| fig-cap: "&nbsp;"
#| fig-width: 3.5
#| fig-asp: 1
#| out-width: "100%"
correlation |>
  mutate(
    x = x_ordered,
    y = y_ordered
  ) |>
  make_cor_plot()
```
:::
::::


<!-- Segment ends here -->

#

# Hierarchical clustering via UPGMA

## Hierarchical clustering methods require two ingredients

::: {.fragment .small-font}
1\. Distance metric

Examples: Euclidean distance, maximum distance
:::


<br>

::: {.fragment .small-font}
2\. Linkage criteria

Examples:

- Unweighted average linkage clustering  
   (unweighted pair group method with arithmetic mean, UPGMA)
- Complete linkage clustering
- Minimum energy clustering

(See: <https://en.wikipedia.org/wiki/Hierarchical_clustering>)
:::

## Hierarchical clustering via UPGMA

:::: {.colummns}

::: {.column width="50%" .move-up-1em}
```{r}
#| label: UPGMA-step1
#| fig-cap: "&nbsp;"
#| fig-width: 4.5
#| fig-asp: 1
#| out-width: "100%"
data <- tibble(
  x = c(0.50, .5, 3.75, 1.70, 3.30),
  y = c(4.2, 1.6, 3.75, 1, 3.1),
  label = c(LETTERS[1:5]),
  fill = c("white", "white", "white", "white", "white"),
  cluster = c(3, 2, 1, 2, 1)
)

ggplot(data, aes(x, y)) +
  geom_point(aes(fill = fill), size = 10, shape = 21, stroke = 1) +
  geom_text(aes(label = label), size = 14/.pt, fontface = "bold") +
  coord_fixed(clip = "off", xlim = c(-.1, 4.1)) +
  scale_fill_identity() +
  theme_minimal_grid(16, rel_small = 1)
```
:::

::: {.fragment .small-font .column width="50%"}
Distance matrix:

```{r}
dt <- data |>
  column_to_rownames("label") |>
  select(-fill) |>
  as.matrix() |>
  dist()

dt |>
  as.matrix() |>
  signif(3) |>
  kbl() |>
  kable_paper(full_width = F, html_font = "sans-serif") |>
  row_spec(0, bold = TRUE, background = "white", color = "black") |>
  column_spec(1, bold = TRUE, color = "black", background = "white") |>
  column_spec(2, color = "black", background = "white") |>
  column_spec(3, color = "black", background = "white") |>
  column_spec(4, color = "black", background = "white") |>
  column_spec(5, color = "black", background = "white") |>
  column_spec(6, color = "black", background = "white")
```
:::
::::

## Hierarchical clustering via UPGMA

:::: {.colummns}

::: {.column width="50%" .move-up-1em}
```{r}
#| label: UPGMA-step2
#| fig-cap: "&nbsp;"
#| fig-width: 4.5
#| fig-asp: 1
#| out-width: "100%"
data$fill <- c("white", "white", "yellow", "white", "yellow")

ggplot(data, aes(x, y)) +
  geom_mark_hull(
    aes(filter = cluster < 2),
    expand = unit(5, "mm"),
    radius = unit(5, "mm")
  ) +
  geom_point(aes(fill = fill), size = 10, shape = 21, stroke = 1) +
  geom_text(aes(label = label), size = 14/.pt, fontface = "bold") +
  coord_fixed(clip = "off", xlim = c(-.1, 4.1)) +
  scale_fill_identity() +
  theme_minimal_grid(16, rel_small = 1)
```
:::

::: {.small-font .column width="50%"}
Distance matrix:

```{r}
dt |>
  as.matrix() |>
  signif(3) |>
  kbl() |>
  kable_paper(full_width = F, html_font = "sans-serif") |>
  row_spec(0, bold = TRUE, background = "white", color = "black") |>
  column_spec(1, bold = TRUE, color = "black", background = "white") |>
  column_spec(2, color = "black", background = "white") |>
  column_spec(3, color = "black", background = "white") |>
  column_spec(4, color = "black", background = c("white", "white", "white", "white", "yellow")) |>
  column_spec(5, color = "black", background = "white") |>
  column_spec(6, color = "black", background = c("white", "white", "yellow", "white", "white"))
```

Join points with minimum distance
:::
::::

## Hierarchical clustering via UPGMA

:::: {.colummns}

::: {.column width="50%" .move-up-1em}
```{r}
#| label: UPGMA-step3
#| fig-cap: "&nbsp;"
#| fig-width: 4.5
#| fig-asp: 1
#| out-width: "100%"
data$fill <- c("white", "white", "gray90", "white", "gray90")

p_step3 <- ggplot(data, aes(x, y)) +
  geom_mark_hull(
    aes(filter = cluster < 2),
    expand = unit(5, "mm"),
    radius = unit(5, "mm")
  ) +
  geom_point(aes(fill = fill), size = 10, shape = 21, stroke = 1) +
  geom_text(aes(label = label), size = 14/.pt, fontface = "bold") +
  coord_fixed(clip = "off", xlim = c(-.1, 4.1)) +
  scale_fill_identity() +
  theme_minimal_grid(16, rel_small = 1)

p_step3
```
:::

::: {.small-font .column width="50%"}
Update distances by averaging:
$$d_{A:(C, E)} = (d_{A:C} + d_{A:E})/2,$$

similarly for points B and D
:::
::::

## Hierarchical clustering via UPGMA

:::: {.colummns}

::: {.column width="50%" .move-up-1em}
```{r}
#| label: UPGMA-step3-redo
#| fig-cap: "&nbsp;"
#| fig-width: 4.5
#| fig-asp: 1
#| out-width: "100%"
p_step3
```
:::

::: {.small-font .column width="50%"}
Updated distance matrix:

```{r}
UPGMA_step <- function(m, i1, i2, n1, n2) {
  labels <- rownames(m)
  label_new <- glue::glue("({labels[i1]}, {labels[i2]})")
  row_new <- (1/(n1+n2))*(n1*m[i1, ] + n2*m[i2, ])[c(-i1, -i2)]
  names_new <- c(names(row_new), label_new)
  row_new_padded <- c(row_new, 0)
  m2 <- cbind(rbind(m[c(-i1, -i2), c(-i1, -i2)], row_new), row_new_padded)
  colnames(m2) <- names_new
  rownames(m2) <- names_new
  m2
}

m2 <- dt |>
  as.matrix() |>
  UPGMA_step(3, 5, 1, 1)  

m2 |>
  signif(3) |>
  kbl() |>
  kable_paper(full_width = F, html_font = "sans-serif") |>
  row_spec(0, bold = TRUE, background = "white", color = "black") |>
  column_spec(1, bold = TRUE, color = "black", background = "white") |>
  column_spec(2, color = "black", background = "white") |>
  column_spec(3, color = "black", background = "white") |>
  column_spec(4, color = "black", background = "white") |>
  column_spec(5, color = "black", background = "white")
```
:::
::::

## Hierarchical clustering via UPGMA

:::: {.colummns}

::: {.column width="50%" .move-up-1em}
```{r}
#| label: UPGMA-step4
#| fig-cap: "&nbsp;"
#| fig-width: 4.5
#| fig-asp: 1
#| out-width: "100%"
data$fill <- c("white", "yellow", "gray90", "yellow", "gray90")

ggplot(data, aes(x, y)) +
  geom_mark_hull(
    aes(filter = cluster == 1),
    expand = unit(5, "mm"),
    radius = unit(5, "mm")
  ) +
  geom_mark_hull(
    aes(filter = cluster == 2),
    expand = unit(5, "mm"),
    radius = unit(5, "mm")
  ) +
  geom_point(aes(fill = fill), size = 10, shape = 21, stroke = 1) +
  geom_text(aes(label = label), size = 14/.pt, fontface = "bold") +
  coord_fixed(clip = "off", xlim = c(-.1, 4.1)) +
  scale_fill_identity() +
  theme_minimal_grid(16, rel_small = 1)
```
:::

::: {.small-font .column width="50%"}
Updated distance matrix:

```{r}
m2 |>
  signif(3) |>
  kbl() |>
  kable_paper(full_width = F, html_font = "sans-serif") |>
  row_spec(0, bold = TRUE, background = "white", color = "black") |>
  column_spec(1, bold = TRUE, color = "black", background = "white") |>
  column_spec(2, color = "black", background = "white") |>
  column_spec(3, color = "black", background = c("white", "white", "yellow", "white")) |>
  column_spec(4, color = "black", background = c("white", "yellow", "white", "white")) |>
  column_spec(5, color = "black", background = "white")
```

Continue joining points with minimum distance
:::
::::

## Hierarchical clustering via UPGMA

:::: {.colummns}

::: {.column width="50%" .move-up-1em}
```{r}
#| label: UPGMA-step5
#| fig-cap: "&nbsp;"
#| fig-width: 4.5
#| fig-asp: 1
#| out-width: "100%"
data$fill = c("white", "gray90", "gray90", "gray90", "gray90")

ggplot(data, aes(x, y)) +
  geom_mark_hull(
    aes(filter = cluster == 1),
    expand = unit(5, "mm"),
    radius = unit(5, "mm")
  ) +
  geom_mark_hull(
    aes(filter = cluster == 2),
    expand = unit(5, "mm"),
    radius = unit(5, "mm")
  ) +
  geom_point(aes(fill = fill), size = 10, shape = 21, stroke = 1) +
  geom_text(aes(label = label), size = 14/.pt, fontface = "bold") +
  coord_fixed(clip = "off", xlim = c(-.1, 4.1)) +
  scale_fill_identity() +
  theme_minimal_grid(16, rel_small = 1)
```
:::

::: {.small-font .column width="50%"}
Updated distance matrix:

```{r}
m3 <- m2 |>
  UPGMA_step(2, 3, 1, 1)  

m3 |>
  signif(3) |>
  kbl() |>
  kable_paper(full_width = F, html_font = "sans-serif") |>
  row_spec(0, bold = TRUE, background = "white", color = "black") |>
  column_spec(1, bold = TRUE, color = "black", background = "white") |>
  column_spec(2, color = "black", background = "white") |>
  column_spec(3, color = "black", background = "white") |>
  column_spec(4, color = "black", background = "white")
```
:::
::::

## Hierarchical clustering via UPGMA

:::: {.colummns}

::: {.column width="50%" .move-up-1em}
```{r}
#| label: UPGMA-step6
#| fig-cap: "&nbsp;"
#| fig-width: 4.5
#| fig-asp: 1
#| out-width: "100%"
data$fill <- c("yellow", "gray90", "gray90", "gray90", "gray90")

p_step6 <- ggplot(data, aes(x, y)) +
  geom_mark_hull(
    aes(filter = cluster %in% c(2, 3)),
    expand = unit(6, "mm"),
    radius = unit(5, "mm")
  ) +
  geom_mark_hull(
    aes(filter = cluster == 2),
    expand = unit(5, "mm"),
    radius = unit(5, "mm"),
    fill = "yellow",
    alpha = .7
  ) +
  geom_mark_hull(
    aes(filter = cluster == 1),
    expand = unit(5, "mm"),
    radius = unit(5, "mm")
  ) +
  geom_point(aes(fill = fill), size = 10, shape = 21, stroke = 1) +
  geom_text(aes(label = label), size = 14/.pt, fontface = "bold") +
  coord_fixed(clip = "off", xlim = c(-.1, 4.1)) +
  scale_fill_identity() +
  theme_minimal_grid(16, rel_small = 1)

p_step6
```
:::

::: {.small-font .column width="50%"}
Updated distance matrix:

```{r}
m3 |>
  as.matrix() |>
  signif(3) |>
  kbl() |>
  kable_paper(full_width = F, html_font = "sans-serif") |>
  row_spec(0, bold = TRUE, background = "white", color = "black") |>
  column_spec(1, bold = TRUE, color = "black", background = "white") |>
  column_spec(2, color = "black", background = c("white", "white", "yellow")) |>
  column_spec(3, color = "black", background = "white") |>
  column_spec(4, color = "black", background = c("yellow", "white", "white"))
```
:::
::::

## Hierarchical clustering via UPGMA

:::: {.colummns}

::: {.column width="50%" .move-up-1em}
```{r}
#| label: UPGMA-step6-redo
#| fig-cap: "&nbsp;"
#| fig-width: 4.5
#| fig-asp: 1
#| out-width: "100%"
p_step6
```
:::

::: {.small-font .column width="50%"}
In general, distances are weighted by # of data points added to the new cluster:
$$\begin{eqnarray}
  d_{(C, E): (A, (B, D))} &=& \\
   \qquad\qquad(d_{(C, E): A} &+& 2 d_{(C, E): (B, D)})/(1+2)
  \end{eqnarray}$$
:::
::::

## Hierarchical clustering via UPGMA

:::: {.colummns}

::: {.column width="50%" .move-up-1em}
```{r}
#| label: UPGMA-step7
#| fig-cap: "&nbsp;"
#| fig-width: 4.5
#| fig-asp: 1
#| out-width: "100%"
data$fill <- c("gray90", "gray90", "gray90", "gray90", "gray90")
  
ggplot(data, aes(x, y)) +
  geom_mark_hull(
    aes(filter = cluster %in% c(2, 3)),
    expand = unit(6, "mm"),
    radius = unit(5, "mm")
  ) +
  geom_mark_hull(
    aes(filter = cluster == 2),
    expand = unit(5, "mm"),
    radius = unit(5, "mm")
  ) +
  geom_mark_hull(
    aes(filter = cluster == 1),
    expand = unit(5, "mm"),
    radius = unit(5, "mm")
  ) +
  geom_point(aes(fill = fill), size = 10, shape = 21, stroke = 1) +
  geom_text(aes(label = label), size = 14/.pt, fontface = "bold") +
  coord_fixed(clip = "off", xlim = c(-.1, 4.1)) +
  scale_fill_identity() +
  theme_minimal_grid(16, rel_small = 1)
```
:::

::: {.small-font .column width="50%"}
Distance matrix:

```{r}
m4 <- m3 |>
  UPGMA_step(1, 3, 1, 2)  

m4 |>
  signif(3) |>
  kbl() |>
  kable_paper(full_width = F, html_font = "sans-serif") |>
  row_spec(0, bold = TRUE, background = "white", color = "black") |>
  column_spec(1, bold = TRUE, color = "black", background = "white") |>
  column_spec(2, color = "black", background = "white") |>
  column_spec(3, color = "black", background = "white")
```
:::
::::

## Hierarchical clustering via UPGMA

:::: {.colummns}

::: {.column width="50%" .move-up-1em}
```{r}
#| label: UPGMA-step8
#| fig-cap: "&nbsp;"
#| fig-width: 4.5
#| fig-asp: 1
#| out-width: "100%"
data$fill = c("gray90", "gray90", "gray90", "gray90", "gray90")

p_step8 <- ggplot(data, aes(x, y)) +
  geom_mark_hull(
    aes(filter = cluster < 5),
    expand = unit(7, "mm"),
    radius = unit(5, "mm")
  ) +
   geom_mark_hull(
    aes(filter = cluster %in% c(2, 3)),
    expand = unit(6, "mm"),
    radius = unit(5, "mm")
  ) +
  geom_mark_hull(
    aes(filter = cluster == 2),
    expand = unit(5, "mm"),
    radius = unit(5, "mm")
  ) +
  geom_mark_hull(
    aes(filter = cluster == 1),
    expand = unit(5, "mm"),
    radius = unit(5, "mm")
  ) +
 geom_point(aes(fill = fill), size = 10, shape = 21, stroke = 1) +
  geom_text(aes(label = label), size = 14/.pt, fontface = "bold") +
  coord_fixed(clip = "off", xlim = c(-.1, 4.1)) +
  scale_fill_identity() +
  theme_minimal_grid(16, rel_small = 1)

p_step8
```
:::

::: {.small-font .column width="50%"}
Final clustering: <br><br>
((A, (B, D)), (C, E))
:::
::::

## Hierarchical clustering via UPGMA

:::: {.colummns}

::: {.column width="50%" .move-up-1em}
```{r}
#| label: UPGMA-step8-redo
#| fig-cap: "&nbsp;"
#| fig-width: 4.5
#| fig-asp: 1
#| out-width: "100%"
p_step8
```
:::

::: {.small-font .column width="50%"}
Final clustering:

```{r}
#| label: UPGMA-dendro
#| fig-cap: "&nbsp;"
#| fig-width: 4.5
#| fig-asp: 1
#| out-width: "100%"
dt |>
  hclust(method = "average") |>
  ggdendrogram(rotate = TRUE, theme_dendro = FALSE) +
  coord_flip(expand = FALSE) +
  theme_half_open(20) +
  ylab("distance") +
  theme(
    axis.line = element_blank(),
    axis.title.y = element_blank(),
    axis.ticks = element_blank()
  )
```
:::
::::

<!-- Segment ends here -->

#

# Doing hierarchical clustering in R

## Doing hierarchical clustering in R

::: {.small-font}
We'll cluster the US state stats dataset:
:::

::: {.tiny-font}
```{r}
#| echo: true
US_state_stats <- read_csv("https://wilkelab.org/DSC385/datasets/US_state_stats.csv") |>
  filter(state != "District of Columbia")

US_state_stats 
```
:::

## Step 1: Calculate the distance matrix

::: {.tiny-font}
```{r}
#| echo: false
options(width = 200)
```

```{r}
#| echo: true
US_state_stats |>
  column_to_rownames(var = "state") |>
  scale() |>
  dist(method = "euclidean")
```
:::

## Step 1: Calculate the distance matrix

::: {.tiny-font}
```{r}
#| echo: true
US_state_stats |>
  column_to_rownames(var = "state") |>
  scale() |>
  dist(method = "manhattan")
```
:::

## Step 1: Calculate the distance matrix

::: {.tiny-font}
```{r}
#| echo: true
US_state_stats |>
  column_to_rownames(var = "state") |>
  scale() |>
  dist(method = "maximum")
```
:::

## Step 1: Calculate the distance matrix

::: {.tiny-font}
```{r}
#| echo: true
US_state_stats |>
  column_to_rownames(var = "state") |>
  scale() |>
  dist(method = "euclidean")
```
:::

## Step 2: Cluster and plot

:::: {.columns}
::: {.tiny-font .column width = "55%"}
```{r}
#| echo: true
#| eval: false
dist_out <- US_state_stats |>
  column_to_rownames(var = "state") |>
  scale() |>
  dist(method = "euclidean")

hc_out <- hclust(
  dist_out, method = "average"
)

library(ggdendro)
ggdendrogram(hc_out, rotate = TRUE)
```

`method = "average"`: UPGMA
:::

::: {.move-up-2em .column width = "45%"}
```{r}
#| label: US_states_simple_dendro
#| echo: false
#| eval: true
#| fig-cap: "&nbsp;"
#| fig-width: 3.5
#| fig-asp: 2
#| out-width: "70%"
dist_out <- US_state_stats |>
  column_to_rownames(var = "state") |>
  scale() |>
  dist(method = "euclidean")

hc_out <- hclust(
  dist_out, method = "average"
)

library(ggdendro)
ggdendrogram(hc_out, rotate = TRUE)
```
:::
::::

## Step 2: Cluster and plot

:::: {.columns}
::: {.tiny-font .column width = "55%"}
```{r}
#| echo: true
#| eval: false
dist_out <- US_state_stats |>
  column_to_rownames(var = "state") |>
  scale() |>
  dist(method = "euclidean")

hc_out <- hclust(
  dist_out, method = "ward.D2"
)

library(ggdendro)
ggdendrogram(hc_out, rotate = TRUE)
```

`method = "ward.D2"`: Ward's minimum variance method 
:::

::: {.move-up-2em .column width = "45%"}
```{r}
#| label: US_states_simple_dendro2
#| echo: false
#| eval: true
#| fig-cap: "&nbsp;"
#| fig-width: 3.5
#| fig-asp: 2
#| out-width: "70%"
dist_out <- US_state_stats |>
  column_to_rownames(var = "state") |>
  scale() |>
  dist(method = "euclidean")

hc_out <- hclust(
  dist_out, method = "ward.D2"
)

library(ggdendro)
ggdendrogram(hc_out, rotate = TRUE)
```
:::
::::

## Step 2: Cluster and plot

:::: {.columns}
::: {.tiny-font .column width = "55%"}
```{r}
#| echo: true
#| eval: false
dist_out <- US_state_stats |>
  column_to_rownames(var = "state") |>
  scale() |>
  dist(method = "euclidean")

hc_out <- hclust(
  dist_out, method = "complete"
)

library(ggdendro)
ggdendrogram(hc_out, rotate = TRUE)
```

`method = "complete"`: complete linkage method 
:::

::: {.move-up-2em .column width = "45%"}
```{r}
#| label: US_states_simple_dendro3
#| echo: false
#| eval: true
#| fig-cap: "&nbsp;"
#| fig-width: 3.5
#| fig-asp: 2
#| out-width: "70%"
dist_out <- US_state_stats |>
  column_to_rownames(var = "state") |>
  scale() |>
  dist(method = "euclidean")

hc_out <- hclust(
  dist_out, method = "complete"
)

library(ggdendro)
ggdendrogram(hc_out, rotate = TRUE)
```
:::
::::

## We can also plot manually

:::: {.columns}
::: {.tiny-font .column width = "55%"}
```{r}
#| echo: true
#| eval: false
ddata <- dendro_data(
  hc_out,
  type = "rectangle"
)
segments <- segment(ddata)
labels <- label(ddata)

ggplot() + 
  geom_segment(
    data = segments,
    aes(x, y, xend = xend, yend = yend)
  ) + 
  geom_text(
    data = labels,
    aes(x, y - .5, label = label),
    hjust = 1,
    size = 8/.pt
  ) +
  coord_flip(ylim = c(-5, 12))
```
:::

::: {.move-up-2em .column width = "45%"}
```{r}
#| label: US_states_dendro_manual
#| echo: false
#| eval: true
#| fig-cap: "&nbsp;"
#| fig-width: 3.5
#| fig-asp: 2
#| out-width: "70%"
ddata <- dendro_data(
  hc_out,
  type = "rectangle"
)
segments <- segment(ddata)
labels <- label(ddata)

ggplot() + 
  geom_segment(
    data = segments,
    aes(x, y, xend = xend, yend = yend)
  ) + 
  geom_text(
    data = labels,
    aes(x, y - .5, label = label),
    hjust = 1,
    size = 8/.pt
  ) +
  coord_flip(ylim = c(-5, 12))
```
:::
::::

## Assign clusters by cutting the dendrogram

::: {.tiny-font}
```{r}
#| echo: false
options(width = 100)
```

```{r}
#| echo: true
# cut dendrogram at height 5
cutree(hc_out, h = 5) 
```
:::

## Assign clusters by cutting the dendrogram

::: {.tiny-font}
```{r}
#| echo: true
# cut dendrogram at height 8
cutree(hc_out, h = 8) 
```
:::

## Assign clusters by cutting the dendrogram

::: {.tiny-font}
```{r}
#| echo: true
# cut dendrogram so there are 4 clusters
cutree(hc_out, k = 4) 
```
:::

## Add cluster info into scatterplot

::: {.tiny-font}
```{r}
#| label: US_states_cluster_scatter
#| echo: true
#| fig-cap: "&nbsp;"
#| fig-width: 5.5
#| output-width: "100%"
#| output-location: "column"
# cut dendrogram so there are 4 clusters
cluster <- cutree(hc_out, k = 4)

US_state_stats |>
  left_join(
    tibble(
      state = names(cluster),
      cluster = factor(cluster)
    )
  ) |>
  ggplot(aes(income, tr_deaths)) +
  geom_point(aes(color = cluster))
```
:::

<!-- Segment ends here -->

#

## Further reading

- Wikipedia: [Hierarchical clustering](https://en.wikipedia.org/wiki/Hierarchical_clustering)
- **ggdendro** documentation: [Introduction to ggdendro](https://cran.r-project.org/web/packages/ggdendro/vignettes/ggdendro.html)
- **ggdendro** documentation: [reference documentation (pdf)](https://cran.r-project.org/web/packages/ggdendro/ggdendro.pdf)



