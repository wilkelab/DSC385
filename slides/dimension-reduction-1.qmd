---
title: "Dimension reduction 1"
author: "Claus O. Wilke"
date: last-modified
format: 
  revealjs:
    theme:
      - default
      - Wilke-theme.scss
    auto-stretch: false
    chalkboard: true
execute:
  fig-format: svg
  fig-asp: 0.618
  fig-width: 5.5
---

```{r}
#| include: false
library(tidyverse)
library(broom)
library(cowplot)
library(GGally)
library(here)

# ggplot2 settings so plots scale well for slide size 
theme_set(theme_gray(14))
update_geom_defaults("point", list(size = 2))
update_geom_defaults("line", list(linewidth = 1))

# blue jays dataset
blue_jays <- read_csv(here("datasets", "blue_jays.csv"))
```

## Problem:<br>How do we visualize datasets with many variables?

## Problem:<br>How do we visualize datasets with many variables?

Example: blue jays dataset

::: {.tiny-font}
```{r}
blue_jays |>
  select(-bird_id) |>
  knitr::kable()
```
:::

## All-by-all scatter plots are hard to read 

```{r}
#| label: blue-jays-scattermatrix
#| fig-cap: "&nbsp;"
#| fig-width: 10
#| fig-asp: 0.5
#| out-width: "100%"
blue_jays |> 
  rename(
    `bill depth` = "bill_depth_mm", 
    `bill width` = "bill_width_mm", 
    `bill length` = "bill_length_mm",
    `head length` = "head_length_mm",
    `body mass` = "body_mass_g",
    `skull size` = "skull_size_mm"
  ) |>
  ggpairs(
    mapping = aes(color = sex),
    columns = c(
      "bill depth", "bill width", "bill length",
      "head length", "body mass", "skull size"
    ),
    lower = list(
      continuous = wrap("points", size = 1, alpha = .6)
    ),
    upper = list(
      continuous = wrap("points", size = 1, alpha = .6)
    ),
    diag = list(
      continuous = wrap("densityDiag", alpha = 0.6, size = .1)
    )
  ) +
  theme_bw(9) +
  scale_fill_manual(values = c(F = "#D55E00", M = "#0072B2")) +
  scale_color_manual(values = c(F = "#D55E00", M = "#0072B2"))
```

## Solution: Dimension reduction

::: {.incremental}
- We project the data into a lower-dimensional space
- Commonly-used method:<br>Principal Components Analysis (PCA)
- PCA is a rotation of the coordinate system
:::

## Principal Components Analysis (PCA)

```{r}
#| label: blue-jays-PCA
#| fig-cap: "&nbsp;"
#| fig-width: 11
#| fig-asp: 0.35
#| out-width: "100%"
p1 <- ggplot(blue_jays, aes(skull_size_mm, head_length_mm, fill = sex)) + 
  geom_point(pch = 21, color = "white", size = 2, stroke = 0.2) +
  scale_x_continuous(
    name = "skull size (mm)", limits = c(26, 36),
    breaks = c(26, 28, 30, 32, 34, 36)
  ) +
  scale_y_continuous(
    name = "head length (mm)", limits = c(51, 61),
    breaks = c(52, 54, 56, 58, 60)
  ) +
  scale_fill_manual(
    values = c(F = "#D55E00", M = "#0072B2"),
    breaks = c("F", "M"),
    labels = c("female birds   ", "male birds"),
    name = NULL,
    guide = guide_legend(
      direction = "horizontal",
      override.aes = list(size = 3)
      )
    ) +
  coord_fixed() +
  theme_minimal_grid(12) +
  theme(
    legend.position = "top",
    legend.justification = "right",
    legend.box.spacing = unit(3.5, "pt"), # distance between legend and plot
    legend.text = element_text(vjust = 0.6),
    legend.spacing.x = unit(2, "pt"),
    legend.background = element_rect(fill = "white", color = NA),
    legend.key.width = unit(10, "pt")
  )
bj_standard <- data.frame(
  skull = scale(blue_jays$skull_size_mm),
  head = scale(blue_jays$head_length_mm),
  sex = blue_jays$sex
)
df_arrows <- data.frame(
  x = c(-3, 2),
  y = c(-3, -2),
  xend = c(3, -2),
  yend = c(3, 2)
)
df_labels <- data.frame(
  x = c(3.1, -2.1),
  y = c(3.1, 2.1),
  hjust = c(0, 1),
  vjust = c(0, 0),
  label = c("PC 1", "PC 2")
)
p2 <- ggplot(bj_standard, aes(skull, head, fill = sex)) + 
  geom_point(pch = 21, color = "white", size = 2, stroke = 0.2) +
  geom_segment(
    data = df_arrows,
    aes(x = x, y = y, xend = xend, yend = yend),
    color = "black",
    arrow = arrow(angle = 15, length = grid::unit(9, "pt"), type = "closed"),
    inherit.aes = FALSE
  ) +
  geom_text(
    data = df_labels,
    aes(x = x, y = y, hjust = hjust, vjust = vjust, label = label),
    size = 12/.pt,
    color = "black", inherit.aes = FALSE
  ) +
  scale_x_continuous(
    name = "skull size (scaled)", limits = c(-4, 4),
    breaks = c(-4, -2, 0, 2, 4), labels = c("-4.0", "-2.0", "0.0", "2.0", "4.0")
  ) +
  scale_y_continuous(
    name = "head length (scaled)", limits = c(-4, 4),
    breaks = c(-4, -2, 0, 2, 4), labels = c("-4.0", "-2.0", "0.0", "2.0", "4.0")
  ) +
  scale_fill_manual(
    values = c(F = "#D55E00", M = "#0072B2"),
    breaks = c("F", "M"),
    labels = c("", ""),
    name = NULL,
    guide = guide_legend(
      direction = "horizontal",
      override.aes = list(shape = NA)
      )
    ) +
  coord_fixed(ratio = 1) +
  theme_minimal_grid(12) +
  theme(
    legend.position = "top",
    legend.justification = "right",
    legend.box.spacing = unit(3.5, "pt"), # distance between legend and plot
    legend.text = element_text(vjust = 0.6),
    legend.spacing.x = unit(2, "pt"),
    legend.background = element_rect(fill = "white", color = NA),
    legend.key.width = unit(10, "pt")
  )
df_arrows <- data.frame(
  x = c(-5.2, 0),
  y = c(0, -3.5),
  xend = c(5.2, 0),
  yend = c(0, 3.5)
)
df_labels <- data.frame(
  x = c(5.2, 0),
  y = c(0.4, 3.8),
  hjust = c(0.9, 0.5),
  vjust = c(0, 0),
  label = c("PC 1", "PC 2")
)
p3 <- ggplot(bj_standard, aes(skull + head, -skull + head, fill = sex)) + 
  geom_point(pch = 21, color = "white", size = 2, stroke = 0.2) +
  geom_segment(
    data = df_arrows,
    aes(x = x, y = y, xend = xend, yend = yend),
    color = "black",
    arrow = arrow(angle = 15, length = grid::unit(9, "pt"), type = "closed"),
    inherit.aes = FALSE
  ) +
  geom_text(
    data = df_labels,
    aes(x = x, y = y, hjust = hjust, vjust = vjust, label = label),
    size = 12/.pt,
    color = "black", inherit.aes = FALSE
  ) +
  scale_x_continuous(
    name = "PC 1", limits = c(-5.2, 5.2),
    breaks = c(-5, -2.5, 0, 2.5, 5), labels = c("-5.0", "-2.5", "0.0", "2.5", "5.0")
) +
  scale_y_continuous(
    name = "PC 2", limits = c(-5.2, 5.2),
    breaks = c(-5, -2.5, 0, 2.5, 5), labels = c("-5.0", "-2.5", "0.0", "2.5", "5.0")
  ) +
  scale_fill_manual(
    values = c(F = "#D55E00", M = "#0072B2"),
    breaks = c("F", "M"),
    labels = c("", ""),
    name = NULL,
    guide = guide_legend(
      direction = "horizontal",
      override.aes = list(shape = NA)
      )
    ) +
  coord_fixed(ratio = 1) +
  theme_minimal_grid(12) +
  theme(
    legend.position = "top",
    legend.justification = "right",
    legend.box.spacing = unit(3.5, "pt"), # distance between legend and plot
    legend.text = element_text(vjust = 0.6),
    legend.spacing.x = unit(2, "pt"),
    legend.background = element_rect(fill = "white", color = NA),
    legend.key.width = unit(10, "pt")
  )

aligned <- align_plots(p1, p2, p3, align = "hv")
p1 <- aligned[[1]]
p2 <- aligned[[2]]
p3 <- aligned[[3]]

plot_grid(
  p1, NULL, NULL, NULL, NULL,
  nrow = 1, rel_widths = c(1, .04, 1, .04, 1),
  labels = c("", "", "", "", ""), label_y = 0.985
)
```

## Principal Components Analysis (PCA)

```{r}
#| label: blue-jays-PCA2
#| fig-cap: "&nbsp;"
#| fig-width: 11
#| fig-asp: 0.35
#| out-width: "100%"
plot_grid(
  p1, NULL, p2, NULL, NULL,
  nrow = 1, rel_widths = c(1, .04, 1, .04, 1),
  labels = c("", "", "", "", ""), label_y = 0.985
)
```

## Principal Components Analysis (PCA)

```{r}
#| label: blue-jays-PCA3
#| fig-cap: "&nbsp;"
#| fig-width: 11
#| fig-asp: 0.35
#| out-width: "100%"
plot_grid(
  p1, NULL, p2, NULL, p3,
  nrow = 1, rel_widths = c(1, .04, 1, .04, 1),
  labels = c("", "", "", "", ""), label_y = 0.985
)
```

::: {.fragment .small}
PCA aligns the major axes with directions of maximum variation in the data
:::

## PCA analysis of the entire blue jays dataset

```{r}
#| label: blue-scatter
#| fig-cap: "&nbsp;"
#| fig-width: 7
#| out-width: "75%"
pca_fit <- blue_jays |> 
  select(where(is.numeric)) |> # retain only numeric columns
  scale() |>       # scale to zero mean and unit variance
  prcomp()         # do PCA

p_scatter <- pca_fit |>
  augment(blue_jays) |> # add original dataset back in
  ggplot(aes(.fittedPC1, .fittedPC2, fill = sex)) + 
  geom_point(pch = 21, color = "white", size = 3, stroke = 0.2) +
  scale_x_continuous(
    name = "PC 1", 
    limits = c(-5.2, 5.2),
    breaks = c(-5, -2.5, 0, 2.5, 5),
    labels = c("-5.0", "-2.5", "0.0", "2.5", "5.0")
  ) +
  scale_y_continuous(
    name = "PC 2",
    limits = c(-3.2, 4.2),
    breaks = c(-2, 0, 2, 4),
    labels = c("-2.0", "0.0", "2.0", "4.0")
  ) +
  scale_fill_manual(
    values = c(F = "#D55E00", M = "#0072B2"),
    breaks = c("M", "F"),
    labels = c("male birds   ", "female birds"),
    name = NULL,
    guide = guide_legend(
      direction = "horizontal",
      override.aes = list(shape = 21)
    )
  ) +
  coord_fixed(ratio = 1) +
  theme_minimal_grid(16) +
  theme(
    legend.position = "top",
    legend.justification = "right",
    legend.box.spacing = unit(3.5, "pt"), # distance between legend and plot
    legend.text = element_text(vjust = 0.6),
    legend.spacing.x = unit(2, "pt"),
    legend.background = element_rect(fill = "white", color = NA),
    legend.key.width = unit(10, "pt")
  )

p_scatter
```

::: {.fragment .small-font .move-up-1em}
Male and female birds separate along PC1
:::

## The rotation matrix allows us to interpret the PCs

```{r}
#| label: blue-rotation
#| fig-cap: "&nbsp;"
#| fig-width: 7
#| out-width: "75%"
arrow_style <- arrow(
  angle = 20, length = grid::unit(8, "pt"),
  ends = "first", type = "closed"
)

nudge_df <- tibble(
  column = c(
    "bill_depth_mm", "bill_width_mm", "bill_length_mm",
    "head_length_mm", "body_mass_g", "skull_size_mm"
  ),
  nudge_y = c(0, 0.03, 0, -0.02, 0, 0),
  name = c(
    "bill depth", "bill width", "bill length",
    "head length", "body mass", "skull size"
  )
)

p_rotation <- pca_fit |>
  # extract rotation matrix
  tidy(matrix = "rotation") |>
  pivot_wider(
    names_from = "PC", values_from = "value",
    names_prefix = "PC"
  ) |>
  left_join(nudge_df) |>
  ggplot(aes(PC1, PC2)) +
  geom_segment(
    xend = 0, yend = 0,
    arrow = arrow_style
  ) +
  geom_text(
    aes(y = PC2 + nudge_y, label = name),
    hjust = 1,
    nudge_x = -0.03,
    size = 14/.pt
    
  ) +
  scale_x_continuous(
    name = "PC 1",
    limits = c(-1.5, .5)
  ) +
  scale_y_continuous(
    name = "PC 2",
    limits = c(-1., 1)
  ) +
  coord_fixed() +
  theme_minimal_grid(16)

p_rotation
```

::: {.fragment .small-font .move-up-1em}
All variables contribute negatively to PC1; it represents the overall size of the bird
:::

## The rotation matrix allows us to interpret the PCs

```{r}
#| label: blue-rotation2
#| fig-cap: "&nbsp;"
#| fig-width: 7
#| out-width: "75%"
p_rotation
```

::: {.small-font .move-up-1em}
PC2 represents the difference between bill length and skull size
:::

## The rotation matrix allows us to interpret the PCs

```{r}
#| label: blue-rotation-combined
#| fig-cap: "&nbsp;"
#| fig-width: 11
#| fig-asp: 0.4
#| out-width: "100%"
plot_grid(p_scatter, p_rotation)
```

::: {.small-font .move-up-1em}
- Male birds are larger than female birds
- Both male and female birds have long and short bills relative to their overall size
:::

## We also plot the variance explained by each PC

```{r}
#| label: pca-eigenvalues
#| fig-cap: "&nbsp;"
#| fig-width: 7
#| out-width: "75%"
p_variance <- pca_fit |>
  tidy(matrix = "eigenvalues") |> # extract eigenvalues
  ggplot(aes(PC, percent)) + 
  geom_col(
    fill = "#56B4E9",
    alpha = 0.9
  ) + 
  scale_x_continuous(
    name = "principal component",
    breaks = 1:6,
    expand = expansion(mult = 0, add = 0.1)
  ) +
  scale_y_continuous(
    name = "variance explained",
    label = scales::label_percent(accuracy = 1),
    expand = expansion(mult = c(0, 0.05))
  ) +
  theme_minimal_hgrid(16)

p_variance
```

::: {.small-font .move-up-1em}
PC 1 captures over 50% of the total variance in the dataset
:::

## We also plot the variance explained by each PC

```{r}
#| label: pca-eigenvalues2
#| fig-cap: "&nbsp;"
#| fig-width: 7
#| out-width: "75%"
p_variance
```

::: {.small-font .move-up-1em}
Overall bird size explains >50% of the variation in the various measurements
:::

<!-- Segment ends here -->

#

# The mathematics of principal components analysis

## The mathematics of PCA

Variance of one variable $X$:

$$\text{Var}(X) = \frac{1}{n}\sum_j (\bar x - x_j)^2 = \sigma_X^2$$

::: {.fragment}
Covariance of two variables $X$ and $Y$:

$$\text{Cov}(X, Y) = \frac{1}{n}\sum_j (\bar x - x_j)(\bar y - y_j) = \sigma_{XY}$$
:::

## The mathematics of PCA

Covariance matrix of $n$ variables $X_1 \dots X_n$:

$$\text{C} = \left(
\begin{array}{cccc}
  \sigma_{11}^2 & \sigma_{12} & \dots & \sigma_{1n}  \\
  \sigma_{21} & \sigma_{22}^2 & \dots & \sigma_{2n} \\
  \vdots & \vdots & \ddots & \vdots \\
  \sigma_{n1} & \sigma_{n2} & \dots & \sigma_{nn}^2  \\
\end{array}
\right)$$

## The mathematics of PCA

PCA diagonalizes the covariance matrix $\text{C}$:

$$\begin{eqnarray}
\text{C} & = & \text{U}\text{D}\text{U}^\text{T}\\
& = & \text{U}\left(
\begin{array}{cccc}
  \lambda_{1}^2 & 0 & \dots & 0  \\
  0 & \lambda_{2}^2 & \dots & 0  \\
  \vdots & \vdots & \ddots & \vdots \\
  0 & 0 & \dots & \lambda_{n}^2  \\
\end{array}
\right)\text{U}^\text{T}
\end{eqnarray}$$

::: {.fragment}
$\text{U}$: rotation matrix
:::

::: {.fragment}
$\text{D}$: diagonal matrix
:::

::: {.fragment}
$\lambda_j^2$: eigenvalues (= variance explained by each component)
:::

## The mathematics of PCA

PCA diagonalizes the covariance matrix $\text{C}$:

$$\begin{eqnarray}
\text{C} & = & \text{U}\text{D}\text{U}^\text{T}\\
& = & \text{U}\left(
\begin{array}{cccc}
  \lambda_{1}^2 & 0 & \dots & 0  \\
  0 & \lambda_{2}^2 & \dots & 0  \\
  \vdots & \vdots & \ddots & \vdots \\
  0 & 0 & \dots & \lambda_{n}^2  \\
\end{array}
\right)\text{U}^\text{T}
\end{eqnarray}$$

The covariances between components are all 0

Components are uncorrelated

## The components are uncorrelated

```{r}
#| label: blue-scatter2
#| fig-cap: "&nbsp;"
#| fig-width: 7
#| out-width: "75%"
p_scatter
```

<!-- Segment ends here -->

#

# Doing a PCA in R

## Getting the data

::: {.small-font}
The `blue_jays` dataset:
:::

::: {.smaller-font}
```{r}
#| echo: true
#| message: false
blue_jays <- read_csv("https://wilkelab.org/DSC385/datasets/blue_jays.csv")

blue_jays
```
:::

## Getting the data

::: {.small-font}
The `pottery` dataset:
:::

::: {.smaller-font}
```{r}
#| echo: true
#| message: false
pottery <- read_csv("https://wilkelab.org/DSC385/datasets/pottery.csv")

pottery
```
:::

## Prerequisite: Scaling of numeric columns

::: {.small-font}
Plot without scaling
:::

::: {.tiny-font}
```{r}
#| echo: true
#| label: blue-jays-unscaled
#| fig-cap: "&nbsp;"
#| fig-width: 5
#| fig-asp: 0.75
#| out-width: "100%"
#| output-location: "column"
blue_jays |>
  ggplot() +
  aes(skull_size_mm, head_length_mm) + 
  geom_point(aes(color = sex))
```
:::

## Prerequisite: Scaling of numeric columns

::: {.small-font}
Plot with scaling
:::

::: {.tiny-font}
```{r}
#| echo: true
#| label: blue-jays-scaled
#| fig-cap: "&nbsp;"
#| fig-width: 5
#| fig-asp: 0.75
#| out-width: "100%"
#| output-location: "column"
blue_jays |>
  # scale all numeric columns
  mutate(across(where(is.numeric), scale)) |>
  ggplot() +
  aes(skull_size_mm, head_length_mm) + 
  geom_point(aes(color = sex))
```
:::

## We perform a PCA with `prcomp()`

::: {.small-font}
```{r}
#| echo: true
blue_jays |> 
  select(where(is.numeric)) |> # retain only numeric columns
  scale() |>                   # scale to zero mean and unit variance
  prcomp()                     # do PCA
```
:::

## Calculate the components and plot

::: {.small-font}
First we run the PCA and store results as `pca_fit`:

```{r}
#| echo: true
pca_fit <- blue_jays |> 
  select(where(is.numeric)) |> # retain only numeric columns
  scale() |>                   # scale to zero mean and unit variance
  prcomp()                     # do PCA
```
:::

::: {.fragment .small-font}
Then we add PC coordinates into original dataset and plot:

```r
library(broom)  # for augment(), tidy()

pca_fit |>
  # add PCs to the original dataset
  augment(blue_jays) |>
  ggplot(aes(.fittedPC1, .fittedPC2)) +
  geom_point(aes(color = sex))
```
:::

## Calculate the components and plot

::: {.small-font}
Plot PC 2 against PC 1
:::

::: {.tiny-font}
```{r}
#| echo: true
#| label: blue-jays-pca-plot
#| fig-cap: "&nbsp;"
#| fig-width: 5
#| fig-asp: 0.75
#| out-width: "100%"
#| output-location: "column"
pca_fit |>
  # add PCs to the original dataset
  augment(blue_jays) |>
  ggplot(aes(.fittedPC1, .fittedPC2)) +
  geom_point(aes(color = sex))
```
:::

## Calculate the components and plot

::: {.small-font}
Plot PC 3 against PC 2
:::

::: {.tiny-font}
```{r}
#| echo: true
#| label: blue-jays-pca-plot2
#| fig-cap: "&nbsp;"
#| fig-width: 5
#| fig-asp: 0.75
#| out-width: "100%"
#| output-location: "column"
pca_fit |>
  # add PCs to the original dataset
  augment(blue_jays) |>
  ggplot(aes(.fittedPC2, .fittedPC3)) +
  geom_point(aes(color = sex))
```
:::

## Plot the rotation matrix

::: {.tiny-font}
```{r}
#| echo: true
#| label: blue-jays-pca-rotation
#| fig-cap: "&nbsp;"
#| fig-width: 5
#| fig-asp: 0.75
#| out-width: "100%"
#| output-location: "column"
arrow_style <- arrow(
  angle = 20, length = grid::unit(8, "pt"),
  ends = "first", type = "closed"
)

pca_fit |>
  # extract rotation matrix
  tidy(matrix = "rotation") |>
  pivot_wider(
    names_from = "PC", values_from = "value",
    names_prefix = "PC"
  ) |>
  ggplot(aes(PC1, PC2)) +
  geom_segment(
    xend = 0, yend = 0,
    arrow = arrow_style
  ) +
  geom_text(aes(label = column), hjust = 1) +
  coord_fixed(
    xlim = c(-1.5, 0.5),
    ylim = c(-1, 1) 
  )
```
:::

## Plot the variance explained

::: {.tiny-font}
```{r}
#| echo: true
#| label: blue-jays-pca-eigenvalues
#| fig-cap: "&nbsp;"
#| fig-width: 5
#| fig-asp: 0.75
#| out-width: "100%"
#| output-location: "column"
pca_fit |>
  # extract eigenvalues
  tidy(matrix = "eigenvalues") |>
  ggplot(aes(PC, percent)) + 
  geom_col() + 
  scale_x_continuous(
    # create one axis tick per PC
    breaks = 1:6
  ) +
  scale_y_continuous(
    name = "variance explained",
    # format y axis ticks as percent values
    label = scales::label_percent(accuracy = 1)
  )
```
:::

## PCA on pottery data

::: {.fragment .tiny-font}
```{r}
#| echo: true
#| label: pottery-pca-plot
#| fig-cap: "&nbsp;"
#| fig-width: 5
#| fig-asp: 0.75
#| out-width: "100%"
#| output-location: "column"
pca_fit <- pottery |> 
  select(where(is.numeric)) |>
  scale() |>
  prcomp()

pca_fit |>
  augment(pottery) |>
  ggplot(aes(.fittedPC1, .fittedPC2)) +
  geom_point(aes(color = Region)) +
  theme(legend.position = "top")
```
:::

## Plot the rotation matrix

::: {.tiny-font}
```{r}
#| echo: true
#| label: pottery-pca-rotation
#| fig-cap: "&nbsp;"
#| fig-width: 5
#| fig-asp: 0.75
#| out-width: "100%"
#| output-location: "column"
arrow_style <- arrow(
  angle = 20, length = grid::unit(8, "pt"),
  ends = "first", type = "closed"
)

pca_fit |>
  tidy(matrix = "rotation") |>
  pivot_wider(
    names_from = "PC", values_from = "value",
    names_prefix = "PC"
  ) |>
  ggplot(aes(PC1, PC2)) +
  geom_segment(
    xend = 0, yend = 0,
    arrow = arrow_style
  ) +
  geom_text(aes(label = column), hjust = 1) +
  coord_fixed(
    xlim = c(-.7, 0.7),
    ylim = c(-.5, .7) 
  )
```
:::

## Plot the rotation matrix w/ manual label adjustment

::: {.tiny-font}
```{r}
#| echo: true
#| label: pottery-pca-rotation2
#| fig-cap: "&nbsp;"
#| fig-width: 5
#| fig-asp: 0.75
#| out-width: "100%"
#| output-location: "column"
arrow_style <- arrow(
  angle = 20, length = grid::unit(8, "pt"),
  ends = "first", type = "closed"
)

pca_fit |>
  tidy(matrix = "rotation") |>
  pivot_wider(
    names_from = "PC", values_from = "value",
    names_prefix = "PC"
  )  |>
  mutate(
    # order of variables is:
    # Al2O3, Fe2O3, MgO, CaO, Na2O, K2O, TiO2, MnO, BaO  
    hjust = c(1.05, -.05, -.05, .5, .5, -.05, 1.05, -.05, 1.05),
    vjust = c(.5, .5, .5, -.1, -.1, .8, .5, .2, 0)
  ) |>
  ggplot(aes(PC1, PC2)) +
  geom_segment(
    xend = 0, yend = 0,
    arrow = arrow_style
  ) +
  geom_text(aes(label = column, hjust = hjust, vjust = vjust)) +
  coord_fixed(
    xlim = c(-.7, 0.7),
    ylim = c(-.5, .7) 
  )
```
:::

## Plot the variance explained

::: {.tiny-font}
```{r}
#| echo: true
#| label: pottery-pca-eigenvalues
#| fig-cap: "&nbsp;"
#| fig-width: 5
#| fig-asp: 0.75
#| out-width: "100%"
#| output-location: "column"
pca_fit |>
  tidy(matrix = "eigenvalues") |>
  ggplot(aes(PC, percent)) + 
  geom_col() + 
  scale_x_continuous(
    # create one axis tick per PC
    breaks = 1:9
  ) +
  scale_y_continuous(
    name = "variance explained",
    # format y axis ticks as percent values
    label = scales::label_percent(accuracy = 1)
  )
```
:::


<!-- Segment ends here -->

#

## Further reading

- Fundamentals of Data Visualization: [Chapter 12.3: Dimension reduction](https://clauswilke.com/dataviz/visualizing-associations.html#dimension-reduction)
- Blogpost on PCA: [Principal Component Analysis
Explained Visually](https://setosa.io/ev/principal-component-analysis/)
- PCA tutorial with mathematical background: [A Tutorial on Principal Component Analysis](https://arxiv.org/pdf/1404.1100.pdf)
