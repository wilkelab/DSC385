---
title: "Functions and functional programming"
author: "Claus O. Wilke"
date: last-modified
format: 
  revealjs:
    theme:
      - default
      - Wilke-theme.scss
    auto-stretch: false
    chalkboard: true
execute:
  fig-format: svg
  fig-asp: 0.618
  fig-width: 5.5
---

```{r}
#| include: false
library(tidyverse)
library(palmerpenguins)
library(cowplot)
library(glue)
library(here)

# ggplot2 settings so plots scale well for slide size 
theme_set(theme_gray(14))
update_geom_defaults("point", list(size = 2))
update_geom_defaults("line", list(linewidth = 1))
```

## We often have to run similar code multiple times

::: {.fragment .tiny-font .move-down-1em}
```{r}
#| label: penguins-plot-Adelie
#| echo: true
#| fig-width: 6
#| fig-asp: 0.75
#| fig-cap: "&nbsp;"
#| out-width: "100%"
#| output-location: column-fragment
penguins |>
  filter(species == "Adelie") |>
  ggplot() +
  aes(bill_length_mm, body_mass_g) +
  geom_point() +
  ggtitle("Species: Adelie") +
  xlab("bill length (mm)") +
  ylab("body mass (g)") +
  theme_minimal_grid() +
  theme(plot.title.position = "plot")
```
:::


## We often have to run similar code multiple times

::: {.tiny-font .move-down-1em}
```{r}
#| label: penguins-plot-Chinstrap
#| echo: true
#| fig-width: 6
#| fig-asp: 0.75
#| fig-cap: "&nbsp;"
#| out-width: "100%"
#| output-location: column
penguins |>
  filter(species == "Chinstrap") |>
  ggplot() +
  aes(bill_length_mm, body_mass_g) +
  geom_point() +
  ggtitle("Species: Chinstrap") +
  xlab("bill length (mm)") +
  ylab("body mass (g)") +
  theme_minimal_grid() +
  theme(plot.title.position = "plot")
```
:::


## We often have to run similar code multiple times

::: {.tiny-font .move-down-1em}
```{r}
#| label: penguins-plot-Gentoo
#| echo: true
#| fig-width: 6
#| fig-asp: 0.75
#| fig-cap: "&nbsp;"
#| out-width: "100%"
#| output-location: column
penguins |>
  filter(species == "Gentoo") |>
  ggplot() +
  aes(bill_length_mm, body_mass_g) +
  geom_point() +
  ggtitle("Species: Gentoo") +
  xlab("bill length (mm)") +
  ylab("body mass (g)") +
  theme_minimal_grid() +
  theme(plot.title.position = "plot")
```
:::

::: {.fragment .small-font}
How can we make our life simpler and avoid massive code duplication?
:::

## Step 1: Avoid hard-coding specific values

::: {.fragment .tiny-font .move-down-1em}
```{r}
#| label: penguins-plot-Adelie2
#| echo: true
#| fig-width: 6
#| fig-asp: 0.75
#| fig-cap: "&nbsp;"
#| out-width: "100%"
#| output-location: column
#| code-line-numbers: "1,4,8"
species <- "Adelie"

penguins |>
  filter(.data$species == .env$species) |>
  ggplot() +
  aes(bill_length_mm, body_mass_g) +
  geom_point() +
  ggtitle(glue("Species: {species}")) +
  xlab("bill length (mm)") +
  ylab("body mass (g)") +
  theme_minimal_grid() +
  theme(plot.title.position = "plot")
```
:::

## A quick aside: the pronouns `.data` and `.env`

::: {.fragment .small-font}
We can use pronouns to distinguish data columns from variables:
```r
species <- "Adelie"

penguins |>
  filter(.data$species == .env$species)
```
:::

::: {.fragment .small-font}
`.data$species` is a column in the data frame
:::

::: {.fragment .small-font}
`.env$species` is a variable in the local environment
:::

::: {.fragment .small-font}
Alternatively we would have to make sure the names don't clash:

```r
species_choice <- "Adelie"

penguins |>
  filter(species == species_choice)
```
:::

## Step 1: Avoid hard-coding specific values

::: {.tiny-font .move-down-1em}
```{r}
#| label: penguins-plot-Adelie2a
#| echo: true
#| fig-width: 6
#| fig-asp: 0.75
#| fig-cap: "&nbsp;"
#| out-width: "100%"
#| output-location: column
#| code-line-numbers: "1-1"
species <- "Adelie"

penguins |>
  filter(.data$species == .env$species) |>
  ggplot() +
  aes(bill_length_mm, body_mass_g) +
  geom_point() +
  ggtitle(glue("Species: {species}")) +
  xlab("bill length (mm)") +
  ylab("body mass (g)") +
  theme_minimal_grid() +
  theme(plot.title.position = "plot")
```
:::

## Step 1: Avoid hard-coding specific values

::: {.tiny-font .move-down-1em}
```{r}
#| label: penguins-plot-Chinstrap2
#| echo: true
#| fig-width: 6
#| fig-asp: 0.75
#| fig-cap: "&nbsp;"
#| out-width: "100%"
#| output-location: column
#| code-line-numbers: "1-1"
species <- "Chinstrap"

penguins |>
  filter(.data$species == .env$species) |>
  ggplot() +
  aes(bill_length_mm, body_mass_g) +
  geom_point() +
  ggtitle(glue("Species: {species}")) +
  xlab("bill length (mm)") +
  ylab("body mass (g)") +
  theme_minimal_grid() +
  theme(plot.title.position = "plot")
```
:::

## Step 1: Avoid hard-coding specific values

::: {.tiny-font .move-down-1em}
```{r}
#| label: penguins-plot-Gentoo2
#| echo: true
#| fig-width: 6
#| fig-asp: 0.75
#| fig-cap: "&nbsp;"
#| out-width: "100%"
#| output-location: column
#| code-line-numbers: "1-1"
species <- "Gentoo"

penguins |>
  filter(.data$species == .env$species) |>
  ggplot() +
  aes(bill_length_mm, body_mass_g) +
  geom_point() +
  ggtitle(glue("Species: {species}")) +
  xlab("bill length (mm)") +
  ylab("body mass (g)") +
  theme_minimal_grid() +
  theme(plot.title.position = "plot")
```
:::

::: {.fragment .small-font}
This concept is also called: Avoiding magic numbers
:::

## Step 2: Define a function

::: {.fragment .tiny-font .move-down-1em}
```{r}
#| echo: true
#| output-location: column
#| code-line-numbers: "1,12"
make_plot <- function(species) {
  penguins |>
    filter(.data$species == .env$species) |>
    ggplot() +
    aes(bill_length_mm, body_mass_g) +
    geom_point() +
    ggtitle(glue("Species: {species}")) +
    xlab("bill length (mm)") +
    ylab("body mass (g)") +
    theme_minimal_grid() +
    theme(plot.title.position = "plot")
}
```
:::

## Step 2: Define a function

::: {.tiny-font .move-down-1em}
```{r}
#| label: penguins-plot-Adelie3
#| echo: true
#| fig-width: 6
#| fig-asp: 0.75
#| fig-cap: "&nbsp;"
#| out-width: "100%"
#| output-location: column
#| code-line-numbers: "14-14"
make_plot <- function(species) {
  penguins |>
    filter(.data$species == .env$species) |>
    ggplot() +
    aes(bill_length_mm, body_mass_g) +
    geom_point() +
    ggtitle(glue("Species: {species}")) +
    xlab("bill length (mm)") +
    ylab("body mass (g)") +
    theme_minimal_grid() +
    theme(plot.title.position = "plot")
}

make_plot("Adelie")
```
:::

## Step 2: Define a function

::: {.tiny-font .move-down-1em}
```{r}
#| label: penguins-plot-Chinstrap3
#| echo: true
#| fig-width: 6
#| fig-asp: 0.75
#| fig-cap: "&nbsp;"
#| out-width: "100%"
#| output-location: column
#| code-line-numbers: "14-14"
make_plot <- function(species) {
  penguins |>
    filter(.data$species == .env$species) |>
    ggplot() +
    aes(bill_length_mm, body_mass_g) +
    geom_point() +
    ggtitle(glue("Species: {species}")) +
    xlab("bill length (mm)") +
    ylab("body mass (g)") +
    theme_minimal_grid() +
    theme(plot.title.position = "plot")
}

make_plot("Chinstrap")
```
:::


## Step 2: Define a function

::: {.tiny-font .move-down-1em}
```{r}
#| label: penguins-plot-Gentoo3
#| echo: true
#| fig-width: 6
#| fig-asp: 0.75
#| fig-cap: "&nbsp;"
#| out-width: "100%"
#| output-location: column
#| code-line-numbers: "14-14"
make_plot <- function(species) {
  penguins |>
    filter(.data$species == .env$species) |>
    ggplot() +
    aes(bill_length_mm, body_mass_g) +
    geom_point() +
    ggtitle(glue("Species: {species}")) +
    xlab("bill length (mm)") +
    ylab("body mass (g)") +
    theme_minimal_grid() +
    theme(plot.title.position = "plot")
}

make_plot("Gentoo")
```
:::


## Rules of thumb about functions

::: {.fragment .small-font}
- You can never write too many functions
:::

::: {.fragment .small-font}
- When you find yourself writing the same code 2-3 times, put it into a function
:::

::: {.fragment .small-font}
- A function should be no longer than 20-40 lines
:::

::: {.fragment .small-font}
- If a function is getting too long, break it into smaller functions
:::

## Step 3: Automate calling the function

::: {.fragment .small-font}
We need a brief detour to talk about lists and the `map()` pattern
:::

<!-- Segment ends here -->

#

# Lists and the `map()` pattern

## Lists

::: {.fragment .small-font}
In R, lists are a data structure that can store multiple elements of various types
:::

::: {.fragment .small-font}
A list of words:
```{r}
#| echo: true
list("apple", "orange", "banana")
```
:::

## Lists

::: {.small-font}
In R, lists are a data structure that can store multiple elements of various types
:::

::: {.small-font}
A list of numbers:
```{r}
#| echo: true
list(5, 7, 12)
```
:::


## Lists

::: {.small-font}
In R, lists are a data structure that can store multiple elements of various types
:::

::: {.small-font}
A list of mixed data types:
```{r}
#| echo: true
list(5, "apple", TRUE)
```
:::

::: {.fragment .small-font}
For comparison, all elements of a vector are coerced into the same type: 
```{r}
#| echo: true
c(5, "apple", TRUE)
```
:::

## Lists

::: {.small-font}
In R, lists are a data structure that can store multiple elements of various types
:::

::: {.small-font}
A list of vectors:
```{r}
#| echo: true
list(1:5, c("apple", "orange", "banana"), c(TRUE, FALSE))
```
:::

## Lists

::: {.small-font}
In R, lists are a data structure that can store multiple elements of various types
:::

::: {.small-font}
A list of lists:
```{r}
#| echo: true
list(list(1, 2), list(3, 4))
```
:::

## Lists

::: {.small-font}
You can access individual elements of a list with the double brackets operator:
```{r}
#| echo: true
fruit <- list("apple", "orange", "banana")
fruit
```
:::

## Lists

::: {.small-font}
You can access individual elements of a list with the double brackets operator:
```{r}
#| echo: true
fruit <- list("apple", "orange", "banana")
fruit[[1]]
```
:::

## Lists

::: {.small-font}
You can access individual elements of a list with the double brackets operator:
```{r}
#| echo: true
fruit <- list("apple", "orange", "banana")
fruit[[3]]
```
:::

## The `map()` pattern

::: {.fragment .small-font}
The `map()` function applies a function to all elements of a vector or list and returns the result in a list
:::

::: {.fragment .small-font}
This pattern can be used instead of loops
:::

::: {.fragment .small-font}
Example: Calculate the squares of the numbers 3, 4, 5:
```{r}
#| echo: true
# define function that calculates square
square <- function(x) x^2

# apply function to the numbers 3, 4, 5
map(3:5, square) 
```
:::

## The `map()` pattern

::: {.small-font}
We can define the function to be applied on the fly:
```{r}
#| echo: true
map(3:5, function(x) x^2) 
```
:::

::: {.fragment .small-font}
Even simpler:
```{r}
#| echo: true
map(3:5, \(x) x^2) 
```
:::

## The `map()` pattern

::: {.small-font}
Also:
```{r}
#| echo: true
map(3:5, ~.x^2) 
```

Note: The formula definition is not part of the base R language and only works for certain tidyverse functions
:::

## The `map()` pattern

::: {.small-font}
Sometimes it's more convenient to get a vector as return value:
```{r}
#| echo: true
map_dbl(3:5, ~.x^2) 
```
:::

::: {.fragment .small-font}
Similarly:

- `map_chr()` returns a vector of strings
- `map_int()` returns a vector of integers
- `map_lgl()` returns a vector of logicals
:::

<!-- Segment ends here -->

#

# Using functional programming to create multiple plots

## Making multiple plots with `map()`

::: {.fragment .small-font}
```{r}
#| echo: true
species <- c("Adelie", "Chinstrap", "Gentoo")
plots <- map(species, make_plot)
```
:::

::: {.fragment .small-font}
`map` takes each element of the vector `species` and uses it as input for `make_plot()`
:::

::: {.fragment .small-font}
It returns a list of created plots:

```{r}
#| label: penguins-plot-map-return
#| echo: true
#| fig-width: 6
#| fig-asp: 0.75
#| fig-cap: "&nbsp;"
#| out-width: "32%"
#| fig-align: left
plots[[1]]
```
:::

## Making multiple plots with `map()`

::: {.small-font}
```{r}
#| echo: true
species <- c("Adelie", "Chinstrap", "Gentoo")
plots <- map(species, make_plot)
```
:::

::: {.small-font}
`map` takes each element of the vector `species` and uses it as input for `make_plot()`
:::

::: {.small-font}
It returns a list of created plots:

```{r}
#| label: penguins-plot-map-return2
#| echo: true
#| fig-width: 6
#| fig-asp: 0.75
#| fig-cap: "&nbsp;"
#| out-width: "32%"
#| fig-align: left
plots[[2]]
```
:::

## Making multiple plots with `map()`

::: {.small-font}
```{r}
#| echo: true
species <- c("Adelie", "Chinstrap", "Gentoo")
plots <- map(species, make_plot)
```
:::

::: {.small-font}
`map` takes each element of the vector `species` and uses it as input for `make_plot()`
:::

::: {.small-font}
It returns a list of created plots:

```{r}
#| label: penguins-plot-map-return3
#| echo: true
#| fig-width: 6
#| fig-asp: 0.75
#| fig-cap: "&nbsp;"
#| out-width: "32%"
#| fig-align: left
plots[[3]]
```
:::

## Making multiple plots with `map()`

::: {.small-font}
```{r}
#| label: penguins-plot-map
#| echo: true
#| fig-width: 18
#| fig-asp: 0.25
#| fig-cap: "&nbsp;"
#| out-width: "100%"
#| fig-align: left
#| fig-show: hold
species <- c("Adelie", "Chinstrap", "Gentoo")
plots <- map(species, make_plot)

# put all plots side-by-side with patchwork
patchwork::wrap_plots(plots)
```
:::

## Step 4: Write a more general function

::: {.fragment .tiny-font .move-down-1em}
```{r}
#| echo: true
#| output-location: column
#| code-line-numbers: "2-2"
make_plot <- function(species) {
  penguins |> # hard-coded dataset!
    filter(.data$species == .env$species) |>
    ggplot() +
    aes(bill_length_mm, body_mass_g) +
    geom_point() +
    ggtitle(glue("Species: {species}")) +
    xlab("bill length (mm)") +
    ylab("body mass (g)") +
    theme_minimal_grid() +
    theme(plot.title.position = "plot")
}
```
:::

## Step 4: Write a more general function

::: {.tiny-font .move-down-1em}
```{r}
#| echo: true
#| output-location: column
#| code-line-numbers: "1-3"
make_plot2 <- function(data, species) {
  data |>
    # filter no longer needed
    ggplot() +
    aes(bill_length_mm, body_mass_g) +
    geom_point() +
    ggtitle(glue("Species: {species}")) +
    xlab("bill length (mm)") +
    ylab("body mass (g)") +
    theme_minimal_grid() +
    theme(plot.title.position = "plot")
}
```
:::

## Step 4: Write a more general function

::: {.tiny-font .move-down-1em}
```{r}
#| echo: true
#| fig-width: 6
#| fig-asp: 0.75
#| fig-cap: "&nbsp;"
#| out-width: "100%"
#| output-location: column
make_plot2 <- function(data, species) {
  data |>
    # filter no longer needed
    ggplot() +
    aes(bill_length_mm, body_mass_g) +
    geom_point() +
    ggtitle(glue("Species: {species}")) +
    xlab("bill length (mm)") +
    ylab("body mass (g)") +
    theme_minimal_grid() +
    theme(plot.title.position = "plot")
}

data_adelie <- penguins |>
  filter(species == "Adelie")

make_plot2(data_adelie, species = "Adelie")
```
:::

## Step 5: Use these concepts in a tidy pipeline

::: {.tiny-font .move-down-1em}
```{r}
#| echo: true
penguins |>
  nest(data = -species)
```
:::


## Step 5: Use these concepts in a tidy pipeline

::: {.tiny-font .move-down-1em}
```{r}
#| echo: true
penguins |>
  nest(data = -species) |>
  mutate(plots = map(species, make_plot))
```
:::

## Step 5: Use these concepts in a tidy pipeline

::: {.tiny-font}
```{r}
#| label: penguins-plot-tidy
#| echo: true
#| fig-width: 18
#| fig-asp: 0.25
#| fig-cap: "&nbsp;"
#| out-width: "100%"
#| fig-align: left
#| fig-show: hold
penguins |>
  nest(data = -species) |>
  mutate(plots = map(species, make_plot)) |>
  pull(plots) |>
  patchwork::wrap_plots()
```
:::

## Step 5: Use these concepts in a tidy pipeline

::: {.tiny-font}
```{r}
#| label: penguins-plot-tidy2
#| echo: true
#| fig-width: 18
#| fig-asp: 0.25
#| fig-cap: "&nbsp;"
#| out-width: "100%"
#| fig-align: left
#| fig-show: hold
penguins |>
  nest(data = -species) |>
  mutate(plots = map2(data, species, make_plot2)) |>
  pull(plots) |>
  patchwork::wrap_plots()
```
:::

::: {.fragment .small-font}
`map2()` is like `map()` but for functions with 2 arguments
:::

::: {.fragment .small-font}
Note: This pipeline automatically processes all species in the dataset, whatever they are called
:::

## Why no `for` loops?

::: {.fragment .small-font}
- They often require us to think about data logistics (indexing)
:::

::: {.fragment .small-font}
- They encourage writing long, monolithic blocks of code
:::

::: {.fragment .small-font}
- They encourage iterative thinking over conceptual thinking
:::

::: {.fragment .small-font}
- They cannot easily be parallelized or otherwise optimized
:::

::: {.fragment .small-font}
- Most modern programming languages are moving away from `for` loops<br>
  (examples: Python, Rust, JavaScript)
:::

<!-- Segment ends here -->

#

## Further reading

- R for Data Science: [Chapter 19: Functions](https://r4ds.had.co.nz/functions.html)
- R for Data Science: [Chapter 21.5: The map functions](https://r4ds.had.co.nz/iteration.html#the-map-functions)
- **purrr** reference documentation: [Apply a function to each element of a list or atomic vector](https://purrr.tidyverse.org/reference/map.html)

