---
title: "Data wrangling 2"
author: "Claus O. Wilke"
date: last-modified
format: 
  revealjs:
    theme:
      - default
      - Wilke-theme.scss
    auto-stretch: false
    chalkboard: true
execute:
  fig-format: svg
  fig-asp: 0.618
  fig-width: 5.5
---

```{r}
#| include: false
library(tidyverse)
library(palmerpenguins)

# ggplot2 settings so plots scale well for slide size 
theme_set(theme_gray(14))
update_geom_defaults("point", list(size = 2))
#update_geom_defaults("line", list(linewidth = 1))
```

## Elementary data manipulations

:::: {.columns}

::: {.column width="50%"}
Previous class:

- Pick rows: `filter()`
- Pick columns: `select()`
- Sort rows: `arrange()`
- Count things: `count()`
- Make new columns: `mutate()`
:::

::: {.fragment .column width="50%"}
This class:

::: {.incremental}
- Analyze subsets:<br>`group_by()` and `summarize()`
- Reshape:<br>`pivot_wider()`, `pivot_longer()`
- Combine datasets:<br>`left_join()`, `inner_join()`, `...`
:::
:::

::::

## Analyze subsets: `group_by()` and `summarize()`

::: {.move-down-2em}
![](../assets/data-wrangling-2/summarize.svg){fig-align="center" width="90%"}
:::

## Example application of grouping: Counting

Previously, we counted like so:

::: {.small-font}
```{r}
#| echo: true
library(palmerpenguins) # loads the `penguins` dataset

penguins |>
  count(species)
```
:::

::: {.fragment}
Now let's do it the hard way . . .
:::

## Example application of grouping: Counting

Let's go back to the raw data:

::: {.small-font}
```{r}
#| echo: true
penguins
```
:::


## Example application of grouping: Counting

Let's group it:

::: {.small-font}
```{r}
#| echo: true
penguins |>
  group_by(species)
```
:::

## Example application of grouping: Counting

And summarize:

::: {.small-font}
```{r}
#| echo: true
penguins |>
  group_by(species) |>
  summarize(
    n = n()  # n() returns the number of observations per group
  )
```
:::

## Example application of grouping: Counting

Now let's group by multiple variables:

::: {.small-font}
```{r}
#| echo: true
penguins |>
  group_by(species, island)
```
:::

## Example application of grouping: Counting

And summarize:

::: {.small-font}
```{r}
#| echo: true
penguins |>
  group_by(species, island) |>
  summarize(
    n = n()  # n() returns the number of observations per group
  )
```
:::

## Example application of grouping: Counting

`count(...)` is a short-cut for:<br>`group_by(...) |> summarize(n = n())`

:::: {.columns}

::: {.fragment .column width="50%" .small-font}
```{r}
#| echo: true
#
penguins |>
  count(species)
```
:::

::: {.fragment .column width="50%" .small-font}
```{r}
#| echo: true
penguins |>
  group_by(species) |>
  summarize(n = n())
```
:::

::::

::: {.fragment}
The output is exactly the same
:::

## Performing multiple summaries at once

::: {.fragment .small-font}
```{r}
#| echo: true
#| output-location: fragment
penguins |>
  group_by(species) |>
  summarize(
    n = n(),                                      # number of penguins
    mean_mass = mean(body_mass_g),                # mean body mass
    max_flipper_length = max(flipper_length_mm),  # max flipper length
    percent_female = sum(sex == "female")/n()     # percent of female penguins
  )
```
:::

::: {.fragment}
Each statement in `summarize()` creates one new column
:::

::: {.fragment}
But why all the `NA`s?
:::

## Performing multiple summaries at once

::: {.small-font}
```{r}
#| echo: true
penguins |>
  group_by(species) |>
  summarize(
    n = n(),
    mean_mass = mean(body_mass_g, na.rm = TRUE),
    max_flipper_length = max(flipper_length_mm, na.rm = TRUE),
    percent_female = sum(sex == "female", na.rm = TRUE)/sum(!is.na(sex))
  )
```
:::

::: {.fragment}
We typically need to tell R how exactly `NA`s should be handled
:::

#

<!-- Segment ends here -->

# Reshaping: Making tables wider or longer

## Reshape: `pivot_wider()` and `pivot_longer()`

::: {.move-down-1em}
![](../assets/data-wrangling-2/pivot.svg){fig-align="center" width="50%"}
:::

## Reshaping example: Making a wide summary table

::: {.small-font}
```{r}
#| echo: true
penguins |>
  count(species, island)
```
:::


## Reshaping example: Making a wide summary table

::: {.small-font}
```{r}
#| echo: true
penguins |>
  count(species, island) |>
  pivot_wider(names_from = "island", values_from = "n")
```
:::

::: {.fragment}
The `NA`s indicate cases that don't exist
:::

## And going back to long format

::: {.small-font}
```{r}
#| echo: true
penguins_wide <- penguins |>
  count(species, island) |>
  pivot_wider(names_from = "island", values_from = "n")

penguins_wide |> 
  pivot_longer(cols = -species, names_to = "island", values_to = "n")
```
:::

## And going back to long format

Column specifications work just like in `select()`:

::: {.small-font}
```{r}
#| echo: true
# specify columns by subtraction
penguins_wide |> 
  pivot_longer(cols = -species, names_to = "island", values_to = "n")
```
:::

## And going back to long format

Column specifications work just like in `select()`:

::: {.small-font}
```{r}
#| echo: true
# specify columns by explicit listing
penguins_wide |> 
  pivot_longer(cols = c(Biscoe, Dream, Torgersen), names_to = "island", values_to = "n")
```
:::

## And going back to long format

Column specifications work just like in `select()`:

::: {.small-font}
```{r}
#| echo: true
# specify columns by range
penguins_wide |> 
  pivot_longer(cols = Biscoe:Torgersen, names_to = "island", values_to = "n")
```
:::

#

<!-- Segment ends here -->

# Combining datasets: joins

## We use joins to add columns from one table into another

::: {.move-down-2em}
![](../assets/data-wrangling-2/join.svg){fig-align="center" width="75%"}
:::


## Example: band members and their instruments

:::: {.columns}

::: {.fragment .small-font .column width="50%"}
```{r}
#| echo: true
# some members of famous bands
band_members
```
:::

::: {.fragment .small-font .column width="50%"}
```{r}
#| echo: true
# instruments played
band_instruments
```
:::

::::

<br>

::: {.fragment .small-font}
```{r}
#| echo: true
# add right table to left
left_join(band_members, band_instruments)
```
:::

## Example: band members and their instruments

:::: {.columns}

::: {.small-font .column width="50%"}
```{r}
#| echo: true
# some members of famous bands
band_members
```
:::

::: {.small-font .column width="50%"}
```{r}
#| echo: true
# instruments played
band_instruments
```
:::

::::

<br>

::: {.small-font}
```{r}
#| echo: true
# add left table to right
right_join(band_members, band_instruments)
```
:::


## Example: band members and their instruments

:::: {.columns}

::: {.small-font .column width="50%"}
```{r}
#| echo: true
# some members of famous bands
band_members
```
:::

::: {.small-font .column width="50%"}
```{r}
#| echo: true
# instruments played
band_instruments
```
:::

::::

<br>

::: {.small-font}
```{r}
#| echo: true
# keep intersection only
inner_join(band_members, band_instruments)
```
:::

## Example: band members and their instruments

:::: {.columns}

::: {.small-font .column width="50%"}
```{r}
#| echo: true
# some members of famous bands
band_members
```
:::

::: {.small-font .column width="50%"}
```{r}
#| echo: true
# instruments played
band_instruments
```
:::

::::

<br>

::: {.small-font}
```{r}
#| echo: true
# merge all cases
full_join(band_members, band_instruments)
```
:::


## The different joins at a glance

::: {.move-down-2em}
![](../assets/data-wrangling-2/joins-venn.svg){fig-align="center" width="65%"}
:::

## The different joins at a glance

![](../assets/data-wrangling-2/joins-venn.svg){.absolute top="0%" left="65%" width="35%"}

<br>

:::: {.columns}

::: {.column width="65%"}
**Tip:** In case of doubt, use `left_join()`

::: {.fragment}
In my experience, `left_join()` is the right choice 70â€“80% of the time
:::
:::
::::

#

<!-- Segment ends here -->

## Further reading

- R for Data Science: [Chapter 5.6: Grouped summaries with `summarise()`](https://r4ds.had.co.nz/transform.html?q=group_by#grouped-summaries-with-summarise)
- R for Data Science: [Chapter 12.3: Pivoting](https://r4ds.had.co.nz/tidy-data.html?q=pivot#pivoting)
- R for Data Science: [Chapter 13: Relational data](https://r4ds.had.co.nz/relational-data.html)
- **dplyr** documentation: [Grouped data](https://dplyr.tidyverse.org/articles/grouping.html)
- **tidyr** documentation: [Pivoting](https://tidyr.tidyverse.org/articles/pivot.html)
- **dplyr** documentation: [Mutating joins](https://dplyr.tidyverse.org/articles/two-table.html#mutating-joins-1)
