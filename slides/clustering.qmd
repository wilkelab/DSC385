---
title: "Clustering"
author: "Claus O. Wilke"
date: last-modified
format: 
  revealjs:
    theme:
      - default
      - Wilke-theme.scss
    auto-stretch: false
    chalkboard: true
execute:
  fig-format: svg
  fig-asp: 0.618
  fig-width: 5.5
---

```{r}
#| include: false
library(tidyverse)
library(broom)
library(cowplot)
library(ggforce)
library(here)

# ggplot2 settings so plots scale well for slide size 
theme_set(theme_gray(14))
update_geom_defaults("point", list(size = 2))
update_geom_defaults("line", list(linewidth = 1))

# spirals
spirals <- read_csv(here("datasets", "spirals.csv"))

# gaussian clusters
gaussian_clusters <- read_csv(here("datasets", "gaussian_clusters.csv"))
```


```{r}
#| include: false

# code needed for kmeans visualizations
update_clusters <- function(coords, centroids) {
  dmin <- sqrt((centroids$x[1]-coords$x)^2 + (centroids$y[1]-coords$y)^2)
  cluster <- rep(1, nrow(coords))
  
  for (i in 2:nrow(centroids)) {
    d <- sqrt((centroids$x[i]-coords$x)^2 + (centroids$y[i]-coords$y)^2)
    idx <- d < dmin
    dmin[idx] <- d[idx]
    cluster[idx] <- i
  }
  
  coords$cluster <- factor(cluster)
  coords
}

update_centroids <- function(coords) {
  coords |>
    group_by(cluster) |>
    summarize(x = mean(x), y = mean(y)) |>
    arrange(cluster)
}

random_centroids <- function(coords, n) {
  x <- runif(n, min(coords$x), max(coords$x))
  y <- runif(n, min(coords$y), max(coords$y))
  tibble(x, y, cluster = factor(1:n))
}

make_kmeans_plot <- function(coords, centroids, voronoi_centr, color_points = TRUE, plot_voronoi = TRUE, plot_centroids = TRUE) {
  xlim <- c(min(coords$x), max(coords$x))
  xrange <- diff(range(xlim))
  xlim <- xlim + c(-.1*xrange, .1*xrange)
  ylim <- c(min(coords$y), max(coords$y))
  yrange <- diff(range(ylim))
  ylim <- ylim + c(-.1*yrange, .1*yrange)
  
  if (isTRUE(color_points)) {
    p <- ggplot(coords, aes(x, y, color = cluster))
  } else {
    p <- ggplot(coords, aes(x, y))
  }
  
  if (isTRUE(plot_voronoi)) {
    p <- p +
      geom_voronoi_tile(
        data = voronoi_centr,
        aes(fill = cluster, group = 1L),
        alpha = 0.2,
        color = NA,
        bound = c(xlim, ylim)
      )
  }
  
  if (isTRUE(color_points)) {
    p <- p + geom_point()
  } else {
    p <- p + geom_point(color = "black")
  }
  
  if (isTRUE(plot_centroids)) {
    p <- p + 
      geom_point(
        data = centroids,
        aes(fill = cluster),
        color = "black", size = 6, shape = 21
      )
  }
  
  p +
    coord_cartesian(xlim = xlim, ylim = ylim, expand = FALSE) +
    theme_void() +
    theme(legend.position = "none")
}
```

## {#kmeans-motivation data-menu-title="k-means motivation"}

::: {.move-up-1em}
```{r}
#| label: three-clusters-viz
#| fig-cap: "&nbsp;"
#| fig-width: 6
#| fig-asp: 0.85
#| out-width: "65%"
centroids <- tibble(
  cluster = factor(1:3),
  x = c(2.014419687, 4.321905953, -0.003265806),
  y = c(-4.1133121, 1.6406162, -0.1237819)
)
coords <- update_clusters(gaussian_clusters, centroids)

make_kmeans_plot(coords, centroids,  centroids, color_points = FALSE, plot_centroids = FALSE, plot_voronoi = FALSE)
```
:::

::: {.small-font .move-up-2em}
These points correspond to three clusters. 
Can a computer find them automatically?
:::

## {#kmeans-motivation-color data-menu-title="k-means motivation colored"}

::: {.move-up-1em}
```{r}
#| label: three-clusters-viz-color
#| fig-cap: "&nbsp;"
#| fig-width: 6
#| fig-asp: 0.85
#| out-width: "65%"
make_kmeans_plot(coords, centroids, centroids, color_points = TRUE, plot_centroids = FALSE, plot_voronoi = FALSE)
```
:::

::: {.small-font .move-up-2em}
These points correspond to three clusters. 
Can a computer find them automatically?
:::

## *k*-means clustering

::: {.fragment}
1\. Start with *k* randomly chosen means
:::

::: {.fragment}
2\. Color data points by the shortest distance to any
mean
:::

::: {.fragment}
3\. Move means to centroid position of each group of
points
:::

::: {.fragment}
4\. Repeat from step 2 until convergence
:::

# Let's try it out

## {#kmeans-animation-1 data-menu-title="k-means animation step 1"}

::: {.move-up-1em}
```{r}
#| label: three-clusters-kmeans1
#| fig-cap: "&nbsp;"
#| fig-width: 6
#| fig-asp: 0.85
#| out-width: "65%"
coords <- gaussian_clusters

centroids <- tibble(
  x = c(5.7353523, -0.4681193, -0.5732993),
  y = c(-5.8405302, 0.3293147, -1.0971190),
  cluster = factor(1:3)
)

coords <- update_clusters(coords, centroids)

make_kmeans_plot(coords, centroids, color_points = FALSE, plot_centroids = FALSE, plot_voronoi = FALSE)
```
:::

## {#kmeans-animation-2 data-menu-title="k-means animation step 2"}

::: {.move-up-1em}
```{r}
#| label: three-clusters-kmeans2
#| fig-cap: "&nbsp;"
#| fig-width: 6
#| fig-asp: 0.85
#| out-width: "65%"
make_kmeans_plot(coords, centroids, color_points = FALSE, plot_centroids = TRUE, plot_voronoi = FALSE)
```
:::

::: {.small-font .move-up-2em}
Add means at arbitrary locations
:::

## {#kmeans-animation-3 data-menu-title="k-means animation step 3"}

::: {.move-up-1em}
```{r}
#| label: three-clusters-kmeans3
#| fig-cap: "&nbsp;"
#| fig-width: 6
#| fig-asp: 0.85
#| out-width: "65%"
make_kmeans_plot(coords, centroids, centroids, color_points = FALSE, plot_voronoi = TRUE)
```
:::

::: {.small-font .move-up-2em}
Color data points by the shortest distance to any mean
:::

## {#kmeans-animation-4 data-menu-title="k-means animation step 4"}

::: {.move-up-1em}
```{r}
#| label: three-clusters-kmeans4
#| fig-cap: "&nbsp;"
#| fig-width: 6
#| fig-asp: 0.85
#| out-width: "65%"
make_kmeans_plot(coords, centroids, centroids, color_points = TRUE)
```
:::

::: {.small-font .move-up-2em}
Color data points by the shortest distance to any mean
:::

## {#kmeans-animation-5 data-menu-title="k-means animation step 5"}

::: {.move-up-1em}
```{r}
#| label: three-clusters-kmeans5
#| fig-cap: "&nbsp;"
#| fig-width: 6
#| fig-asp: 0.85
#| out-width: "65%"
centroids2 <- update_centroids(coords)
make_kmeans_plot(coords, centroids2, centroids, plot_voronoi = FALSE)
```
:::

::: {.small-font .move-up-2em}
Move means to centroid position of each group of points
:::

## {#kmeans-animation-6 data-menu-title="k-means animation step 6"}

::: {.move-up-1em}
```{r}
#| label: three-clusters-kmeans6
#| fig-cap: "&nbsp;"
#| fig-width: 6
#| fig-asp: 0.85
#| out-width: "65%"
centroids <- centroids2
coords <- update_clusters(coords, centroids)
make_kmeans_plot(coords, centroids, centroids, color_points = FALSE)
```
:::

::: {.small-font .move-up-2em}
Color data points by the shortest distance to any mean
:::

## {#kmeans-animation-7 data-menu-title="k-means animation step 7"}

::: {.move-up-1em}
```{r}
#| label: three-clusters-kmeans7
#| fig-cap: "&nbsp;"
#| fig-width: 6
#| fig-asp: 0.85
#| out-width: "65%"
make_kmeans_plot(coords, centroids, centroids, color_points = TRUE)
```
:::

::: {.small-font .move-up-2em}
Color data points by the shortest distance to any mean
:::

## {#kmeans-animation-8 data-menu-title="k-means animation step 8"}

::: {.move-up-1em}
```{r}
#| label: three-clusters-kmeans8
#| fig-cap: "&nbsp;"
#| fig-width: 6
#| fig-asp: 0.85
#| out-width: "65%"
centroids2 <- update_centroids(coords)
make_kmeans_plot(coords, centroids2, centroids, plot_voronoi = FALSE)
```
:::

::: {.small-font .move-up-2em}
Move means to centroid position of each group of points
:::

## {#kmeans-animation-9 data-menu-title="k-means animation step 9"}

::: {.move-up-1em}
```{r}
#| label: three-clusters-kmeans9
#| fig-cap: "&nbsp;"
#| fig-width: 6
#| fig-asp: 0.85
#| out-width: "65%"
centroids <- centroids2
coords <- update_clusters(coords, centroids)
make_kmeans_plot(coords, centroids, centroids, color_points = FALSE)
```
:::

::: {.small-font .move-up-2em}
Color data points by the shortest distance to any mean
:::

## {#kmeans-animation-10 data-menu-title="k-means animation step 10"}

::: {.move-up-1em}
```{r}
#| label: three-clusters-kmeans10
#| fig-cap: "&nbsp;"
#| fig-width: 6
#| fig-asp: 0.85
#| out-width: "65%"
make_kmeans_plot(coords, centroids, centroids, color_points = TRUE)
```
:::

::: {.small-font .move-up-2em}
Color data points by the shortest distance to any mean
:::

## {#kmeans-animation-11 data-menu-title="k-means animation step 11"}

::: {.move-up-1em}
```{r}
#| label: three-clusters-kmeans11
#| fig-cap: "&nbsp;"
#| fig-width: 6
#| fig-asp: 0.85
#| out-width: "65%"
centroids2 <- update_centroids(coords)
make_kmeans_plot(coords, centroids2, centroids, plot_voronoi = FALSE)
```
:::

::: {.small-font .move-up-2em}
Move means to centroid position of each group of points
:::

## {#kmeans-animation-12 data-menu-title="k-means animation step 12"}

::: {.move-up-1em}
```{r}
#| label: three-clusters-kmeans12
#| fig-cap: "&nbsp;"
#| fig-width: 6
#| fig-asp: 0.85
#| out-width: "65%"
centroids <- centroids2
coords <- update_clusters(coords, centroids)
make_kmeans_plot(coords, centroids, centroids, color_points = FALSE)
```
:::

::: {.small-font .move-up-2em}
Color data points by the shortest distance to any mean
:::

## {#kmeans-animation-13 data-menu-title="k-means animation step 13"}

::: {.move-up-1em}
```{r}
#| label: three-clusters-kmeans13
#| fig-cap: "&nbsp;"
#| fig-width: 6
#| fig-asp: 0.85
#| out-width: "65%"
make_kmeans_plot(coords, centroids, centroids, color_points = TRUE)
```
:::

::: {.small-font .move-up-2em}
Color data points by the shortest distance to any mean
:::

## {#kmeans-animation-14 data-menu-title="k-means animation step 14"}

::: {.move-up-1em}
```{r}
#| label: three-clusters-kmeans14
#| fig-cap: "&nbsp;"
#| fig-width: 6
#| fig-asp: 0.85
#| out-width: "65%"
centroids2 <- update_centroids(coords)
make_kmeans_plot(coords, centroids2, centroids, plot_voronoi = FALSE)
```
:::

::: {.small-font .move-up-2em}
Move means to centroid position of each group of points
:::

## {#kmeans-animation-15 data-menu-title="k-means animation step 15"}

::: {.move-up-1em}
```{r}
#| label: three-clusters-kmeans15
#| fig-cap: "&nbsp;"
#| fig-width: 6
#| fig-asp: 0.85
#| out-width: "65%"
centroids <- centroids2
coords <- update_clusters(coords, centroids)
make_kmeans_plot(coords, centroids, centroids, color_points = FALSE)
```
:::

::: {.small-font .move-up-2em}
Color data points by the shortest distance to any mean
:::

## {#kmeans-animation-16 data-menu-title="k-means animation step 16"}

::: {.move-up-1em}
```{r}
#| label: three-clusters-kmeans16
#| fig-cap: "&nbsp;"
#| fig-width: 6
#| fig-asp: 0.85
#| out-width: "65%"
make_kmeans_plot(coords, centroids, centroids, color_points = TRUE)
```
:::

::: {.small-font .move-up-2em}
Color data points by the shortest distance to any mean
:::

## {#kmeans-animation-17 data-menu-title="k-means animation step 17"}

::: {.move-up-1em}
```{r}
#| label: three-clusters-kmeans17
#| fig-cap: "&nbsp;"
#| fig-width: 6
#| fig-asp: 0.85
#| out-width: "65%"
centroids2 <- update_centroids(coords)
make_kmeans_plot(coords, centroids2, centroids, plot_voronoi = FALSE)
```
:::

::: {.small-font .move-up-2em}
Move means to centroid position of each group of points
:::

## {#kmeans-animation-18 data-menu-title="k-means animation step 18"}

::: {.move-up-1em}
```{r}
#| label: three-clusters-kmeans18
#| fig-cap: "&nbsp;"
#| fig-width: 6
#| fig-asp: 0.85
#| out-width: "65%"
centroids <- centroids2
coords <- update_clusters(coords, centroids)
make_kmeans_plot(coords, centroids, centroids, color_points = FALSE)
```
:::

::: {.small-font .move-up-2em}
Color data points by the shortest distance to any mean
:::

## {#kmeans-animation-19 data-menu-title="k-means animation step 19"}

::: {.move-up-1em}
```{r}
#| label: three-clusters-kmeans19
#| fig-cap: "&nbsp;"
#| fig-width: 6
#| fig-asp: 0.85
#| out-width: "65%"
make_kmeans_plot(coords, centroids, centroids, color_points = TRUE)
```
:::

::: {.small-font .move-up-2em}
Color data points by the shortest distance to any mean
:::

## {#kmeans-animation-20 data-menu-title="k-means animation step 20"}

::: {.move-up-1em}
```{r}
#| label: three-clusters-kmeans20
#| fig-cap: "&nbsp;"
#| fig-width: 6
#| fig-asp: 0.85
#| out-width: "65%"
make_kmeans_plot(coords, centroids, centroids, plot_voronoi = FALSE)
```
:::

::: {.small-font .move-up-2em}
Final result
:::

# Now we'll cluster the same dataset with five centroids

## {#kmeans-five-clusters-1 data-menu-title="k-means five clusters step 1"}

::: {.move-up-1em}
```{r}
#| label: five-clusters-kmeans1
#| fig-cap: "&nbsp;"
#| fig-width: 6
#| fig-asp: 0.85
#| out-width: "65%"
coords <- gaussian_clusters

centroids <- tibble(
  x = c(5.3544626, 3.1688159, 5.4307893, -0.9571097, 4.4852765),
  y = c(1.754802, 2.622277, -4.537906, -4.415216, 3.125914),
  cluster = factor(1:5)
)

coords <- update_clusters(coords, centroids)

make_kmeans_plot(coords, centroids, color_points = FALSE, plot_centroids = FALSE, plot_voronoi = FALSE)
```
:::

## {#kmeans-five-clusters-2 data-menu-title="k-means five clusters step 2"}

::: {.move-up-1em}
```{r}
#| label: five-clusters-kmeans2
#| fig-cap: "&nbsp;"
#| fig-width: 6
#| fig-asp: 0.85
#| out-width: "65%"
make_kmeans_plot(coords, centroids, color_points = FALSE, plot_centroids = TRUE, plot_voronoi = FALSE)
```
:::

::: {.small-font .move-up-2em}
Add means at arbitrary locations
:::

## {#kmeans-five-clusters-3 data-menu-title="k-means five clusters step 3"}

::: {.move-up-1em}
```{r}
#| label: five-clusters-kmeans3
#| fig-cap: "&nbsp;"
#| fig-width: 6
#| fig-asp: 0.85
#| out-width: "65%"
make_kmeans_plot(coords, centroids, centroids, color_points = FALSE, plot_voronoi = TRUE)
```
:::

::: {.small-font .move-up-2em}
Color data points by the shortest distance to any mean
:::

## {#kmeans-five-clusters-4 data-menu-title="k-means five clusters step 4"}

::: {.move-up-1em}
```{r}
#| label: five-clusters-kmeans4
#| fig-cap: "&nbsp;"
#| fig-width: 6
#| fig-asp: 0.85
#| out-width: "65%"
make_kmeans_plot(coords, centroids, centroids, color_points = TRUE)
```
:::

::: {.small-font .move-up-2em}
Color data points by the shortest distance to any mean
:::

## {#kmeans-five-clusters-5 data-menu-title="k-means five clusters step 5"}

::: {.move-up-1em}
```{r}
#| label: five-clusters-kmeans5
#| fig-cap: "&nbsp;"
#| fig-width: 6
#| fig-asp: 0.85
#| out-width: "65%"
centroids2 <- update_centroids(coords)
make_kmeans_plot(coords, centroids2, centroids, plot_voronoi = FALSE)
```
:::

::: {.small-font .move-up-2em}
Move means to centroid position of each group of points
:::

## {#kmeans-five-clusters-6 data-menu-title="k-means five clusters step 6"}

::: {.move-up-1em}
```{r}
#| label: five-clusters-kmeans6
#| fig-cap: "&nbsp;"
#| fig-width: 6
#| fig-asp: 0.85
#| out-width: "65%"
centroids <- centroids2
coords <- update_clusters(coords, centroids)
make_kmeans_plot(coords, centroids, centroids, color_points = FALSE)
```
:::

::: {.small-font .move-up-2em}
Color data points by the shortest distance to any mean
:::

## {#kmeans-five-clusters-7 data-menu-title="k-means five clusters step 7"}

::: {.move-up-1em}
```{r}
#| label: five-clusters-kmeans7
#| fig-cap: "&nbsp;"
#| fig-width: 6
#| fig-asp: 0.85
#| out-width: "65%"
make_kmeans_plot(coords, centroids, centroids, color_points = TRUE)
```
:::

::: {.small-font .move-up-2em}
Color data points by the shortest distance to any mean
:::

## {#kmeans-five-clusters-8 data-menu-title="k-means five clusters step 8"}

::: {.move-up-1em}
```{r}
#| label: five-clusters-kmeans8
#| fig-cap: "&nbsp;"
#| fig-width: 6
#| fig-asp: 0.85
#| out-width: "65%"
centroids2 <- update_centroids(coords)
make_kmeans_plot(coords, centroids2, centroids, plot_voronoi = FALSE)
```
:::

::: {.small-font .move-up-2em}
Move means to centroid position of each group of points
:::

## {#kmeans-five-clusters-9 data-menu-title="k-means five clusters step 9"}

::: {.move-up-1em}
```{r}
#| label: five-clusters-kmeans9
#| fig-cap: "&nbsp;"
#| fig-width: 6
#| fig-asp: 0.85
#| out-width: "65%"
centroids <- centroids2
coords <- update_clusters(coords, centroids)
make_kmeans_plot(coords, centroids, centroids, color_points = FALSE)
```
:::

::: {.small-font .move-up-2em}
Color data points by the shortest distance to any mean
:::

## {#kmeans-five-clusters-10 data-menu-title="k-means five clusters step 10"}

::: {.move-up-1em}
```{r}
#| label: five-clusters-kmeans10
#| fig-cap: "&nbsp;"
#| fig-width: 6
#| fig-asp: 0.85
#| out-width: "65%"
make_kmeans_plot(coords, centroids, centroids, color_points = TRUE)
```
:::

::: {.small-font .move-up-2em}
Color data points by the shortest distance to any mean
:::

## {#kmeans-five-clusters-11 data-menu-title="k-means five clusters step 11"}

::: {.move-up-1em}
```{r}
#| label: five-clusters-kmeans11
#| fig-cap: "&nbsp;"
#| fig-width: 6
#| fig-asp: 0.85
#| out-width: "65%"
centroids2 <- update_centroids(coords)
make_kmeans_plot(coords, centroids2, centroids, plot_voronoi = FALSE)
```
:::

::: {.small-font .move-up-2em}
Move means to centroid position of each group of points
:::

## {#kmeans-five-clusters-12 data-menu-title="k-means five clusters step 12"}

::: {.move-up-1em}
```{r}
#| label: five-clusters-kmeans12
#| fig-cap: "&nbsp;"
#| fig-width: 6
#| fig-asp: 0.85
#| out-width: "65%"
centroids <- centroids2
coords <- update_clusters(coords, centroids)
make_kmeans_plot(coords, centroids, centroids, color_points = FALSE)
```
:::

::: {.small-font .move-up-2em}
Color data points by the shortest distance to any mean
:::

## {#kmeans-five-clusters-13 data-menu-title="k-means five clusters step 13"}

::: {.move-up-1em}
```{r}
#| label: five-clusters-kmeans13
#| fig-cap: "&nbsp;"
#| fig-width: 6
#| fig-asp: 0.85
#| out-width: "65%"
make_kmeans_plot(coords, centroids, centroids, color_points = TRUE)
```
:::

::: {.small-font .move-up-2em}
Color data points by the shortest distance to any mean
:::

## {#kmeans-five-clusters-14 data-menu-title="k-means five clusters step 14"}

::: {.move-up-1em}
```{r}
#| label: five-clusters-kmeans14
#| fig-cap: "&nbsp;"
#| fig-width: 6
#| fig-asp: 0.85
#| out-width: "65%"
centroids2 <- update_centroids(coords)
make_kmeans_plot(coords, centroids2, centroids, plot_voronoi = FALSE)
```
:::

::: {.small-font .move-up-2em}
Move means to centroid position of each group of points
:::

## {#kmeans-five-clusters-15 data-menu-title="k-means five clusters step 15"}

::: {.move-up-1em}
```{r}
#| label: five-clusters-kmeans15
#| fig-cap: "&nbsp;"
#| fig-width: 6
#| fig-asp: 0.85
#| out-width: "65%"
centroids <- centroids2
coords <- update_clusters(coords, centroids)
make_kmeans_plot(coords, centroids, centroids, color_points = FALSE)
```
:::

::: {.small-font .move-up-2em}
Color data points by the shortest distance to any mean
:::

## {#kmeans-five-clusters-16 data-menu-title="k-means five clusters step 16"}

::: {.move-up-1em}
```{r}
#| label: five-clusters-kmeans16
#| fig-cap: "&nbsp;"
#| fig-width: 6
#| fig-asp: 0.85
#| out-width: "65%"
make_kmeans_plot(coords, centroids, centroids, color_points = TRUE)
```
:::

::: {.small-font .move-up-2em}
Color data points by the shortest distance to any mean
:::

## {#kmeans-five-clusters-17 data-menu-title="k-means five clusters step 17"}

::: {.move-up-1em}
```{r}
#| label: five-clusters-kmeans17
#| fig-cap: "&nbsp;"
#| fig-width: 6
#| fig-asp: 0.85
#| out-width: "65%"
centroids2 <- update_centroids(coords)
make_kmeans_plot(coords, centroids2, centroids, plot_voronoi = FALSE)
```
:::

::: {.small-font .move-up-2em}
Move means to centroid position of each group of points
:::

# ... do many more iterations ...

## {#kmeans-five-clusters-18 data-menu-title="k-means five clusters step 18"}

::: {.move-up-1em}
```{r}
#| label: five-clusters-kmeans18
#| fig-cap: "&nbsp;"
#| fig-width: 6
#| fig-asp: 0.85
#| out-width: "65%"
centroids <- centroids2

for (i in 1:40) {
  coords <- update_clusters(coords, centroids)
  centroids <- update_centroids(coords)
}
make_kmeans_plot(coords, centroids, centroids, plot_voronoi = FALSE)
```
:::

::: {.small-font .move-up-2em}
Final result
:::

# Now let's try the spirals dataset

## {#kmeans-spirals-1 data-menu-title="k-means spirals step 1"}

::: {.move-up-1em}
```{r}
#| label: spirals-kmeans1
#| fig-cap: "&nbsp;"
#| fig-width: 6
#| fig-asp: 0.85
#| out-width: "65%"
coords <- spirals

centroids <- tibble(
  x = c(5.3544626, 3.1688159, 5.4307893, -0.9571097, 4.4852765),
  y = c(1.754802, 2.622277, -4.537906, -4.415216, 3.125914),
  cluster = factor(1:5)
)

set.seed(3425)
set.seed(3427)
centroids <- random_centroids(coords, 3)

coords <- update_clusters(coords, centroids)

make_kmeans_plot(coords, centroids, color_points = FALSE, plot_centroids = FALSE, plot_voronoi = FALSE)
```
:::

## {#kmeans-spirals-2 data-menu-title="k-means spirals step 2"}

::: {.move-up-1em}
```{r}
#| label: spirals-kmeans2
#| fig-cap: "&nbsp;"
#| fig-width: 6
#| fig-asp: 0.85
#| out-width: "65%"
make_kmeans_plot(coords, centroids, color_points = FALSE, plot_centroids = TRUE, plot_voronoi = FALSE)
```
:::

::: {.small-font .move-up-2em}
Add means at arbitrary locations
:::

## {#kmeans-spirals-3 data-menu-title="k-means spirals step 3"}

::: {.move-up-1em}
```{r}
#| label: spirals-kmeans3
#| fig-cap: "&nbsp;"
#| fig-width: 6
#| fig-asp: 0.85
#| out-width: "65%"
make_kmeans_plot(coords, centroids, centroids, color_points = FALSE, plot_voronoi = TRUE)
```
:::

::: {.small-font .move-up-2em}
Color data points by the shortest distance to any mean
:::

## {#kmeans-spirals-4 data-menu-title="k-means spirals step 4"}

::: {.move-up-1em}
```{r}
#| label: spirals-kmeans4
#| fig-cap: "&nbsp;"
#| fig-width: 6
#| fig-asp: 0.85
#| out-width: "65%"
make_kmeans_plot(coords, centroids, centroids, color_points = TRUE)
```
:::

::: {.small-font .move-up-2em}
Color data points by the shortest distance to any mean
:::

## {#kmeans-spirals-5 data-menu-title="k-means spirals step 5"}

::: {.move-up-1em}
```{r}
#| label: spirals-kmeans5
#| fig-cap: "&nbsp;"
#| fig-width: 6
#| fig-asp: 0.85
#| out-width: "65%"
centroids2 <- update_centroids(coords)
make_kmeans_plot(coords, centroids2, centroids, plot_voronoi = FALSE)
```
:::

::: {.small-font .move-up-2em}
Move means to centroid position of each group of points
:::

## {#kmeans-spirals-6 data-menu-title="k-means spirals step 6"}

::: {.move-up-1em}
```{r}
#| label: spirals-kmeans6
#| fig-cap: "&nbsp;"
#| fig-width: 6
#| fig-asp: 0.85
#| out-width: "65%"
centroids <- centroids2
coords <- update_clusters(coords, centroids)
make_kmeans_plot(coords, centroids, centroids, color_points = FALSE)
```
:::

::: {.small-font .move-up-2em}
Color data points by the shortest distance to any mean
:::

## {#kmeans-spirals-7 data-menu-title="k-means spirals step 7"}

::: {.move-up-1em}
```{r}
#| label: spirals-kmeans7
#| fig-cap: "&nbsp;"
#| fig-width: 6
#| fig-asp: 0.85
#| out-width: "65%"
make_kmeans_plot(coords, centroids, centroids, color_points = TRUE)
```
:::

::: {.small-font .move-up-2em}
Color data points by the shortest distance to any mean
:::

## {#kmeans-spirals-8 data-menu-title="k-means spirals step 8"}

::: {.move-up-1em}
```{r}
#| label: spirals-kmeans8
#| fig-cap: "&nbsp;"
#| fig-width: 6
#| fig-asp: 0.85
#| out-width: "65%"
centroids2 <- update_centroids(coords)
make_kmeans_plot(coords, centroids2, centroids, plot_voronoi = FALSE)
```
:::

::: {.small-font .move-up-2em}
Move means to centroid position of each group of points
:::

## {#kmeans-spirals-9 data-menu-title="k-means spirals step 9"}

::: {.move-up-1em}
```{r}
#| label: spirals-kmeans9
#| fig-cap: "&nbsp;"
#| fig-width: 6
#| fig-asp: 0.85
#| out-width: "65%"
centroids <- centroids2
coords <- update_clusters(coords, centroids)
make_kmeans_plot(coords, centroids, centroids, color_points = FALSE)
```
:::

::: {.small-font .move-up-2em}
Color data points by the shortest distance to any mean
:::

## {#kmeans-spirals-10 data-menu-title="k-means spirals step 10"}

::: {.move-up-1em}
```{r}
#| label: spirals-kmeans10
#| fig-cap: "&nbsp;"
#| fig-width: 6
#| fig-asp: 0.85
#| out-width: "65%"
make_kmeans_plot(coords, centroids, centroids, color_points = TRUE)
```
:::

::: {.small-font .move-up-2em}
Color data points by the shortest distance to any mean
:::

## {#kmeans-spirals-11 data-menu-title="k-means spirals step 11"}

::: {.move-up-1em}
```{r}
#| label: spirals-kmeans11
#| fig-cap: "&nbsp;"
#| fig-width: 6
#| fig-asp: 0.85
#| out-width: "65%"
centroids2 <- update_centroids(coords)
make_kmeans_plot(coords, centroids2, centroids, plot_voronoi = FALSE)
```
:::

::: {.small-font .move-up-2em}
Move means to centroid position of each group of points
:::

## {#kmeans-spirals-12 data-menu-title="k-means spirals step 12"}

::: {.move-up-1em}
```{r}
#| label: spirals-kmeans12
#| fig-cap: "&nbsp;"
#| fig-width: 6
#| fig-asp: 0.85
#| out-width: "65%"
centroids <- centroids2
coords <- update_clusters(coords, centroids)
make_kmeans_plot(coords, centroids, centroids, color_points = FALSE)
```
:::

::: {.small-font .move-up-2em}
Color data points by the shortest distance to any mean
:::

## {#kmeans-spirals-13 data-menu-title="k-means spirals step 13"}

::: {.move-up-1em}
```{r}
#| label: spirals-kmeans13
#| fig-cap: "&nbsp;"
#| fig-width: 6
#| fig-asp: 0.85
#| out-width: "65%"
make_kmeans_plot(coords, centroids, centroids, color_points = TRUE)
```
:::

::: {.small-font .move-up-2em}
Color data points by the shortest distance to any mean
:::

## {#kmeans-spirals-14 data-menu-title="k-means spirals step 14"}

::: {.move-up-1em}
```{r}
#| label: spirals-kmeans14
#| fig-cap: "&nbsp;"
#| fig-width: 6
#| fig-asp: 0.85
#| out-width: "65%"
centroids2 <- update_centroids(coords)
make_kmeans_plot(coords, centroids2, centroids, plot_voronoi = FALSE)
```
:::

::: {.small-font .move-up-2em}
Move means to centroid position of each group of points
:::

## {#kmeans-spirals-15 data-menu-title="k-means spirals step 15"}

::: {.move-up-1em}
```{r}
#| label: spirals-kmeans15
#| fig-cap: "&nbsp;"
#| fig-width: 6
#| fig-asp: 0.85
#| out-width: "65%"
centroids <- centroids2
coords <- update_clusters(coords, centroids)
make_kmeans_plot(coords, centroids, centroids, color_points = FALSE)
```
:::

::: {.small-font .move-up-2em}
Color data points by the shortest distance to any mean
:::

## {#kmeans-spirals-16 data-menu-title="k-means spirals step 16"}

::: {.move-up-1em}
```{r}
#| label: spirals-kmeans16
#| fig-cap: "&nbsp;"
#| fig-width: 6
#| fig-asp: 0.85
#| out-width: "65%"
make_kmeans_plot(coords, centroids, centroids, color_points = TRUE)
```
:::

::: {.small-font .move-up-2em}
Color data points by the shortest distance to any mean
:::

## {#kmeans-spirals-17 data-menu-title="k-means spirals step 17"}

::: {.move-up-1em}
```{r}
#| label: spirals-kmeans17
#| fig-cap: "&nbsp;"
#| fig-width: 6
#| fig-asp: 0.85
#| out-width: "65%"
centroids2 <- update_centroids(coords)
make_kmeans_plot(coords, centroids2, centroids, plot_voronoi = FALSE)
```
:::

::: {.small-font .move-up-2em}
Move means to centroid position of each group of points
:::

# ... do many more iterations ...

## {#kmeans-spirals-18 data-menu-title="k-means spirals step 18"}

::: {.move-up-1em}
```{r}
#| label: spirals-kmeans18
#| fig-cap: "&nbsp;"
#| fig-width: 6
#| fig-asp: 0.85
#| out-width: "65%"
centroids <- centroids2

for (i in 1:100) {
  coords <- update_clusters(coords, centroids)
  centroids <- update_centroids(coords)
}
make_kmeans_plot(coords, centroids, centroids, plot_voronoi = FALSE)
```
:::

::: {.small-font .move-up-2em}
Final result
:::

# k-means clustering works best when<br>data forms distinct, compact clusters

## Other clustering algorithms

::: {.move-up-half-em}
![](../assets/clustering/clustering_examples.png){width="100%" fig-align="center"}
:::

::: {.absolute-bottom-right .tiny-font}
From George Seif (2018) [The 5 Clustering Algorithms Data Scientists Need to Know](https://www.kdnuggets.com/2018/06/5-clustering-algorithms-data-scientists-need-know.html)
:::

<!-- Segment ends here -->

#

# Doing k-means clustering in R

## Example dataset: `iris`

::: {.small-font}
Measurements on the sepals and petals of three iris species

```{r}
#| echo: true
iris
```
:::

## Example dataset: `iris`

::: {.small-font}
Measurements on the sepals and petals of three iris species

```{r}
#| echo: true
#| label: iris-plot
#| fig-cap: "&nbsp;"
#| fig-width: 6.5
#| out-width: "65%"
ggplot(iris, aes(Petal.Length, Petal.Width, color = Species)) +
  geom_point()
```
:::

## We perform k-means clustering with `kmeans()`

::: {.tiny-font}
```{r}
#| echo: true
km_fit <- iris |> 
  select(where(is.numeric)) |>
  kmeans(
    centers = 3,  # number of cluster centers
    nstart = 10   # number of independent restarts of the algorithm
  )

km_fit
```
:::

## We perform k-means clustering with `kmeans()`

::: {.tiny-font}
```{r}
#| echo: true
#| label: iris-kmeans
#| fig-cap: "&nbsp;"
#| fig-width: 6.5
#| out-width: "100%"
#| output-location: "column"
# run kmeans clustering
km_fit <- iris |> 
  select(where(is.numeric)) |>
  kmeans(centers = 3, nstart = 10)

# plot
km_fit |>
  # combine with original data
  augment(iris) |>
  ggplot() +
  aes(x = Petal.Length, Petal.Width) +
  geom_point( # points representing original data
    aes(color = .cluster, shape = Species)
  ) +
  geom_point( # points representing centroids
    data = tidy(km_fit),
    aes(fill = cluster),
    shape = 21, color = "black", size = 4
  ) +
  guides(color = "none")
```
:::

::: {.fragment .small-font}
How do we choose the number of clusters?
:::

## We perform k-means clustering with `kmeans()`

::: {.tiny-font}
```{r}
#| echo: true
#| label: iris-kmeans2
#| fig-cap: "&nbsp;"
#| fig-width: 6.5
#| out-width: "100%"
#| output-location: "column"
# run kmeans clustering
km_fit <- iris |> 
  select(where(is.numeric)) |>
  kmeans(centers = 2, nstart = 10)

# plot
km_fit |>
  # combine with original data
  augment(iris) |>
  ggplot() +
  aes(x = Petal.Length, Petal.Width) +
  geom_point( # points representing original data
    aes(color = .cluster, shape = Species)
  ) +
  geom_point( # points representing centroids
    data = tidy(km_fit),
    aes(fill = cluster),
    shape = 21, color = "black", size = 4
  ) +
  guides(color = "none")
```
:::

::: {.small-font}
How do we choose the number of clusters?
:::

## We perform k-means clustering with `kmeans()`

::: {.tiny-font}
```{r}
#| echo: true
#| label: iris-kmeans3
#| fig-cap: "&nbsp;"
#| fig-width: 6.5
#| out-width: "100%"
#| output-location: "column"
# run kmeans clustering
km_fit <- iris |> 
  select(where(is.numeric)) |>
  kmeans(centers = 5, nstart = 10)

# plot
km_fit |>
  # combine with original data
  augment(iris) |>
  ggplot() +
  aes(x = Petal.Length, Petal.Width) +
  geom_point( # points representing original data
    aes(color = .cluster, shape = Species)
  ) +
  geom_point( # points representing centroids
    data = tidy(km_fit),
    aes(fill = cluster),
    shape = 21, color = "black", size = 4
  ) +
  guides(color = "none")
```
:::

::: {.small-font}
How do we choose the number of clusters?
:::

## Look for elbow in scree plot

::: {.tiny-font}
```{r}
#| echo: true
#| label: iris-scree
#| fig-cap: "&nbsp;"
#| fig-width: 6.5
#| out-width: "100%"
#| output-location: "column"
# function to calculate within sum squares
calc_withinss <- function(data, centers) {
  km_fit <- select(data, where(is.numeric)) |>
    kmeans(centers = centers, nstart = 10)
  km_fit$tot.withinss
}

tibble(centers = 1:15) |>
  mutate(
    within_sum_squares = map_dbl(
      centers, ~calc_withinss(iris, .x)
    )
  ) |>
  ggplot() +
  aes(centers, within_sum_squares) +
  geom_point() +
  geom_line()
```
:::

::: {.small-font}
Plot suggests that around 3 clusters is the right choice
:::

<!-- Segment ends here -->

#

## Further reading

- Wikipedia: [k-means clustering](https://en.wikipedia.org/wiki/K-means_clustering)
- Naftali Harris blog post: [Interactive k-means demonstration](https://www.naftaliharris.com/blog/visualizing-k-means-clustering/)
- Stackoverflow post: [Determining the appropriate number of clusters in k-means](https://stackoverflow.com/questions/15376075/cluster-analysis-in-r-determine-the-optimal-number-of-clusters/15376462#15376462)
- George Seif: [The 5 Clustering Algorithms Data Scientists Need to Know](https://www.kdnuggets.com/2018/06/5-clustering-algorithms-data-scientists-need-know.html)
